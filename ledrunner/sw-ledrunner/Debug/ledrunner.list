
ledrunner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c34  08011040  08011040  00021040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c74  08011c74  0003037c  2**0
                  CONTENTS
  4 .ARM          00000000  08011c74  08011c74  0003037c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011c74  08011c74  0003037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c74  08011c74  00021c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c78  08011c78  00021c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  08011c7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a0  2000037c  08011ff8  0003037c  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  2000161c  08011ff8  0003161c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019986  00000000  00000000  000303ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004131  00000000  00000000  00049d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0004de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0004f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020932  00000000  00000000  000504c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b7e  00000000  00000000  00070df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac7cd  00000000  00000000  0008a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013713d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b0  00000000  00000000  00137190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000037c 	.word	0x2000037c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011028 	.word	0x08011028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000380 	.word	0x20000380
 80001cc:	08011028 	.word	0x08011028

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <auto_mode_activate>:

#include "auto_mode.h"
#include "tlc.h"

void auto_mode_activate(AutoMode *am, float fps)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	ed87 0a00 	vstr	s0, [r7]
	if(!am) return;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d01c      	beq.n	8000d40 <auto_mode_activate+0x4c>
	am->active = true;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	709a      	strb	r2, [r3, #2]
	am->ms_wait_between_steps = (AUTO_MODE_DEFAULT_FPS_MULTIPLE * 1000.0f / fps + 0.5f);
 8000d0c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000d4c <auto_mode_activate+0x58>
 8000d10:	ed97 7a00 	vldr	s14, [r7]
 8000d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d24:	ee17 2a90 	vmov	r2, s15
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
	am->step_next = AUTO_MODE_NONE;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	am->step_prev = AUTO_MODE_NONE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	705a      	strb	r2, [r3, #1]
	am->pwm_duty_cycle = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	819a      	strh	r2, [r3, #12]
 8000d3e:	e000      	b.n	8000d42 <auto_mode_activate+0x4e>
	if(!am) return;
 8000d40:	bf00      	nop
}
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	461c4000 	.word	0x461c4000

08000d50 <auto_mode_deactivate>:

void auto_mode_deactivate(AutoMode *am)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(!am) return;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <auto_mode_deactivate+0x16>
	am->active = false;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	709a      	strb	r2, [r3, #2]
 8000d64:	e000      	b.n	8000d68 <auto_mode_deactivate+0x18>
	if(!am) return;
 8000d66:	bf00      	nop
	//tlc_run(tlc, false); // TODO this is not good
}
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <auto_mode_process>:

void auto_mode_process(AutoMode *am, Tlc *tlc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	if(!am) return;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 812a 	beq.w	8000fda <auto_mode_process+0x266>
	if(!am->active) return;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	789b      	ldrb	r3, [r3, #2]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f040 8124 	bne.w	8000fde <auto_mode_process+0x26a>
	uint32_t tick_next = HAL_GetTick();
 8000d96:	f002 ffb1 	bl	8003cfc <HAL_GetTick>
 8000d9a:	61b8      	str	r0, [r7, #24]
	if(tick_next - am->tick_prev >= am->ms_wait_between_steps) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f0c0 811a 	bcc.w	8000fe2 <auto_mode_process+0x26e>
		if(am->step_next == AUTO_MODE_PWM) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d113      	bne.n	8000dde <auto_mode_process+0x6a>
			++am->pwm_duty_cycle;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	899b      	ldrh	r3, [r3, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	819a      	strh	r2, [r3, #12]
			if(am->pwm_duty_cycle > tlc->pwm.duty_max) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	899b      	ldrh	r3, [r3, #12]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dd10      	ble.n	8000df2 <auto_mode_process+0x7e>
				++am->step_next;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e009      	b.n	8000df2 <auto_mode_process+0x7e>
			}
		} else if(am->step_next < AUTO_MODE_RIDER) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b09      	cmp	r3, #9
 8000de4:	d805      	bhi.n	8000df2 <auto_mode_process+0x7e>
			++am->step_next;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	701a      	strb	r2, [r3, #0]
		}
		am->tick_prev = tick_next;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
		am->step_prev = am->step_next;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	705a      	strb	r2, [r3, #1]
	} else {
		return;
	}
	//if(am->step_next == am->step_prev) return;
	//tlc_mode_exit(tlc, TLC_MODE_NONE);
	switch(am->step_next) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	f200 80ee 	bhi.w	8000fe6 <auto_mode_process+0x272>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <auto_mode_process+0x9c>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000fe7 	.word	0x08000fe7
 8000e14:	08000e3d 	.word	0x08000e3d
 8000e18:	08000e4f 	.word	0x08000e4f
 8000e1c:	08000ec1 	.word	0x08000ec1
 8000e20:	08000f03 	.word	0x08000f03
 8000e24:	08000f4d 	.word	0x08000f4d
 8000e28:	08000f8f 	.word	0x08000f8f
 8000e2c:	08000e63 	.word	0x08000e63
 8000e30:	08000ea3 	.word	0x08000ea3
 8000e34:	08000eb7 	.word	0x08000eb7
 8000e38:	08000fd1 	.word	0x08000fd1
	case AUTO_MODE_NONE: {} break;
	case AUTO_MODE_ALL_OFF: {
		tlc_run(tlc, true);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	6838      	ldr	r0, [r7, #0]
 8000e40:	f002 fcb9 	bl	80037b6 <tlc_run>
		tlc_mode(tlc, TLC_MODE_CLEAR);
 8000e44:	2104      	movs	r1, #4
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f002 fe8a 	bl	8003b60 <tlc_mode>
	} break;
 8000e4c:	e0cc      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_ALL_LIT: {
		*tlc->pwm.duty_cycle = tlc->pwm.duty_max;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	6992      	ldr	r2, [r2, #24]
 8000e56:	601a      	str	r2, [r3, #0]
		tlc_mode(tlc, TLC_MODE_PWM);
 8000e58:	2102      	movs	r1, #2
 8000e5a:	6838      	ldr	r0, [r7, #0]
 8000e5c:	f002 fe80 	bl	8003b60 <tlc_mode>
	} break;
 8000e60:	e0c2      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_PWM_COUNT: {
		uint16_t num = TLC_PWM_MAX;
 8000e62:	2310      	movs	r3, #16
 8000e64:	82fb      	strh	r3, [r7, #22]
		for(size_t i = 0; i < TLC_N_LEDS; ++i) tlc->display.data[i] = ((num >> i) & 1);
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e6a:	e012      	b.n	8000e92 <auto_mode_process+0x11e>
 8000e6c:	8afa      	ldrh	r2, [r7, #22]
 8000e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e70:	fa42 f303 	asr.w	r3, r2, r3
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6a19      	ldr	r1, [r3, #32]
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	440b      	add	r3, r1
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2201      	movne	r2, #1
 8000e86:	2200      	moveq	r2, #0
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	3301      	adds	r3, #1
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d9e9      	bls.n	8000e6c <auto_mode_process+0xf8>
		tlc_mode(tlc, TLC_MODE_DISPLAY);
 8000e98:	2103      	movs	r1, #3
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f002 fe60 	bl	8003b60 <tlc_mode>
	} break;
 8000ea0:	e0a2      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_PWM: {
		*tlc->pwm.duty_cycle = am->pwm_duty_cycle;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	899a      	ldrh	r2, [r3, #12]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	601a      	str	r2, [r3, #0]
		tlc_mode(tlc, TLC_MODE_PWM);
 8000eac:	2102      	movs	r1, #2
 8000eae:	6838      	ldr	r0, [r7, #0]
 8000eb0:	f002 fe56 	bl	8003b60 <tlc_mode>
	} break;
 8000eb4:	e098      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_PWM_DONE: {
		tlc_mode(tlc, TLC_MODE_NONE);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f002 fe51 	bl	8003b60 <tlc_mode>
	} break;
 8000ebe:	e093      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_DIRECTION: {
		uint16_t num = 0x842F;
 8000ec0:	f248 432f 	movw	r3, #33839	; 0x842f
 8000ec4:	81fb      	strh	r3, [r7, #14]
		for(size_t i = 0; i < TLC_N_LEDS; ++i) tlc->display.data[i] = ((num >> i) & 1);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eca:	e012      	b.n	8000ef2 <auto_mode_process+0x17e>
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	fa42 f303 	asr.w	r3, r2, r3
 8000ed4:	f003 0201 	and.w	r2, r3, #1
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6a19      	ldr	r1, [r3, #32]
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	440b      	add	r3, r1
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2201      	movne	r2, #1
 8000ee6:	2200      	moveq	r2, #0
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	3301      	adds	r3, #1
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d9e9      	bls.n	8000ecc <auto_mode_process+0x158>
		tlc_mode(tlc, TLC_MODE_DISPLAY);
 8000ef8:	2103      	movs	r1, #3
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f002 fe30 	bl	8003b60 <tlc_mode>
	} break;
 8000f00:	e072      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_SYS_FREQ: {
		uint16_t num = tlc->freq.system / 1000000;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <auto_mode_process+0x27c>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9b      	lsrs	r3, r3, #18
 8000f0e:	823b      	strh	r3, [r7, #16]
		for(size_t i = 0; i < TLC_N_LEDS; ++i) tlc->display.data[i] = ((num >> i) & 1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
 8000f14:	e012      	b.n	8000f3c <auto_mode_process+0x1c8>
 8000f16:	8a3a      	ldrh	r2, [r7, #16]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fa42 f303 	asr.w	r3, r2, r3
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6a19      	ldr	r1, [r3, #32]
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	440b      	add	r3, r1
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2201      	movne	r2, #1
 8000f30:	2200      	moveq	r2, #0
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	3301      	adds	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d9e9      	bls.n	8000f16 <auto_mode_process+0x1a2>
		tlc_mode(tlc, TLC_MODE_DISPLAY);
 8000f42:	2103      	movs	r1, #3
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f002 fe0b 	bl	8003b60 <tlc_mode>
	} break;
 8000f4a:	e04d      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_TIMER_ARR: {
		uint16_t num = tlc->rider.arr;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	827b      	strh	r3, [r7, #18]
		for(size_t i = 0; i < TLC_N_LEDS; ++i) tlc->display.data[i] = ((num >> i) & 1);
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
 8000f56:	e012      	b.n	8000f7e <auto_mode_process+0x20a>
 8000f58:	8a7a      	ldrh	r2, [r7, #18]
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	6a19      	ldr	r1, [r3, #32]
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	440b      	add	r3, r1
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2201      	movne	r2, #1
 8000f72:	2200      	moveq	r2, #0
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d9e9      	bls.n	8000f58 <auto_mode_process+0x1e4>
		tlc_mode(tlc, TLC_MODE_DISPLAY);
 8000f84:	2103      	movs	r1, #3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f002 fdea 	bl	8003b60 <tlc_mode>
	} break;
 8000f8c:	e02c      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_TIMER_PSC: {
		uint16_t num = tlc->rider.psc;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	82bb      	strh	r3, [r7, #20]
		for(size_t i = 0; i < TLC_N_LEDS; ++i) tlc->display.data[i] = ((num >> i) & 1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	e012      	b.n	8000fc0 <auto_mode_process+0x24c>
 8000f9a:	8aba      	ldrh	r2, [r7, #20]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	fa42 f303 	asr.w	r3, r2, r3
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6a19      	ldr	r1, [r3, #32]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	440b      	add	r3, r1
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2201      	movne	r2, #1
 8000fb4:	2200      	moveq	r2, #0
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d9e9      	bls.n	8000f9a <auto_mode_process+0x226>
		tlc_mode(tlc, TLC_MODE_DISPLAY);
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 fdc9 	bl	8003b60 <tlc_mode>
	} break;
 8000fce:	e00b      	b.n	8000fe8 <auto_mode_process+0x274>
	case AUTO_MODE_RIDER: {
		tlc_mode(tlc, TLC_MODE_RIDER);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f002 fdc4 	bl	8003b60 <tlc_mode>
	} break;
 8000fd8:	e006      	b.n	8000fe8 <auto_mode_process+0x274>
	if(!am) return;
 8000fda:	bf00      	nop
 8000fdc:	e004      	b.n	8000fe8 <auto_mode_process+0x274>
	if(!am->active) return;
 8000fde:	bf00      	nop
 8000fe0:	e002      	b.n	8000fe8 <auto_mode_process+0x274>
		return;
 8000fe2:	bf00      	nop
 8000fe4:	e000      	b.n	8000fe8 <auto_mode_process+0x274>
	default: {} break;
 8000fe6:	bf00      	nop
	}
}
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	431bde83 	.word	0x431bde83

08000ff4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff8:	f3bf 8f4f 	dsb	sy
}
 8000ffc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <__NVIC_SystemReset+0x24>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001006:	4904      	ldr	r1, [pc, #16]	; (8001018 <__NVIC_SystemReset+0x24>)
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_SystemReset+0x28>)
 800100a:	4313      	orrs	r3, r2
 800100c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <__NVIC_SystemReset+0x20>
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	05fa0004 	.word	0x05fa0004

08001020 <cli_init>:
#include "main.h"
#include <inttypes.h>
#include <ctype.h>

int cli_init(Cli *cli, Tlc *tlc, AutoMode *am)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	if(!cli) return -1;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <cli_init+0x18>
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e020      	b.n	800107a <cli_init+0x5a>
	if(!tlc) return -1;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <cli_init+0x24>
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e01a      	b.n	800107a <cli_init+0x5a>
	TRY(str_reserve(&cli->str, 4096));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	4618      	mov	r0, r3
 800104c:	f001 ff7c 	bl	8002f48 <str_reserve>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10e      	bne.n	8001074 <cli_init+0x54>
	cli->tlc = tlc;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	611a      	str	r2, [r3, #16]
	cli->auto_mode = am;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	615a      	str	r2, [r3, #20]
	cli->ready = true;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	cli_process(cli);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 fa92 	bl	8001594 <cli_process>
	return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e002      	b.n	800107a <cli_init+0x5a>
	TRY(str_reserve(&cli->str, 4096));
 8001074:	bf00      	nop
error:
	return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <cli_feed>:


int cli_feed(Cli *cli, char *str, size_t len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	if(!cli) return -1;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <cli_feed+0x18>
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e077      	b.n	800118c <cli_feed+0x108>
	if(!str) return -1;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <cli_feed+0x24>
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e071      	b.n	800118c <cli_feed+0x108>
	if(!len) return 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <cli_feed+0x2e>
 80010ae:	2300      	movs	r3, #0
 80010b0:	e06c      	b.n	800118c <cli_feed+0x108>
	for(size_t i = 0; i < len; ++i) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e064      	b.n	8001182 <cli_feed+0xfe>
		char c = str[i];
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	74fb      	strb	r3, [r7, #19]
		if(c == '\n' || c == 'r') {
		}
		if(cli->escape_next) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <cli_feed+0x52>
			cli->escape_next = false;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
			continue;
 80010d4:	e052      	b.n	800117c <cli_feed+0xf8>
		}
		switch(c) {
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	2b7f      	cmp	r3, #127	; 0x7f
 80010da:	d00a      	beq.n	80010f2 <cli_feed+0x6e>
 80010dc:	2b7f      	cmp	r3, #127	; 0x7f
 80010de:	dc43      	bgt.n	8001168 <cli_feed+0xe4>
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d02c      	beq.n	800113e <cli_feed+0xba>
 80010e4:	2b0c      	cmp	r3, #12
 80010e6:	dc3f      	bgt.n	8001168 <cli_feed+0xe4>
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d031      	beq.n	8001150 <cli_feed+0xcc>
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d013      	beq.n	8001118 <cli_feed+0x94>
 80010f0:	e03a      	b.n	8001168 <cli_feed+0xe4>
			case 127: { // sometimes is backspace (other systems)
				cli_raw_send("\b ");
 80010f2:	4828      	ldr	r0, [pc, #160]	; (8001194 <cli_feed+0x110>)
 80010f4:	f001 faf6 	bl	80026e4 <cli_raw_send>
				if(str_length(&cli->str)) {
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 ff6b 	bl	8002fd6 <str_length>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d037      	beq.n	8001176 <cli_feed+0xf2>
					--cli->str.last;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	609a      	str	r2, [r3, #8]
					cli_raw_send("\b");
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <cli_feed+0x114>)
 8001112:	f001 fae7 	bl	80026e4 <cli_raw_send>
				}
			} break;
 8001116:	e02e      	b.n	8001176 <cli_feed+0xf2>
			case 8: { // backspace
				cli_raw_send(" ");
 8001118:	4820      	ldr	r0, [pc, #128]	; (800119c <cli_feed+0x118>)
 800111a:	f001 fae3 	bl	80026e4 <cli_raw_send>
				if(str_length(&cli->str)) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 ff58 	bl	8002fd6 <str_length>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d026      	beq.n	800117a <cli_feed+0xf6>
					--cli->str.last;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	609a      	str	r2, [r3, #8]
					cli_raw_send("\b");
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <cli_feed+0x114>)
 8001138:	f001 fad4 	bl	80026e4 <cli_raw_send>
				}
			} break;
 800113c:	e01d      	b.n	800117a <cli_feed+0xf6>
			case 12: { // clear screen (ctrl+l)
				str_clear(&cli->str);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 ff8a 	bl	800305a <str_clear>
				cli->ready = true;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			} break;
 800114e:	e015      	b.n	800117c <cli_feed+0xf8>
			case 3: { // interrupt (ctrl+c)
				str_clear(&cli->str);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 ff81 	bl	800305a <str_clear>
				cli->ready = true;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				cli_raw_send("^C (Interrupt Signal)\r\n");
 8001160:	480f      	ldr	r0, [pc, #60]	; (80011a0 <cli_feed+0x11c>)
 8001162:	f001 fabf 	bl	80026e4 <cli_raw_send>
			} break;
 8001166:	e009      	b.n	800117c <cli_feed+0xf8>
			case '\\':
				//cli->escape_next = true;
			default: {
				str_app_c(&cli->str, c); // TODO:RETVAL
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	7cfa      	ldrb	r2, [r7, #19]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f002 f823 	bl	80031ba <str_app_c>
#if 0
				char buf[32] = {0};
				snprintf(buf, 32, "%u == %c\r\n", str[i], str[i]);
				CDC_Transmit_FS(buf, 32);
#endif
			} break;
 8001174:	e002      	b.n	800117c <cli_feed+0xf8>
			} break;
 8001176:	bf00      	nop
 8001178:	e000      	b.n	800117c <cli_feed+0xf8>
			} break;
 800117a:	bf00      	nop
	for(size_t i = 0; i < len; ++i) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d396      	bcc.n	80010b8 <cli_feed+0x34>
		}
	}
	return 0;
 800118a:	2300      	movs	r3, #0
error:
	return -1;
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08011040 	.word	0x08011040
 8001198:	08011044 	.word	0x08011044
 800119c:	08011048 	.word	0x08011048
 80011a0:	0801104c 	.word	0x0801104c

080011a4 <cli_parse>:


int cli_parse(Cli *cli)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	if(!cli) return -1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <cli_parse+0x14>
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e03c      	b.n	8001232 <cli_parse+0x8e>
	char buf[256] = {0};
	snprintf(buf, 256, "\r\n[%u..%u]:%.*s\r\n", cli->str.first, cli->str.last, (int)str_length(&cli->str), str_iter_begin(&cli->str));
	cli_raw_send(buf);
#endif

	if(!str_length(&cli->str)) return 0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 ff0b 	bl	8002fd6 <str_length>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <cli_parse+0x26>
 80011c6:	2300      	movs	r3, #0
 80011c8:	e033      	b.n	8001232 <cli_parse+0x8e>
	if(str_rfind_c(&cli->str, '\n') < str_length(&cli->str) ||
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	210a      	movs	r1, #10
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 f870 	bl	80032b4 <str_rfind_c>
 80011d4:	4604      	mov	r4, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fefc 	bl	8002fd6 <str_length>
 80011de:	4603      	mov	r3, r0
 80011e0:	429c      	cmp	r4, r3
 80011e2:	d30c      	bcc.n	80011fe <cli_parse+0x5a>
			str_rfind_c(&cli->str, '\r') < str_length(&cli->str)) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	210d      	movs	r1, #13
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f863 	bl	80032b4 <str_rfind_c>
 80011ee:	4604      	mov	r4, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 feef 	bl	8002fd6 <str_length>
 80011f8:	4603      	mov	r3, r0
	if(str_rfind_c(&cli->str, '\n') < str_length(&cli->str) ||
 80011fa:	429c      	cmp	r4, r3
 80011fc:	d218      	bcs.n	8001230 <cli_parse+0x8c>

		cli_raw_send("\n\r"); // terminal doesn't do \n for us
 80011fe:	480f      	ldr	r0, [pc, #60]	; (800123c <cli_parse+0x98>)
 8001200:	f001 fa70 	bl	80026e4 <cli_raw_send>

		cli_parse_help(cli);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f81b 	bl	8001240 <cli_parse_help>
		cli_parse_info(cli);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa04 	bl	8001618 <cli_parse_info>
		cli_parse_config(cli, cli->str, false);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fdf3 	bl	8001e08 <cli_parse_config>
		cli_parse_mode(cli);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 f984 	bl	8002530 <cli_parse_mode>
		cli->ready = true;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		str_clear(&cli->str);
		cli_ready();
	}
#endif

	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	08011064 	.word	0x08011064

08001240 <cli_parse_help>:


int cli_parse_help(Cli *cli)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if(str_cmp_cstr_start(&cli->str, "help")) return 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <cli_parse_help+0x40>)
 800124c:	4618      	mov	r0, r3
 800124e:	f001 ff2e 	bl	80030ae <str_cmp_cstr_start>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <cli_parse_help+0x1c>
 8001258:	2300      	movs	r3, #0
 800125a:	e00c      	b.n	8001276 <cli_parse_help+0x36>
	cli_raw_send("    help\r\n");
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <cli_parse_help+0x44>)
 800125e:	f001 fa41 	bl	80026e4 <cli_raw_send>
	cli_raw_send("    info\r\n");
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <cli_parse_help+0x48>)
 8001264:	f001 fa3e 	bl	80026e4 <cli_raw_send>
	cli_raw_send("    config\r\n");
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <cli_parse_help+0x4c>)
 800126a:	f001 fa3b 	bl	80026e4 <cli_raw_send>
	cli_raw_send("    mode\r\n");
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <cli_parse_help+0x50>)
 8001270:	f001 fa38 	bl	80026e4 <cli_raw_send>
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08011068 	.word	0x08011068
 8001284:	08011070 	.word	0x08011070
 8001288:	0801107c 	.word	0x0801107c
 800128c:	08011088 	.word	0x08011088
 8001290:	08011098 	.word	0x08011098

08001294 <cli_info>:

int cli_info(Cli *cli, CliInfoList id)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0c6      	sub	sp, #280	; 0x118
 8001298:	af02      	add	r7, sp, #8
 800129a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800129e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	460a      	mov	r2, r1
 80012a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012aa:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80012ae:	701a      	strb	r2, [r3, #0]
	if(!cli) return -1;
 80012b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <cli_info+0x30>
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e140      	b.n	8001546 <cli_info+0x2b2>
	switch(id) {
 80012c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012c8:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	f200 8138 	bhi.w	8001544 <cli_info+0x2b0>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <cli_info+0x48>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	08001545 	.word	0x08001545
 80012e0:	08001309 	.word	0x08001309
 80012e4:	0800133d 	.word	0x0800133d
 80012e8:	080013bd 	.word	0x080013bd
 80012ec:	0800137d 	.word	0x0800137d
 80012f0:	080013fd 	.word	0x080013fd
 80012f4:	0800147b 	.word	0x0800147b
 80012f8:	080014c7 	.word	0x080014c7
 80012fc:	08001545 	.word	0x08001545
 8001300:	0800144b 	.word	0x0800144b
 8001304:	08001513 	.word	0x08001513
	case CLI_INFO__COUNT:
	case CLI_INFO_NONE: {} break;
	case CLI_INFO_VERSION: {
		char buf[256] = {0};
 8001308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800130c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	22fc      	movs	r2, #252	; 0xfc
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f00b fb9a 	bl	800ca54 <memset>
		// hardware!
		// software!
		snprintf(buf, 256, "Version: xyz-HW / xyz-SW\r\n");
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <cli_info+0x2bc>)
 8001326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132a:	4618      	mov	r0, r3
 800132c:	f00c f80c 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f9d5 	bl	80026e4 <cli_raw_send>
	} break;
 800133a:	e103      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_CLOCK: {
		char buf[256] = {0};
 800133c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	3304      	adds	r3, #4
 800134a:	22fc      	movs	r2, #252	; 0xfc
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f00b fb80 	bl	800ca54 <memset>
		snprintf(buf, 256, "Clock Frequency: %" PRIu32 " Hz\r\n", cli->tlc->freq.system);
 8001354:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001358:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f107 000c 	add.w	r0, r7, #12
 8001366:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <cli_info+0x2c0>)
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	f00b ffec 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f001 f9b5 	bl	80026e4 <cli_raw_send>
	} break;
 800137a:	e0e3      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_ARR: {
		char buf[256] = {0};
 800137c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	22fc      	movs	r2, #252	; 0xfc
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fb60 	bl	800ca54 <memset>
		snprintf(buf, 256, "Auto-Reload: %" PRIu32 "\r\n", cli->tlc->rider.arr);
 8001394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001398:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f107 000c 	add.w	r0, r7, #12
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <cli_info+0x2c4>)
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	f00b ffcc 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f995 	bl	80026e4 <cli_raw_send>
	} break;
 80013ba:	e0c3      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_PSC: {
		char buf[256] = {0};
 80013bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	22fc      	movs	r2, #252	; 0xfc
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00b fb40 	bl	800ca54 <memset>
		snprintf(buf, 256, "Prescaler: %" PRIu32 "\r\n", cli->tlc->rider.psc);
 80013d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	f107 000c 	add.w	r0, r7, #12
 80013e6:	4a5d      	ldr	r2, [pc, #372]	; (800155c <cli_info+0x2c8>)
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	f00b ffac 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 f975 	bl	80026e4 <cli_raw_send>
	} break;
 80013fa:	e0a3      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_FPS: {
		char buf[256] = {0};
 80013fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	3304      	adds	r3, #4
 800140a:	22fc      	movs	r2, #252	; 0xfc
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00b fb20 	bl	800ca54 <memset>
		snprintf(buf, 256, "FPS: %f\r\n", cli->tlc->freq.fps);
 8001414:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001418:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f890 	bl	8000548 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	f107 000c 	add.w	r0, r7, #12
 8001430:	e9cd 2300 	strd	r2, r3, [sp]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <cli_info+0x2cc>)
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	f00b ff85 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f94e 	bl	80026e4 <cli_raw_send>
	} break;
 8001448:	e07c      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO__ALL: {
		for(CliInfoList id = CLI_INFO_NONE + 1; id < CLI_INFO__COUNT; ++id) {
 800144a:	2301      	movs	r3, #1
 800144c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001450:	e00e      	b.n	8001470 <cli_info+0x1dc>
			cli_info(cli, id);
 8001452:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800145a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800145e:	4611      	mov	r1, r2
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	f7ff ff17 	bl	8001294 <cli_info>
		for(CliInfoList id = CLI_INFO_NONE + 1; id < CLI_INFO__COUNT; ++id) {
 8001466:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800146a:	3301      	adds	r3, #1
 800146c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001470:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001474:	2b07      	cmp	r3, #7
 8001476:	d9ec      	bls.n	8001452 <cli_info+0x1be>
		}
	} break;
 8001478:	e064      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_GPIO_OUT: {
		char buf[256] = {0};
 800147a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800147e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	3304      	adds	r3, #4
 8001488:	22fc      	movs	r2, #252	; 0xfc
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f00b fae1 	bl	800ca54 <memset>
		snprintf(buf, 256, "GPIO Output: %s\r\n", cli->tlc->gpio_out ? "On" : "Off");
 8001492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <cli_info+0x216>
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <cli_info+0x2d0>)
 80014a8:	e000      	b.n	80014ac <cli_info+0x218>
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <cli_info+0x2d4>)
 80014ac:	f107 000c 	add.w	r0, r7, #12
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <cli_info+0x2d8>)
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	f00b ff47 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f910 	bl	80026e4 <cli_raw_send>
	} break;
 80014c4:	e03e      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO_GPIO_INT: {
		char buf[256] = {0};
 80014c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	3304      	adds	r3, #4
 80014d4:	22fc      	movs	r2, #252	; 0xfc
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f00b fabb 	bl	800ca54 <memset>
		snprintf(buf, 256, "GPIO Interrupt: %s\r\n", cli->tlc->gpio_int ? "On" : "Off");
 80014de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <cli_info+0x262>
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <cli_info+0x2d0>)
 80014f4:	e000      	b.n	80014f8 <cli_info+0x264>
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <cli_info+0x2d4>)
 80014f8:	f107 000c 	add.w	r0, r7, #12
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <cli_info+0x2dc>)
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	f00b ff21 	bl	800d348 <sniprintf>
		cli_raw_send(buf);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4618      	mov	r0, r3
 800150c:	f001 f8ea 	bl	80026e4 <cli_raw_send>
	} break;
 8001510:	e018      	b.n	8001544 <cli_info+0x2b0>
	case CLI_INFO__USAGE: {
		cli_raw_send("    all			print all of the following:\r\n"); // keep first, so it makes sense
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <cli_info+0x2e0>)
 8001514:	f001 f8e6 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    version		print version\r\n");
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <cli_info+0x2e4>)
 800151a:	f001 f8e3 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    clock    		print current clock frequency\r\n");
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <cli_info+0x2e8>)
 8001520:	f001 f8e0 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    arr			print current ARR (auto-reload) value\r\n");
 8001524:	4816      	ldr	r0, [pc, #88]	; (8001580 <cli_info+0x2ec>)
 8001526:	f001 f8dd 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    psc			print current PSC (prescaler) value\r\n");
 800152a:	4816      	ldr	r0, [pc, #88]	; (8001584 <cli_info+0x2f0>)
 800152c:	f001 f8da 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    fps			print FPS (frames per second) derived from ARR & PSC\r\n");
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <cli_info+0x2f4>)
 8001532:	f001 f8d7 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    out			print state of gpio output\r\n");
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <cli_info+0x2f8>)
 8001538:	f001 f8d4 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    int			print state of gpio interrupt\r\n");
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <cli_info+0x2fc>)
 800153e:	f001 f8d1 	bl	80026e4 <cli_raw_send>
	} break;
 8001542:	bf00      	nop
	}
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	080110a4 	.word	0x080110a4
 8001554:	080110c0 	.word	0x080110c0
 8001558:	080110dc 	.word	0x080110dc
 800155c:	080110f0 	.word	0x080110f0
 8001560:	08011104 	.word	0x08011104
 8001564:	08011110 	.word	0x08011110
 8001568:	08011114 	.word	0x08011114
 800156c:	08011118 	.word	0x08011118
 8001570:	0801112c 	.word	0x0801112c
 8001574:	08011144 	.word	0x08011144
 8001578:	0801116c 	.word	0x0801116c
 800157c:	0801118c 	.word	0x0801118c
 8001580:	080111bc 	.word	0x080111bc
 8001584:	080111f0 	.word	0x080111f0
 8001588:	08011220 	.word	0x08011220
 800158c:	08011264 	.word	0x08011264
 8001590:	0801128c 	.word	0x0801128c

08001594 <cli_process>:

int cli_process(Cli *cli)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(!cli) return -1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <cli_process+0x14>
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e030      	b.n	800160a <cli_process+0x76>
	cli_info(cli, cli->info);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fe70 	bl	8001294 <cli_info>
	cli_config(cli, 0, CLI_CONFIG__APPLY);
 80015b4:	2209      	movs	r2, #9
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f953 	bl	8001864 <cli_config>
	cli_mode(cli, 0, CLI_MODE__APPLY);
 80015be:	2207      	movs	r2, #7
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fd4c 	bl	8002060 <cli_mode>
	cli->info = CLI_INFO_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	761a      	strb	r2, [r3, #24]

	if(cli->ready) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <cli_process+0x58>
		// done
		str_clear(&cli->str);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fd3d 	bl	800305a <str_clear>
		cli_ready();
 80015e0:	f001 f898 	bl	8002714 <cli_ready>
		cli->ready = false;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	}
	if(cli->reset) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <cli_process+0x74>
		cli_raw_send("RESETTING in 1000 ms...");
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <cli_process+0x80>)
 80015f8:	f001 f874 	bl	80026e4 <cli_raw_send>
		HAL_Delay(1000);
 80015fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001600:	f002 fb88 	bl	8003d14 <HAL_Delay>
		NVIC_SystemReset();
 8001604:	f7ff fcf6 	bl	8000ff4 <__NVIC_SystemReset>
	}

	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	080112b8 	.word	0x080112b8

08001618 <cli_parse_info>:

int cli_parse_info(Cli *cli)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b0af      	sub	sp, #188	; 0xbc
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	Str arg = STR("info");
 8001620:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	2304      	movs	r3, #4
 8001630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001634:	4b82      	ldr	r3, [pc, #520]	; (8001840 <cli_parse_info+0x228>)
 8001636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if(str_cmp_start(&cli->str, &arg, true)) return 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001640:	2201      	movs	r2, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fd61 	bl	800310a <str_cmp_start>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <cli_parse_info+0x3a>
 800164e:	2300      	movs	r3, #0
 8001650:	e0f1      	b.n	8001836 <cli_parse_info+0x21e>

	Str snip = cli->str;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	snip.first += str_length(&arg);
 800165e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fcb7 	bl	8002fd6 <str_length>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800166e:	4413      	add	r3, r2
 8001670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snip.first += str_find_nws(&snip);
 8001674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fdc5 	bl	8003208 <str_find_nws>
 800167e:	4602      	mov	r2, r0
 8001680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	if(!str_cmp_start(&snip, &STR("all"), true)) {
 800168a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	2303      	movs	r3, #3
 800169a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <cli_parse_info+0x22c>)
 80016a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016a4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80016a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016ac:	2201      	movs	r2, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fd2b 	bl	800310a <str_cmp_start>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <cli_parse_info+0xaa>
		cli->info = CLI_INFO__ALL;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2209      	movs	r2, #9
 80016be:	761a      	strb	r2, [r3, #24]
 80016c0:	e0b8      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("version"), true)) {
 80016c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	2307      	movs	r3, #7
 80016d2:	673b      	str	r3, [r7, #112]	; 0x70
 80016d4:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <cli_parse_info+0x230>)
 80016d6:	677b      	str	r3, [r7, #116]	; 0x74
 80016d8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80016dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016e0:	2201      	movs	r2, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fd11 	bl	800310a <str_cmp_start>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <cli_parse_info+0xde>
		cli->info = CLI_INFO_VERSION;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	761a      	strb	r2, [r3, #24]
 80016f4:	e09e      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("clock"), true)) {
 80016f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	2305      	movs	r3, #5
 8001706:	663b      	str	r3, [r7, #96]	; 0x60
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <cli_parse_info+0x234>)
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
 800170c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001710:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001714:	2201      	movs	r2, #1
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fcf7 	bl	800310a <str_cmp_start>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <cli_parse_info+0x112>
		cli->info = CLI_INFO_CLOCK;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	761a      	strb	r2, [r3, #24]
 8001728:	e084      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("arr"), true)) {
 800172a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	2303      	movs	r3, #3
 800173a:	653b      	str	r3, [r7, #80]	; 0x50
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <cli_parse_info+0x238>)
 800173e:	657b      	str	r3, [r7, #84]	; 0x54
 8001740:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001748:	2201      	movs	r2, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fcdd 	bl	800310a <str_cmp_start>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <cli_parse_info+0x146>
		cli->info = CLI_INFO_ARR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	761a      	strb	r2, [r3, #24]
 800175c:	e06a      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("psc"), true)) {
 800175e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	2303      	movs	r3, #3
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <cli_parse_info+0x23c>)
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
 8001774:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001778:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800177c:	2201      	movs	r2, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fcc3 	bl	800310a <str_cmp_start>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <cli_parse_info+0x17a>
		cli->info = CLI_INFO_PSC;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	761a      	strb	r2, [r3, #24]
 8001790:	e050      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("fps"), true)) {
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	2303      	movs	r3, #3
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <cli_parse_info+0x240>)
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
 80017a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017b0:	2201      	movs	r2, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fca9 	bl	800310a <str_cmp_start>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <cli_parse_info+0x1ae>
		cli->info = CLI_INFO_FPS;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2205      	movs	r2, #5
 80017c2:	761a      	strb	r2, [r3, #24]
 80017c4:	e036      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("out"), true)) {
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <cli_parse_info+0x244>)
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	f107 0118 	add.w	r1, r7, #24
 80017e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017e4:	2201      	movs	r2, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fc8f 	bl	800310a <str_cmp_start>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <cli_parse_info+0x1e2>
		cli->info = CLI_INFO_GPIO_OUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2206      	movs	r2, #6
 80017f6:	761a      	strb	r2, [r3, #24]
 80017f8:	e01c      	b.n	8001834 <cli_parse_info+0x21c>
	} else if(!str_cmp_start(&snip, &STR("int"), true)) {
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	2303      	movs	r3, #3
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <cli_parse_info+0x248>)
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	f107 0108 	add.w	r1, r7, #8
 8001814:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001818:	2201      	movs	r2, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fc75 	bl	800310a <str_cmp_start>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <cli_parse_info+0x216>
		cli->info = CLI_INFO_GPIO_INT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2207      	movs	r2, #7
 800182a:	761a      	strb	r2, [r3, #24]
 800182c:	e002      	b.n	8001834 <cli_parse_info+0x21c>
	} else {
		cli->info = CLI_INFO__USAGE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	220a      	movs	r2, #10
 8001832:	761a      	strb	r2, [r3, #24]
	}

	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	37bc      	adds	r7, #188	; 0xbc
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	080112d0 	.word	0x080112d0
 8001844:	080112d8 	.word	0x080112d8
 8001848:	080112dc 	.word	0x080112dc
 800184c:	080112e4 	.word	0x080112e4
 8001850:	080112ec 	.word	0x080112ec
 8001854:	080112f0 	.word	0x080112f0
 8001858:	080112f4 	.word	0x080112f4
 800185c:	080112f8 	.word	0x080112f8
 8001860:	080112fc 	.word	0x080112fc

08001864 <cli_config>:

int cli_config(Cli *cli, Str *str, CliConfigList id)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0da      	sub	sp, #360	; 0x168
 8001868:	af00      	add	r7, sp, #0
 800186a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800186e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001878:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800187c:	6019      	str	r1, [r3, #0]
 800187e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001882:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 8001886:	701a      	strb	r2, [r3, #0]
	char cstr[256] = {0};
 8001888:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800188c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	3304      	adds	r3, #4
 8001896:	22fc      	movs	r2, #252	; 0xfc
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f00b f8da 	bl	800ca54 <memset>
	char *endptr = 0;
 80018a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
	switch(id) {
 80018ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018b0:	f2a3 1361 	subw	r3, r3, #353	; 0x161
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	f200 828e 	bhi.w	8001dd8 <cli_config+0x574>
 80018bc:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <cli_config+0x60>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	08001dd9 	.word	0x08001dd9
 80018c8:	08001945 	.word	0x08001945
 80018cc:	080019f7 	.word	0x080019f7
 80018d0:	08001aa9 	.word	0x08001aa9
 80018d4:	08001b61 	.word	0x08001b61
 80018d8:	08001c8d 	.word	0x08001c8d
 80018dc:	08001913 	.word	0x08001913
 80018e0:	08001dd9 	.word	0x08001dd9
 80018e4:	080018ed 	.word	0x080018ed
 80018e8:	08001d7f 	.word	0x08001d7f
	case CLI_CONFIG__COUNT:
	case CLI_CONFIG_NONE: {} break;
	case CLI_CONFIG__USAGE: {
		cli_raw_send("    arr			set ARR (auto-reload) value\r\n");
 80018ec:	48ba      	ldr	r0, [pc, #744]	; (8001bd8 <cli_config+0x374>)
 80018ee:	f000 fef9 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    psc			set PSC (prescaler) value\r\n");
 80018f2:	48ba      	ldr	r0, [pc, #744]	; (8001bdc <cli_config+0x378>)
 80018f4:	f000 fef6 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    out			set GPIO output (start auto mode -> output)\r\n");
 80018f8:	48b9      	ldr	r0, [pc, #740]	; (8001be0 <cli_config+0x37c>)
 80018fa:	f000 fef3 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    int			set GPIO input (interrupt -> start auto mode)\r\n");
 80018fe:	48b9      	ldr	r0, [pc, #740]	; (8001be4 <cli_config+0x380>)
 8001900:	f000 fef0 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    fps			set FPS (frames per second); calculates values for ARR & PSC\r\n");
 8001904:	48b8      	ldr	r0, [pc, #736]	; (8001be8 <cli_config+0x384>)
 8001906:	f000 feed 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    reset 		trigger software reset\r\n");
 800190a:	48b8      	ldr	r0, [pc, #736]	; (8001bec <cli_config+0x388>)
 800190c:	f000 feea 	bl	80026e4 <cli_raw_send>
	} break;
 8001910:	e262      	b.n	8001dd8 <cli_config+0x574>
	case CLI_CONFIG_RESET: {
		if(str->s) {
 8001912:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001916:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 824f 	beq.w	8001dc2 <cli_config+0x55e>
			cli->reset = true;
 8001924:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001928:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			str->s = 0;
 8001934:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001938:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
		}
	} break;
 8001942:	e23e      	b.n	8001dc2 <cli_config+0x55e>
	case CLI_CONFIG_ARR: {
		if(str_length(str)) {
 8001944:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001948:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f001 fb42 	bl	8002fd6 <str_length>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8236 	beq.w	8001dc6 <cli_config+0x562>
			str_cstr(str, cstr, 256);
 800195a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800195e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001962:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f001 fb09 	bl	8002f82 <str_cstr>
			uint32_t val = strtoul(cstr, &endptr, 0);
 8001970:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001974:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001978:	2200      	movs	r2, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00c fc1c 	bl	800e1b8 <strtoul>
 8001980:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
			if((!*endptr || isspace((int)*endptr)) && (endptr != cstr)) {
 8001984:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00d      	beq.n	80019b0 <cli_config+0x14c>
 8001994:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001998:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <cli_config+0x38c>)
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <cli_config+0x17c>
 80019b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019be:	429a      	cmp	r2, r3
 80019c0:	d00e      	beq.n	80019e0 <cli_config+0x17c>
				tlc_set_arr(cli->tlc, val);
 80019c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019c6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 ff1c 	bl	8003810 <tlc_set_arr>
				cli_raw_send("Successfully applied ARR.\r\n");
 80019d8:	4886      	ldr	r0, [pc, #536]	; (8001bf4 <cli_config+0x390>)
 80019da:	f000 fe83 	bl	80026e4 <cli_raw_send>
 80019de:	e002      	b.n	80019e6 <cli_config+0x182>
			} else {
				cli_raw_send("Invalid number specified.\r\n");
 80019e0:	4885      	ldr	r0, [pc, #532]	; (8001bf8 <cli_config+0x394>)
 80019e2:	f000 fe7f 	bl	80026e4 <cli_raw_send>
			}
			str_clear(str);
 80019e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f001 fb33 	bl	800305a <str_clear>
		}
	} break;
 80019f4:	e1e7      	b.n	8001dc6 <cli_config+0x562>
	case CLI_CONFIG_PSC: {
		if(str_length(str)) {
 80019f6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f001 fae9 	bl	8002fd6 <str_length>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 81df 	beq.w	8001dca <cli_config+0x566>
			str_cstr(str, cstr, 256);
 8001a0c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a10:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a14:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f001 fab0 	bl	8002f82 <str_cstr>
			uint32_t val = strtoul(cstr, &endptr, 0);
 8001a22:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00c fbc3 	bl	800e1b8 <strtoul>
 8001a32:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
			if((!*endptr || isspace((int)*endptr)) && (endptr != cstr)) {
 8001a36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00d      	beq.n	8001a62 <cli_config+0x1fe>
 8001a46:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <cli_config+0x38c>)
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <cli_config+0x22e>
 8001a62:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d00e      	beq.n	8001a92 <cli_config+0x22e>
				tlc_set_psc(cli->tlc, val);
 8001a74:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a78:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fedc 	bl	8003842 <tlc_set_psc>
				cli_raw_send("Successfully applied PSC.\r\n");
 8001a8a:	485c      	ldr	r0, [pc, #368]	; (8001bfc <cli_config+0x398>)
 8001a8c:	f000 fe2a 	bl	80026e4 <cli_raw_send>
 8001a90:	e002      	b.n	8001a98 <cli_config+0x234>
			} else {
				cli_raw_send("Invalid number specified.\r\n");
 8001a92:	4859      	ldr	r0, [pc, #356]	; (8001bf8 <cli_config+0x394>)
 8001a94:	f000 fe26 	bl	80026e4 <cli_raw_send>
			}
			str_clear(str);
 8001a98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a9c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f001 fada 	bl	800305a <str_clear>
		}
	} break;
 8001aa6:	e190      	b.n	8001dca <cli_config+0x566>
	case CLI_CONFIG_FPS: {
		if(str_length(str)) {
 8001aa8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001aac:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f001 fa90 	bl	8002fd6 <str_length>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8188 	beq.w	8001dce <cli_config+0x56a>
			cli_raw_send("Estimating best FPS configuration...\r\n");
 8001abe:	4850      	ldr	r0, [pc, #320]	; (8001c00 <cli_config+0x39c>)
 8001ac0:	f000 fe10 	bl	80026e4 <cli_raw_send>
			str_cstr(str, cstr, 256);
 8001ac4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001ac8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001acc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	f001 fa54 	bl	8002f82 <str_cstr>
			float fps = strtof(cstr, &endptr);
 8001ada:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ade:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00c fa99 	bl	800e01c <strtof>
 8001aea:	ed87 0a58 	vstr	s0, [r7, #352]	; 0x160
			if((!*endptr || isspace((int)*endptr)) && (endptr != cstr)) {
 8001aee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001af2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <cli_config+0x2b6>
 8001afe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <cli_config+0x38c>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d017      	beq.n	8001b4a <cli_config+0x2e6>
 8001b1a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d00e      	beq.n	8001b4a <cli_config+0x2e6>
				tlc_set_fps(cli->tlc, fps);
 8001b2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b30:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	ed97 0a58 	vldr	s0, [r7, #352]	; 0x160
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fecb 	bl	80038d8 <tlc_set_fps>
				cli_raw_send("Successfully applied FPS (PSC & ARR).\r\n");
 8001b42:	4830      	ldr	r0, [pc, #192]	; (8001c04 <cli_config+0x3a0>)
 8001b44:	f000 fdce 	bl	80026e4 <cli_raw_send>
 8001b48:	e002      	b.n	8001b50 <cli_config+0x2ec>
			} else {
				cli_raw_send("Invalid number specified.\r\n");
 8001b4a:	482b      	ldr	r0, [pc, #172]	; (8001bf8 <cli_config+0x394>)
 8001b4c:	f000 fdca 	bl	80026e4 <cli_raw_send>
			}
			str_clear(str);
 8001b50:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b54:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	f001 fa7e 	bl	800305a <str_clear>
		}
	} break;
 8001b5e:	e136      	b.n	8001dce <cli_config+0x56a>
	case CLI_CONFIG_GPIO_OUT: {
		if(str_length(str)) {
 8001b60:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b64:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	f001 fa34 	bl	8002fd6 <str_length>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 812e 	beq.w	8001dd2 <cli_config+0x56e>
			if(!str_cmp_start(str, &STR("on"), true)) {
 8001b76:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	6053      	str	r3, [r2, #4]
 8001b86:	6093      	str	r3, [r2, #8]
 8001b88:	60d3      	str	r3, [r2, #12]
 8001b8a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b92:	2202      	movs	r2, #2
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b9a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <cli_config+0x3a4>)
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001ba6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001baa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bae:	2201      	movs	r2, #1
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	f001 faaa 	bl	800310a <str_cmp_start>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d129      	bne.n	8001c10 <cli_config+0x3ac>
				cli->tlc->gpio_out = true;
 8001bbc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bc0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				cli_raw_send("Turned on GPIO output.\r\n");
 8001bce:	480f      	ldr	r0, [pc, #60]	; (8001c0c <cli_config+0x3a8>)
 8001bd0:	f000 fd88 	bl	80026e4 <cli_raw_send>
 8001bd4:	e052      	b.n	8001c7c <cli_config+0x418>
 8001bd6:	bf00      	nop
 8001bd8:	08011300 	.word	0x08011300
 8001bdc:	08011328 	.word	0x08011328
 8001be0:	08011350 	.word	0x08011350
 8001be4:	08011388 	.word	0x08011388
 8001be8:	080113c4 	.word	0x080113c4
 8001bec:	08011410 	.word	0x08011410
 8001bf0:	080117d0 	.word	0x080117d0
 8001bf4:	08011438 	.word	0x08011438
 8001bf8:	08011454 	.word	0x08011454
 8001bfc:	08011470 	.word	0x08011470
 8001c00:	0801148c 	.word	0x0801148c
 8001c04:	080114b4 	.word	0x080114b4
 8001c08:	080114dc 	.word	0x080114dc
 8001c0c:	080114e0 	.word	0x080114e0
			} else if(!str_cmp_start(str, &STR("off"), true)) {
 8001c10:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	6053      	str	r3, [r2, #4]
 8001c20:	6093      	str	r3, [r2, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
 8001c24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <cli_config+0x580>)
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c40:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c44:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c48:	2201      	movs	r2, #1
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	f001 fa5d 	bl	800310a <str_cmp_start>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <cli_config+0x40c>
				cli->tlc->gpio_out = false;
 8001c56:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c5a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				cli_raw_send("Turned off GPIO output.\r\n");
 8001c68:	485f      	ldr	r0, [pc, #380]	; (8001de8 <cli_config+0x584>)
 8001c6a:	f000 fd3b 	bl	80026e4 <cli_raw_send>
 8001c6e:	e005      	b.n	8001c7c <cli_config+0x418>
			} else {
				cli_raw_send("    out=on\r\n");
 8001c70:	485e      	ldr	r0, [pc, #376]	; (8001dec <cli_config+0x588>)
 8001c72:	f000 fd37 	bl	80026e4 <cli_raw_send>
				cli_raw_send("    out=off\r\n");
 8001c76:	485e      	ldr	r0, [pc, #376]	; (8001df0 <cli_config+0x58c>)
 8001c78:	f000 fd34 	bl	80026e4 <cli_raw_send>
			}
			str_clear(str);
 8001c7c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c80:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	f001 f9e8 	bl	800305a <str_clear>
		}
	} break;
 8001c8a:	e0a2      	b.n	8001dd2 <cli_config+0x56e>
	case CLI_CONFIG_GPIO_INT: {
		if(str_length(str)) {
 8001c8c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c90:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f001 f99e 	bl	8002fd6 <str_length>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 809a 	beq.w	8001dd6 <cli_config+0x572>
			if(!str_cmp_start(str, &STR("on"), true)) {
 8001ca2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ca6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	6053      	str	r3, [r2, #4]
 8001cb2:	6093      	str	r3, [r2, #8]
 8001cb4:	60d3      	str	r3, [r2, #12]
 8001cb6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001cba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001cc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cca:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <cli_config+0x590>)
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001cd2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001cd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cda:	2201      	movs	r2, #1
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f001 fa14 	bl	800310a <str_cmp_start>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10c      	bne.n	8001d02 <cli_config+0x49e>
				cli->tlc->gpio_int = true;
 8001ce8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001cec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				cli_raw_send("Turned on GPIO interrupt.\r\n");
 8001cfa:	483f      	ldr	r0, [pc, #252]	; (8001df8 <cli_config+0x594>)
 8001cfc:	f000 fcf2 	bl	80026e4 <cli_raw_send>
 8001d00:	e035      	b.n	8001d6e <cli_config+0x50a>
			} else if(!str_cmp_start(str, &STR("off"), true)) {
 8001d02:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	6053      	str	r3, [r2, #4]
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	60d3      	str	r3, [r2, #12]
 8001d16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d1e:	2203      	movs	r2, #3
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d2a:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <cli_config+0x580>)
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	f107 0114 	add.w	r1, r7, #20
 8001d32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f001 f9e4 	bl	800310a <str_cmp_start>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10c      	bne.n	8001d62 <cli_config+0x4fe>
				cli->tlc->gpio_int = false;
 8001d48:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d4c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				cli_raw_send("Turned off GPIO interrupt.\r\n");
 8001d5a:	4828      	ldr	r0, [pc, #160]	; (8001dfc <cli_config+0x598>)
 8001d5c:	f000 fcc2 	bl	80026e4 <cli_raw_send>
 8001d60:	e005      	b.n	8001d6e <cli_config+0x50a>
			} else {
				cli_raw_send("    int=on\r\n");
 8001d62:	4827      	ldr	r0, [pc, #156]	; (8001e00 <cli_config+0x59c>)
 8001d64:	f000 fcbe 	bl	80026e4 <cli_raw_send>
				cli_raw_send("    int=off\r\n");
 8001d68:	4826      	ldr	r0, [pc, #152]	; (8001e04 <cli_config+0x5a0>)
 8001d6a:	f000 fcbb 	bl	80026e4 <cli_raw_send>
			}
			str_clear(str);
 8001d6e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f001 f96f 	bl	800305a <str_clear>
		}
	} break;
 8001d7c:	e02b      	b.n	8001dd6 <cli_config+0x572>
	case CLI_CONFIG__APPLY: {
		for(CliConfigList id = CLI_CONFIG_NONE + 1; id < CLI_CONFIG__COUNT; ++id) {
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001d84:	e018      	b.n	8001db8 <cli_config+0x554>
			cli_config(cli, &cli->config_snip[id], id);
 8001d86:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001d8a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001d8e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	3318      	adds	r3, #24
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	1d19      	adds	r1, r3, #4
 8001d9c:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001da0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001da4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	f7ff fd5b 	bl	8001864 <cli_config>
		for(CliConfigList id = CLI_CONFIG_NONE + 1; id < CLI_CONFIG__COUNT; ++id) {
 8001dae:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001db2:	3301      	adds	r3, #1
 8001db4:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8001db8:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d9e2      	bls.n	8001d86 <cli_config+0x522>
		}
	} break;
 8001dc0:	e00a      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dc2:	bf00      	nop
 8001dc4:	e008      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dc6:	bf00      	nop
 8001dc8:	e006      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dca:	bf00      	nop
 8001dcc:	e004      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dce:	bf00      	nop
 8001dd0:	e002      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dd2:	bf00      	nop
 8001dd4:	e000      	b.n	8001dd8 <cli_config+0x574>
	} break;
 8001dd6:	bf00      	nop
	}
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	080114fc 	.word	0x080114fc
 8001de8:	08011500 	.word	0x08011500
 8001dec:	0801151c 	.word	0x0801151c
 8001df0:	0801152c 	.word	0x0801152c
 8001df4:	080114dc 	.word	0x080114dc
 8001df8:	0801153c 	.word	0x0801153c
 8001dfc:	08011558 	.word	0x08011558
 8001e00:	08011578 	.word	0x08011578
 8001e04:	08011588 	.word	0x08011588

08001e08 <cli_parse_config>:

int cli_parse_config(Cli *cli, Str str, bool skip_check)
{
 8001e08:	b084      	sub	sp, #16
 8001e0a:	b590      	push	{r4, r7, lr}
 8001e0c:	b0d1      	sub	sp, #324	; 0x144
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8001e14:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001e18:	6020      	str	r0, [r4, #0]
 8001e1a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(!cli) return -1;
 8001e22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e26:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <cli_parse_config+0x2e>
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	e0fd      	b.n	8002032 <cli_parse_config+0x22a>

	Str snip = {0};
 8001e36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]

	if(!skip_check) {
 8001e44:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d037      	beq.n	8001ec2 <cli_parse_config+0xba>
		Str arg = STR("config");
 8001e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	2306      	movs	r3, #6
 8001e62:	653b      	str	r3, [r7, #80]	; 0x50
 8001e64:	4b77      	ldr	r3, [pc, #476]	; (8002044 <cli_parse_config+0x23c>)
 8001e66:	657b      	str	r3, [r7, #84]	; 0x54
		if(str_cmp_start(&str, &arg, true)) return 0;
 8001e68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001e6c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001e70:	2201      	movs	r2, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f949 	bl	800310a <str_cmp_start>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <cli_parse_config+0x7a>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e0d7      	b.n	8002032 <cli_parse_config+0x22a>

		snip = cli->str;
 8001e82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		snip.first += str_length(&arg);
 8001e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f89b 	bl	8002fd6 <str_length>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		snip.first += str_find_nws(&snip);
 8001eac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 f9a9 	bl	8003208 <str_find_nws>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	}

	Str args[CLI_CONFIG__COUNT] = {
 8001ec2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ec6:	2270      	movs	r2, #112	; 0x70
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00a fdc2 	bl	800ca54 <memset>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <cli_parse_config+0x240>)
 8001ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001edc:	2304      	movs	r3, #4
 8001ede:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <cli_parse_config+0x244>)
 8001ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ee8:	2304      	movs	r3, #4
 8001eea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <cli_parse_config+0x248>)
 8001ef0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <cli_parse_config+0x24c>)
 8001efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f00:	2304      	movs	r3, #4
 8001f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <cli_parse_config+0x250>)
 8001f08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f12:	4b52      	ldr	r3, [pc, #328]	; (800205c <cli_parse_config+0x254>)
 8001f14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			[CLI_CONFIG_GPIO_OUT] = STR("out="),
			[CLI_CONFIG_GPIO_INT] = STR("int="),
			[CLI_CONFIG_RESET] = STR("reset"),
	};
	//Str arg = {0};
	for(size_t id = CLI_CONFIG_NONE + 1; id < CLI_CONFIG__COUNT; ++id) {
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001f1e:	e07a      	b.n	8002016 <cli_parse_config+0x20e>
		Str arg = args[id];
 8001f20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f24:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001f28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001f32:	443b      	add	r3, r7
 8001f34:	3b88      	subs	r3, #136	; 0x88
 8001f36:	4614      	mov	r4, r2
 8001f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if(str_cmp_start(&snip, &arg, false)) continue;
 8001f3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f46:	2200      	movs	r2, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 f8de 	bl	800310a <str_cmp_start>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <cli_parse_config+0x158>
	for(size_t id = CLI_CONFIG_NONE + 1; id < CLI_CONFIG__COUNT; ++id) {
 8001f54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001f5e:	e05a      	b.n	8002016 <cli_parse_config+0x20e>
 8001f60:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f64:	3b01      	subs	r3, #1
		/* get data snippet */
		switch(id) { // TODO: I don't think I need the switch? also in cli_parse_mode ...
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d842      	bhi.n	8001ff0 <cli_parse_config+0x1e8>
		case CLI_CONFIG_ARR:
		case CLI_CONFIG_PSC:
		case CLI_CONFIG_GPIO_OUT:
		case CLI_CONFIG_GPIO_INT:
		case CLI_CONFIG_FPS: {
			size_t end = str_find_ws(&snip);
 8001f6a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f975 	bl	800325e <str_find_ws>
 8001f74:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
			Str data = snip;
 8001f78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f7c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f80:	461c      	mov	r4, r3
 8001f82:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			data.first += str_length(&arg);
 8001f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f820 	bl	8002fd6 <str_length>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f9c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	441a      	add	r2, r3
 8001fa4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fa8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fac:	605a      	str	r2, [r3, #4]
			data.last = data.first + end;
 8001fae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fbc:	441a      	add	r2, r3
 8001fbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fc6:	609a      	str	r2, [r3, #8]
			cli->config_snip[id] = data;
 8001fc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fcc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4413      	add	r3, r2
 8001fda:	3318      	adds	r3, #24
 8001fdc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001fe0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001fe4:	1d1c      	adds	r4, r3, #4
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		} break;
 8001fee:	e010      	b.n	8002012 <cli_parse_config+0x20a>
		default: {
			cli->config_snip[id] = snip; // TODO make void *
 8001ff0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ff4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	3318      	adds	r3, #24
 8002004:	1d1c      	adds	r4, r3, #4
 8002006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800200a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800200c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		} break;
 8002010:	bf00      	nop
		}
		return 0; // TODO make sure we can just do: config arr=xy psc=ab (two or more ones at the same time)
 8002012:	2300      	movs	r3, #0
 8002014:	e00d      	b.n	8002032 <cli_parse_config+0x22a>
	for(size_t id = CLI_CONFIG_NONE + 1; id < CLI_CONFIG__COUNT; ++id) {
 8002016:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800201a:	2b06      	cmp	r3, #6
 800201c:	d980      	bls.n	8001f20 <cli_parse_config+0x118>
		snip.first += str_length(&arg);
		snip.first += str_find_nws(&snip);
		str = snip;

	}
	cli_config(cli, 0, CLI_CONFIG__USAGE);
 800201e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002022:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002026:	2208      	movs	r2, #8
 8002028:	2100      	movs	r1, #0
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f7ff fc1a 	bl	8001864 <cli_config>
		str = snip;
	}
#endif


	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002038:	46bd      	mov	sp, r7
 800203a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800203e:	b004      	add	sp, #16
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	08011598 	.word	0x08011598
 8002048:	080115a0 	.word	0x080115a0
 800204c:	080115a8 	.word	0x080115a8
 8002050:	080115b0 	.word	0x080115b0
 8002054:	080115b8 	.word	0x080115b8
 8002058:	080115c0 	.word	0x080115c0
 800205c:	080115c8 	.word	0x080115c8

08002060 <cli_mode>:

void cli_mode(Cli *cli, Str *str, CliModeList id)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002066:	af02      	add	r7, sp, #8
 8002068:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800206c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002070:	6018      	str	r0, [r3, #0]
 8002072:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002076:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800207a:	6019      	str	r1, [r3, #0]
 800207c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002080:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 8002084:	701a      	strb	r2, [r3, #0]
	if(!cli) return;
 8002086:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800208a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8248 	beq.w	8002526 <cli_mode+0x4c6>
	char cstr[256] = {0};
 8002096:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800209a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	3304      	adds	r3, #4
 80020a4:	22fc      	movs	r2, #252	; 0xfc
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00a fcd3 	bl	800ca54 <memset>
	char *endptr = 0;
 80020ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80020b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
	bool deactivate_auto = false;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	switch(id) {
 80020c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80020c4:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	f200 820d 	bhi.w	80024ea <cli_mode+0x48a>
 80020d0:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <cli_mode+0x78>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	08002119 	.word	0x08002119
 80020dc:	08002173 	.word	0x08002173
 80020e0:	080021db 	.word	0x080021db
 80020e4:	0800230f 	.word	0x0800230f
 80020e8:	0800235f 	.word	0x0800235f
 80020ec:	080024eb 	.word	0x080024eb
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	08002495 	.word	0x08002495
	case CLI_MODE__COUNT: {} break;
	case CLI_MODE__USAGE: {
		cli_raw_send("    none			off\r\n");
 80020f8:	48c1      	ldr	r0, [pc, #772]	; (8002400 <cli_mode+0x3a0>)
 80020fa:	f000 faf3 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    auto			automatic mode\r\n");
 80020fe:	48c1      	ldr	r0, [pc, #772]	; (8002404 <cli_mode+0x3a4>)
 8002100:	f000 faf0 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    pwm=VAL 		only do PWM on all LEDs\r\n");
 8002104:	48c0      	ldr	r0, [pc, #768]	; (8002408 <cli_mode+0x3a8>)
 8002106:	f000 faed 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    rider 		let a single LED be lit at all times. matches FPS (ARR & PSC)\r\n");
 800210a:	48c0      	ldr	r0, [pc, #768]	; (800240c <cli_mode+0x3ac>)
 800210c:	f000 faea 	bl	80026e4 <cli_raw_send>
		cli_raw_send("    display=VAL	show pattern\r\n");
 8002110:	48bf      	ldr	r0, [pc, #764]	; (8002410 <cli_mode+0x3b0>)
 8002112:	f000 fae7 	bl	80026e4 <cli_raw_send>
	} break;
 8002116:	e1e8      	b.n	80024ea <cli_mode+0x48a>
	case CLI_MODE_NONE: {
		if(str->s) { // TODO make this better (void *)
 8002118:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800211c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 81d7 	beq.w	80024d8 <cli_mode+0x478>
			tlc_mode_exit(cli->tlc, id);
 800212a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800212e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800213a:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f001 fc1a 	bl	800397c <tlc_mode_exit>
			tlc_run(cli->tlc, false);
 8002148:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800214c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f001 fb2d 	bl	80037b6 <tlc_run>
			deactivate_auto = true;
 800215c:	2301      	movs	r3, #1
 800215e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			str->s = 0; // TODO this is so horrendously stupid. but it works.
 8002162:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002166:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
		}
	} break;
 8002170:	e1b2      	b.n	80024d8 <cli_mode+0x478>
	case CLI_MODE_AUTO: {
		if(str->s) {
 8002172:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002176:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 81ac 	beq.w	80024dc <cli_mode+0x47c>
			auto_mode_activate(cli->auto_mode, cli->tlc->freq.fps);
 8002184:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002188:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002194:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	4610      	mov	r0, r2
 80021a6:	f7fe fda5 	bl	8000cf4 <auto_mode_activate>
			if(cli->tlc->gpio_out) {
 80021aa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80021ae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <cli_mode+0x16a>
				HAL_GPIO_WritePin(GPIO_Out_GPIO_Port, GPIO_Out_Pin, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	2120      	movs	r1, #32
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f002 f951 	bl	800446c <HAL_GPIO_WritePin>
			}
			str->s = 0; // TODO this is so horrendously stupid. but it works.
 80021ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80021ce:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
		}
	} break;
 80021d8:	e180      	b.n	80024dc <cli_mode+0x47c>
	case CLI_MODE_PWM: {
		if(str_length(str)) {
 80021da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80021de:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	f000 fef7 	bl	8002fd6 <str_length>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8178 	beq.w	80024e0 <cli_mode+0x480>
			tlc_mode_exit(cli->tlc, id);
 80021f0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80021f4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002200:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f001 fbb7 	bl	800397c <tlc_mode_exit>
			str_cstr(str, cstr, 256);
 800220e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002212:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002216:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800221a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f000 feaf 	bl	8002f82 <str_cstr>
			uint32_t val = strtoul(cstr, &endptr, 0);
 8002224:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002228:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800222c:	2200      	movs	r2, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f00b ffc2 	bl	800e1b8 <strtoul>
 8002234:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
			if((!*endptr || isspace((int)*endptr)) && endptr != cstr && val >= 0 && val <= TLC_PWM_MAX) {
 8002238:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800223c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <cli_mode+0x204>
 8002248:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800224c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a6f      	ldr	r2, [pc, #444]	; (8002414 <cli_mode+0x3b4>)
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01a      	beq.n	800229a <cli_mode+0x23a>
 8002264:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002268:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002272:	429a      	cmp	r2, r3
 8002274:	d011      	beq.n	800229a <cli_mode+0x23a>
 8002276:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800227a:	2b10      	cmp	r3, #16
 800227c:	d80d      	bhi.n	800229a <cli_mode+0x23a>
				*cli->tlc->pwm.duty_cycle = val;
 800227e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002282:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002290:	601a      	str	r2, [r3, #0]
				cli_raw_send("Successfully applied PWM.\r\n");
 8002292:	4861      	ldr	r0, [pc, #388]	; (8002418 <cli_mode+0x3b8>)
 8002294:	f000 fa26 	bl	80026e4 <cli_raw_send>
 8002298:	e01a      	b.n	80022d0 <cli_mode+0x270>
			} else {
				char buf[256] = {0};
 800229a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800229e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	3304      	adds	r3, #4
 80022a8:	22fc      	movs	r2, #252	; 0xfc
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00a fbd1 	bl	800ca54 <memset>
				snprintf(buf, 256, "Invalid number specified. (Range = 0..%u, where 0=0%% and %u=100%%)\r\n", TLC_PWM_MAX, TLC_PWM_MAX);
 80022b2:	f107 0014 	add.w	r0, r7, #20
 80022b6:	2310      	movs	r3, #16
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2310      	movs	r3, #16
 80022bc:	4a57      	ldr	r2, [pc, #348]	; (800241c <cli_mode+0x3bc>)
 80022be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c2:	f00b f841 	bl	800d348 <sniprintf>
				cli_raw_send(buf);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa0a 	bl	80026e4 <cli_raw_send>
			}
			tlc_mode(cli->tlc, TLC_MODE_PWM);
 80022d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80022d4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fc3e 	bl	8003b60 <tlc_mode>
			tlc_run(cli->tlc, true);
 80022e4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80022e8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 fa5f 	bl	80037b6 <tlc_run>
			deactivate_auto = true;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			str_clear(str);
 80022fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002302:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f000 fea7 	bl	800305a <str_clear>
		}
	} break;
 800230c:	e0e8      	b.n	80024e0 <cli_mode+0x480>
	case CLI_MODE_RIDER: {
		if(str->s) { // TODO make this better (void *)
 800230e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002312:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80e2 	beq.w	80024e4 <cli_mode+0x484>
			tlc_mode(cli->tlc, TLC_MODE_RIDER);
 8002320:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002324:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f001 fc16 	bl	8003b60 <tlc_mode>
			tlc_run(cli->tlc, true);
 8002334:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002338:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f001 fa37 	bl	80037b6 <tlc_run>
			deactivate_auto = true;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			str->s = 0; // TODO this is so horrendously stupid. but it works.
 800234e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002352:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
		}
	} break;
 800235c:	e0c2      	b.n	80024e4 <cli_mode+0x484>
	case CLI_MODE_DISPLAY: {
		if(str_length(str)) {
 800235e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002362:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f000 fe35 	bl	8002fd6 <str_length>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80ba 	beq.w	80024e8 <cli_mode+0x488>
			tlc_mode_exit(cli->tlc, id);
 8002374:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002378:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002384:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f001 faf5 	bl	800397c <tlc_mode_exit>
			if(str_length(str) < TLC_N_LEDS) {
 8002392:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002396:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	f000 fe1b 	bl	8002fd6 <str_length>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	d80a      	bhi.n	80023bc <cli_mode+0x35c>
				cli_raw_send("Not enough bits specified (16 required)\r\n"); // TODO str_fmt
 80023a6:	481e      	ldr	r0, [pc, #120]	; (8002420 <cli_mode+0x3c0>)
 80023a8:	f000 f99c 	bl	80026e4 <cli_raw_send>
				str_clear(str);
 80023ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80023b0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f000 fe50 	bl	800305a <str_clear>
				return;
 80023ba:	e0b5      	b.n	8002528 <cli_mode+0x4c8>
			}
			for(size_t i = 0; i < TLC_N_LEDS; ++i) {
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80023c2:	e044      	b.n	800244e <cli_mode+0x3ee>
				char ci = str_at(str, i);
 80023c4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80023c8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80023cc:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	f000 fe1e 	bl	8003012 <str_at>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
				if(ci == '1') {
 80023dc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80023e0:	2b31      	cmp	r3, #49	; 0x31
 80023e2:	d11f      	bne.n	8002424 <cli_mode+0x3c4>
					cli->tlc->display.data[i] = 1;
 80023e4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80023e8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80023f6:	4413      	add	r3, r2
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e022      	b.n	8002444 <cli_mode+0x3e4>
 80023fe:	bf00      	nop
 8002400:	080115d0 	.word	0x080115d0
 8002404:	080115e4 	.word	0x080115e4
 8002408:	08011600 	.word	0x08011600
 800240c:	08011628 	.word	0x08011628
 8002410:	08011674 	.word	0x08011674
 8002414:	080117d0 	.word	0x080117d0
 8002418:	08011694 	.word	0x08011694
 800241c:	080116b0 	.word	0x080116b0
 8002420:	080116f8 	.word	0x080116f8
				} else if(ci == '0') {
 8002424:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002428:	2b30      	cmp	r3, #48	; 0x30
 800242a:	d10b      	bne.n	8002444 <cli_mode+0x3e4>
					cli->tlc->display.data[i] = 0;
 800242c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002430:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800243e:	4413      	add	r3, r2
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
			for(size_t i = 0; i < TLC_N_LEDS; ++i) {
 8002444:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002448:	3301      	adds	r3, #1
 800244a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800244e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d9b6      	bls.n	80023c4 <cli_mode+0x364>
				} // TODO handle if ci != 0 and ci != 1 !! -> what do? x = keep? or what ?!?!
			}
			tlc_mode(cli->tlc, TLC_MODE_DISPLAY);
 8002456:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800245a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2103      	movs	r1, #3
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fb7b 	bl	8003b60 <tlc_mode>
			tlc_run(cli->tlc, true);
 800246a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800246e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f99c 	bl	80037b6 <tlc_run>
			deactivate_auto = true;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			str_clear(str);
 8002484:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002488:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	f000 fde4 	bl	800305a <str_clear>
		}
	} break;
 8002492:	e029      	b.n	80024e8 <cli_mode+0x488>
	case CLI_MODE__APPLY: {
		for(CliModeList id = CLI_MODE_NONE; id < CLI_MODE__COUNT; ++id) {
 8002494:	2300      	movs	r3, #0
 8002496:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 800249a:	e018      	b.n	80024ce <cli_mode+0x46e>
			cli_mode(cli, &cli->mode[id], id);
 800249c:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024a0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80024a4:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	3388      	adds	r3, #136	; 0x88
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	1d19      	adds	r1, r3, #4
 80024b2:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80024b6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80024ba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	f7ff fdce 	bl	8002060 <cli_mode>
		for(CliModeList id = CLI_MODE_NONE; id < CLI_MODE__COUNT; ++id) {
 80024c4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024c8:	3301      	adds	r3, #1
 80024ca:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 80024ce:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d9e2      	bls.n	800249c <cli_mode+0x43c>
		}
	} break;
 80024d6:	e008      	b.n	80024ea <cli_mode+0x48a>
	} break;
 80024d8:	bf00      	nop
 80024da:	e006      	b.n	80024ea <cli_mode+0x48a>
	} break;
 80024dc:	bf00      	nop
 80024de:	e004      	b.n	80024ea <cli_mode+0x48a>
	} break;
 80024e0:	bf00      	nop
 80024e2:	e002      	b.n	80024ea <cli_mode+0x48a>
	} break;
 80024e4:	bf00      	nop
 80024e6:	e000      	b.n	80024ea <cli_mode+0x48a>
	} break;
 80024e8:	bf00      	nop
	}
	if(deactivate_auto) {
 80024ea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01a      	beq.n	8002528 <cli_mode+0x4c8>
		auto_mode_deactivate(cli->auto_mode);
 80024f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80024f6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fc26 	bl	8000d50 <auto_mode_deactivate>
		if(cli->tlc->gpio_out) {
 8002504:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002508:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <cli_mode+0x4c8>
			HAL_GPIO_WritePin(GPIO_Out_GPIO_Port, GPIO_Out_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2120      	movs	r1, #32
 800251c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002520:	f001 ffa4 	bl	800446c <HAL_GPIO_WritePin>
 8002524:	e000      	b.n	8002528 <cli_mode+0x4c8>
	if(!cli) return;
 8002526:	bf00      	nop
		}
	}
}
 8002528:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <cli_parse_mode>:

int cli_parse_mode(Cli *cli)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b0c1      	sub	sp, #260	; 0x104
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	Str arg = STR("mode");
 8002538:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	2304      	movs	r3, #4
 8002548:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800254c:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <cli_parse_mode+0x19c>)
 800254e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if(str_cmp_start(&cli->str, &arg, true)) return 0;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002558:	2201      	movs	r2, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fdd5 	bl	800310a <str_cmp_start>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <cli_parse_mode+0x3a>
 8002566:	2300      	movs	r3, #0
 8002568:	e0ab      	b.n	80026c2 <cli_parse_mode+0x192>

	Str snip = cli->str;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	snip.first += str_length(&arg);
 8002576:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fd2b 	bl	8002fd6 <str_length>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002586:	4413      	add	r3, r2
 8002588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	snip.first += str_find_nws(&snip);
 800258c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fe39 	bl	8003208 <str_find_nws>
 8002596:	4602      	mov	r2, r0
 8002598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800259c:	4413      	add	r3, r2
 800259e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	Str args[CLI_MODE__COUNT] = {
 80025a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025a6:	2250      	movs	r2, #80	; 0x50
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00a fa52 	bl	800ca54 <memset>
 80025b0:	2304      	movs	r3, #4
 80025b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <cli_parse_mode+0x1a0>)
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025bc:	2304      	movs	r3, #4
 80025be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <cli_parse_mode+0x1a4>)
 80025c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025c8:	2304      	movs	r3, #4
 80025ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025ce:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <cli_parse_mode+0x1a8>)
 80025d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80025d4:	2305      	movs	r3, #5
 80025d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <cli_parse_mode+0x1ac>)
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025e0:	2308      	movs	r3, #8
 80025e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <cli_parse_mode+0x1b0>)
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			[CLI_MODE_PWM] = STR("pwm="),
			[CLI_MODE_RIDER] = STR("rider"),
			[CLI_MODE_DISPLAY] = STR("display="),
	};

	for(size_t id = CLI_MODE_NONE; id < CLI_MODE__COUNT; ++id) {
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80025f2:	e05c      	b.n	80026ae <cli_parse_mode+0x17e>
		Str arg = args[id];
 80025f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025fe:	443b      	add	r3, r7
 8002600:	3b88      	subs	r3, #136	; 0x88
 8002602:	f107 0418 	add.w	r4, r7, #24
 8002606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if(str_cmp_start(&snip, &arg, false)) continue;
 800260c:	f107 0118 	add.w	r1, r7, #24
 8002610:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002614:	2200      	movs	r2, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd77 	bl	800310a <str_cmp_start>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <cli_parse_mode+0xfe>
	for(size_t id = CLI_MODE_NONE; id < CLI_MODE__COUNT; ++id) {
 8002622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002626:	3301      	adds	r3, #1
 8002628:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800262c:	e03f      	b.n	80026ae <cli_parse_mode+0x17e>
		/* get data snippet */
		switch(id) {
 800262e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <cli_parse_mode+0x10e>
 8002636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263a:	2b04      	cmp	r3, #4
 800263c:	d128      	bne.n	8002690 <cli_parse_mode+0x160>
		case CLI_MODE_PWM:
		case CLI_MODE_DISPLAY: {
			size_t end = str_find_ws(&snip);
 800263e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fe0b 	bl	800325e <str_find_ws>
 8002648:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
			Str data = snip;
 800264c:	f107 0408 	add.w	r4, r7, #8
 8002650:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			data.first += str_length(&arg);
 800265a:	f107 0318 	add.w	r3, r7, #24
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fcb9 	bl	8002fd6 <str_length>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
			data.last = data.first + end;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002672:	4413      	add	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
			cli->mode[id] = data;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4413      	add	r3, r2
 8002680:	3388      	adds	r3, #136	; 0x88
 8002682:	1d1c      	adds	r4, r3, #4
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		} break;
 800268e:	e00c      	b.n	80026aa <cli_parse_mode+0x17a>
		default: {
			cli->mode[id] = snip; // TODO make void *
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	3388      	adds	r3, #136	; 0x88
 800269c:	1d1c      	adds	r4, r3, #4
 800269e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		} break;
 80026a8:	bf00      	nop
		}
		return 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e009      	b.n	80026c2 <cli_parse_mode+0x192>
	for(size_t id = CLI_MODE_NONE; id < CLI_MODE__COUNT; ++id) {
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d99e      	bls.n	80025f4 <cli_parse_mode+0xc4>
	}
	cli_mode(cli, 0, CLI_MODE__USAGE);
 80026b6:	2206      	movs	r2, #6
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fcd0 	bl	8002060 <cli_mode>

	return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	08011724 	.word	0x08011724
 80026d0:	0801172c 	.word	0x0801172c
 80026d4:	08011734 	.word	0x08011734
 80026d8:	0801173c 	.word	0x0801173c
 80026dc:	08011744 	.word	0x08011744
 80026e0:	0801174c 	.word	0x0801174c

080026e4 <cli_raw_send>:


void cli_raw_send(char *str)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	size_t len = strlen(str);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fd fd6f 	bl	80001d0 <strlen>
 80026f2:	60f8      	str	r0, [r7, #12]
	while(CDC_Transmit_FS((uint8_t *)str, len) == USBD_BUSY) {};
 80026f4:	bf00      	nop
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f009 fd43 	bl	800c188 <CDC_Transmit_FS>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d0f6      	beq.n	80026f6 <cli_raw_send+0x12>
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <cli_ready>:

void cli_ready(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	cli_raw_send("$ ");
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <cli_ready+0x10>)
 800271a:	f7ff ffe3 	bl	80026e4 <cli_raw_send>
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	08011758 	.word	0x08011758

08002728 <main_exchange>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void main_exchange(bool set, Tlc *tlc, AutoMode *auto_mode)
{
 8002728:	b4b0      	push	{r4, r5, r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	73fb      	strb	r3, [r7, #15]
	static Tlc *tlc_stored;
	static AutoMode *auto_mode_stored;
	if(set) {
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <main_exchange+0x22>
		tlc_stored = tlc;
 800273c:	4a10      	ldr	r2, [pc, #64]	; (8002780 <main_exchange+0x58>)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6013      	str	r3, [r2, #0]
		auto_mode_stored = auto_mode;
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <main_exchange+0x5c>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6013      	str	r3, [r2, #0]
	} else {
		*tlc = *tlc_stored;
		*auto_mode = *auto_mode_stored;
	}
}
 8002748:	e015      	b.n	8002776 <main_exchange+0x4e>
		*tlc = *tlc_stored;
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <main_exchange+0x58>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		*auto_mode = *auto_mode_stored;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <main_exchange+0x5c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4614      	mov	r4, r2
 8002770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bcb0      	pop	{r4, r5, r7}
 800277e:	4770      	bx	lr
 8002780:	2000040c 	.word	0x2000040c
 8002784:	20000410 	.word	0x20000410

08002788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0cc      	sub	sp, #304	; 0x130
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800278e:	f001 fa5b 	bl	8003c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002792:	f000 f887 	bl	80028a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002796:	f000 f961 	bl	8002a5c <MX_GPIO_Init>
  MX_TIM2_Init();
 800279a:	f000 f913 	bl	80029c4 <MX_TIM2_Init>
  MX_CAN_Init();
 800279e:	f000 f8dd 	bl	800295c <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 80027a2:	f009 fc13 	bl	800bfcc <MX_USB_DEVICE_Init>
  //HAL_UART_Receive_IT(&huart2, UART2_RxBuffer, 1); 	// somehow is required to start HAL_UART_RxCpltCallback

  /* tlc enters normal mode on startup by default */
  //HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, GPIO_PIN_SET);
  //HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
  HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET); /* low OE = drive LEDs */
 80027a6:	2200      	movs	r2, #0
 80027a8:	2108      	movs	r1, #8
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ae:	f001 fe5d 	bl	800446c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	2102      	movs	r1, #2
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f001 fe57 	bl	800446c <HAL_GPIO_WritePin>

  HAL_Delay(200);
 80027be:	20c8      	movs	r0, #200	; 0xc8
 80027c0:	f001 faa8 	bl	8003d14 <HAL_Delay>
  HAL_GPIO_WritePin(USB_Reconnect_GPIO_Port, USB_Reconnect_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	4831      	ldr	r0, [pc, #196]	; (8002890 <main+0x108>)
 80027ca:	f001 fe4f 	bl	800446c <HAL_GPIO_WritePin>
   * 	fps
   *	can-bus		list connected...
   *
   */

  Tlc tlc = {0};
 80027ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027d2:	223c      	movs	r2, #60	; 0x3c
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a f93c 	bl	800ca54 <memset>
  tlc_init(&tlc, TIM2, &htim2);
 80027dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027e0:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <main+0x10c>)
 80027e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 ff8c 	bl	8003704 <tlc_init>

  AutoMode auto_mode = {0};
 80027ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]

  Cli cli = {0};
 80027fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002802:	4618      	mov	r0, r3
 8002804:	23e0      	movs	r3, #224	; 0xe0
 8002806:	461a      	mov	r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	f00a f923 	bl	800ca54 <memset>
  cli_init(&cli, &tlc, &auto_mode);
 800280e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002812:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fc01 	bl	8001020 <cli_init>

  main_exchange(true, &tlc, &cli);
 800281e:	1d3a      	adds	r2, r7, #4
 8002820:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002824:	4619      	mov	r1, r3
 8002826:	2001      	movs	r0, #1
 8002828:	f7ff ff7e 	bl	8002728 <main_exchange>

  tlc_set_fps(&tlc, 60.0f);
 800282c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002830:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002898 <main+0x110>
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f84f 	bl	80038d8 <tlc_set_fps>
  {
	  //HAL_Delay(1000);
	  //*tlc.pwm.duty_cycle += 1;
	  //if(*tlc.pwm.duty_cycle > 16) *tlc.pwm.duty_cycle = 0;

	  if(cdc_rx_buf_len) {
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <main+0x114>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01c      	beq.n	800287c <main+0xf4>
		  while(CDC_Transmit_FS(cdc_rx_buf, cdc_rx_buf_len) == USBD_BUSY) {};
 8002842:	bf00      	nop
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <main+0x114>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	4814      	ldr	r0, [pc, #80]	; (80028a0 <main+0x118>)
 800284e:	f009 fc9b 	bl	800c188 <CDC_Transmit_FS>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d0f5      	beq.n	8002844 <main+0xbc>
		  //while(CDC_Transmit_FS(CSTR("\r\nFeed..\r\n")) == USBD_BUSY) {};
		  cli_feed(&cli, cdc_rx_buf, cdc_rx_buf_len);	 // TODO:RETVAL
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <main+0x114>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4910      	ldr	r1, [pc, #64]	; (80028a0 <main+0x118>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fc0f 	bl	8001084 <cli_feed>
		  //while(CDC_Transmit_FS(CSTR("Parse..\r\n")) == USBD_BUSY) {};
		  cli_parse(&cli);	// TODO:RETVAL
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fc9b 	bl	80011a4 <cli_parse>
		  cli_process(&cli);
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fe8f 	bl	8001594 <cli_process>
		  cdc_rx_buf_len = 0;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <main+0x114>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
	  }
	  auto_mode_process(&auto_mode, &tlc);
 800287c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002880:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fa74 	bl	8000d74 <auto_mode_process>
	  if(cdc_rx_buf_len) {
 800288c:	e7d5      	b.n	800283a <main+0xb2>
 800288e:	bf00      	nop
 8002890:	48001400 	.word	0x48001400
 8002894:	200003c0 	.word	0x200003c0
 8002898:	42700000 	.word	0x42700000
 800289c:	200006ec 	.word	0x200006ec
 80028a0:	200006f0 	.word	0x200006f0

080028a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b09a      	sub	sp, #104	; 0x68
 80028a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ae:	2228      	movs	r2, #40	; 0x28
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00a f8ce 	bl	800ca54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	222c      	movs	r2, #44	; 0x2c
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00a f8c0 	bl	800ca54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e2:	2301      	movs	r3, #1
 80028e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	2302      	movs	r3, #2
 80028e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80028f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 faca 	bl	8005e94 <HAL_RCC_OscConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002906:	f000 f92d 	bl	8002b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290a:	230f      	movs	r3, #15
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290e:	2302      	movs	r3, #2
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f004 faf2 	bl	8006f10 <HAL_RCC_ClockConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002932:	f000 f917 	bl	8002b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fccc 	bl	80072e0 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800294e:	f000 f909 	bl	8002b64 <Error_Handler>
  }
}
 8002952:	bf00      	nop
 8002954:	3768      	adds	r7, #104	; 0x68
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <MX_CAN_Init+0x60>)
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <MX_CAN_Init+0x64>)
 8002964:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <MX_CAN_Init+0x60>)
 8002968:	2210      	movs	r2, #16
 800296a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <MX_CAN_Init+0x60>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <MX_CAN_Init+0x60>)
 8002974:	2200      	movs	r2, #0
 8002976:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <MX_CAN_Init+0x60>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <MX_CAN_Init+0x60>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <MX_CAN_Init+0x60>)
 8002986:	2200      	movs	r2, #0
 8002988:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <MX_CAN_Init+0x60>)
 800298c:	2200      	movs	r2, #0
 800298e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <MX_CAN_Init+0x60>)
 8002992:	2200      	movs	r2, #0
 8002994:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_CAN_Init+0x60>)
 8002998:	2200      	movs	r2, #0
 800299a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <MX_CAN_Init+0x60>)
 800299e:	2200      	movs	r2, #0
 80029a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_CAN_Init+0x60>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <MX_CAN_Init+0x60>)
 80029aa:	f001 f9d7 	bl	8003d5c <HAL_CAN_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80029b4:	f000 f8d6 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000398 	.word	0x20000398
 80029c0:	40006400 	.word	0x40006400

080029c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d8:	463b      	mov	r3, r7
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <MX_TIM2_Init+0x94>)
 80029e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_TIM2_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <MX_TIM2_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_TIM2_Init+0x94>)
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295
 80029fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <MX_TIM2_Init+0x94>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <MX_TIM2_Init+0x94>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a08:	4813      	ldr	r0, [pc, #76]	; (8002a58 <MX_TIM2_Init+0x94>)
 8002a0a:	f004 fddd 	bl	80075c8 <HAL_TIM_Base_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a14:	f000 f8a6 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <MX_TIM2_Init+0x94>)
 8002a26:	f005 f901 	bl	8007c2c <HAL_TIM_ConfigClockSource>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a30:	f000 f898 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_TIM2_Init+0x94>)
 8002a42:	f005 fb47 	bl	80080d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a4c:	f000 f88a 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200003c0 	.word	0x200003c0

08002a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a7c:	6153      	str	r3, [r2, #20]
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4a33      	ldr	r2, [pc, #204]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	6153      	str	r3, [r2, #20]
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	6153      	str	r3, [r2, #20]
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <MX_GPIO_Init+0x100>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5926_CLK_Pin|TLC5926_SDI_Pin|TLC5926_LE_Pin|TLC5926_OE_Pin
 8002aba:	2200      	movs	r2, #0
 8002abc:	212f      	movs	r1, #47	; 0x2f
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f001 fcd3 	bl	800446c <HAL_GPIO_WritePin>
                          |GPIO_Out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Reconnect_GPIO_Port, USB_Reconnect_Pin, GPIO_PIN_RESET);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	4825      	ldr	r0, [pc, #148]	; (8002b60 <MX_GPIO_Init+0x104>)
 8002acc:	f001 fcce 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TLC5926_CLK_Pin TLC5926_SDI_Pin TLC5926_LE_Pin TLC5926_OE_Pin */
  GPIO_InitStruct.Pin = TLC5926_CLK_Pin|TLC5926_SDI_Pin|TLC5926_LE_Pin|TLC5926_OE_Pin;
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 fb45 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Int_Pin */
  GPIO_InitStruct.Pin = GPIO_Int_Pin;
 8002aee:	2310      	movs	r3, #16
 8002af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_Int_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b06:	f001 fb37 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Out_Pin */
  GPIO_InitStruct.Pin = GPIO_Out_Pin;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Out_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b24:	f001 fb28 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Reconnect_Pin */
  GPIO_InitStruct.Pin = USB_Reconnect_Pin;
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b2c:	2311      	movs	r3, #17
 8002b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_Reconnect_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4808      	ldr	r0, [pc, #32]	; (8002b60 <MX_GPIO_Init+0x104>)
 8002b40:	f001 fb1a 	bl	8004178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f001 fade 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b4e:	200a      	movs	r0, #10
 8002b50:	f001 faf7 	bl	8004142 <HAL_NVIC_EnableIRQ>

}
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48001400 	.word	0x48001400

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <Error_Handler+0x8>
	...

08002b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6193      	str	r3, [r2, #24]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	61d3      	str	r3, [r2, #28]
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_MspInit+0x44>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_CAN_MspInit+0x7c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d128      	bne.n	8002c2c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be4:	61d3      	str	r3, [r2, #28]
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6153      	str	r3, [r2, #20]
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_CAN_MspInit+0x80>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002c1c:	2309      	movs	r3, #9
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <HAL_CAN_MspInit+0x84>)
 8002c28:	f001 faa6 	bl	8004178 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40006400 	.word	0x40006400
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	48000400 	.word	0x48000400

08002c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d113      	bne.n	8002c7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_TIM_Base_MspInit+0x44>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_TIM_Base_MspInit+0x44>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_TIM_Base_MspInit+0x44>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	201c      	movs	r0, #28
 8002c70:	f001 fa4b 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c74:	201c      	movs	r0, #28
 8002c76:	f001 fa64 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000

08002c88 <it_mode_rider>:
		[TLC_MODE_CLEAR] = &it_mode_clear,
};


void it_mode_rider()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, led_index & 1);
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <it_mode_rider+0x58>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f001 fbe3 	bl	800446c <HAL_GPIO_WritePin>
	bool first = (led_index < 2);
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <it_mode_rider+0x58>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bfd4      	ite	le
 8002cae:	2301      	movle	r3, #1
 8002cb0:	2300      	movgt	r3, #0
 8002cb2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, first);
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2102      	movs	r1, #2
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f001 fbd5 	bl	800446c <HAL_GPIO_WritePin>

	/*DRY*/
	++led_index;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <it_mode_rider+0x58>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <it_mode_rider+0x58>)
 8002cca:	6013      	str	r3, [r2, #0]
#if LED_MAX_IS_POWER_OF_TWO
	led_index &= LED_MAX_MASK;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <it_mode_rider+0x58>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <it_mode_rider+0x58>)
 8002cd6:	6013      	str	r3, [r2, #0]
#else
	if(led_index >= 2*LED_MAX) {	// TODO: maybe possible to replace with modulo?
		led_index = 0;
	}
#endif
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000414 	.word	0x20000414

08002ce4 <it_mode_pwm>:

void it_mode_pwm()
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, led_index & 1);
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <it_mode_pwm+0x60>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f001 fbb5 	bl	800446c <HAL_GPIO_WritePin>

#if 1
	bool set_to = (led_index < 2 * led_pwm);
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <it_mode_pwm+0x64>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	005a      	lsls	r2, r3, #1
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <it_mode_pwm+0x60>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	bfcc      	ite	gt
 8002d10:	2301      	movgt	r3, #1
 8002d12:	2300      	movle	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, set_to);
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d20:	f001 fba4 	bl	800446c <HAL_GPIO_WritePin>

	++led_index;
 8002d24:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <it_mode_pwm+0x60>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <it_mode_pwm+0x60>)
 8002d2c:	6013      	str	r3, [r2, #0]
#if LED_MAX_IS_POWER_OF_TWO
	led_index &= LED_MAX_MASK;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <it_mode_pwm+0x60>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <it_mode_pwm+0x60>)
 8002d38:	6013      	str	r3, [r2, #0]
			led_pwm_count = 0;
			//HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, true); // TODO:TEMP
		}
	}
#endif
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000414 	.word	0x20000414
 8002d48:	20000010 	.word	0x20000010

08002d4c <it_mode_display>:

void it_mode_display()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, led_index & 1);
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <it_mode_display+0x70>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2101      	movs	r1, #1
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f001 fb81 	bl	800446c <HAL_GPIO_WritePin>
	bool set_to = led_data[led_index >> 1];
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <it_mode_display+0x70>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	105b      	asrs	r3, r3, #1
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <it_mode_display+0x74>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, set_to);
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d80:	f001 fb74 	bl	800446c <HAL_GPIO_WritePin>

	/*DRY*/
	++led_index;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <it_mode_display+0x70>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <it_mode_display+0x70>)
 8002d8c:	6013      	str	r3, [r2, #0]

	if(led_index >= 2*LED_MAX) {
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <it_mode_display+0x70>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b1f      	cmp	r3, #31
 8002d94:	dd0e      	ble.n	8002db4 <it_mode_display+0x68>
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
 8002d96:	2201      	movs	r2, #1
 8002d98:	2104      	movs	r1, #4
 8002d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d9e:	f001 fb65 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_RESET); /* low LE = don't transfer to latch */
 8002da2:	2200      	movs	r2, #0
 8002da4:	2104      	movs	r1, #4
 8002da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002daa:	f001 fb5f 	bl	800446c <HAL_GPIO_WritePin>
		led_index = 0;
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <it_mode_display+0x70>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, true); // TODO:TEMP
	}
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000414 	.word	0x20000414
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <it_mode_none>:

void it_mode_none()
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
	/* do nothing */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <it_mode_clear>:

void it_mode_clear()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, led_index & 1);
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <it_mode_clear+0x7c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	2101      	movs	r1, #1
 8002dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dee:	f001 fb3d 	bl	800446c <HAL_GPIO_WritePin>
	bool set_to = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, set_to);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e00:	f001 fb34 	bl	800446c <HAL_GPIO_WritePin>

	/*DRY*/
	++led_index;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <it_mode_clear+0x7c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <it_mode_clear+0x7c>)
 8002e0c:	6013      	str	r3, [r2, #0]

	if(!(led_index % (2*LED_MAX))) {
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <it_mode_clear+0x7c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <it_mode_clear+0x5e>
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f001 fb23 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_RESET); /* low LE = don't transfer to latch */
 8002e26:	2200      	movs	r2, #0
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2e:	f001 fb1d 	bl	800446c <HAL_GPIO_WritePin>
		//led_index = 0;
	}
	if(led_index >= 4*LED_MAX) {
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <it_mode_clear+0x7c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b3f      	cmp	r3, #63	; 0x3f
 8002e38:	dd05      	ble.n	8002e46 <it_mode_clear+0x72>
		led_index = 0;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <it_mode_clear+0x7c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
		led_mode = TLC_MODE_NONE;
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <it_mode_clear+0x80>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin, true); // TODO:TEMP
	}
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000414 	.word	0x20000414
 8002e54:	20000418 	.word	0x20000418

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <NMI_Handler+0x4>

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler+0x4>

08002e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <UsageFault_Handler+0x4>

08002e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 ff16 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b094      	sub	sp, #80	; 0x50
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Tlc tlc = {0};
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	223c      	movs	r2, #60	; 0x3c
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f009 fdca 	bl	800ca54 <memset>
	AutoMode auto_mode = {0};
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
	main_exchange(false, &tlc, &auto_mode);
 8002ecc:	1d3a      	adds	r2, r7, #4
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff fc27 	bl	8002728 <main_exchange>
	auto_mode_activate(&auto_mode, tlc.freq.fps);
 8002eda:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd ff05 	bl	8000cf4 <auto_mode_activate>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_Int_Pin);
 8002eea:	2010      	movs	r0, #16
 8002eec:	f001 fad6 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	3750      	adds	r7, #80	; 0x50
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  led_functions[led_mode]();
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <TIM2_IRQHandler+0x1c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <TIM2_IRQHandler+0x20>)
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	4798      	blx	r3

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <TIM2_IRQHandler+0x24>)
 8002f0c:	f004 fd86 	bl	8007a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000418 	.word	0x20000418
 8002f18:	20000018 	.word	0x20000018
 8002f1c:	200003c0 	.word	0x200003c0

08002f20 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority global interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <USB_HP_IRQHandler+0x10>)
 8002f26:	f001 fbd4 	bl	80046d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20001100 	.word	0x20001100

08002f34 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority global interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <USB_LP_IRQHandler+0x10>)
 8002f3a:	f001 fbca 	bl	80046d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20001100 	.word	0x20001100

08002f48 <str_reserve>:
#include "str.h"
#include <string.h>
#include <stdlib.h> // realloc

int str_reserve(Str *str, size_t cap)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	void *temp = realloc(str->s, cap);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f00a f9ed 	bl	800d338 <realloc>
 8002f5e:	60f8      	str	r0, [r7, #12]
	if(!temp) {
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <str_reserve+0x24>
		return -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e006      	b.n	8002f7a <str_reserve+0x32>
	}
	str->s = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	60da      	str	r2, [r3, #12]
	str->cap = cap;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	601a      	str	r2, [r3, #0]
	return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <str_cstr>:

void str_cstr(Str *str, char cstr[], size_t len)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
	if(!str) return;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01a      	beq.n	8002fca <str_cstr+0x48>
	if(!cstr) return;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <str_cstr+0x4c>
	size_t n = len < str_length(str) ? len : str_length(str);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f81b 	bl	8002fd6 <str_length>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d304      	bcc.n	8002fb2 <str_cstr+0x30>
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f814 	bl	8002fd6 <str_length>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	e000      	b.n	8002fb4 <str_cstr+0x32>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	617b      	str	r3, [r7, #20]
	memcpy(cstr, str_iter_begin(str), n);
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f863 	bl	8003082 <str_iter_begin>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68b8      	ldr	r0, [r7, #8]
 8002fc4:	f009 fd38 	bl	800ca38 <memcpy>
 8002fc8:	e002      	b.n	8002fd0 <str_cstr+0x4e>
	if(!str) return;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <str_cstr+0x4e>
	if(!cstr) return;
 8002fce:	bf00      	nop
}
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <str_length>:

size_t str_length(Str *str)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
	if(!str) return 0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <str_length+0x12>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e00e      	b.n	8003006 <str_length+0x30>
	size_t len = str->last - str->first;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
	if(str->first > str->last) len = 0;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d901      	bls.n	8003004 <str_length+0x2e>
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
	return len;
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <str_at>:

char str_at(Str *str, size_t i)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
	if(!str) return 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <str_at+0x14>
 8003022:	2300      	movs	r3, #0
 8003024:	e013      	b.n	800304e <str_at+0x3c>
	char c = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
	if(str->first + i < str->last) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d208      	bcs.n	800304c <str_at+0x3a>
		c = str->s[str->first + i];
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	440b      	add	r3, r1
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	73fb      	strb	r3, [r7, #15]
	}
	return c;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <str_clear>:

void str_clear(Str *str)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	if(!str) return;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <str_clear+0x1c>
	str->first = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
	str->last = 0;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e000      	b.n	8003078 <str_clear+0x1e>
	if(!str) return;
 8003076:	bf00      	nop
}
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <str_iter_begin>:

char *str_iter_begin(Str *str)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	if(!str) return 0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <str_iter_begin+0x12>
 8003090:	2300      	movs	r3, #0
 8003092:	e006      	b.n	80030a2 <str_iter_begin+0x20>
	char *s = &str->s[str->first];
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4413      	add	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
	return s;
 80030a0:	68fb      	ldr	r3, [r7, #12]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <str_cmp_cstr_start>:

int str_cmp_cstr_start(Str *str, char *cstr)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
	if(!str) return -1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <str_cmp_cstr_start+0x16>
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	e01e      	b.n	8003102 <str_cmp_cstr_start+0x54>
	if(!cstr) return -1;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <str_cmp_cstr_start+0x22>
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e018      	b.n	8003102 <str_cmp_cstr_start+0x54>
	size_t len = strlen(cstr);
 80030d0:	6838      	ldr	r0, [r7, #0]
 80030d2:	f7fd f87d 	bl	80001d0 <strlen>
 80030d6:	60f8      	str	r0, [r7, #12]
	if(len > str_length(str)) return -1;
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff7c 	bl	8002fd6 <str_length>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d902      	bls.n	80030ec <str_cmp_cstr_start+0x3e>
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e00a      	b.n	8003102 <str_cmp_cstr_start+0x54>
	int result = strncmp(str_iter_begin(str), cstr, len);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffc8 	bl	8003082 <str_iter_begin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00a f959 	bl	800d3b0 <strncmp>
 80030fe:	60b8      	str	r0, [r7, #8]
	return result;
 8003100:	68bb      	ldr	r3, [r7, #8]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <str_cmp_start>:

int str_cmp_start(Str *str, Str *sub, bool finish_with_ws_or_end)
{
 800310a:	b5b0      	push	{r4, r5, r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	4613      	mov	r3, r2
 8003116:	71fb      	strb	r3, [r7, #7]
	if(!str) return -1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <str_cmp_start+0x1a>
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	e046      	b.n	80031b2 <str_cmp_start+0xa8>
	if(!sub) return -1;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <str_cmp_start+0x26>
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e040      	b.n	80031b2 <str_cmp_start+0xa8>
	if(str_length(sub) > str_length(str)) return -1;
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f7ff ff50 	bl	8002fd6 <str_length>
 8003136:	4604      	mov	r4, r0
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff ff4c 	bl	8002fd6 <str_length>
 800313e:	4603      	mov	r3, r0
 8003140:	429c      	cmp	r4, r3
 8003142:	d902      	bls.n	800314a <str_cmp_start+0x40>
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	e033      	b.n	80031b2 <str_cmp_start+0xa8>
	int result = strncmp(str_iter_begin(str), str_iter_begin(sub), str_length(sub));
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff ff99 	bl	8003082 <str_iter_begin>
 8003150:	4604      	mov	r4, r0
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f7ff ff95 	bl	8003082 <str_iter_begin>
 8003158:	4605      	mov	r5, r0
 800315a:	68b8      	ldr	r0, [r7, #8]
 800315c:	f7ff ff3b 	bl	8002fd6 <str_length>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4629      	mov	r1, r5
 8003166:	4620      	mov	r0, r4
 8003168:	f00a f922 	bl	800d3b0 <strncmp>
 800316c:	6178      	str	r0, [r7, #20]
	if(finish_with_ws_or_end && str_length(sub) < str_length(str)) {
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01d      	beq.n	80031b0 <str_cmp_start+0xa6>
 8003174:	68b8      	ldr	r0, [r7, #8]
 8003176:	f7ff ff2e 	bl	8002fd6 <str_length>
 800317a:	4604      	mov	r4, r0
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7ff ff2a 	bl	8002fd6 <str_length>
 8003182:	4603      	mov	r3, r0
 8003184:	429c      	cmp	r4, r3
 8003186:	d213      	bcs.n	80031b0 <str_cmp_start+0xa6>
		char finish = str_at(str, str_length(sub));
 8003188:	68b8      	ldr	r0, [r7, #8]
 800318a:	f7ff ff24 	bl	8002fd6 <str_length>
 800318e:	4603      	mov	r3, r0
 8003190:	4619      	mov	r1, r3
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff ff3d 	bl	8003012 <str_at>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]
		if(!isspace(finish)) result = -1;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	4618      	mov	r0, r3
 80031a0:	f009 fc42 	bl	800ca28 <isspace>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <str_cmp_start+0xa6>
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	617b      	str	r3, [r7, #20]
	}
	return result;
 80031b0:	697b      	ldr	r3, [r7, #20]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bdb0      	pop	{r4, r5, r7, pc}

080031ba <str_app_c>:

int str_app_c(Str *str, char c)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
	if(!str) return -1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <str_app_c+0x18>
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e014      	b.n	80031fc <str_app_c+0x42>
	if(str->last + 1 > str->cap) return -1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d902      	bls.n	80031e6 <str_app_c+0x2c>
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	e00a      	b.n	80031fc <str_app_c+0x42>
	str->s[str->last++] = c;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	1c58      	adds	r0, r3, #1
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6088      	str	r0, [r1, #8]
 80031f4:	4413      	add	r3, r2
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	701a      	strb	r2, [r3, #0]
	return 0;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <str_find_nws>:
	}
	return len;
}

size_t str_find_nws(Str *str)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	if(!str) return 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <str_find_nws+0x12>
 8003216:	2300      	movs	r3, #0
 8003218:	e01d      	b.n	8003256 <str_find_nws+0x4e>
	size_t len = str_length(str);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fedb 	bl	8002fd6 <str_length>
 8003220:	6138      	str	r0, [r7, #16]
	for(size_t i = 0; i < len; ++i) {
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e011      	b.n	800324c <str_find_nws+0x44>
		char ci = str_at(str, i);
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fef1 	bl	8003012 <str_at>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
		if(!isspace(ci)) return i;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	4618      	mov	r0, r3
 8003238:	f009 fbf6 	bl	800ca28 <isspace>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <str_find_nws+0x3e>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	e007      	b.n	8003256 <str_find_nws+0x4e>
	for(size_t i = 0; i < len; ++i) {
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d3e9      	bcc.n	8003228 <str_find_nws+0x20>
	}
	return len;
 8003254:	693b      	ldr	r3, [r7, #16]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <str_find_ws>:

size_t str_find_ws(Str *str)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	if(!str) return 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <str_find_ws+0x12>
 800326c:	2300      	movs	r3, #0
 800326e:	e01d      	b.n	80032ac <str_find_ws+0x4e>
	size_t len = str_length(str);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff feb0 	bl	8002fd6 <str_length>
 8003276:	6138      	str	r0, [r7, #16]
	for(size_t i = 0; i < len; ++i) {
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e011      	b.n	80032a2 <str_find_ws+0x44>
		char ci = str_at(str, i);
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fec6 	bl	8003012 <str_at>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
		if(isspace(ci)) return i;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	4618      	mov	r0, r3
 800328e:	f009 fbcb 	bl	800ca28 <isspace>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <str_find_ws+0x3e>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	e007      	b.n	80032ac <str_find_ws+0x4e>
	for(size_t i = 0; i < len; ++i) {
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3e9      	bcc.n	800327e <str_find_ws+0x20>
	}
	return len;
 80032aa:	693b      	ldr	r3, [r7, #16]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <str_rfind_c>:

size_t str_rfind_c(Str *str, char c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
	if(!str) return 0;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <str_rfind_c+0x16>
 80032c6:	2300      	movs	r3, #0
 80032c8:	e01c      	b.n	8003304 <str_rfind_c+0x50>
	size_t len = str_length(str);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fe83 	bl	8002fd6 <str_length>
 80032d0:	6138      	str	r0, [r7, #16]
	for(size_t i = len; i > 0; --i) {
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e011      	b.n	80032fc <str_rfind_c+0x48>
		char ci = str_at(str, i - 1);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3b01      	subs	r3, #1
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fe97 	bl	8003012 <str_at>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]
		if(ci == c) return i - 1;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d102      	bne.n	80032f6 <str_rfind_c+0x42>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	e006      	b.n	8003304 <str_rfind_c+0x50>
	for(size_t i = len; i > 0; --i) {
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ea      	bne.n	80032d8 <str_rfind_c+0x24>
	}
	return len;
 8003302:	693b      	ldr	r3, [r7, #16]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
	return 1;
 8003310:	2301      	movs	r3, #1
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_kill>:

int _kill(int pid, int sig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003326:	f009 fb55 	bl	800c9d4 <__errno>
 800332a:	4603      	mov	r3, r0
 800332c:	2216      	movs	r2, #22
 800332e:	601a      	str	r2, [r3, #0]
	return -1;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_exit>:

void _exit (int status)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ffe7 	bl	800331c <_kill>
	while (1) {}		/* Make sure we hang here */
 800334e:	e7fe      	b.n	800334e <_exit+0x12>

08003350 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e00a      	b.n	8003378 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003362:	f3af 8000 	nop.w
 8003366:	4601      	mov	r1, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	60ba      	str	r2, [r7, #8]
 800336e:	b2ca      	uxtb	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	dbf0      	blt.n	8003362 <_read+0x12>
	}

return len;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e009      	b.n	80033b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	60ba      	str	r2, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dbf1      	blt.n	800339c <_write+0x12>
	}
	return len;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_close>:

int _close(int file)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
	return -1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ea:	605a      	str	r2, [r3, #4]
	return 0;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <_isatty>:

int _isatty(int file)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
	return 1;
 8003402:	2301      	movs	r3, #1
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
	return 0;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <_sbrk+0x5c>)
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <_sbrk+0x60>)
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <_sbrk+0x64>)
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <_sbrk+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800345c:	f009 faba 	bl	800c9d4 <__errno>
 8003460:	4603      	mov	r3, r0
 8003462:	220c      	movs	r2, #12
 8003464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e009      	b.n	8003480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <_sbrk+0x64>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <_sbrk+0x64>)
 800347c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20006000 	.word	0x20006000
 800348c:	00000400 	.word	0x00000400
 8003490:	2000041c 	.word	0x2000041c
 8003494:	20001620 	.word	0x20001620

08003498 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <SystemInit+0x20>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <SystemInit+0x20>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <timer_estimate_freq_toggle>:
#include "timer_estimator.h"

#define RELOAD_MIN 	117

float timer_estimate_freq_toggle(const TimerEstimator timer, uint32_t base)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80034ca:	607a      	str	r2, [r7, #4]
    if(!timer.arr) return 0;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <timer_estimate_freq_toggle+0x1c>
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e017      	b.n	8003508 <timer_estimate_freq_toggle+0x4c>
    float freq = (float)base/(float)(timer.psc + 1)/(float)(timer.arr + 1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3301      	adds	r3, #1
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3301      	adds	r3, #1
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003502:	edc7 7a05 	vstr	s15, [r7, #20]
    return freq;
 8003506:	697b      	ldr	r3, [r7, #20]
}
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb0 0a67 	vmov.f32	s0, s15
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <timer_estimate>:

uint32_t timer_estimate(TimerEstimator *est, uint32_t base_freq, float goal_freq)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b092      	sub	sp, #72	; 0x48
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	ed87 0a01 	vstr	s0, [r7, #4]
	if(!est) return 0;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <timer_estimate+0x18>
 8003530:	2300      	movs	r3, #0
 8003532:	e0df      	b.n	80036f4 <timer_estimate+0x1d8>

	TimerEstimator best = {0};
 8003534:	f107 0318 	add.w	r3, r7, #24
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
	uint32_t iteration = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	647b      	str	r3, [r7, #68]	; 0x44

	if(!goal_freq) {
 8003542:	edd7 7a01 	vldr	s15, [r7, #4]
 8003546:	eef5 7a40 	vcmp.f32	s15, #0.0
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	d104      	bne.n	800355a <timer_estimate+0x3e>
		est->arr = 0;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
		return 0; // TODO: or return -1??
 8003556:	2300      	movs	r3, #0
 8003558:	e0cc      	b.n	80036f4 <timer_estimate+0x1d8>
	}
	if(goal_freq > base_freq) {
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003564:	ed97 7a01 	vldr	s14, [r7, #4]
 8003568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800356c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003570:	dd01      	ble.n	8003576 <timer_estimate+0x5a>
		return 0;
 8003572:	2300      	movs	r3, #0
 8003574:	e0be      	b.n	80036f4 <timer_estimate+0x1d8>
	}

	TimerEstimator propose = best;
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	f107 0218 	add.w	r2, r7, #24
 800357e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003582:	e883 0003 	stmia.w	r3, {r0, r1}
	float f_goal = (float)goal_freq;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
	float err = INFINITY;
 800358a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
	float base = base_freq / goal_freq;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 7a01 	vldr	s14, [r7, #4]
 800359e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float max = 2 * sqrt(UINT16_MAX);
 80035a6:	4b55      	ldr	r3, [pc, #340]	; (80036fc <timer_estimate+0x1e0>)
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30

	for (uint16_t i = 1; i < max; ++i) {
 80035aa:	2301      	movs	r3, #1
 80035ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80035ae:	e089      	b.n	80036c4 <timer_estimate+0x1a8>
		float reload = base / (float)i - 1;
 80035b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ba:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80035be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if(reload < RELOAD_MIN) continue;
 80035ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035d2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003700 <timer_estimate+0x1e4>
 80035d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d46d      	bmi.n	80036bc <timer_estimate+0x1a0>
		propose.arr = roundf(reload);
 80035e0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80035e4:	f00d fcfc 	bl	8010fe0 <roundf>
 80035e8:	eef0 7a40 	vmov.f32	s15, s0
 80035ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f0:	ee17 3a90 	vmov	r3, s15
 80035f4:	617b      	str	r3, [r7, #20]
		for (uint16_t j = 1; j < max; ++j) {
 80035f6:	2301      	movs	r3, #1
 80035f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80035fa:	e052      	b.n	80036a2 <timer_estimate+0x186>
			++iteration;
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	3301      	adds	r3, #1
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
			float prescaler = reload / (float)j - 1;
 8003602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800360c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800361c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			propose.psc = roundf(prescaler);
 8003620:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003624:	f00d fcdc 	bl	8010fe0 <roundf>
 8003628:	eef0 7a40 	vmov.f32	s15, s0
 800362c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003630:	ee17 3a90 	vmov	r3, s15
 8003634:	613b      	str	r3, [r7, #16]
			float f_result = timer_estimate_freq_toggle(propose, base_freq);
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003640:	f7ff ff3c 	bl	80034bc <timer_estimate_freq_toggle>
 8003644:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			float f_err = (f_goal - f_result) * (f_goal - f_result);
 8003648:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800364c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003654:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003658:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800365c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003664:	edc7 7a08 	vstr	s15, [r7, #32]
			if(f_err < err) {
 8003668:	ed97 7a08 	vldr	s14, [r7, #32]
 800366c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d510      	bpl.n	800369c <timer_estimate+0x180>
				err = f_err;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
				best = propose;
 800367e:	f107 0318 	add.w	r3, r7, #24
 8003682:	f107 0210 	add.w	r2, r7, #16
 8003686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800368a:	e883 0003 	stmia.w	r3, {r0, r1}
				if(!err) goto exit;
 800368e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003692:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	d021      	beq.n	80036e0 <timer_estimate+0x1c4>
		for (uint16_t j = 1; j < max; ++j) {
 800369c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800369e:	3301      	adds	r3, #1
 80036a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80036a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	dca0      	bgt.n	80035fc <timer_estimate+0xe0>
 80036ba:	e000      	b.n	80036be <timer_estimate+0x1a2>
		if(reload < RELOAD_MIN) continue;
 80036bc:	bf00      	nop
	for (uint16_t i = 1; i < max; ++i) {
 80036be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80036c0:	3301      	adds	r3, #1
 80036c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80036c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	f73f af69 	bgt.w	80035b0 <timer_estimate+0x94>
			}
		}
	}
exit:
 80036de:	e000      	b.n	80036e2 <timer_estimate+0x1c6>
				if(!err) goto exit;
 80036e0:	bf00      	nop
	*est = best;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ee:	e882 0003 	stmia.w	r2, {r0, r1}
	return iteration;
 80036f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3748      	adds	r7, #72	; 0x48
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	43ffff80 	.word	0x43ffff80
 8003700:	42ea0000 	.word	0x42ea0000

08003704 <tlc_init>:
extern TlcModeList led_mode;

extern void (*led_function)(void);

int tlc_init(Tlc *tlc, TIM_TypeDef *tim, TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
	memset(tlc, 0, sizeof(*tlc));
 8003710:	223c      	movs	r2, #60	; 0x3c
 8003712:	2100      	movs	r1, #0
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f009 f99d 	bl	800ca54 <memset>
	tlc->freq.system = HAL_RCC_GetSysClockFreq();
 800371a:	f003 fd75 	bl	8007208 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]
	tlc->tim = tim;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c
	tlc->htim = htim;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
	tlc->pwm.duty_max = TLC_PWM_MAX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2210      	movs	r2, #16
 8003734:	619a      	str	r2, [r3, #24]
	tlc->pwm.duty_cycle = &led_pwm;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <tlc_init+0x5c>)
 800373a:	615a      	str	r2, [r3, #20]
	tlc->pwm.on = &led_pwm_active;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <tlc_init+0x60>)
 8003740:	61da      	str	r2, [r3, #28]
	tlc->display.data = led_data;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <tlc_init+0x64>)
 8003746:	621a      	str	r2, [r3, #32]
	//tlc->raw.le = &led_le;
	//tlc->raw.oe = &led_oe;
	tlc->mode = &led_mode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <tlc_init+0x68>)
 800374c:	635a      	str	r2, [r3, #52]	; 0x34
	//tlc->raw.function = tlc_it_none();
	tlc_mode(tlc, TLC_MODE_CLEAR);
 800374e:	2104      	movs	r1, #4
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fa05 	bl	8003b60 <tlc_mode>
	return 0;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000010 	.word	0x20000010
 8003764:	20000014 	.word	0x20000014
 8003768:	20000000 	.word	0x20000000
 800376c:	20000418 	.word	0x20000418

08003770 <tlc_pause>:

void tlc_pause(Tlc *tlc, bool status)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
	tlc->pause = status;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	if(tlc->running) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <tlc_pause+0x3e>
		if(tlc->pause) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <tlc_pause+0x34>
			HAL_TIM_Base_Stop_IT(tlc->htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4618      	mov	r0, r3
 800379e:	f003 ffcb 	bl	8007738 <HAL_TIM_Base_Stop_IT>
		}
	}
	/*if(!tlc->pause) {
		tlc_mode_enter(tlc, tlc->mode);
	}*/
}
 80037a2:	e004      	b.n	80037ae <tlc_pause+0x3e>
			HAL_TIM_Base_Start_IT(tlc->htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 ff5d 	bl	8007668 <HAL_TIM_Base_Start_IT>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <tlc_run>:

void tlc_run(Tlc *tlc, bool status)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	70fb      	strb	r3, [r7, #3]
	tlc->running = status;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	if(!tlc->running) {
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <tlc_run+0x3c>
		HAL_TIM_PWM_Stop(tlc->htim, TIM_CHANNEL_1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 f8a3 	bl	800792c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(tlc->htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 ffa4 	bl	8007738 <HAL_TIM_Base_Stop_IT>
	} else {
		HAL_TIM_Base_Start_IT(tlc->htim);
		HAL_TIM_PWM_Start(tlc->htim, TIM_CHANNEL_1);
	}
}
 80037f0:	e00a      	b.n	8003808 <tlc_run+0x52>
		HAL_TIM_Base_Start_IT(tlc->htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 ff36 	bl	8007668 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(tlc->htim, TIM_CHANNEL_1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f003 ffc8 	bl	8007798 <HAL_TIM_PWM_Start>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <tlc_set_arr>:

int tlc_set_arr(Tlc *tlc, uint32_t val)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	if(!tlc) return -1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <tlc_set_arr+0x16>
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e009      	b.n	800383a <tlc_set_arr+0x2a>
	//tlc_pause(tlc, true);
	tlc->rider.arr = val;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	60da      	str	r2, [r3, #12]
	//tlc->tim->CCR1 = TIM2->ARR / 2;
	tlc_recalculate_fps(tlc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f821 	bl	8003874 <tlc_recalculate_fps>
	//tlc_pause(tlc, false);
	tlc_apply_changes(tlc);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8d7 	bl	80039e6 <tlc_apply_changes>
	return 0;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <tlc_set_psc>:

int tlc_set_psc(Tlc *tlc, uint32_t val)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
	if(!tlc) return -1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <tlc_set_psc+0x16>
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e009      	b.n	800386c <tlc_set_psc+0x2a>
	//tlc_pause(tlc, true);
	tlc->rider.psc = val;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	611a      	str	r2, [r3, #16]
	tlc_recalculate_fps(tlc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f808 	bl	8003874 <tlc_recalculate_fps>
	//tlc_pause(tlc, false);
	tlc_apply_changes(tlc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8be 	bl	80039e6 <tlc_apply_changes>
	return 0;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <tlc_recalculate_fps>:

int tlc_recalculate_fps(Tlc *tlc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	if(!tlc) return -1;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <tlc_recalculate_fps+0x14>
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e020      	b.n	80038ca <tlc_recalculate_fps+0x56>
	if(!tlc->tim->ARR) return -1;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <tlc_recalculate_fps+0x24>
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e018      	b.n	80038ca <tlc_recalculate_fps+0x56>
	TimerEstimator te = {
			.arr = tlc->rider.arr,
			.psc = tlc->rider.psc,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
	TimerEstimator te = {
 800389c:	60bb      	str	r3, [r7, #8]
			.arr = tlc->rider.arr,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
	TimerEstimator te = {
 80038a2:	60fb      	str	r3, [r7, #12]
	};
    tlc->freq.fps = timer_estimate_freq_toggle(te, tlc->freq.system) / (float)(2 * TLC_N_LEDS); //(float)tlc->freq.system / (float)(2 * TLC_N_LEDS) / (tlc->rider.psc + 1) / tlc->rider.arr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f107 0308 	add.w	r3, r7, #8
 80038ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038b2:	f7ff fe03 	bl	80034bc <timer_estimate_freq_toggle>
 80038b6:	eeb0 7a40 	vmov.f32	s14, s0
 80038ba:	eddf 6a06 	vldr	s13, [pc, #24]	; 80038d4 <tlc_recalculate_fps+0x60>
 80038be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	edc3 7a01 	vstr	s15, [r3, #4]
	return 0;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	42000000 	.word	0x42000000

080038d8 <tlc_set_fps>:

int tlc_set_fps(Tlc *tlc, float val)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	ed87 0a00 	vstr	s0, [r7]
	//tlc_pause(tlc, true);
    TimerEstimator est = {0};
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
    tlc->freq.self = 2.0f * (float)TLC_N_LEDS * val;
 80038ee:	edd7 7a00 	vldr	s15, [r7]
 80038f2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003940 <tlc_set_fps+0x68>
 80038f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	edc3 7a00 	vstr	s15, [r3]
    uint32_t iter = timer_estimate(&est, tlc->freq.system, tlc->freq.self);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	f107 030c 	add.w	r3, r7, #12
 800390e:	eeb0 0a67 	vmov.f32	s0, s15
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fe01 	bl	800351c <timer_estimate>
 800391a:	6178      	str	r0, [r7, #20]
	tlc->rider.psc = est.psc;
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]
	tlc->rider.arr = est.arr;
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
	//tlc->tim->CCR1 = est.arr / 2;
	tlc_recalculate_fps(tlc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ffa3 	bl	8003874 <tlc_recalculate_fps>
	tlc_apply_changes(tlc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f859 	bl	80039e6 <tlc_apply_changes>
	//tlc_pause(tlc, false);
	return 0;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	42000000 	.word	0x42000000

08003944 <tlc_apply_arr_psc>:

void tlc_apply_arr_psc(Tlc *tlc, uint32_t psc, uint32_t arr)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
	if(!tlc) return;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <tlc_apply_arr_psc+0x2c>
	tlc->tim->ARR = arr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	62da      	str	r2, [r3, #44]	; 0x2c
	tlc->tim->PSC = psc;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
	//tlc->tim->CCR1 = TIM2->ARR / 2;
	tlc->tim->CNT = 0;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
 800396e:	e000      	b.n	8003972 <tlc_apply_arr_psc+0x2e>
	if(!tlc) return;
 8003970:	bf00      	nop
}
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <tlc_mode_exit>:

void tlc_mode_exit(Tlc *tlc, TlcModeList except_if)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
	if(!tlc->mode) return;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	2b00      	cmp	r3, #0
 800398e:	d024      	beq.n	80039da <tlc_mode_exit+0x5e>
	if(*tlc->mode == except_if) return;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	429a      	cmp	r2, r3
 800399a:	d020      	beq.n	80039de <tlc_mode_exit+0x62>

	HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_SET); /* high OE = off LEDs */
 800399c:	2201      	movs	r2, #1
 800399e:	2108      	movs	r1, #8
 80039a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a4:	f000 fd62 	bl	800446c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_RESET); /* low LE = don't transfer to latch */
 80039a8:	2200      	movs	r2, #0
 80039aa:	2104      	movs	r1, #4
 80039ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b0:	f000 fd5c 	bl	800446c <HAL_GPIO_WritePin>
	case TLC_MODE__COUNT: {
	} break;
	}
#endif

	*tlc->pwm.on = false;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
	*tlc->pwm.duty_cycle = -1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	601a      	str	r2, [r3, #0]
	*tlc->mode = TLC_MODE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
	tlc_apply_arr_psc(tlc, 0, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffb6 	bl	8003944 <tlc_apply_arr_psc>
 80039d8:	e002      	b.n	80039e0 <tlc_mode_exit+0x64>
	if(!tlc->mode) return;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <tlc_mode_exit+0x64>
	if(*tlc->mode == except_if) return;
 80039de:	bf00      	nop
}
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <tlc_apply_changes>:

void tlc_apply_changes(Tlc *tlc)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	if(!tlc->running || tlc->pause) return;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11e      	bne.n	8003a3c <tlc_apply_changes+0x56>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d119      	bne.n	8003a3c <tlc_apply_changes+0x56>
	if(!tlc->mode) return;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <tlc_apply_changes+0x5a>
	switch(*tlc->mode) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d114      	bne.n	8003a44 <tlc_apply_changes+0x5e>
	case TLC_MODE_RIDER: {
		//tlc_mode_enter(tlc, TLC_MODE_RIDER);
		tlc_pause(tlc, true);
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fea7 	bl	8003770 <tlc_pause>
		tlc_apply_arr_psc(tlc, tlc->rider.psc, tlc->rider.arr);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6919      	ldr	r1, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff89 	bl	8003944 <tlc_apply_arr_psc>
		tlc_pause(tlc, false);
 8003a32:	2100      	movs	r1, #0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe9b 	bl	8003770 <tlc_pause>
	} break;
 8003a3a:	e004      	b.n	8003a46 <tlc_apply_changes+0x60>
	if(!tlc->running || tlc->pause) return;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <tlc_apply_changes+0x60>
	if(!tlc->mode) return;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <tlc_apply_changes+0x60>
	default: {} break;
 8003a44:	bf00      	nop
	}
}
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <tlc_mode_enter>:

void tlc_mode_enter(Tlc *tlc, TlcModeList id)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
	if(*tlc->mode != TLC_MODE_NONE/* && tlc->mode != id*/) return;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d179      	bne.n	8003b56 <tlc_mode_enter+0x10a>
	//HAL_Delay(100);
	switch(id) {
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d86e      	bhi.n	8003b46 <tlc_mode_enter+0xfa>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <tlc_mode_enter+0x24>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003b47 	.word	0x08003b47
 8003a74:	08003ac9 	.word	0x08003ac9
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003b05 	.word	0x08003b05
 8003a80:	08003b39 	.word	0x08003b39
 8003a84:	08003b47 	.word	0x08003b47
	case TLC_MODE_NONE: {
	} break;
	case TLC_MODE_PWM: {
		if(*tlc->pwm.duty_cycle < 0) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da03      	bge.n	8003a9a <tlc_mode_enter+0x4e>
			*tlc->pwm.duty_cycle = 0;	// 0..10 // TODO:init or not??
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
		}
		*tlc->pwm.on = true;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
		tlc_apply_arr_psc(tlc, TLC_CONTROLLING_ALL_PSC, TLC_CONTROLLING_ALL_ARR);
 8003aa2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff4b 	bl	8003944 <tlc_apply_arr_psc>
		//*tlc->raw.le = false;
		//*tlc->raw.oe = false;
		//HAL_Delay(100);
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab6:	f000 fcd9 	bl	800446c <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_RESET); /* low LE = don't transfer to latch */
		HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET); /* low OE = drive LEDs */
 8003aba:	2200      	movs	r2, #0
 8003abc:	2108      	movs	r1, #8
 8003abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ac2:	f000 fcd3 	bl	800446c <HAL_GPIO_WritePin>
	} break;
 8003ac6:	e03e      	b.n	8003b46 <tlc_mode_enter+0xfa>
	case TLC_MODE_RIDER: {
		*tlc->pwm.duty_cycle = -1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	601a      	str	r2, [r3, #0]
		*tlc->pwm.on = false;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
		tlc_apply_arr_psc(tlc, tlc->rider.psc, tlc->rider.arr);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff2d 	bl	8003944 <tlc_apply_arr_psc>
		////*tlc->raw.le = true;
		//HAL_Delay(100);
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
 8003aea:	2201      	movs	r2, #1
 8003aec:	2104      	movs	r1, #4
 8003aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af2:	f000 fcbb 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET); /* low OE = drive LEDs */
 8003af6:	2200      	movs	r2, #0
 8003af8:	2108      	movs	r1, #8
 8003afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afe:	f000 fcb5 	bl	800446c <HAL_GPIO_WritePin>
	} break;
 8003b02:	e020      	b.n	8003b46 <tlc_mode_enter+0xfa>
	case TLC_MODE_DISPLAY: {
		*tlc->pwm.duty_cycle = 0;	// >=0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
		*tlc->pwm.on = false;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
		//memset(tlc->display.data, 0, sizeof(*tlc->display.data) * TLC_N_LEDS); // TODO:init or not??
		tlc_apply_arr_psc(tlc, TLC_CONTROLLING_DATA_PSC, TLC_CONTROLLING_DATA_ARR);
 8003b14:	22c7      	movs	r2, #199	; 0xc7
 8003b16:	2100      	movs	r1, #0
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff13 	bl	8003944 <tlc_apply_arr_psc>
		//*tlc->raw.le = false;
		//*tlc->raw.oe = false;
		//HAL_Delay(100);
		HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_RESET); /* low LE = don't transfer to latch */
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2104      	movs	r1, #4
 8003b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b26:	f000 fca1 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET); /* low OE = drive LEDs */
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2108      	movs	r1, #8
 8003b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b32:	f000 fc9b 	bl	800446c <HAL_GPIO_WritePin>
	} break;
 8003b36:	e006      	b.n	8003b46 <tlc_mode_enter+0xfa>
	case TLC_MODE_CLEAR: {
		tlc_apply_arr_psc(tlc, TLC_CONTROLLING_ALL_PSC, TLC_CONTROLLING_ALL_ARR);
 8003b38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff00 	bl	8003944 <tlc_apply_arr_psc>
	} break;
 8003b44:	bf00      	nop
	case TLC_MODE__COUNT: {} break;
	}
	if(id < TLC_MODE__COUNT) {
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d805      	bhi.n	8003b58 <tlc_mode_enter+0x10c>
		*tlc->mode = id;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e000      	b.n	8003b58 <tlc_mode_enter+0x10c>
	if(*tlc->mode != TLC_MODE_NONE/* && tlc->mode != id*/) return;
 8003b56:	bf00      	nop
	}
}
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop

08003b60 <tlc_mode>:

TlcModeList tlc_mode(Tlc *tlc, TlcModeList mode)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	if(!tlc->mode) return TLC_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <tlc_mode+0x18>
 8003b74:	2300      	movs	r3, #0
 8003b76:	e038      	b.n	8003bea <tlc_mode+0x8a>
	if(*tlc->mode != mode) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d02f      	beq.n	8003be4 <tlc_mode+0x84>
		tlc_pause(tlc, true);
 8003b84:	2101      	movs	r1, #1
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fdf2 	bl	8003770 <tlc_pause>
		tlc_mode_exit(tlc, TLC_MODE_NONE);
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fef4 	bl	800397c <tlc_mode_exit>
		/* make sure the LEDs are cleared */
		bool was_running = tlc->running;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003b9a:	73fb      	strb	r3, [r7, #15]
		tlc_mode_enter(tlc, TLC_MODE_CLEAR);
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff54 	bl	8003a4c <tlc_mode_enter>
		tlc_pause(tlc, false);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fde2 	bl	8003770 <tlc_pause>
		tlc_run(tlc, true);
 8003bac:	2101      	movs	r1, #1
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fe01 	bl	80037b6 <tlc_run>
		while(*tlc->mode != TLC_MODE_NONE);
 8003bb4:	bf00      	nop
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1fa      	bne.n	8003bb6 <tlc_mode+0x56>
		tlc_pause(tlc, true);
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fdd4 	bl	8003770 <tlc_pause>
		tlc_run(tlc, was_running);
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fdf2 	bl	80037b6 <tlc_run>
		/* finally, enter mode */
		tlc_mode_enter(tlc, mode);
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ff38 	bl	8003a4c <tlc_mode_enter>
		tlc_pause(tlc, false);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fdc6 	bl	8003770 <tlc_pause>
	} else {
		//tlc_apply_changes(tlc);
	}
	return *tlc->mode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	781b      	ldrb	r3, [r3, #0]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bf8:	f7ff fc4e 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bfc:	480c      	ldr	r0, [pc, #48]	; (8003c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bfe:	490d      	ldr	r1, [pc, #52]	; (8003c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c00:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <LoopForever+0xe>)
  movs r3, #0
 8003c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c04:	e002      	b.n	8003c0c <LoopCopyDataInit>

08003c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c0a:	3304      	adds	r3, #4

08003c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c10:	d3f9      	bcc.n	8003c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c14:	4c0a      	ldr	r4, [pc, #40]	; (8003c40 <LoopForever+0x16>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c18:	e001      	b.n	8003c1e <LoopFillZerobss>

08003c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c1c:	3204      	adds	r2, #4

08003c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c20:	d3fb      	bcc.n	8003c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c22:	f008 fedd 	bl	800c9e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c26:	f7fe fdaf 	bl	8002788 <main>

08003c2a <LoopForever>:

LoopForever:
    b LoopForever
 8003c2a:	e7fe      	b.n	8003c2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c2c:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8003c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c34:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8003c38:	08011c7c 	.word	0x08011c7c
  ldr r2, =_sbss
 8003c3c:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 8003c40:	2000161c 	.word	0x2000161c

08003c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c44:	e7fe      	b.n	8003c44 <ADC1_IRQHandler>
	...

08003c48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_Init+0x28>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_Init+0x28>)
 8003c52:	f043 0310 	orr.w	r3, r3, #16
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c58:	2003      	movs	r0, #3
 8003c5a:	f000 fa4b 	bl	80040f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5e:	200f      	movs	r0, #15
 8003c60:	f000 f808 	bl	8003c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c64:	f7fe ff84 	bl	8002b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40022000 	.word	0x40022000

08003c74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_InitTick+0x54>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_InitTick+0x58>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa63 	bl	800415e <HAL_SYSTICK_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e00e      	b.n	8003cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b0f      	cmp	r3, #15
 8003ca6:	d80a      	bhi.n	8003cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	f000 fa2b 	bl	800410a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <HAL_InitTick+0x5c>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000002c 	.word	0x2000002c
 8003ccc:	20000034 	.word	0x20000034
 8003cd0:	20000030 	.word	0x20000030

08003cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x20>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000034 	.word	0x20000034
 8003cf8:	20000420 	.word	0x20000420

08003cfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_GetTick+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000420 	.word	0x20000420

08003d14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff ffee 	bl	8003cfc <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d005      	beq.n	8003d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_Delay+0x44>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003d3a:	bf00      	nop
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d8f7      	bhi.n	8003d3c <HAL_Delay+0x28>
  {
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000034 	.word	0x20000034

08003d5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0ed      	b.n	8003f4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fe ff1c 	bl	8002bb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d90:	f7ff ffb4 	bl	8003cfc <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d96:	e012      	b.n	8003dbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d98:	f7ff ffb0 	bl	8003cfc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b0a      	cmp	r3, #10
 8003da4:	d90b      	bls.n	8003dbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2205      	movs	r2, #5
 8003db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0c5      	b.n	8003f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0e5      	beq.n	8003d98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0202 	bic.w	r2, r2, #2
 8003dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ddc:	f7ff ff8e 	bl	8003cfc <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003de2:	e012      	b.n	8003e0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de4:	f7ff ff8a 	bl	8003cfc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b0a      	cmp	r3, #10
 8003df0:	d90b      	bls.n	8003e0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2205      	movs	r2, #5
 8003e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e09f      	b.n	8003f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7e1b      	ldrb	r3, [r3, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d108      	bne.n	8003e32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e007      	b.n	8003e42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	7e5b      	ldrb	r3, [r3, #25]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e007      	b.n	8003e6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7e9b      	ldrb	r3, [r3, #26]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e007      	b.n	8003e96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0220 	bic.w	r2, r2, #32
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7edb      	ldrb	r3, [r3, #27]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0210 	bic.w	r2, r2, #16
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0210 	orr.w	r2, r2, #16
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7f1b      	ldrb	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d108      	bne.n	8003eda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e007      	b.n	8003eea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0208 	bic.w	r2, r2, #8
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7f5b      	ldrb	r3, [r3, #29]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d108      	bne.n	8003f04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0204 	orr.w	r2, r2, #4
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e007      	b.n	8003f14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0204 	bic.w	r2, r2, #4
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <__NVIC_SetPriorityGrouping>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f70:	4013      	ands	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f86:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <__NVIC_SetPriorityGrouping+0x44>)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	60d3      	str	r3, [r2, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_GetPriorityGrouping>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	f003 0307 	and.w	r3, r3, #7
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <__NVIC_EnableIRQ>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db0b      	blt.n	8003fe2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4907      	ldr	r1, [pc, #28]	; (8003ff0 <__NVIC_EnableIRQ+0x38>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2001      	movs	r0, #1
 8003fda:	fa00 f202 	lsl.w	r2, r0, r2
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e100 	.word	0xe000e100

08003ff4 <__NVIC_SetPriority>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db0a      	blt.n	800401e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	490c      	ldr	r1, [pc, #48]	; (8004040 <__NVIC_SetPriority+0x4c>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	0112      	lsls	r2, r2, #4
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	440b      	add	r3, r1
 8004018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800401c:	e00a      	b.n	8004034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4908      	ldr	r1, [pc, #32]	; (8004044 <__NVIC_SetPriority+0x50>)
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	3b04      	subs	r3, #4
 800402c:	0112      	lsls	r2, r2, #4
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	440b      	add	r3, r1
 8004032:	761a      	strb	r2, [r3, #24]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000e100 	.word	0xe000e100
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <NVIC_EncodePriority>:
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f1c3 0307 	rsb	r3, r3, #7
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf28      	it	cs
 8004066:	2304      	movcs	r3, #4
 8004068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3304      	adds	r3, #4
 800406e:	2b06      	cmp	r3, #6
 8004070:	d902      	bls.n	8004078 <NVIC_EncodePriority+0x30>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3b03      	subs	r3, #3
 8004076:	e000      	b.n	800407a <NVIC_EncodePriority+0x32>
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	401a      	ands	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004090:	f04f 31ff 	mov.w	r1, #4294967295
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43d9      	mvns	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a0:	4313      	orrs	r3, r2
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c0:	d301      	bcc.n	80040c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040c2:	2301      	movs	r3, #1
 80040c4:	e00f      	b.n	80040e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <SysTick_Config+0x40>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ce:	210f      	movs	r1, #15
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	f7ff ff8e 	bl	8003ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <SysTick_Config+0x40>)
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <SysTick_Config+0x40>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	e000e010 	.word	0xe000e010

080040f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ff29 	bl	8003f54 <__NVIC_SetPriorityGrouping>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800411c:	f7ff ff3e 	bl	8003f9c <__NVIC_GetPriorityGrouping>
 8004120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	6978      	ldr	r0, [r7, #20]
 8004128:	f7ff ff8e 	bl	8004048 <NVIC_EncodePriority>
 800412c:	4602      	mov	r2, r0
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff5d 	bl	8003ff4 <__NVIC_SetPriority>
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff31 	bl	8003fb8 <__NVIC_EnableIRQ>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ffa2 	bl	80040b0 <SysTick_Config>
 800416c:	4603      	mov	r3, r0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004186:	e154      	b.n	8004432 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8146 	beq.w	800442c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d005      	beq.n	80041b8 <HAL_GPIO_Init+0x40>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d130      	bne.n	800421a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ee:	2201      	movs	r2, #1
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0201 	and.w	r2, r3, #1
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d123      	bne.n	80042aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80a0 	beq.w	800442c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4b58      	ldr	r3, [pc, #352]	; (8004450 <HAL_GPIO_Init+0x2d8>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	4a57      	ldr	r2, [pc, #348]	; (8004450 <HAL_GPIO_Init+0x2d8>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6193      	str	r3, [r2, #24]
 80042f8:	4b55      	ldr	r3, [pc, #340]	; (8004450 <HAL_GPIO_Init+0x2d8>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004304:	4a53      	ldr	r2, [pc, #332]	; (8004454 <HAL_GPIO_Init+0x2dc>)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	220f      	movs	r2, #15
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800432e:	d019      	beq.n	8004364 <HAL_GPIO_Init+0x1ec>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a49      	ldr	r2, [pc, #292]	; (8004458 <HAL_GPIO_Init+0x2e0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_GPIO_Init+0x1e8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a48      	ldr	r2, [pc, #288]	; (800445c <HAL_GPIO_Init+0x2e4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00d      	beq.n	800435c <HAL_GPIO_Init+0x1e4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_GPIO_Init+0x2e8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x1e0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_GPIO_Init+0x2ec>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_GPIO_Init+0x1dc>
 8004350:	2304      	movs	r3, #4
 8004352:	e008      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004354:	2305      	movs	r3, #5
 8004356:	e006      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004358:	2303      	movs	r3, #3
 800435a:	e004      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 800435c:	2302      	movs	r3, #2
 800435e:	e002      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004364:	2300      	movs	r3, #0
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	f002 0203 	and.w	r2, r2, #3
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	4093      	lsls	r3, r2
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004376:	4937      	ldr	r1, [pc, #220]	; (8004454 <HAL_GPIO_Init+0x2dc>)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_GPIO_Init+0x2f0>)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f aea3 	bne.w	8004188 <HAL_GPIO_Init+0x10>
  }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40021000 	.word	0x40021000
 8004454:	40010000 	.word	0x40010000
 8004458:	48000400 	.word	0x48000400
 800445c:	48000800 	.word	0x48000800
 8004460:	48000c00 	.word	0x48000c00
 8004464:	48001000 	.word	0x48001000
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
 8004478:	4613      	mov	r3, r2
 800447a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004488:	e002      	b.n	8004490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f806 	bl	80044cc <HAL_GPIO_EXTI_Callback>
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40010400 	.word	0x40010400

080044cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e4:	b08b      	sub	sp, #44	; 0x2c
 80044e6:	af06      	add	r7, sp, #24
 80044e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0c4      	b.n	800467e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f007 ff73 	bl	800c3f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fe79 	bl	8008212 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	e040      	b.n	80045a8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3301      	adds	r3, #1
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	3303      	adds	r3, #3
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	3338      	adds	r3, #56	; 0x38
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	333c      	adds	r3, #60	; 0x3c
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	3340      	adds	r3, #64	; 0x40
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	3301      	adds	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3b9      	bcc.n	8004526 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	e044      	b.n	8004642 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	440b      	add	r3, r1
 80045f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	440b      	add	r3, r1
 800461e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	3301      	adds	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d3b5      	bcc.n	80045b8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	687e      	ldr	r6, [r7, #4]
 8004654:	466d      	mov	r5, sp
 8004656:	f106 0410 	add.w	r4, r6, #16
 800465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	1d33      	adds	r3, r6, #4
 8004664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004666:	6838      	ldr	r0, [r7, #0]
 8004668:	f003 fdee 	bl	8008248 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004686 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_PCD_Start+0x16>
 8004698:	2302      	movs	r3, #2
 800469a:	e016      	b.n	80046ca <HAL_PCD_Start+0x44>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f003 fd9b 	bl	80081e4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046ae:	2101      	movs	r1, #1
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f008 f957 	bl	800c964 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f006 f85b 	bl	800a776 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f006 f854 	bl	800a78c <USB_ReadInterrupts>
 80046e4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fab2 	bl	8004c5a <PCD_EP_ISR_Handler>

    return;
 80046f6:	e0bd      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	b292      	uxth	r2, r2
 8004716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f007 ff25 	bl	800c56a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004720:	2100      	movs	r1, #0
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8a9 	bl	800487a <HAL_PCD_SetAddress>

    return;
 8004728:	e0a4      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004746:	b292      	uxth	r2, r2
 8004748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800474c:	e092      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	b292      	uxth	r2, r2
 800476c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004770:	e080      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d027      	beq.n	80047cc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	b292      	uxth	r2, r2
 8004790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0208 	bic.w	r2, r2, #8
 80047a6:	b292      	uxth	r2, r2
 80047a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f007 ff15 	bl	800c5dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047c4:	b292      	uxth	r2, r2
 80047c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80047ca:	e053      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d027      	beq.n	8004826 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0208 	orr.w	r2, r2, #8
 80047e8:	b292      	uxth	r2, r2
 80047ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004800:	b292      	uxth	r2, r2
 8004802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0204 	orr.w	r2, r2, #4
 8004818:	b292      	uxth	r2, r2
 800481a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f007 fec2 	bl	800c5a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004824:	e026      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004842:	b292      	uxth	r2, r2
 8004844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f007 fe80 	bl	800c54e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800484e:	e011      	b.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486c:	b292      	uxth	r2, r2
 800486e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004872:	bf00      	nop
  }
}
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_PCD_SetAddress+0x1a>
 8004890:	2302      	movs	r3, #2
 8004892:	e013      	b.n	80048bc <HAL_PCD_SetAddress+0x42>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f005 ff4e 	bl	800a74e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	70fb      	strb	r3, [r7, #3]
 80048d6:	460b      	mov	r3, r1
 80048d8:	803b      	strh	r3, [r7, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da0e      	bge.n	8004908 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	705a      	strb	r2, [r3, #1]
 8004906:	e00e      	b.n	8004926 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004932:	883a      	ldrh	r2, [r7, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	78ba      	ldrb	r2, [r7, #2]
 800493c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800493e:	78bb      	ldrb	r3, [r7, #2]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d102      	bne.n	800494a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_PCD_EP_Open+0x94>
 8004954:	2302      	movs	r3, #2
 8004956:	e00e      	b.n	8004976 <HAL_PCD_EP_Open+0xb2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	f003 fc90 	bl	800828c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004974:	7afb      	ldrb	r3, [r7, #11]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800498a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da0e      	bge.n	80049b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	705a      	strb	r2, [r3, #1]
 80049ae:	e00e      	b.n	80049ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_PCD_EP_Close+0x6a>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e00e      	b.n	8004a06 <HAL_PCD_EP_Close+0x88>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 f80c 	bl	8008a14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f003 0207 	and.w	r2, r3, #7
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f004 f9c4 	bl	8008dee <USB_EPStartXfer>

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	f003 0207 	and.w	r2, r3, #7
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	460b      	mov	r3, r1
 8004aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 f975 	bl	8008dee <USB_EPStartXfer>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 0207 	and.w	r2, r3, #7
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d901      	bls.n	8004b2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e03e      	b.n	8004baa <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da0e      	bge.n	8004b52 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	705a      	strb	r2, [r3, #1]
 8004b50:	e00c      	b.n	8004b6c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_PCD_EP_SetStall+0x7e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e00e      	b.n	8004baa <HAL_PCD_EP_SetStall+0x9c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f005 fcd8 	bl	800a550 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f003 020f 	and.w	r2, r3, #15
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d901      	bls.n	8004bd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e040      	b.n	8004c52 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da0e      	bge.n	8004bf6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	705a      	strb	r2, [r3, #1]
 8004bf4:	e00e      	b.n	8004c14 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	f003 0207 	and.w	r2, r3, #7
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_PCD_EP_ClrStall+0x82>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e00e      	b.n	8004c52 <HAL_PCD_EP_ClrStall+0xa0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f005 fcd5 	bl	800a5f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b096      	sub	sp, #88	; 0x58
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c62:	e3bf      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004c7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 8179 	bne.w	8004f7a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d152      	bne.n	8004d3a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	81fb      	strh	r3, [r7, #14]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3328      	adds	r3, #40	; 0x28
 8004cbc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	441a      	add	r2, r3
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f007 fc0d 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 836b 	beq.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 8366 	bne.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d38:	e354      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d40:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d034      	beq.n	8004dc2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3306      	adds	r3, #6
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f005 fd4e 	bl	800a838 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004da8:	4013      	ands	r3, r2
 8004daa:	823b      	strh	r3, [r7, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	8a3a      	ldrh	r2, [r7, #16]
 8004db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004db6:	b292      	uxth	r2, r2
 8004db8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f007 fb80 	bl	800c4c0 <HAL_PCD_SetupStageCallback>
 8004dc0:	e310      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004dc2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f280 830c 	bge.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004dd8:	4013      	ands	r3, r2
 8004dda:	83fb      	strh	r3, [r7, #30]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	8bfa      	ldrh	r2, [r7, #30]
 8004de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de6:	b292      	uxth	r2, r2
 8004de8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3306      	adds	r3, #6
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d019      	beq.n	8004e52 <PCD_EP_ISR_Handler+0x1f8>
 8004e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d015      	beq.n	8004e52 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f005 fcfe 	bl	800a838 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	441a      	add	r2, r3
 8004e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f007 fb49 	bl	800c4e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 82bd 	bne.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
 8004e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e76:	f000 82b5 	beq.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb0:	d91d      	bls.n	8004eee <PCD_EP_ISR_Handler+0x294>
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <PCD_EP_ISR_Handler+0x272>
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	e026      	b.n	8004f3c <PCD_EP_ISR_Handler+0x2e2>
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <PCD_EP_ISR_Handler+0x2b2>
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e017      	b.n	8004f3c <PCD_EP_ISR_Handler+0x2e2>
 8004f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	647b      	str	r3, [r7, #68]	; 0x44
 8004f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <PCD_EP_ISR_Handler+0x2cc>
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	3301      	adds	r3, #1
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	827b      	strh	r3, [r7, #18]
 8004f4e:	8a7b      	ldrh	r3, [r7, #18]
 8004f50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f54:	827b      	strh	r3, [r7, #18]
 8004f56:	8a7b      	ldrh	r3, [r7, #18]
 8004f58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f5c:	827b      	strh	r3, [r7, #18]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	8a7b      	ldrh	r3, [r7, #18]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
 8004f78:	e234      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f280 80fc 	bge.w	8005190 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fae:	4013      	ands	r3, r2
 8004fb0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fca:	b292      	uxth	r2, r2
 8004fcc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004fce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe6:	7b1b      	ldrb	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d125      	bne.n	8005038 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	3306      	adds	r3, #6
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005014:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8092 	beq.w	8005146 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005028:	6959      	ldr	r1, [r3, #20]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	88da      	ldrh	r2, [r3, #6]
 800502e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005032:	f005 fc01 	bl	800a838 <USB_ReadPMA>
 8005036:	e086      	b.n	8005146 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d10a      	bne.n	8005056 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005040:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005044:	461a      	mov	r2, r3
 8005046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9d9 	bl	8005400 <HAL_PCD_EP_DB_Receive>
 800504e:	4603      	mov	r3, r0
 8005050:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005054:	e077      	b.n	8005146 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d024      	beq.n	80050fe <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	3302      	adds	r3, #2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80050e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02e      	beq.n	8005146 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ee:	6959      	ldr	r1, [r3, #20]
 80050f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f2:	891a      	ldrh	r2, [r3, #8]
 80050f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050f8:	f005 fb9e 	bl	800a838 <USB_ReadPMA>
 80050fc:	e023      	b.n	8005146 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	3306      	adds	r3, #6
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005126:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800512a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005138:	6959      	ldr	r1, [r3, #20]
 800513a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513c:	895a      	ldrh	r2, [r3, #10]
 800513e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005142:	f005 fb79 	bl	800a838 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800514e:	441a      	add	r2, r3
 8005150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005152:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800515c:	441a      	add	r2, r3
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005160:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <PCD_EP_ISR_Handler+0x51c>
 800516a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	429a      	cmp	r2, r3
 8005174:	d206      	bcs.n	8005184 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f007 f9b1 	bl	800c4e4 <HAL_PCD_DataOutStageCallback>
 8005182:	e005      	b.n	8005190 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800518a:	4618      	mov	r0, r3
 800518c:	f003 fe2f 	bl	8008dee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8123 	beq.w	80053e4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800519e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80051ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f040 80a2 	bne.w	800533c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80051f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80051fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8093 	beq.w	800532e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005208:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d046      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d126      	bne.n	800526a <PCD_EP_ISR_Handler+0x610>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522a:	b29b      	uxth	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	4413      	add	r3, r2
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	011a      	lsls	r2, r3, #4
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	4413      	add	r3, r2
 800523e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800524e:	b29a      	uxth	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e061      	b.n	800532e <PCD_EP_ISR_Handler+0x6d4>
 800526a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d15d      	bne.n	800532e <PCD_EP_ISR_Handler+0x6d4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	4413      	add	r3, r2
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	011a      	lsls	r2, r3, #4
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	4413      	add	r3, r2
 8005294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	2200      	movs	r2, #0
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	e045      	b.n	800532e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d126      	bne.n	80052fe <PCD_EP_ISR_Handler+0x6a4>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	4413      	add	r3, r2
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	011a      	lsls	r2, r3, #4
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	e017      	b.n	800532e <PCD_EP_ISR_Handler+0x6d4>
 80052fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d113      	bne.n	800532e <PCD_EP_ISR_Handler+0x6d4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	4413      	add	r3, r2
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	4413      	add	r3, r2
 8005322:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	2200      	movs	r2, #0
 800532c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800532e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f007 f8f0 	bl	800c51a <HAL_PCD_DataInStageCallback>
 800533a:	e053      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800533c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d146      	bne.n	80053d6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	3302      	adds	r3, #2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005370:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800537c:	429a      	cmp	r2, r3
 800537e:	d907      	bls.n	8005390 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8005380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538c:	619a      	str	r2, [r3, #24]
 800538e:	e002      	b.n	8005396 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8005390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005392:	2200      	movs	r2, #0
 8005394:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800539e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f007 f8b8 	bl	800c51a <HAL_PCD_DataInStageCallback>
 80053aa:	e01b      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053b4:	441a      	add	r2, r3
 80053b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80053ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053c2:	441a      	add	r2, r3
 80053c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ce:	4618      	mov	r0, r3
 80053d0:	f003 fd0d 	bl	8008dee <USB_EPStartXfer>
 80053d4:	e006      	b.n	80053e4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80053d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053da:	461a      	mov	r2, r3
 80053dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f91b 	bl	800561a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f6ff ac37 	blt.w	8004c64 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3758      	adds	r7, #88	; 0x58
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d07e      	beq.n	8005516 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	3302      	adds	r3, #2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005440:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	8b7b      	ldrh	r3, [r7, #26]
 8005448:	429a      	cmp	r2, r3
 800544a:	d306      	bcc.n	800545a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	8b7b      	ldrh	r3, [r7, #26]
 8005452:	1ad2      	subs	r2, r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	619a      	str	r2, [r3, #24]
 8005458:	e002      	b.n	8005460 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d123      	bne.n	80054b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	833b      	strh	r3, [r7, #24]
 8005484:	8b3b      	ldrh	r3, [r7, #24]
 8005486:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800548a:	833b      	strh	r3, [r7, #24]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	8b3b      	ldrh	r3, [r7, #24]
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01f      	beq.n	80054fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	82fb      	strh	r3, [r7, #22]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	8afb      	ldrh	r3, [r7, #22]
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054fa:	8b7b      	ldrh	r3, [r7, #26]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8087 	beq.w	8005610 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6959      	ldr	r1, [r3, #20]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	891a      	ldrh	r2, [r3, #8]
 800550e:	8b7b      	ldrh	r3, [r7, #26]
 8005510:	f005 f992 	bl	800a838 <USB_ReadPMA>
 8005514:	e07c      	b.n	8005610 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	3306      	adds	r3, #6
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	429a      	cmp	r2, r3
 8005548:	d306      	bcc.n	8005558 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	619a      	str	r2, [r3, #24]
 8005556:	e002      	b.n	800555e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d123      	bne.n	80055ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	83fb      	strh	r3, [r7, #30]
 8005582:	8bfb      	ldrh	r3, [r7, #30]
 8005584:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005588:	83fb      	strh	r3, [r7, #30]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	8bfb      	ldrh	r3, [r7, #30]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11f      	bne.n	80055f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	83bb      	strh	r3, [r7, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8bbb      	ldrh	r3, [r7, #28]
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055f8:	8b7b      	ldrh	r3, [r7, #26]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6959      	ldr	r1, [r3, #20]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	895a      	ldrh	r2, [r3, #10]
 800560a:	8b7b      	ldrh	r3, [r7, #26]
 800560c:	f005 f914 	bl	800a838 <USB_ReadPMA>
    }
  }

  return count;
 8005610:	8b7b      	ldrh	r3, [r7, #26]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b0a4      	sub	sp, #144	; 0x90
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	4613      	mov	r3, r2
 8005626:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 81dd 	beq.w	80059ee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	3302      	adds	r3, #2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005668:	429a      	cmp	r2, r3
 800566a:	d907      	bls.n	800567c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005674:	1ad2      	subs	r2, r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	619a      	str	r2, [r3, #24]
 800567a:	e002      	b.n	8005682 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 80b9 	bne.w	80057fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d126      	bne.n	80056e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	4413      	add	r3, r2
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	011a      	lsls	r2, r3, #4
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	4413      	add	r3, r2
 80056b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e01a      	b.n	8005718 <HAL_PCD_EP_DB_Transmit+0xfe>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d116      	bne.n	8005718 <HAL_PCD_EP_DB_Transmit+0xfe>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fe:	4413      	add	r3, r2
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	011a      	lsls	r2, r3, #4
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	4413      	add	r3, r2
 800570c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2200      	movs	r2, #0
 8005716:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d126      	bne.n	8005774 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	011a      	lsls	r2, r3, #4
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005758:	b29a      	uxth	r2, r3
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e017      	b.n	80057a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d113      	bne.n	80057a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	4413      	add	r3, r2
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	011a      	lsls	r2, r3, #4
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	4413      	add	r3, r2
 8005798:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2200      	movs	r2, #0
 80057a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f006 feb5 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 82fc 	beq.w	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	82fb      	strh	r3, [r7, #22]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	8afb      	ldrh	r3, [r7, #22]
 80057e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8013      	strh	r3, [r2, #0]
 80057fc:	e2da      	b.n	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d021      	beq.n	800584c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005852:	2b01      	cmp	r3, #1
 8005854:	f040 82ae 	bne.w	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005860:	441a      	add	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800586e:	441a      	add	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	429a      	cmp	r2, r3
 800587e:	d30b      	bcc.n	8005898 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	621a      	str	r2, [r3, #32]
 8005896:	e017      	b.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80058a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80058a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058b0:	e00a      	b.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d165      	bne.n	800599c <HAL_PCD_EP_DB_Transmit+0x382>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e4:	4413      	add	r3, r2
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f0:	4413      	add	r3, r2
 80058f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005902:	b29a      	uxth	r2, r3
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	801a      	strh	r2, [r3, #0]
 8005908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800590c:	2b3e      	cmp	r3, #62	; 0x3e
 800590e:	d91d      	bls.n	800594c <HAL_PCD_EP_DB_Transmit+0x332>
 8005910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
 8005918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <HAL_PCD_EP_DB_Transmit+0x310>
 8005924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005926:	3b01      	subs	r3, #1
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29a      	uxth	r2, r3
 8005930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	4313      	orrs	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005944:	b29a      	uxth	r2, r3
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e044      	b.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800594c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_PCD_EP_DB_Transmit+0x350>
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005962:	b29a      	uxth	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e035      	b.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800596a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	64bb      	str	r3, [r7, #72]	; 0x48
 8005972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_PCD_EP_DB_Transmit+0x36a>
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005980:	3301      	adds	r3, #1
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598c:	b29b      	uxth	r3, r3
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	b29b      	uxth	r3, r3
 8005992:	4313      	orrs	r3, r2
 8005994:	b29a      	uxth	r2, r3
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e01c      	b.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d118      	bne.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	647b      	str	r3, [r7, #68]	; 0x44
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	4413      	add	r3, r2
 80059ba:	647b      	str	r3, [r7, #68]	; 0x44
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c4:	4413      	add	r3, r2
 80059c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6959      	ldr	r1, [r3, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	891a      	ldrh	r2, [r3, #8]
 80059e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f004 fee0 	bl	800a7ac <USB_WritePMA>
 80059ec:	e1e2      	b.n	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	3306      	adds	r3, #6
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d307      	bcc.n	8005a36 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	619a      	str	r2, [r3, #24]
 8005a34:	e002      	b.n	8005a3c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 80c0 	bne.w	8005bc6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d126      	bne.n	8005a9c <HAL_PCD_EP_DB_Transmit+0x482>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a62:	4413      	add	r3, r2
 8005a64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e01a      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d116      	bne.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab8:	4413      	add	r3, r2
 8005aba:	667b      	str	r3, [r7, #100]	; 0x64
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aca:	663b      	str	r3, [r7, #96]	; 0x60
 8005acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ace:	2200      	movs	r2, #0
 8005ad0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d12b      	bne.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	4413      	add	r3, r2
 8005af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e017      	b.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d113      	bne.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b4e:	4413      	add	r3, r2
 8005b50:	677b      	str	r3, [r7, #116]	; 0x74
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	011a      	lsls	r2, r3, #4
 8005b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b60:	673b      	str	r3, [r7, #112]	; 0x70
 8005b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b64:	2200      	movs	r2, #0
 8005b66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f006 fcd3 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 811a 	bne.w	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
 8005bc4:	e0f6      	b.n	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d121      	bne.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	f040 80ca 	bne.w	8005db4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c28:	441a      	add	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c36:	441a      	add	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6a1a      	ldr	r2, [r3, #32]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d30b      	bcc.n	8005c60 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	621a      	str	r2, [r3, #32]
 8005c5e:	e017      	b.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005c68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c78:	e00a      	b.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	657b      	str	r3, [r7, #84]	; 0x54
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d165      	bne.n	8005d6a <HAL_PCD_EP_DB_Transmit+0x750>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb2:	4413      	add	r3, r2
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	011a      	lsls	r2, r3, #4
 8005cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cda:	2b3e      	cmp	r3, #62	; 0x3e
 8005cdc:	d91d      	bls.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x700>
 8005cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e041      	b.n	8005d9e <HAL_PCD_EP_DB_Transmit+0x784>
 8005d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e032      	b.n	8005d9e <HAL_PCD_EP_DB_Transmit+0x784>
 8005d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_PCD_EP_DB_Transmit+0x738>
 8005d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d4e:	3301      	adds	r3, #1
 8005d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4313      	orrs	r3, r2
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e019      	b.n	8005d9e <HAL_PCD_EP_DB_Transmit+0x784>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d115      	bne.n	8005d9e <HAL_PCD_EP_DB_Transmit+0x784>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d80:	4413      	add	r3, r2
 8005d82:	657b      	str	r3, [r7, #84]	; 0x54
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d92:	653b      	str	r3, [r7, #80]	; 0x50
 8005d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	895a      	ldrh	r2, [r3, #10]
 8005daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f004 fcfc 	bl	800a7ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dce:	82bb      	strh	r3, [r7, #20]
 8005dd0:	8abb      	ldrh	r3, [r7, #20]
 8005dd2:	f083 0310 	eor.w	r3, r3, #16
 8005dd6:	82bb      	strh	r3, [r7, #20]
 8005dd8:	8abb      	ldrh	r3, [r7, #20]
 8005dda:	f083 0320 	eor.w	r3, r3, #32
 8005dde:	82bb      	strh	r3, [r7, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	8abb      	ldrh	r3, [r7, #20]
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3790      	adds	r7, #144	; 0x90
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	817b      	strh	r3, [r7, #10]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e20:	897b      	ldrh	r3, [r7, #10]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2c:	897b      	ldrh	r3, [r7, #10]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e009      	b.n	8005e58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e44:	897a      	ldrh	r2, [r7, #10]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	80da      	strh	r2, [r3, #6]
 8005e6c:	e00b      	b.n	8005e86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2201      	movs	r2, #1
 8005e72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ea4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f001 b823 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 817d 	beq.w	80061ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ed0:	4bbc      	ldr	r3, [pc, #752]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d00c      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005edc:	4bb9      	ldr	r3, [pc, #740]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 030c 	and.w	r3, r3, #12
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d15c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x10e>
 8005ee8:	4bb6      	ldr	r3, [pc, #728]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d155      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x10e>
 8005ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005efa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005f02:	fa93 f3a3 	rbit	r3, r3
 8005f06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_RCC_OscConfig+0x94>
 8005f22:	4ba8      	ldr	r3, [pc, #672]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	e015      	b.n	8005f54 <HAL_RCC_OscConfig+0xc0>
 8005f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005f34:	fa93 f3a3 	rbit	r3, r3
 8005f38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005f44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005f48:	fa93 f3a3 	rbit	r3, r3
 8005f4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005f50:	4b9c      	ldr	r3, [pc, #624]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005f5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005f60:	fa92 f2a2 	rbit	r2, r2
 8005f64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005f68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005f6c:	fab2 f282 	clz	r2, r2
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	f042 0220 	orr.w	r2, r2, #32
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	f002 021f 	and.w	r2, r2, #31
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 811f 	beq.w	80061c8 <HAL_RCC_OscConfig+0x334>
 8005f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 8116 	bne.w	80061c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f000 bfaf 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb2:	d106      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x12e>
 8005fb4:	4b83      	ldr	r3, [pc, #524]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a82      	ldr	r2, [pc, #520]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e036      	b.n	8006030 <HAL_RCC_OscConfig+0x19c>
 8005fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x158>
 8005fd2:	4b7c      	ldr	r3, [pc, #496]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a7b      	ldr	r2, [pc, #492]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b79      	ldr	r3, [pc, #484]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a78      	ldr	r2, [pc, #480]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8005fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e021      	b.n	8006030 <HAL_RCC_OscConfig+0x19c>
 8005fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCC_OscConfig+0x184>
 8005ffe:	4b71      	ldr	r3, [pc, #452]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a70      	ldr	r2, [pc, #448]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	4b6e      	ldr	r3, [pc, #440]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6d      	ldr	r2, [pc, #436]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e00b      	b.n	8006030 <HAL_RCC_OscConfig+0x19c>
 8006018:	4b6a      	ldr	r3, [pc, #424]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a69      	ldr	r2, [pc, #420]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800601e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b67      	ldr	r3, [pc, #412]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a66      	ldr	r2, [pc, #408]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800602a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006030:	4b64      	ldr	r3, [pc, #400]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f023 020f 	bic.w	r2, r3, #15
 8006038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	495f      	ldr	r1, [pc, #380]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 8006046:	4313      	orrs	r3, r2
 8006048:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800604a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d059      	beq.n	800610e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605a:	f7fd fe4f 	bl	8003cfc <HAL_GetTick>
 800605e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006064:	f7fd fe4a 	bl	8003cfc <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b64      	cmp	r3, #100	; 0x64
 8006072:	d902      	bls.n	800607a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	f000 bf43 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 800607a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800607e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006086:	fa93 f3a3 	rbit	r3, r3
 800608a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800608e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	fab3 f383 	clz	r3, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d102      	bne.n	80060ac <HAL_RCC_OscConfig+0x218>
 80060a6:	4b47      	ldr	r3, [pc, #284]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	e015      	b.n	80060d8 <HAL_RCC_OscConfig+0x244>
 80060ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80060b8:	fa93 f3a3 	rbit	r3, r3
 80060bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80060c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80060c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80060cc:	fa93 f3a3 	rbit	r3, r3
 80060d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80060d4:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80060e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80060e4:	fa92 f2a2 	rbit	r2, r2
 80060e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80060ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80060f0:	fab2 f282 	clz	r2, r2
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	f042 0220 	orr.w	r2, r2, #32
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	f002 021f 	and.w	r2, r2, #31
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f202 	lsl.w	r2, r1, r2
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ab      	beq.n	8006064 <HAL_RCC_OscConfig+0x1d0>
 800610c:	e05d      	b.n	80061ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fd fdf5 	bl	8003cfc <HAL_GetTick>
 8006112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006116:	e00a      	b.n	800612e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006118:	f7fd fdf0 	bl	8003cfc <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b64      	cmp	r3, #100	; 0x64
 8006126:	d902      	bls.n	800612e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	f000 bee9 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 800612e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006132:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006136:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800613a:	fa93 f3a3 	rbit	r3, r3
 800613e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006142:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d102      	bne.n	8006160 <HAL_RCC_OscConfig+0x2cc>
 800615a:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	e015      	b.n	800618c <HAL_RCC_OscConfig+0x2f8>
 8006160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006164:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006168:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800616c:	fa93 f3a3 	rbit	r3, r3
 8006170:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006178:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800617c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006188:	4b0e      	ldr	r3, [pc, #56]	; (80061c4 <HAL_RCC_OscConfig+0x330>)
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006190:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006194:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006198:	fa92 f2a2 	rbit	r2, r2
 800619c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80061a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	f042 0220 	orr.w	r2, r2, #32
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f002 021f 	and.w	r2, r2, #31
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ab      	bne.n	8006118 <HAL_RCC_OscConfig+0x284>
 80061c0:	e003      	b.n	80061ca <HAL_RCC_OscConfig+0x336>
 80061c2:	bf00      	nop
 80061c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 817d 	beq.w	80064da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80061e0:	4ba6      	ldr	r3, [pc, #664]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80061ec:	4ba3      	ldr	r3, [pc, #652]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d172      	bne.n	80062de <HAL_RCC_OscConfig+0x44a>
 80061f8:	4ba0      	ldr	r3, [pc, #640]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d16c      	bne.n	80062de <HAL_RCC_OscConfig+0x44a>
 8006204:	2302      	movs	r3, #2
 8006206:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800620e:	fa93 f3a3 	rbit	r3, r3
 8006212:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006216:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_RCC_OscConfig+0x3a0>
 800622e:	4b93      	ldr	r3, [pc, #588]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	e013      	b.n	800625c <HAL_RCC_OscConfig+0x3c8>
 8006234:	2302      	movs	r3, #2
 8006236:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800623e:	fa93 f3a3 	rbit	r3, r3
 8006242:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006246:	2302      	movs	r3, #2
 8006248:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800624c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006258:	4b88      	ldr	r3, [pc, #544]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2202      	movs	r2, #2
 800625e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006262:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006266:	fa92 f2a2 	rbit	r2, r2
 800626a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800626e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006272:	fab2 f282 	clz	r2, r2
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	f042 0220 	orr.w	r2, r2, #32
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	f002 021f 	and.w	r2, r2, #31
 8006282:	2101      	movs	r1, #1
 8006284:	fa01 f202 	lsl.w	r2, r1, r2
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCC_OscConfig+0x410>
 800628e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f000 be2e 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	4b75      	ldr	r3, [pc, #468]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	21f8      	movs	r1, #248	; 0xf8
 80062ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80062c2:	fa91 f1a1 	rbit	r1, r1
 80062c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80062ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80062ce:	fab1 f181 	clz	r1, r1
 80062d2:	b2c9      	uxtb	r1, r1
 80062d4:	408b      	lsls	r3, r1
 80062d6:	4969      	ldr	r1, [pc, #420]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062dc:	e0fd      	b.n	80064da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8088 	beq.w	8006400 <HAL_RCC_OscConfig+0x56c>
 80062f0:	2301      	movs	r3, #1
 80062f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80062fa:	fa93 f3a3 	rbit	r3, r3
 80062fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006302:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	461a      	mov	r2, r3
 8006318:	2301      	movs	r3, #1
 800631a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631c:	f7fd fcee 	bl	8003cfc <HAL_GetTick>
 8006320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	e00a      	b.n	800633c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006326:	f7fd fce9 	bl	8003cfc <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d902      	bls.n	800633c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	f000 bde2 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 800633c:	2302      	movs	r3, #2
 800633e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006346:	fa93 f3a3 	rbit	r3, r3
 800634a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800634e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006352:	fab3 f383 	clz	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d102      	bne.n	800636c <HAL_RCC_OscConfig+0x4d8>
 8006366:	4b45      	ldr	r3, [pc, #276]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	e013      	b.n	8006394 <HAL_RCC_OscConfig+0x500>
 800636c:	2302      	movs	r3, #2
 800636e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800637e:	2302      	movs	r3, #2
 8006380:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006384:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006388:	fa93 f3a3 	rbit	r3, r3
 800638c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006390:	4b3a      	ldr	r3, [pc, #232]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2202      	movs	r2, #2
 8006396:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800639a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800639e:	fa92 f2a2 	rbit	r2, r2
 80063a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80063a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80063aa:	fab2 f282 	clz	r2, r2
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	f042 0220 	orr.w	r2, r2, #32
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	f002 021f 	and.w	r2, r2, #31
 80063ba:	2101      	movs	r1, #1
 80063bc:	fa01 f202 	lsl.w	r2, r1, r2
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0af      	beq.n	8006326 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	21f8      	movs	r1, #248	; 0xf8
 80063dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80063e4:	fa91 f1a1 	rbit	r1, r1
 80063e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80063ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80063f0:	fab1 f181 	clz	r1, r1
 80063f4:	b2c9      	uxtb	r1, r1
 80063f6:	408b      	lsls	r3, r1
 80063f8:	4920      	ldr	r1, [pc, #128]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
 80063fe:	e06c      	b.n	80064da <HAL_RCC_OscConfig+0x646>
 8006400:	2301      	movs	r3, #1
 8006402:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006406:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006416:	fab3 f383 	clz	r3, r3
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fd fc66 	bl	8003cfc <HAL_GetTick>
 8006430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fd fc61 	bl	8003cfc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d902      	bls.n	800644c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	f000 bd5a 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 800644c:	2302      	movs	r3, #2
 800644e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006456:	fa93 f3a3 	rbit	r3, r3
 800645a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006462:	fab3 f383 	clz	r3, r3
 8006466:	b2db      	uxtb	r3, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d104      	bne.n	8006480 <HAL_RCC_OscConfig+0x5ec>
 8006476:	4b01      	ldr	r3, [pc, #4]	; (800647c <HAL_RCC_OscConfig+0x5e8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	e015      	b.n	80064a8 <HAL_RCC_OscConfig+0x614>
 800647c:	40021000 	.word	0x40021000
 8006480:	2302      	movs	r3, #2
 8006482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006492:	2302      	movs	r3, #2
 8006494:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006498:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800649c:	fa93 f3a3 	rbit	r3, r3
 80064a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80064a4:	4bc8      	ldr	r3, [pc, #800]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2202      	movs	r2, #2
 80064aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80064ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80064b2:	fa92 f2a2 	rbit	r2, r2
 80064b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80064ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80064be:	fab2 f282 	clz	r2, r2
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	f042 0220 	orr.w	r2, r2, #32
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	f002 021f 	and.w	r2, r2, #31
 80064ce:	2101      	movs	r1, #1
 80064d0:	fa01 f202 	lsl.w	r2, r1, r2
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ad      	bne.n	8006436 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8110 	beq.w	8006710 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d079      	beq.n	80065f4 <HAL_RCC_OscConfig+0x760>
 8006500:	2301      	movs	r3, #1
 8006502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006506:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800650a:	fa93 f3a3 	rbit	r3, r3
 800650e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006516:	fab3 f383 	clz	r3, r3
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	4bab      	ldr	r3, [pc, #684]	; (80067cc <HAL_RCC_OscConfig+0x938>)
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	461a      	mov	r2, r3
 8006526:	2301      	movs	r3, #1
 8006528:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652a:	f7fd fbe7 	bl	8003cfc <HAL_GetTick>
 800652e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006534:	f7fd fbe2 	bl	8003cfc <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d902      	bls.n	800654a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	f000 bcdb 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 800654a:	2302      	movs	r3, #2
 800654c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006550:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006554:	fa93 f3a3 	rbit	r3, r3
 8006558:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800655c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006560:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006564:	2202      	movs	r2, #2
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800656c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	fa93 f2a3 	rbit	r2, r3
 8006576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006588:	2202      	movs	r2, #2
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	fa93 f2a3 	rbit	r2, r3
 800659a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800659e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 80065a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065b0:	2102      	movs	r1, #2
 80065b2:	6019      	str	r1, [r3, #0]
 80065b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	fa93 f1a3 	rbit	r1, r3
 80065c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065ca:	6019      	str	r1, [r3, #0]
  return result;
 80065cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	fab3 f383 	clz	r3, r3
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2101      	movs	r1, #1
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0a0      	beq.n	8006534 <HAL_RCC_OscConfig+0x6a0>
 80065f2:	e08d      	b.n	8006710 <HAL_RCC_OscConfig+0x87c>
 80065f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006604:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	fa93 f2a3 	rbit	r2, r3
 800660e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006612:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006616:	601a      	str	r2, [r3, #0]
  return result;
 8006618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800661c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006620:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006622:	fab3 f383 	clz	r3, r3
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	4b68      	ldr	r3, [pc, #416]	; (80067cc <HAL_RCC_OscConfig+0x938>)
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	461a      	mov	r2, r3
 8006632:	2300      	movs	r3, #0
 8006634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006636:	f7fd fb61 	bl	8003cfc <HAL_GetTick>
 800663a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800663e:	e00a      	b.n	8006656 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006640:	f7fd fb5c 	bl	8003cfc <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	f000 bc55 	b.w	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800665a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800665e:	2202      	movs	r2, #2
 8006660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006666:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	fa93 f2a3 	rbit	r2, r3
 8006670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006674:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800667e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006682:	2202      	movs	r2, #2
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800668a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	fa93 f2a3 	rbit	r2, r3
 8006694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a6:	2202      	movs	r2, #2
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	fa93 f2a3 	rbit	r2, r3
 80066b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80066c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c2:	4b41      	ldr	r3, [pc, #260]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 80066c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80066ce:	2102      	movs	r1, #2
 80066d0:	6019      	str	r1, [r3, #0]
 80066d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	fa93 f1a3 	rbit	r1, r3
 80066e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80066e8:	6019      	str	r1, [r3, #0]
  return result;
 80066ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	fab3 f383 	clz	r3, r3
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d197      	bne.n	8006640 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 81a1 	beq.w	8006a68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672c:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d116      	bne.n	8006766 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006742:	61d3      	str	r3, [r2, #28]
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800674c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006750:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800675a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800675e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <HAL_RCC_OscConfig+0x93c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d11a      	bne.n	80067a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006772:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <HAL_RCC_OscConfig+0x93c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <HAL_RCC_OscConfig+0x93c>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800677e:	f7fd fabd 	bl	8003cfc <HAL_GetTick>
 8006782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006786:	e009      	b.n	800679c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006788:	f7fd fab8 	bl	8003cfc <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b64      	cmp	r3, #100	; 0x64
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e3b1      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_RCC_OscConfig+0x93c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ef      	beq.n	8006788 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10d      	bne.n	80067d4 <HAL_RCC_OscConfig+0x940>
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	4a02      	ldr	r2, [pc, #8]	; (80067c8 <HAL_RCC_OscConfig+0x934>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	6213      	str	r3, [r2, #32]
 80067c4:	e03c      	b.n	8006840 <HAL_RCC_OscConfig+0x9ac>
 80067c6:	bf00      	nop
 80067c8:	40021000 	.word	0x40021000
 80067cc:	10908120 	.word	0x10908120
 80067d0:	40007000 	.word	0x40007000
 80067d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10c      	bne.n	80067fe <HAL_RCC_OscConfig+0x96a>
 80067e4:	4bc1      	ldr	r3, [pc, #772]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	4ac0      	ldr	r2, [pc, #768]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	6213      	str	r3, [r2, #32]
 80067f0:	4bbe      	ldr	r3, [pc, #760]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	4abd      	ldr	r2, [pc, #756]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80067f6:	f023 0304 	bic.w	r3, r3, #4
 80067fa:	6213      	str	r3, [r2, #32]
 80067fc:	e020      	b.n	8006840 <HAL_RCC_OscConfig+0x9ac>
 80067fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2b05      	cmp	r3, #5
 800680c:	d10c      	bne.n	8006828 <HAL_RCC_OscConfig+0x994>
 800680e:	4bb7      	ldr	r3, [pc, #732]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4ab6      	ldr	r2, [pc, #728]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006814:	f043 0304 	orr.w	r3, r3, #4
 8006818:	6213      	str	r3, [r2, #32]
 800681a:	4bb4      	ldr	r3, [pc, #720]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	4ab3      	ldr	r2, [pc, #716]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6213      	str	r3, [r2, #32]
 8006826:	e00b      	b.n	8006840 <HAL_RCC_OscConfig+0x9ac>
 8006828:	4bb0      	ldr	r3, [pc, #704]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	4aaf      	ldr	r2, [pc, #700]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	6213      	str	r3, [r2, #32]
 8006834:	4bad      	ldr	r3, [pc, #692]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	4aac      	ldr	r2, [pc, #688]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 800683a:	f023 0304 	bic.w	r3, r3, #4
 800683e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8081 	beq.w	8006954 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006852:	f7fd fa53 	bl	8003cfc <HAL_GetTick>
 8006856:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800685c:	f7fd fa4e 	bl	8003cfc <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	; 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e345      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800687c:	2202      	movs	r2, #2
 800687e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006884:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	fa93 f2a3 	rbit	r2, r3
 800688e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006892:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800689c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068a0:	2202      	movs	r2, #2
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	fa93 f2a3 	rbit	r2, r3
 80068b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80068ba:	601a      	str	r2, [r3, #0]
  return result;
 80068bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80068c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	fab3 f383 	clz	r3, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d102      	bne.n	80068e0 <HAL_RCC_OscConfig+0xa4c>
 80068da:	4b84      	ldr	r3, [pc, #528]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	e013      	b.n	8006908 <HAL_RCC_OscConfig+0xa74>
 80068e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80068e8:	2202      	movs	r2, #2
 80068ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	fa93 f2a3 	rbit	r2, r3
 80068fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	4b79      	ldr	r3, [pc, #484]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800690c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006910:	2102      	movs	r1, #2
 8006912:	6011      	str	r1, [r2, #0]
 8006914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006918:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	fa92 f1a2 	rbit	r1, r2
 8006922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006926:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800692a:	6011      	str	r1, [r2, #0]
  return result;
 800692c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006930:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	fab2 f282 	clz	r2, r2
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	f002 021f 	and.w	r2, r2, #31
 8006946:	2101      	movs	r1, #1
 8006948:	fa01 f202 	lsl.w	r2, r1, r2
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d084      	beq.n	800685c <HAL_RCC_OscConfig+0x9c8>
 8006952:	e07f      	b.n	8006a54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006954:	f7fd f9d2 	bl	8003cfc <HAL_GetTick>
 8006958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800695c:	e00b      	b.n	8006976 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fd f9cd 	bl	8003cfc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	f241 3288 	movw	r2, #5000	; 0x1388
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e2c4      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800697a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800697e:	2202      	movs	r2, #2
 8006980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006986:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	fa93 f2a3 	rbit	r2, r3
 8006990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006994:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800699e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80069a2:	2202      	movs	r2, #2
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	fa93 f2a3 	rbit	r2, r3
 80069b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80069bc:	601a      	str	r2, [r3, #0]
  return result;
 80069be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80069c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c8:	fab3 f383 	clz	r3, r3
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f043 0302 	orr.w	r3, r3, #2
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d102      	bne.n	80069e2 <HAL_RCC_OscConfig+0xb4e>
 80069dc:	4b43      	ldr	r3, [pc, #268]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	e013      	b.n	8006a0a <HAL_RCC_OscConfig+0xb76>
 80069e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80069ea:	2202      	movs	r2, #2
 80069ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	fa93 f2a3 	rbit	r2, r3
 80069fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4b39      	ldr	r3, [pc, #228]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a12:	2102      	movs	r1, #2
 8006a14:	6011      	str	r1, [r2, #0]
 8006a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	fa92 f1a2 	rbit	r1, r2
 8006a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a2c:	6011      	str	r1, [r2, #0]
  return result;
 8006a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	fab2 f282 	clz	r2, r2
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	f002 021f 	and.w	r2, r2, #31
 8006a48:	2101      	movs	r1, #1
 8006a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d184      	bne.n	800695e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5c:	4b23      	ldr	r3, [pc, #140]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8242 	beq.w	8006efe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <HAL_RCC_OscConfig+0xc58>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	f000 8213 	beq.w	8006eae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	f040 8162 	bne.w	8006d5e <HAL_RCC_OscConfig+0xeca>
 8006a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006aa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	fa93 f2a3 	rbit	r2, r3
 8006ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006abe:	601a      	str	r2, [r3, #0]
  return result;
 8006ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ac4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006ac8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aca:	fab3 f383 	clz	r3, r3
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ad4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	461a      	mov	r2, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fd f90c 	bl	8003cfc <HAL_GetTick>
 8006ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ae8:	e00c      	b.n	8006b04 <HAL_RCC_OscConfig+0xc70>
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af0:	f7fd f904 	bl	8003cfc <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e1fd      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	fa93 f2a3 	rbit	r2, r3
 8006b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006b28:	601a      	str	r2, [r3, #0]
  return result;
 8006b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006b32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b34:	fab3 f383 	clz	r3, r3
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d102      	bne.n	8006b4e <HAL_RCC_OscConfig+0xcba>
 8006b48:	4bb0      	ldr	r3, [pc, #704]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	e027      	b.n	8006b9e <HAL_RCC_OscConfig+0xd0a>
 8006b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	fa93 f2a3 	rbit	r2, r3
 8006b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	fa93 f2a3 	rbit	r2, r3
 8006b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4b9c      	ldr	r3, [pc, #624]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ba2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006ba6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006baa:	6011      	str	r1, [r2, #0]
 8006bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bb0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	fa92 f1a2 	rbit	r1, r2
 8006bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006bc2:	6011      	str	r1, [r2, #0]
  return result;
 8006bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	fab2 f282 	clz	r2, r2
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	f042 0220 	orr.w	r2, r2, #32
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	f002 021f 	and.w	r2, r2, #31
 8006bde:	2101      	movs	r1, #1
 8006be0:	fa01 f202 	lsl.w	r2, r1, r2
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d182      	bne.n	8006af0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bea:	4b88      	ldr	r3, [pc, #544]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	497f      	ldr	r1, [pc, #508]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	604b      	str	r3, [r1, #4]
 8006c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	fa93 f2a3 	rbit	r2, r3
 8006c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006c36:	601a      	str	r2, [r3, #0]
  return result;
 8006c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006c40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c42:	fab3 f383 	clz	r3, r3
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	461a      	mov	r2, r3
 8006c54:	2301      	movs	r3, #1
 8006c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fd f850 	bl	8003cfc <HAL_GetTick>
 8006c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c60:	e009      	b.n	8006c76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c62:	f7fd f84b 	bl	8003cfc <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e144      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	fa93 f2a3 	rbit	r2, r3
 8006c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c9a:	601a      	str	r2, [r3, #0]
  return result;
 8006c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ca0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006ca4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ca6:	fab3 f383 	clz	r3, r3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d102      	bne.n	8006cc0 <HAL_RCC_OscConfig+0xe2c>
 8006cba:	4b54      	ldr	r3, [pc, #336]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	e027      	b.n	8006d10 <HAL_RCC_OscConfig+0xe7c>
 8006cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	fa93 f2a3 	rbit	r2, r3
 8006cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ce0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	fa93 f2a3 	rbit	r2, r3
 8006d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	4b3f      	ldr	r3, [pc, #252]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d1c:	6011      	str	r1, [r2, #0]
 8006d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	fa92 f1a2 	rbit	r1, r2
 8006d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006d34:	6011      	str	r1, [r2, #0]
  return result;
 8006d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	fab2 f282 	clz	r2, r2
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	f042 0220 	orr.w	r2, r2, #32
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	f002 021f 	and.w	r2, r2, #31
 8006d50:	2101      	movs	r1, #1
 8006d52:	fa01 f202 	lsl.w	r2, r1, r2
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d082      	beq.n	8006c62 <HAL_RCC_OscConfig+0xdce>
 8006d5c:	e0cf      	b.n	8006efe <HAL_RCC_OscConfig+0x106a>
 8006d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006d66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	fa93 f2a3 	rbit	r2, r3
 8006d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d82:	601a      	str	r2, [r3, #0]
  return result;
 8006d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8e:	fab3 f383 	clz	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da4:	f7fc ffaa 	bl	8003cfc <HAL_GetTick>
 8006da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dac:	e009      	b.n	8006dc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dae:	f7fc ffa5 	bl	8003cfc <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e09e      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
 8006dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	fa93 f2a3 	rbit	r2, r3
 8006dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006de6:	601a      	str	r2, [r3, #0]
  return result;
 8006de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006df0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df2:	fab3 f383 	clz	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d104      	bne.n	8006e10 <HAL_RCC_OscConfig+0xf7c>
 8006e06:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <HAL_RCC_OscConfig+0xf78>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	e029      	b.n	8006e60 <HAL_RCC_OscConfig+0xfcc>
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	fa93 f2a3 	rbit	r2, r3
 8006e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	fa93 f2a3 	rbit	r2, r3
 8006e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	4b2b      	ldr	r3, [pc, #172]	; (8006f0c <HAL_RCC_OscConfig+0x1078>)
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006e68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e6c:	6011      	str	r1, [r2, #0]
 8006e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	fa92 f1a2 	rbit	r1, r2
 8006e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e84:	6011      	str	r1, [r2, #0]
  return result;
 8006e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	fab2 f282 	clz	r2, r2
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	f042 0220 	orr.w	r2, r2, #32
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	f002 021f 	and.w	r2, r2, #31
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d180      	bne.n	8006dae <HAL_RCC_OscConfig+0xf1a>
 8006eac:	e027      	b.n	8006efe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e01e      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <HAL_RCC_OscConfig+0x1078>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006eca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006ece:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d10b      	bne.n	8006efa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006ee2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d001      	beq.n	8006efe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000

08006f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b09e      	sub	sp, #120	; 0x78
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e162      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f28:	4b90      	ldr	r3, [pc, #576]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d910      	bls.n	8006f58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b8d      	ldr	r3, [pc, #564]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 0207 	bic.w	r2, r3, #7
 8006f3e:	498b      	ldr	r1, [pc, #556]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b89      	ldr	r3, [pc, #548]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e14a      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f64:	4b82      	ldr	r3, [pc, #520]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	497f      	ldr	r1, [pc, #508]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80dc 	beq.w	800713c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d13c      	bne.n	8007006 <HAL_RCC_ClockConfig+0xf6>
 8006f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f94:	fa93 f3a3 	rbit	r3, r3
 8006f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xa6>
 8006fb0:	4b6f      	ldr	r3, [pc, #444]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	e00f      	b.n	8006fd6 <HAL_RCC_ClockConfig+0xc6>
 8006fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fbe:	fa93 f3a3 	rbit	r3, r3
 8006fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8006fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fcc:	fa93 f3a3 	rbit	r3, r3
 8006fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd2:	4b67      	ldr	r3, [pc, #412]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fda:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fde:	fa92 f2a2 	rbit	r2, r2
 8006fe2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fe6:	fab2 f282 	clz	r2, r2
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	f042 0220 	orr.w	r2, r2, #32
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	f002 021f 	and.w	r2, r2, #31
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d17b      	bne.n	80070fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e0f3      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d13c      	bne.n	8007088 <HAL_RCC_ClockConfig+0x178>
 800700e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007012:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007016:	fa93 f3a3 	rbit	r3, r3
 800701a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800701c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800701e:	fab3 f383 	clz	r3, r3
 8007022:	b2db      	uxtb	r3, r3
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	d102      	bne.n	8007038 <HAL_RCC_ClockConfig+0x128>
 8007032:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	e00f      	b.n	8007058 <HAL_RCC_ClockConfig+0x148>
 8007038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800703c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007040:	fa93 f3a3 	rbit	r3, r3
 8007044:	647b      	str	r3, [r7, #68]	; 0x44
 8007046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800704a:	643b      	str	r3, [r7, #64]	; 0x40
 800704c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704e:	fa93 f3a3 	rbit	r3, r3
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	4b46      	ldr	r3, [pc, #280]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800705c:	63ba      	str	r2, [r7, #56]	; 0x38
 800705e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007060:	fa92 f2a2 	rbit	r2, r2
 8007064:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007068:	fab2 f282 	clz	r2, r2
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	f042 0220 	orr.w	r2, r2, #32
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	f002 021f 	and.w	r2, r2, #31
 8007078:	2101      	movs	r1, #1
 800707a:	fa01 f202 	lsl.w	r2, r1, r2
 800707e:	4013      	ands	r3, r2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d13a      	bne.n	80070fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0b2      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
 8007088:	2302      	movs	r3, #2
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	fa93 f3a3 	rbit	r3, r3
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007096:	fab3 f383 	clz	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d102      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x1a0>
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	e00d      	b.n	80070cc <HAL_RCC_ClockConfig+0x1bc>
 80070b0:	2302      	movs	r3, #2
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	fa93 f3a3 	rbit	r3, r3
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
 80070bc:	2302      	movs	r3, #2
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	fa93 f3a3 	rbit	r3, r3
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	4b29      	ldr	r3, [pc, #164]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2202      	movs	r2, #2
 80070ce:	61ba      	str	r2, [r7, #24]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	fa92 f2a2 	rbit	r2, r2
 80070d6:	617a      	str	r2, [r7, #20]
  return result;
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	fab2 f282 	clz	r2, r2
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	f042 0220 	orr.w	r2, r2, #32
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	f002 021f 	and.w	r2, r2, #31
 80070ea:	2101      	movs	r1, #1
 80070ec:	fa01 f202 	lsl.w	r2, r1, r2
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e079      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070fa:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f023 0203 	bic.w	r2, r3, #3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	491a      	ldr	r1, [pc, #104]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800710c:	f7fc fdf6 	bl	8003cfc <HAL_GetTick>
 8007110:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007112:	e00a      	b.n	800712a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007114:	f7fc fdf2 	bl	8003cfc <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e061      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712a:	4b11      	ldr	r3, [pc, #68]	; (8007170 <HAL_RCC_ClockConfig+0x260>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 020c 	and.w	r2, r3, #12
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	429a      	cmp	r2, r3
 800713a:	d1eb      	bne.n	8007114 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d214      	bcs.n	8007174 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 0207 	bic.w	r2, r3, #7
 8007152:	4906      	ldr	r1, [pc, #24]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715a:	4b04      	ldr	r3, [pc, #16]	; (800716c <HAL_RCC_ClockConfig+0x25c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d005      	beq.n	8007174 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e040      	b.n	80071ee <HAL_RCC_ClockConfig+0x2de>
 800716c:	40022000 	.word	0x40022000
 8007170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCC_ClockConfig+0x2e8>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	491a      	ldr	r1, [pc, #104]	; (80071f8 <HAL_RCC_ClockConfig+0x2e8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <HAL_RCC_ClockConfig+0x2e8>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4912      	ldr	r1, [pc, #72]	; (80071f8 <HAL_RCC_ClockConfig+0x2e8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80071b2:	f000 f829 	bl	8007208 <HAL_RCC_GetSysClockFreq>
 80071b6:	4601      	mov	r1, r0
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <HAL_RCC_ClockConfig+0x2e8>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c0:	22f0      	movs	r2, #240	; 0xf0
 80071c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	fa92 f2a2 	rbit	r2, r2
 80071ca:	60fa      	str	r2, [r7, #12]
  return result;
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	fab2 f282 	clz	r2, r2
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	40d3      	lsrs	r3, r2
 80071d6:	4a09      	ldr	r2, [pc, #36]	; (80071fc <HAL_RCC_ClockConfig+0x2ec>)
 80071d8:	5cd3      	ldrb	r3, [r2, r3]
 80071da:	fa21 f303 	lsr.w	r3, r1, r3
 80071de:	4a08      	ldr	r2, [pc, #32]	; (8007200 <HAL_RCC_ClockConfig+0x2f0>)
 80071e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <HAL_RCC_ClockConfig+0x2f4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fc fd44 	bl	8003c74 <HAL_InitTick>
  
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3778      	adds	r7, #120	; 0x78
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	080117a0 	.word	0x080117a0
 8007200:	2000002c 	.word	0x2000002c
 8007204:	20000030 	.word	0x20000030

08007208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007208:	b480      	push	{r7}
 800720a:	b08b      	sub	sp, #44	; 0x2c
 800720c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007222:	4b29      	ldr	r3, [pc, #164]	; (80072c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	2b04      	cmp	r3, #4
 8007230:	d002      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x30>
 8007232:	2b08      	cmp	r3, #8
 8007234:	d003      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0x36>
 8007236:	e03c      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007238:	4b24      	ldr	r3, [pc, #144]	; (80072cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800723a:	623b      	str	r3, [r7, #32]
      break;
 800723c:	e03c      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007244:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007248:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	fa92 f2a2 	rbit	r2, r2
 8007250:	607a      	str	r2, [r7, #4]
  return result;
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	fab2 f282 	clz	r2, r2
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	40d3      	lsrs	r3, r2
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007262:	4b19      	ldr	r3, [pc, #100]	; (80072c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	220f      	movs	r2, #15
 800726c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	fa92 f2a2 	rbit	r2, r2
 8007274:	60fa      	str	r2, [r7, #12]
  return result;
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	fab2 f282 	clz	r2, r2
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	40d3      	lsrs	r3, r2
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007282:	5cd3      	ldrb	r3, [r2, r3]
 8007284:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007290:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	fbb2 f2f3 	udiv	r2, r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
 80072a0:	e004      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	623b      	str	r3, [r7, #32]
      break;
 80072b0:	e002      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80072b4:	623b      	str	r3, [r7, #32]
      break;
 80072b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b8:	6a3b      	ldr	r3, [r7, #32]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	372c      	adds	r7, #44	; 0x2c
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40021000 	.word	0x40021000
 80072cc:	016e3600 	.word	0x016e3600
 80072d0:	080117b0 	.word	0x080117b0
 80072d4:	080117c0 	.word	0x080117c0
 80072d8:	003d0900 	.word	0x003d0900
 80072dc:	007a1200 	.word	0x007a1200

080072e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b092      	sub	sp, #72	; 0x48
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80d4 	beq.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007304:	4b4e      	ldr	r3, [pc, #312]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10e      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007310:	4b4b      	ldr	r3, [pc, #300]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4a4a      	ldr	r2, [pc, #296]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731a:	61d3      	str	r3, [r2, #28]
 800731c:	4b48      	ldr	r3, [pc, #288]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732e:	4b45      	ldr	r3, [pc, #276]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d118      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800733a:	4b42      	ldr	r3, [pc, #264]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a41      	ldr	r2, [pc, #260]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007344:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007346:	f7fc fcd9 	bl	8003cfc <HAL_GetTick>
 800734a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734c:	e008      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800734e:	f7fc fcd5 	bl	8003cfc <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b64      	cmp	r3, #100	; 0x64
 800735a:	d901      	bls.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e12d      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007360:	4b38      	ldr	r3, [pc, #224]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0f0      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800736c:	4b34      	ldr	r3, [pc, #208]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8084 	beq.w	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007388:	429a      	cmp	r2, r3
 800738a:	d07c      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800738c:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	fa93 f3a3 	rbit	r3, r3
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073a6:	fab3 f383 	clz	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b26      	ldr	r3, [pc, #152]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	461a      	mov	r2, r3
 80073b6:	2301      	movs	r3, #1
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	fa93 f3a3 	rbit	r3, r3
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ca:	fab3 f383 	clz	r3, r3
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	461a      	mov	r2, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04b      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ee:	f7fc fc85 	bl	8003cfc <HAL_GetTick>
 80073f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fc fc81 	bl	8003cfc <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e0d7      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800740c:	2302      	movs	r3, #2
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	fa93 f3a3 	rbit	r3, r3
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
 8007418:	2302      	movs	r3, #2
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	fa93 f3a3 	rbit	r3, r3
 8007422:	61fb      	str	r3, [r7, #28]
  return result;
 8007424:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007426:	fab3 f383 	clz	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f043 0302 	orr.w	r3, r3, #2
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d108      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800743a:	4b01      	ldr	r3, [pc, #4]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	e00d      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007440:	40021000 	.word	0x40021000
 8007444:	40007000 	.word	0x40007000
 8007448:	10908100 	.word	0x10908100
 800744c:	2302      	movs	r3, #2
 800744e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	fa93 f3a3 	rbit	r3, r3
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	4b5a      	ldr	r3, [pc, #360]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2202      	movs	r2, #2
 800745e:	613a      	str	r2, [r7, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	fa92 f2a2 	rbit	r2, r2
 8007466:	60fa      	str	r2, [r7, #12]
  return result;
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	fab2 f282 	clz	r2, r2
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	f002 021f 	and.w	r2, r2, #31
 800747a:	2101      	movs	r1, #1
 800747c:	fa01 f202 	lsl.w	r2, r1, r2
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0b7      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007486:	4b4f      	ldr	r3, [pc, #316]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	494c      	ldr	r1, [pc, #304]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007494:	4313      	orrs	r3, r2
 8007496:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007498:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800749c:	2b01      	cmp	r3, #1
 800749e:	d105      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a0:	4b48      	ldr	r3, [pc, #288]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	4a47      	ldr	r2, [pc, #284]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074b8:	4b42      	ldr	r3, [pc, #264]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	f023 0203 	bic.w	r2, r3, #3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	493f      	ldr	r1, [pc, #252]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074d6:	4b3b      	ldr	r3, [pc, #236]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	4938      	ldr	r1, [pc, #224]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074f4:	4b33      	ldr	r3, [pc, #204]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	4930      	ldr	r1, [pc, #192]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007502:	4313      	orrs	r3, r2
 8007504:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b00      	cmp	r3, #0
 8007510:	d008      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007512:	4b2c      	ldr	r3, [pc, #176]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f023 0210 	bic.w	r2, r3, #16
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4929      	ldr	r1, [pc, #164]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007520:	4313      	orrs	r3, r2
 8007522:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d008      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007530:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	4921      	ldr	r1, [pc, #132]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800753e:	4313      	orrs	r3, r2
 8007540:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f023 0220 	bic.w	r2, r3, #32
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	491a      	ldr	r1, [pc, #104]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800755c:	4313      	orrs	r3, r2
 800755e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800756c:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	4912      	ldr	r1, [pc, #72]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	490b      	ldr	r1, [pc, #44]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007598:	4313      	orrs	r3, r2
 800759a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	4903      	ldr	r1, [pc, #12]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3748      	adds	r7, #72	; 0x48
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40021000 	.word	0x40021000

080075c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e041      	b.n	800765e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb fb26 	bl	8002c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fc0a 	bl	8007e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d001      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e049      	b.n	8007714 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d01d      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <HAL_TIM_Base_Start_IT+0xb8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d018      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <HAL_TIM_Base_Start_IT+0xbc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d013      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <HAL_TIM_Base_Start_IT+0xc0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00e      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a19      	ldr	r2, [pc, #100]	; (800772c <HAL_TIM_Base_Start_IT+0xc4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d009      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <HAL_TIM_Base_Start_IT+0xc8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d004      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x76>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a16      	ldr	r2, [pc, #88]	; (8007734 <HAL_TIM_Base_Start_IT+0xcc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d111      	bne.n	8007702 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d010      	beq.n	8007712 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007700:	e007      	b.n	8007712 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40001800 	.word	0x40001800
 8007730:	40014000 	.word	0x40014000
 8007734:	40015c00 	.word	0x40015c00

08007738 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	f241 1311 	movw	r3, #4369	; 0x1111
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10f      	bne.n	8007780 <HAL_TIM_Base_Stop_IT+0x48>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a1a      	ldr	r2, [r3, #32]
 8007766:	f240 4344 	movw	r3, #1092	; 0x444
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <HAL_TIM_Base_Stop_IT+0x48>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
	...

08007798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <HAL_TIM_PWM_Start+0x24>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	bf14      	ite	ne
 80077b4:	2301      	movne	r3, #1
 80077b6:	2300      	moveq	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e022      	b.n	8007802 <HAL_TIM_PWM_Start+0x6a>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d109      	bne.n	80077d6 <HAL_TIM_PWM_Start+0x3e>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	bf14      	ite	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	2300      	moveq	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	e015      	b.n	8007802 <HAL_TIM_PWM_Start+0x6a>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d109      	bne.n	80077f0 <HAL_TIM_PWM_Start+0x58>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	bf14      	ite	ne
 80077e8:	2301      	movne	r3, #1
 80077ea:	2300      	moveq	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	e008      	b.n	8007802 <HAL_TIM_PWM_Start+0x6a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	bf14      	ite	ne
 80077fc:	2301      	movne	r3, #1
 80077fe:	2300      	moveq	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07c      	b.n	8007904 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_TIM_PWM_Start+0x82>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007818:	e013      	b.n	8007842 <HAL_TIM_PWM_Start+0xaa>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d104      	bne.n	800782a <HAL_TIM_PWM_Start+0x92>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007828:	e00b      	b.n	8007842 <HAL_TIM_PWM_Start+0xaa>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d104      	bne.n	800783a <HAL_TIM_PWM_Start+0xa2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007838:	e003      	b.n	8007842 <HAL_TIM_PWM_Start+0xaa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fc1c 	bl	8008088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2d      	ldr	r2, [pc, #180]	; (800790c <HAL_TIM_PWM_Start+0x174>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_TIM_PWM_Start+0xd6>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2c      	ldr	r2, [pc, #176]	; (8007910 <HAL_TIM_PWM_Start+0x178>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_TIM_PWM_Start+0xd6>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <HAL_TIM_PWM_Start+0x17c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_TIM_PWM_Start+0xda>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_TIM_PWM_Start+0xdc>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007890:	d01d      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a20      	ldr	r2, [pc, #128]	; (8007918 <HAL_TIM_PWM_Start+0x180>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1e      	ldr	r2, [pc, #120]	; (800791c <HAL_TIM_PWM_Start+0x184>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1d      	ldr	r2, [pc, #116]	; (8007920 <HAL_TIM_PWM_Start+0x188>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1b      	ldr	r2, [pc, #108]	; (8007924 <HAL_TIM_PWM_Start+0x18c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a13      	ldr	r2, [pc, #76]	; (800790c <HAL_TIM_PWM_Start+0x174>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIM_PWM_Start+0x136>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <HAL_TIM_PWM_Start+0x190>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d111      	bne.n	80078f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d010      	beq.n	8007902 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f0:	e007      	b.n	8007902 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0201 	orr.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40000c00 	.word	0x40000c00
 8007924:	40001800 	.word	0x40001800
 8007928:	40015c00 	.word	0x40015c00

0800792c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fba2 	bl	8008088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <HAL_TIM_PWM_Stop+0xe4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_TIM_PWM_Stop+0x36>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <HAL_TIM_PWM_Stop+0xe8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIM_PWM_Stop+0x36>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2e      	ldr	r2, [pc, #184]	; (8007a18 <HAL_TIM_PWM_Stop+0xec>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_TIM_PWM_Stop+0x3a>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_TIM_PWM_Stop+0x3c>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d017      	beq.n	800799c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	f241 1311 	movw	r3, #4369	; 0x1111
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10f      	bne.n	800799c <HAL_TIM_PWM_Stop+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	f240 4344 	movw	r3, #1092	; 0x444
 8007986:	4013      	ands	r3, r2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <HAL_TIM_PWM_Stop+0x70>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800799a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10f      	bne.n	80079cc <HAL_TIM_PWM_Stop+0xa0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a1a      	ldr	r2, [r3, #32]
 80079b2:	f240 4344 	movw	r3, #1092	; 0x444
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_PWM_Stop+0xa0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <HAL_TIM_PWM_Stop+0xb0>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079da:	e013      	b.n	8007a04 <HAL_TIM_PWM_Stop+0xd8>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d104      	bne.n	80079ec <HAL_TIM_PWM_Stop+0xc0>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ea:	e00b      	b.n	8007a04 <HAL_TIM_PWM_Stop+0xd8>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d104      	bne.n	80079fc <HAL_TIM_PWM_Stop+0xd0>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079fa:	e003      	b.n	8007a04 <HAL_TIM_PWM_Stop+0xd8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800

08007a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d122      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d11b      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0202 	mvn.w	r2, #2
 8007a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9bf 	bl	8007de2 <HAL_TIM_IC_CaptureCallback>
 8007a64:	e005      	b.n	8007a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9b1 	bl	8007dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9c2 	bl	8007df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d122      	bne.n	8007acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d11b      	bne.n	8007acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0204 	mvn.w	r2, #4
 8007a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f995 	bl	8007de2 <HAL_TIM_IC_CaptureCallback>
 8007ab8:	e005      	b.n	8007ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f987 	bl	8007dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f998 	bl	8007df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d122      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d11b      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0208 	mvn.w	r2, #8
 8007af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2204      	movs	r2, #4
 8007af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f96b 	bl	8007de2 <HAL_TIM_IC_CaptureCallback>
 8007b0c:	e005      	b.n	8007b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f95d 	bl	8007dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f96e 	bl	8007df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d122      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d11b      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0210 	mvn.w	r2, #16
 8007b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2208      	movs	r2, #8
 8007b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f941 	bl	8007de2 <HAL_TIM_IC_CaptureCallback>
 8007b60:	e005      	b.n	8007b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f933 	bl	8007dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f944 	bl	8007df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0201 	mvn.w	r2, #1
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f90d 	bl	8007dba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b80      	cmp	r3, #128	; 0x80
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb02 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f909 	bl	8007e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d10e      	bne.n	8007c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d107      	bne.n	8007c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0220 	mvn.w	r2, #32
 8007c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 facc 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIM_ConfigClockSource+0x1c>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e0b4      	b.n	8007db2 <HAL_TIM_ConfigClockSource+0x186>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c80:	d03e      	beq.n	8007d00 <HAL_TIM_ConfigClockSource+0xd4>
 8007c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c86:	f200 8087 	bhi.w	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8e:	f000 8086 	beq.w	8007d9e <HAL_TIM_ConfigClockSource+0x172>
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c96:	d87f      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007c98:	2b70      	cmp	r3, #112	; 0x70
 8007c9a:	d01a      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8007c9c:	2b70      	cmp	r3, #112	; 0x70
 8007c9e:	d87b      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007ca0:	2b60      	cmp	r3, #96	; 0x60
 8007ca2:	d050      	beq.n	8007d46 <HAL_TIM_ConfigClockSource+0x11a>
 8007ca4:	2b60      	cmp	r3, #96	; 0x60
 8007ca6:	d877      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007ca8:	2b50      	cmp	r3, #80	; 0x50
 8007caa:	d03c      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0xfa>
 8007cac:	2b50      	cmp	r3, #80	; 0x50
 8007cae:	d873      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d058      	beq.n	8007d66 <HAL_TIM_ConfigClockSource+0x13a>
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d86f      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007cb8:	2b30      	cmp	r3, #48	; 0x30
 8007cba:	d064      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x15a>
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d86b      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d060      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x15a>
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d867      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05c      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x15a>
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d05a      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x15a>
 8007cd0:	e062      	b.n	8007d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6899      	ldr	r1, [r3, #8]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f000 f9b1 	bl	8008048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	609a      	str	r2, [r3, #8]
      break;
 8007cfe:	e04f      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	6899      	ldr	r1, [r3, #8]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f000 f99a 	bl	8008048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d22:	609a      	str	r2, [r3, #8]
      break;
 8007d24:	e03c      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6859      	ldr	r1, [r3, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f000 f90e 	bl	8007f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2150      	movs	r1, #80	; 0x50
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f967 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d44:	e02c      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6859      	ldr	r1, [r3, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f000 f92d 	bl	8007fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2160      	movs	r1, #96	; 0x60
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f957 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d64:	e01c      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6859      	ldr	r1, [r3, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f000 f8ee 	bl	8007f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2140      	movs	r1, #64	; 0x40
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f947 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d84:	e00c      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f000 f93e 	bl	8008012 <TIM_ITRx_SetConfig>
      break;
 8007d96:	e003      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9c:	e000      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e36:	d00f      	beq.n	8007e58 <TIM_Base_SetConfig+0x38>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3c      	ldr	r2, [pc, #240]	; (8007f2c <TIM_Base_SetConfig+0x10c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00b      	beq.n	8007e58 <TIM_Base_SetConfig+0x38>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a3b      	ldr	r2, [pc, #236]	; (8007f30 <TIM_Base_SetConfig+0x110>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_Base_SetConfig+0x38>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a3a      	ldr	r2, [pc, #232]	; (8007f34 <TIM_Base_SetConfig+0x114>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_Base_SetConfig+0x38>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a39      	ldr	r2, [pc, #228]	; (8007f38 <TIM_Base_SetConfig+0x118>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d108      	bne.n	8007e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e70:	d027      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <TIM_Base_SetConfig+0x10c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d023      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2c      	ldr	r2, [pc, #176]	; (8007f30 <TIM_Base_SetConfig+0x110>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01f      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2b      	ldr	r2, [pc, #172]	; (8007f34 <TIM_Base_SetConfig+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01b      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	; (8007f3c <TIM_Base_SetConfig+0x11c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d017      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <TIM_Base_SetConfig+0x120>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <TIM_Base_SetConfig+0x124>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00f      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <TIM_Base_SetConfig+0x128>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <TIM_Base_SetConfig+0x12c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <TIM_Base_SetConfig+0x130>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_Base_SetConfig+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <TIM_Base_SetConfig+0x118>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d108      	bne.n	8007ed4 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <TIM_Base_SetConfig+0x128>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_Base_SetConfig+0xf0>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a12      	ldr	r2, [pc, #72]	; (8007f4c <TIM_Base_SetConfig+0x12c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_Base_SetConfig+0xf0>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <TIM_Base_SetConfig+0x130>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d103      	bne.n	8007f18 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	615a      	str	r2, [r3, #20]
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40000400 	.word	0x40000400
 8007f30:	40000800 	.word	0x40000800
 8007f34:	40000c00 	.word	0x40000c00
 8007f38:	40015c00 	.word	0x40015c00
 8007f3c:	40001800 	.word	0x40001800
 8007f40:	40001c00 	.word	0x40001c00
 8007f44:	40002000 	.word	0x40002000
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 030a 	bic.w	r3, r3, #10
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0210 	bic.w	r2, r3, #16
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	f043 0307 	orr.w	r3, r3, #7
 8008034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	021a      	lsls	r2, r3, #8
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	431a      	orrs	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	609a      	str	r2, [r3, #8]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2201      	movs	r2, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	43db      	mvns	r3, r3
 80080aa:	401a      	ands	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1a      	ldr	r2, [r3, #32]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	fa01 f303 	lsl.w	r3, r1, r3
 80080c0:	431a      	orrs	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e055      	b.n	8008198 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d01d      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1b      	ldr	r2, [pc, #108]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a18      	ldr	r2, [pc, #96]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d10c      	bne.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4313      	orrs	r3, r2
 800817c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40001800 	.word	0x40001800
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40015c00 	.word	0x40015c00

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80081f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800821a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800821e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	b29b      	uxth	r3, r3
 800822c:	43db      	mvns	r3, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	4013      	ands	r3, r2
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008248:	b084      	sub	sp, #16
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	f107 0014 	add.w	r0, r7, #20
 8008256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	b004      	add	sp, #16
 8008288:	4770      	bx	lr
	...

0800828c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800828c:	b480      	push	{r7}
 800828e:	b09d      	sub	sp, #116	; 0x74
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80082ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	78db      	ldrb	r3, [r3, #3]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d81f      	bhi.n	80082fe <USB_ActivateEndpoint+0x72>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USB_ActivateEndpoint+0x38>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	08008307 	.word	0x08008307
 80082d0:	080082e3 	.word	0x080082e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80082d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082e0:	e012      	b.n	8008308 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80082e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80082ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082ee:	e00b      	b.n	8008308 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082fc:	e004      	b.n	8008308 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008304:	e000      	b.n	8008308 <USB_ActivateEndpoint+0x7c>
      break;
 8008306:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	b21b      	sxth	r3, r3
 800833a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008342:	b21a      	sxth	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b21b      	sxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b21b      	sxth	r3, r3
 800834e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008370:	b29b      	uxth	r3, r3
 8008372:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	7b1b      	ldrb	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8178 	bne.w	800866e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8084 	beq.w	8008490 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008392:	b29b      	uxth	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	4413      	add	r3, r2
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	88db      	ldrh	r3, [r3, #6]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	827b      	strh	r3, [r7, #18]
 80083ca:	8a7b      	ldrh	r3, [r7, #18]
 80083cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01b      	beq.n	800840c <USB_ActivateEndpoint+0x180>
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ea:	823b      	strh	r3, [r7, #16]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	8a3b      	ldrh	r3, [r7, #16]
 80083f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008408:	b29b      	uxth	r3, r3
 800840a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	78db      	ldrb	r3, [r3, #3]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d020      	beq.n	8008456 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842a:	81bb      	strh	r3, [r7, #12]
 800842c:	89bb      	ldrh	r3, [r7, #12]
 800842e:	f083 0320 	eor.w	r3, r3, #32
 8008432:	81bb      	strh	r3, [r7, #12]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	89bb      	ldrh	r3, [r7, #12]
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]
 8008454:	e2d5      	b.n	8008a02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800846c:	81fb      	strh	r3, [r7, #14]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	89fb      	ldrh	r3, [r7, #14]
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
 800848e:	e2b8      	b.n	8008a02 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849a:	b29b      	uxth	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	4413      	add	r3, r2
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	011a      	lsls	r2, r3, #4
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	4413      	add	r3, r2
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	011a      	lsls	r2, r3, #4
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	4413      	add	r3, r2
 80084e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b3e      	cmp	r3, #62	; 0x3e
 80084fe:	d91d      	bls.n	800853c <USB_ActivateEndpoint+0x2b0>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	66bb      	str	r3, [r7, #104]	; 0x68
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <USB_ActivateEndpoint+0x28e>
 8008514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008516:	3b01      	subs	r3, #1
 8008518:	66bb      	str	r3, [r7, #104]	; 0x68
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29a      	uxth	r2, r3
 8008520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008522:	b29b      	uxth	r3, r3
 8008524:	029b      	lsls	r3, r3, #10
 8008526:	b29b      	uxth	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008534:	b29a      	uxth	r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e026      	b.n	800858a <USB_ActivateEndpoint+0x2fe>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <USB_ActivateEndpoint+0x2ce>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008552:	b29a      	uxth	r2, r3
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	801a      	strh	r2, [r3, #0]
 8008558:	e017      	b.n	800858a <USB_ActivateEndpoint+0x2fe>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	66bb      	str	r3, [r7, #104]	; 0x68
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <USB_ActivateEndpoint+0x2e8>
 800856e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008570:	3301      	adds	r3, #1
 8008572:	66bb      	str	r3, [r7, #104]	; 0x68
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29a      	uxth	r2, r3
 800857a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800857c:	b29b      	uxth	r3, r3
 800857e:	029b      	lsls	r3, r3, #10
 8008580:	b29b      	uxth	r3, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	b29a      	uxth	r2, r3
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	847b      	strh	r3, [r7, #34]	; 0x22
 8008598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800859a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01b      	beq.n	80085da <USB_ActivateEndpoint+0x34e>
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	843b      	strh	r3, [r7, #32]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	8c3b      	ldrh	r3, [r7, #32]
 80085c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d124      	bne.n	800862c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	83bb      	strh	r3, [r7, #28]
 80085fa:	8bbb      	ldrh	r3, [r7, #28]
 80085fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008600:	83bb      	strh	r3, [r7, #28]
 8008602:	8bbb      	ldrh	r3, [r7, #28]
 8008604:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008608:	83bb      	strh	r3, [r7, #28]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	8bbb      	ldrh	r3, [r7, #28]
 8008616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]
 800862a:	e1ea      	b.n	8008a02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008642:	83fb      	strh	r3, [r7, #30]
 8008644:	8bfb      	ldrh	r3, [r7, #30]
 8008646:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800864a:	83fb      	strh	r3, [r7, #30]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	8bfb      	ldrh	r3, [r7, #30]
 8008658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008668:	b29b      	uxth	r3, r3
 800866a:	8013      	strh	r3, [r2, #0]
 800866c:	e1c9      	b.n	8008a02 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d11e      	bne.n	80086b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	441a      	add	r2, r3
 800869a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800869e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	8013      	strh	r3, [r2, #0]
 80086b2:	e01d      	b.n	80086f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80086c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80086dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008700:	4413      	add	r3, r2
 8008702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	011a      	lsls	r2, r3, #4
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	4413      	add	r3, r2
 800870e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008712:	65bb      	str	r3, [r7, #88]	; 0x58
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	891b      	ldrh	r3, [r3, #8]
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	657b      	str	r3, [r7, #84]	; 0x54
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008734:	4413      	add	r3, r2
 8008736:	657b      	str	r3, [r7, #84]	; 0x54
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	011a      	lsls	r2, r3, #4
 800873e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008740:	4413      	add	r3, r2
 8008742:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008746:	653b      	str	r3, [r7, #80]	; 0x50
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	895b      	ldrh	r3, [r3, #10]
 800874c:	085b      	lsrs	r3, r3, #1
 800874e:	b29b      	uxth	r3, r3
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008756:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 8093 	bne.w	8008888 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01b      	beq.n	80087b6 <USB_ActivateEndpoint+0x52a>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008794:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	441a      	add	r2, r3
 80087a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80087c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <USB_ActivateEndpoint+0x57a>
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881c:	873b      	strh	r3, [r7, #56]	; 0x38
 800881e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008824:	873b      	strh	r3, [r7, #56]	; 0x38
 8008826:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008828:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800882c:	873b      	strh	r3, [r7, #56]	; 0x38
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008864:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008882:	b29b      	uxth	r3, r3
 8008884:	8013      	strh	r3, [r2, #0]
 8008886:	e0bc      	b.n	8008a02 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800889c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01d      	beq.n	80088e0 <USB_ActivateEndpoint+0x654>
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80088cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80088f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80088f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01d      	beq.n	8008938 <USB_ActivateEndpoint+0x6ac>
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	441a      	add	r2, r3
 8008920:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d024      	beq.n	800898a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800895a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800895e:	f083 0320 	eor.w	r3, r3, #32
 8008962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	441a      	add	r2, r3
 8008970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	b29b      	uxth	r3, r3
 8008986:	8013      	strh	r3, [r2, #0]
 8008988:	e01d      	b.n	80089c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	441a      	add	r2, r3
 80089ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80089ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008a02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3774      	adds	r7, #116	; 0x74
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b08d      	sub	sp, #52	; 0x34
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	7b1b      	ldrb	r3, [r3, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 808e 	bne.w	8008b44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d044      	beq.n	8008aba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	81bb      	strh	r3, [r7, #12]
 8008a3e:	89bb      	ldrh	r3, [r7, #12]
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01b      	beq.n	8008a80 <USB_DeactivateEndpoint+0x6c>
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	817b      	strh	r3, [r7, #10]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	441a      	add	r2, r3
 8008a6a:	897b      	ldrh	r3, [r7, #10]
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a96:	813b      	strh	r3, [r7, #8]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	441a      	add	r2, r3
 8008aa2:	893b      	ldrh	r3, [r7, #8]
 8008aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	8013      	strh	r3, [r2, #0]
 8008ab8:	e192      	b.n	8008de0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	827b      	strh	r3, [r7, #18]
 8008ac8:	8a7b      	ldrh	r3, [r7, #18]
 8008aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01b      	beq.n	8008b0a <USB_DeactivateEndpoint+0xf6>
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae8:	823b      	strh	r3, [r7, #16]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	441a      	add	r2, r3
 8008af4:	8a3b      	ldrh	r3, [r7, #16]
 8008af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	81fb      	strh	r3, [r7, #14]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	89fb      	ldrh	r3, [r7, #14]
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
 8008b42:	e14d      	b.n	8008de0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 80a5 	bne.w	8008c98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	843b      	strh	r3, [r7, #32]
 8008b5c:	8c3b      	ldrh	r3, [r7, #32]
 8008b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01b      	beq.n	8008b9e <USB_DeactivateEndpoint+0x18a>
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7c:	83fb      	strh	r3, [r7, #30]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	441a      	add	r2, r3
 8008b88:	8bfb      	ldrh	r3, [r7, #30]
 8008b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	83bb      	strh	r3, [r7, #28]
 8008bac:	8bbb      	ldrh	r3, [r7, #28]
 8008bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01b      	beq.n	8008bee <USB_DeactivateEndpoint+0x1da>
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bcc:	837b      	strh	r3, [r7, #26]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	441a      	add	r2, r3
 8008bd8:	8b7b      	ldrh	r3, [r7, #26]
 8008bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c04:	833b      	strh	r3, [r7, #24]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	441a      	add	r2, r3
 8008c10:	8b3b      	ldrh	r3, [r7, #24]
 8008c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3c:	82fb      	strh	r3, [r7, #22]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	441a      	add	r2, r3
 8008c48:	8afb      	ldrh	r3, [r7, #22]
 8008c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	82bb      	strh	r3, [r7, #20]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	441a      	add	r2, r3
 8008c80:	8abb      	ldrh	r3, [r7, #20]
 8008c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	8013      	strh	r3, [r2, #0]
 8008c96:	e0a3      	b.n	8008de0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01b      	beq.n	8008ce8 <USB_DeactivateEndpoint+0x2d4>
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01b      	beq.n	8008d38 <USB_DeactivateEndpoint+0x324>
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d16:	853b      	strh	r3, [r7, #40]	; 0x28
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	441a      	add	r2, r3
 8008d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	441a      	add	r2, r3
 8008dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3734      	adds	r7, #52	; 0x34
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b0c2      	sub	sp, #264	; 0x108
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfc:	6018      	str	r0, [r3, #0]
 8008dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e06:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	f040 86b7 	bne.w	8009b88 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d908      	bls.n	8008e48 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e46:	e007      	b.n	8008e58 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	7b1b      	ldrb	r3, [r3, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d13a      	bne.n	8008ede <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6959      	ldr	r1, [r3, #20]
 8008e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	88da      	ldrh	r2, [r3, #6]
 8008e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	f001 fc8c 	bl	800a7ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	011a      	lsls	r2, r3, #4
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	801a      	strh	r2, [r3, #0]
 8008eda:	f000 be1f 	b.w	8009b1c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	78db      	ldrb	r3, [r3, #3]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	f040 8462 	bne.w	80097b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6a1a      	ldr	r2, [r3, #32]
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	f240 83df 	bls.w	80096cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	441a      	add	r2, r3
 8008f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7a:	1ad2      	subs	r2, r2, r3
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 81c7 	beq.w	800933e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	633b      	str	r3, [r7, #48]	; 0x30
 8008fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	785b      	ldrb	r3, [r3, #1]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d177      	bne.n	80090bc <USB_EPStartXfer+0x2ce>
 8008fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	4413      	add	r3, r2
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	011a      	lsls	r2, r3, #4
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	4413      	add	r3, r2
 8009002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009012:	b29a      	uxth	r2, r3
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	801a      	strh	r2, [r3, #0]
 8009018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901c:	2b3e      	cmp	r3, #62	; 0x3e
 800901e:	d921      	bls.n	8009064 <USB_EPStartXfer+0x276>
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <USB_EPStartXfer+0x252>
 8009036:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800903a:	3b01      	subs	r3, #1
 800903c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29a      	uxth	r2, r3
 8009046:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800904a:	b29b      	uxth	r3, r3
 800904c:	029b      	lsls	r3, r3, #10
 800904e:	b29b      	uxth	r3, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	b29b      	uxth	r3, r3
 8009054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905c:	b29a      	uxth	r2, r3
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	801a      	strh	r2, [r3, #0]
 8009062:	e050      	b.n	8009106 <USB_EPStartXfer+0x318>
 8009064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <USB_EPStartXfer+0x294>
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907a:	b29a      	uxth	r2, r3
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e041      	b.n	8009106 <USB_EPStartXfer+0x318>
 8009082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800908c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <USB_EPStartXfer+0x2b4>
 8009098:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800909c:	3301      	adds	r3, #1
 800909e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	029b      	lsls	r3, r3, #10
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	4313      	orrs	r3, r2
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	e024      	b.n	8009106 <USB_EPStartXfer+0x318>
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d11c      	bne.n	8009106 <USB_EPStartXfer+0x318>
 80090cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090da:	b29b      	uxth	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	4413      	add	r3, r2
 80090e2:	633b      	str	r3, [r7, #48]	; 0x30
 80090e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	011a      	lsls	r2, r3, #4
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	4413      	add	r3, r2
 80090f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009100:	b29a      	uxth	r2, r3
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	895b      	ldrh	r3, [r3, #10]
 8009112:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6959      	ldr	r1, [r3, #20]
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	b29b      	uxth	r3, r3
 8009128:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800912c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009130:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009134:	6800      	ldr	r0, [r0, #0]
 8009136:	f001 fb39 	bl	800a7ac <USB_WritePMA>
            ep->xfer_buff += len;
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695a      	ldr	r2, [r3, #20]
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	441a      	add	r2, r3
 800914c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6a1a      	ldr	r2, [r3, #32]
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	d90f      	bls.n	8009194 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6a1a      	ldr	r2, [r3, #32]
 8009180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	621a      	str	r2, [r3, #32]
 8009192:	e00e      	b.n	80091b2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80091a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d177      	bne.n	80092b2 <USB_EPStartXfer+0x4c4>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091dc:	b29b      	uxth	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	4413      	add	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	011a      	lsls	r2, r3, #4
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	4413      	add	r3, r2
 80091f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009208:	b29a      	uxth	r2, r3
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009212:	2b3e      	cmp	r3, #62	; 0x3e
 8009214:	d921      	bls.n	800925a <USB_EPStartXfer+0x46c>
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <USB_EPStartXfer+0x448>
 800922c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009230:	3b01      	subs	r3, #1
 8009232:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009240:	b29b      	uxth	r3, r3
 8009242:	029b      	lsls	r3, r3, #10
 8009244:	b29b      	uxth	r3, r3
 8009246:	4313      	orrs	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009252:	b29a      	uxth	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	e056      	b.n	8009308 <USB_EPStartXfer+0x51a>
 800925a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <USB_EPStartXfer+0x48a>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800926c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009270:	b29a      	uxth	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	e047      	b.n	8009308 <USB_EPStartXfer+0x51a>
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <USB_EPStartXfer+0x4aa>
 800928e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009292:	3301      	adds	r3, #1
 8009294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29a      	uxth	r2, r3
 800929e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	029b      	lsls	r3, r3, #10
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e02a      	b.n	8009308 <USB_EPStartXfer+0x51a>
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d122      	bne.n	8009308 <USB_EPStartXfer+0x51a>
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	623b      	str	r3, [r7, #32]
 80092ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092dc:	b29b      	uxth	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	4413      	add	r3, r2
 80092e4:	623b      	str	r3, [r7, #32]
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	011a      	lsls	r2, r3, #4
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	4413      	add	r3, r2
 80092f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	b29a      	uxth	r2, r3
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	891b      	ldrh	r3, [r3, #8]
 8009314:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6959      	ldr	r1, [r3, #20]
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009328:	b29b      	uxth	r3, r3
 800932a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800932e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009332:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009336:	6800      	ldr	r0, [r0, #0]
 8009338:	f001 fa38 	bl	800a7ac <USB_WritePMA>
 800933c:	e3ee      	b.n	8009b1c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800933e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	785b      	ldrb	r3, [r3, #1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d177      	bne.n	800943e <USB_EPStartXfer+0x650>
 800934e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	64bb      	str	r3, [r7, #72]	; 0x48
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009368:	b29b      	uxth	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936e:	4413      	add	r3, r2
 8009370:	64bb      	str	r3, [r7, #72]	; 0x48
 8009372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	011a      	lsls	r2, r3, #4
 8009380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009382:	4413      	add	r3, r2
 8009384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009388:	647b      	str	r3, [r7, #68]	; 0x44
 800938a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009394:	b29a      	uxth	r2, r3
 8009396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939e:	2b3e      	cmp	r3, #62	; 0x3e
 80093a0:	d921      	bls.n	80093e6 <USB_EPStartXfer+0x5f8>
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b0:	f003 031f 	and.w	r3, r3, #31
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d104      	bne.n	80093c2 <USB_EPStartXfer+0x5d4>
 80093b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093bc:	3b01      	subs	r3, #1
 80093be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	029b      	lsls	r3, r3, #10
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093de:	b29a      	uxth	r2, r3
 80093e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e056      	b.n	8009494 <USB_EPStartXfer+0x6a6>
 80093e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <USB_EPStartXfer+0x616>
 80093ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009400:	801a      	strh	r2, [r3, #0]
 8009402:	e047      	b.n	8009494 <USB_EPStartXfer+0x6a6>
 8009404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800940e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <USB_EPStartXfer+0x636>
 800941a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800941e:	3301      	adds	r3, #1
 8009420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800942e:	b29b      	uxth	r3, r3
 8009430:	029b      	lsls	r3, r3, #10
 8009432:	b29b      	uxth	r3, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	b29a      	uxth	r2, r3
 8009438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e02a      	b.n	8009494 <USB_EPStartXfer+0x6a6>
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d122      	bne.n	8009494 <USB_EPStartXfer+0x6a6>
 800944e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	653b      	str	r3, [r7, #80]	; 0x50
 800945a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009468:	b29b      	uxth	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946e:	4413      	add	r3, r2
 8009470:	653b      	str	r3, [r7, #80]	; 0x50
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	011a      	lsls	r2, r3, #4
 8009480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009482:	4413      	add	r3, r2
 8009484:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	b29a      	uxth	r2, r3
 8009490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009492:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	891b      	ldrh	r3, [r3, #8]
 80094a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6959      	ldr	r1, [r3, #20]
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094c2:	6800      	ldr	r0, [r0, #0]
 80094c4:	f001 f972 	bl	800a7ac <USB_WritePMA>
            ep->xfer_buff += len;
 80094c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695a      	ldr	r2, [r3, #20]
 80094d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d8:	441a      	add	r2, r3
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6a1a      	ldr	r2, [r3, #32]
 80094f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d90f      	bls.n	8009522 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6a1a      	ldr	r2, [r3, #32]
 800950e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009512:	1ad2      	subs	r2, r2, r3
 8009514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	621a      	str	r2, [r3, #32]
 8009520:	e00e      	b.n	8009540 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	643b      	str	r3, [r7, #64]	; 0x40
 800954c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d177      	bne.n	800964c <USB_EPStartXfer+0x85e>
 800955c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	63bb      	str	r3, [r7, #56]	; 0x38
 8009568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	4413      	add	r3, r2
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	011a      	lsls	r2, r3, #4
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	4413      	add	r3, r2
 8009592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009596:	637b      	str	r3, [r7, #52]	; 0x34
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ac:	2b3e      	cmp	r3, #62	; 0x3e
 80095ae:	d921      	bls.n	80095f4 <USB_EPStartXfer+0x806>
 80095b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095be:	f003 031f 	and.w	r3, r3, #31
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <USB_EPStartXfer+0x7e2>
 80095c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ca:	3b01      	subs	r3, #1
 80095cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095da:	b29b      	uxth	r3, r3
 80095dc:	029b      	lsls	r3, r3, #10
 80095de:	b29b      	uxth	r3, r3
 80095e0:	4313      	orrs	r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e050      	b.n	8009696 <USB_EPStartXfer+0x8a8>
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <USB_EPStartXfer+0x824>
 80095fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29b      	uxth	r3, r3
 8009602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960a:	b29a      	uxth	r2, r3
 800960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	e041      	b.n	8009696 <USB_EPStartXfer+0x8a8>
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <USB_EPStartXfer+0x844>
 8009628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962c:	3301      	adds	r3, #1
 800962e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29a      	uxth	r2, r3
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	b29b      	uxth	r3, r3
 800963e:	029b      	lsls	r3, r3, #10
 8009640:	b29b      	uxth	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	e024      	b.n	8009696 <USB_EPStartXfer+0x8a8>
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d11c      	bne.n	8009696 <USB_EPStartXfer+0x8a8>
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966a:	b29b      	uxth	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009670:	4413      	add	r3, r2
 8009672:	643b      	str	r3, [r7, #64]	; 0x40
 8009674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	011a      	lsls	r2, r3, #4
 8009682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009684:	4413      	add	r3, r2
 8009686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009690:	b29a      	uxth	r2, r3
 8009692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	895b      	ldrh	r3, [r3, #10]
 80096a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6959      	ldr	r1, [r3, #20]
 80096b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096c4:	6800      	ldr	r0, [r0, #0]
 80096c6:	f001 f871 	bl	800a7ac <USB_WritePMA>
 80096ca:	e227      	b.n	8009b1c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80096fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009702:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	441a      	add	r2, r3
 8009720:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800972c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009734:	b29b      	uxth	r3, r3
 8009736:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009752:	b29b      	uxth	r3, r3
 8009754:	461a      	mov	r2, r3
 8009756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009758:	4413      	add	r3, r2
 800975a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	011a      	lsls	r2, r3, #4
 800976a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800976c:	4413      	add	r3, r2
 800976e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009772:	65bb      	str	r3, [r7, #88]	; 0x58
 8009774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009778:	b29a      	uxth	r2, r3
 800977a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800977c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800977e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	891b      	ldrh	r3, [r3, #8]
 800978a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800978e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6959      	ldr	r1, [r3, #20]
 800979a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80097a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f000 fffd 	bl	800a7ac <USB_WritePMA>
 80097b2:	e1b3      	b.n	8009b1c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80097b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6a1a      	ldr	r2, [r3, #32]
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c4:	1ad2      	subs	r2, r2, r3
 80097c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80c6 	beq.w	8009986 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	673b      	str	r3, [r7, #112]	; 0x70
 8009806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d177      	bne.n	8009906 <USB_EPStartXfer+0xb18>
 8009816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	66bb      	str	r3, [r7, #104]	; 0x68
 8009822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009830:	b29b      	uxth	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009836:	4413      	add	r3, r2
 8009838:	66bb      	str	r3, [r7, #104]	; 0x68
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	011a      	lsls	r2, r3, #4
 8009848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800984a:	4413      	add	r3, r2
 800984c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009850:	667b      	str	r3, [r7, #100]	; 0x64
 8009852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800985c:	b29a      	uxth	r2, r3
 800985e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009866:	2b3e      	cmp	r3, #62	; 0x3e
 8009868:	d921      	bls.n	80098ae <USB_EPStartXfer+0xac0>
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986e:	095b      	lsrs	r3, r3, #5
 8009870:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	2b00      	cmp	r3, #0
 800987e:	d104      	bne.n	800988a <USB_EPStartXfer+0xa9c>
 8009880:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009884:	3b01      	subs	r3, #1
 8009886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800988a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29a      	uxth	r2, r3
 8009890:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009894:	b29b      	uxth	r3, r3
 8009896:	029b      	lsls	r3, r3, #10
 8009898:	b29b      	uxth	r3, r3
 800989a:	4313      	orrs	r3, r2
 800989c:	b29b      	uxth	r3, r3
 800989e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e050      	b.n	8009950 <USB_EPStartXfer+0xb62>
 80098ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <USB_EPStartXfer+0xade>
 80098b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	e041      	b.n	8009950 <USB_EPStartXfer+0xb62>
 80098cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <USB_EPStartXfer+0xafe>
 80098e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80098e6:	3301      	adds	r3, #1
 80098e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	029b      	lsls	r3, r3, #10
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4313      	orrs	r3, r2
 80098fe:	b29a      	uxth	r2, r3
 8009900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009902:	801a      	strh	r2, [r3, #0]
 8009904:	e024      	b.n	8009950 <USB_EPStartXfer+0xb62>
 8009906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	785b      	ldrb	r3, [r3, #1]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d11c      	bne.n	8009950 <USB_EPStartXfer+0xb62>
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009924:	b29b      	uxth	r3, r3
 8009926:	461a      	mov	r2, r3
 8009928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800992a:	4413      	add	r3, r2
 800992c:	673b      	str	r3, [r7, #112]	; 0x70
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	011a      	lsls	r2, r3, #4
 800993c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800993e:	4413      	add	r3, r2
 8009940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994a:	b29a      	uxth	r2, r3
 800994c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	895b      	ldrh	r3, [r3, #10]
 800995c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6959      	ldr	r1, [r3, #20]
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009970:	b29b      	uxth	r3, r3
 8009972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009976:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800997a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800997e:	6800      	ldr	r0, [r0, #0]
 8009980:	f000 ff14 	bl	800a7ac <USB_WritePMA>
 8009984:	e0ca      	b.n	8009b1c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d177      	bne.n	8009a86 <USB_EPStartXfer+0xc98>
 8009996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099b6:	4413      	add	r3, r2
 80099b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	011a      	lsls	r2, r3, #4
 80099c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099ca:	4413      	add	r3, r2
 80099cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80099d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e6:	2b3e      	cmp	r3, #62	; 0x3e
 80099e8:	d921      	bls.n	8009a2e <USB_EPStartXfer+0xc40>
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <USB_EPStartXfer+0xc1c>
 8009a00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a04:	3b01      	subs	r3, #1
 8009a06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	029b      	lsls	r3, r3, #10
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a2a:	801a      	strh	r2, [r3, #0]
 8009a2c:	e05c      	b.n	8009ae8 <USB_EPStartXfer+0xcfa>
 8009a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <USB_EPStartXfer+0xc5e>
 8009a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a48:	801a      	strh	r2, [r3, #0]
 8009a4a:	e04d      	b.n	8009ae8 <USB_EPStartXfer+0xcfa>
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <USB_EPStartXfer+0xc7e>
 8009a62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	029b      	lsls	r3, r3, #10
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e030      	b.n	8009ae8 <USB_EPStartXfer+0xcfa>
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d128      	bne.n	8009ae8 <USB_EPStartXfer+0xcfa>
 8009a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aba:	4413      	add	r3, r2
 8009abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	011a      	lsls	r2, r3, #4
 8009ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ae6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	891b      	ldrh	r3, [r3, #8]
 8009af4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6959      	ldr	r1, [r3, #20]
 8009b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b16:	6800      	ldr	r0, [r0, #0]
 8009b18:	f000 fe48 	bl	800a7ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b42:	817b      	strh	r3, [r7, #10]
 8009b44:	897b      	ldrh	r3, [r7, #10]
 8009b46:	f083 0310 	eor.w	r3, r3, #16
 8009b4a:	817b      	strh	r3, [r7, #10]
 8009b4c:	897b      	ldrh	r3, [r7, #10]
 8009b4e:	f083 0320 	eor.w	r3, r3, #32
 8009b52:	817b      	strh	r3, [r7, #10]
 8009b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	897b      	ldrh	r3, [r7, #10]
 8009b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	8013      	strh	r3, [r2, #0]
 8009b84:	f000 bcde 	b.w	800a544 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	7b1b      	ldrb	r3, [r3, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f040 80bb 	bne.w	8009d10 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699a      	ldr	r2, [r3, #24]
 8009ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d917      	bls.n	8009be6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	619a      	str	r2, [r3, #24]
 8009be4:	e00e      	b.n	8009c04 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2200      	movs	r2, #0
 8009c02:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	461a      	mov	r2, r3
 8009c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c28:	4413      	add	r3, r2
 8009c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	011a      	lsls	r2, r3, #4
 8009c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c40:	4413      	add	r3, r2
 8009c42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c5c:	801a      	strh	r2, [r3, #0]
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c62:	2b3e      	cmp	r3, #62	; 0x3e
 8009c64:	d924      	bls.n	8009cb0 <USB_EPStartXfer+0xec2>
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c74:	f003 031f 	and.w	r3, r3, #31
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d104      	bne.n	8009c86 <USB_EPStartXfer+0xe98>
 8009c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c80:	3b01      	subs	r3, #1
 8009c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	029b      	lsls	r3, r3, #10
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009caa:	801a      	strh	r2, [r3, #0]
 8009cac:	f000 bc10 	b.w	800a4d0 <USB_EPStartXfer+0x16e2>
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10c      	bne.n	8009cd2 <USB_EPStartXfer+0xee4>
 8009cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e3fe      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <USB_EPStartXfer+0xf04>
 8009ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cec:	3301      	adds	r3, #1
 8009cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d0c:	801a      	strh	r2, [r3, #0]
 8009d0e:	e3df      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	78db      	ldrb	r3, [r3, #3]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	f040 8218 	bne.w	800a152 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f040 809d 	bne.w	8009e6e <USB_EPStartXfer+0x1080>
 8009d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d58:	4413      	add	r3, r2
 8009d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	011a      	lsls	r2, r3, #4
 8009d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d70:	4413      	add	r3, r2
 8009d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009d9c:	d92b      	bls.n	8009df6 <USB_EPStartXfer+0x1008>
 8009d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <USB_EPStartXfer+0xfe0>
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009df2:	801a      	strh	r2, [r3, #0]
 8009df4:	e070      	b.n	8009ed8 <USB_EPStartXfer+0x10ea>
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10c      	bne.n	8009e20 <USB_EPStartXfer+0x1032>
 8009e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e1c:	801a      	strh	r2, [r3, #0]
 8009e1e:	e05b      	b.n	8009ed8 <USB_EPStartXfer+0x10ea>
 8009e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d004      	beq.n	8009e50 <USB_EPStartXfer+0x1062>
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	029b      	lsls	r3, r3, #10
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4313      	orrs	r3, r2
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e6a:	801a      	strh	r2, [r3, #0]
 8009e6c:	e034      	b.n	8009ed8 <USB_EPStartXfer+0x10ea>
 8009e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	785b      	ldrb	r3, [r3, #1]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d12c      	bne.n	8009ed8 <USB_EPStartXfer+0x10ea>
 8009e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	011a      	lsls	r2, r3, #4
 8009eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009eba:	4413      	add	r3, r2
 8009ebc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f040 809d 	bne.w	800a032 <USB_EPStartXfer+0x1244>
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	011a      	lsls	r2, r3, #4
 8009f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f34:	4413      	add	r3, r2
 8009f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f50:	801a      	strh	r2, [r3, #0]
 8009f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f60:	d92b      	bls.n	8009fba <USB_EPStartXfer+0x11cc>
 8009f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	095b      	lsrs	r3, r3, #5
 8009f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	f003 031f 	and.w	r3, r3, #31
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <USB_EPStartXfer+0x11a4>
 8009f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	029b      	lsls	r3, r3, #10
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fb6:	801a      	strh	r2, [r3, #0]
 8009fb8:	e069      	b.n	800a08e <USB_EPStartXfer+0x12a0>
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10c      	bne.n	8009fe4 <USB_EPStartXfer+0x11f6>
 8009fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e054      	b.n	800a08e <USB_EPStartXfer+0x12a0>
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <USB_EPStartXfer+0x1226>
 800a00a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a00e:	3301      	adds	r3, #1
 800a010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a020:	b29b      	uxth	r3, r3
 800a022:	029b      	lsls	r3, r3, #10
 800a024:	b29b      	uxth	r3, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a02e:	801a      	strh	r2, [r3, #0]
 800a030:	e02d      	b.n	800a08e <USB_EPStartXfer+0x12a0>
 800a032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d125      	bne.n	800a08e <USB_EPStartXfer+0x12a0>
 800a042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a050:	b29b      	uxth	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a058:	4413      	add	r3, r2
 800a05a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	011a      	lsls	r2, r3, #4
 800a06c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a070:	4413      	add	r3, r2
 800a072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	b29a      	uxth	r2, r3
 800a088:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a08c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 8218 	beq.w	800a4d0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <USB_EPStartXfer+0x12ea>
 800a0cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10d      	bne.n	800a0f4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 81f5 	bne.w	800a4d0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 81ee 	bne.w	800a4d0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	441a      	add	r2, r3
 800a138:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	8013      	strh	r3, [r2, #0]
 800a150:	e1be      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	78db      	ldrb	r3, [r3, #3]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	f040 81b4 	bne.w	800a4cc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699a      	ldr	r2, [r3, #24]
 800a170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d917      	bls.n	800a1b0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a0:	1ad2      	subs	r2, r2, r3
 800a1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	619a      	str	r2, [r3, #24]
 800a1ae:	e00e      	b.n	800a1ce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 8085 	bne.w	800a2ea <USB_EPStartXfer+0x14fc>
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a204:	4413      	add	r3, r2
 800a206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	011a      	lsls	r2, r3, #4
 800a218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a232:	b29a      	uxth	r2, r3
 800a234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23e:	2b3e      	cmp	r3, #62	; 0x3e
 800a240:	d923      	bls.n	800a28a <USB_EPStartXfer+0x149c>
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	2b00      	cmp	r3, #0
 800a256:	d104      	bne.n	800a262 <USB_EPStartXfer+0x1474>
 800a258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a25c:	3b01      	subs	r3, #1
 800a25e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a26e:	b29b      	uxth	r3, r3
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	b29b      	uxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b29b      	uxth	r3, r3
 800a278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a27c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a280:	b29a      	uxth	r2, r3
 800a282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a286:	801a      	strh	r2, [r3, #0]
 800a288:	e060      	b.n	800a34c <USB_EPStartXfer+0x155e>
 800a28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10c      	bne.n	800a2ac <USB_EPStartXfer+0x14be>
 800a292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a29e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	e04f      	b.n	800a34c <USB_EPStartXfer+0x155e>
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b0:	085b      	lsrs	r3, r3, #1
 800a2b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <USB_EPStartXfer+0x14de>
 800a2c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	029b      	lsls	r3, r3, #10
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2e6:	801a      	strh	r2, [r3, #0]
 800a2e8:	e030      	b.n	800a34c <USB_EPStartXfer+0x155e>
 800a2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	785b      	ldrb	r3, [r3, #1]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d128      	bne.n	800a34c <USB_EPStartXfer+0x155e>
 800a2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a316:	b29b      	uxth	r3, r3
 800a318:	461a      	mov	r2, r3
 800a31a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a31e:	4413      	add	r3, r2
 800a320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	011a      	lsls	r2, r3, #4
 800a332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a336:	4413      	add	r3, r2
 800a338:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a33c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a344:	b29a      	uxth	r2, r3
 800a346:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f040 8085 	bne.w	800a476 <USB_EPStartXfer+0x1688>
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a388:	b29b      	uxth	r3, r3
 800a38a:	461a      	mov	r2, r3
 800a38c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a390:	4413      	add	r3, r2
 800a392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	011a      	lsls	r2, r3, #4
 800a3a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3c4:	801a      	strh	r2, [r3, #0]
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ca:	2b3e      	cmp	r3, #62	; 0x3e
 800a3cc:	d923      	bls.n	800a416 <USB_EPStartXfer+0x1628>
 800a3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d2:	095b      	lsrs	r3, r3, #5
 800a3d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	f003 031f 	and.w	r3, r3, #31
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d104      	bne.n	800a3ee <USB_EPStartXfer+0x1600>
 800a3e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	029b      	lsls	r3, r3, #10
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	b29b      	uxth	r3, r3
 800a404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a412:	801a      	strh	r2, [r3, #0]
 800a414:	e05c      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10c      	bne.n	800a438 <USB_EPStartXfer+0x164a>
 800a41e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e04b      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43c:	085b      	lsrs	r3, r3, #1
 800a43e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <USB_EPStartXfer+0x166a>
 800a44e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a452:	3301      	adds	r3, #1
 800a454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29a      	uxth	r2, r3
 800a460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a464:	b29b      	uxth	r3, r3
 800a466:	029b      	lsls	r3, r3, #10
 800a468:	b29b      	uxth	r3, r3
 800a46a:	4313      	orrs	r3, r2
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a472:	801a      	strh	r2, [r3, #0]
 800a474:	e02c      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d124      	bne.n	800a4d0 <USB_EPStartXfer+0x16e2>
 800a486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a494:	b29b      	uxth	r3, r3
 800a496:	461a      	mov	r2, r3
 800a498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a49c:	4413      	add	r3, r2
 800a49e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	011a      	lsls	r2, r3, #4
 800a4b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e001      	b.n	800a4d0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e03a      	b.n	800a546 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a4fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a4fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a502:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a506:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a50a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a50e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	441a      	add	r2, r3
 800a52c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a540:	b29b      	uxth	r3, r3
 800a542:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d020      	beq.n	800a5a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a578:	81bb      	strh	r3, [r7, #12]
 800a57a:	89bb      	ldrh	r3, [r7, #12]
 800a57c:	f083 0310 	eor.w	r3, r3, #16
 800a580:	81bb      	strh	r3, [r7, #12]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	441a      	add	r2, r3
 800a58c:	89bb      	ldrh	r3, [r7, #12]
 800a58e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	8013      	strh	r3, [r2, #0]
 800a5a2:	e01f      	b.n	800a5e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ba:	81fb      	strh	r3, [r7, #14]
 800a5bc:	89fb      	ldrh	r3, [r7, #14]
 800a5be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5c2:	81fb      	strh	r3, [r7, #14]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	441a      	add	r2, r3
 800a5ce:	89fb      	ldrh	r3, [r7, #14]
 800a5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	7b1b      	ldrb	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 809d 	bne.w	800a740 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d04c      	beq.n	800a6a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	823b      	strh	r3, [r7, #16]
 800a61c:	8a3b      	ldrh	r3, [r7, #16]
 800a61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01b      	beq.n	800a65e <USB_EPClearStall+0x6c>
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63c:	81fb      	strh	r3, [r7, #14]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	441a      	add	r2, r3
 800a648:	89fb      	ldrh	r3, [r7, #14]
 800a64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	78db      	ldrb	r3, [r3, #3]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d06c      	beq.n	800a740 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a67c:	81bb      	strh	r3, [r7, #12]
 800a67e:	89bb      	ldrh	r3, [r7, #12]
 800a680:	f083 0320 	eor.w	r3, r3, #32
 800a684:	81bb      	strh	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	441a      	add	r2, r3
 800a690:	89bb      	ldrh	r3, [r7, #12]
 800a692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a69a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	8013      	strh	r3, [r2, #0]
 800a6a6:	e04b      	b.n	800a740 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	82fb      	strh	r3, [r7, #22]
 800a6b6:	8afb      	ldrh	r3, [r7, #22]
 800a6b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01b      	beq.n	800a6f8 <USB_EPClearStall+0x106>
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6d6:	82bb      	strh	r3, [r7, #20]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	441a      	add	r2, r3
 800a6e2:	8abb      	ldrh	r3, [r7, #20]
 800a6e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70e:	827b      	strh	r3, [r7, #18]
 800a710:	8a7b      	ldrh	r3, [r7, #18]
 800a712:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a716:	827b      	strh	r3, [r7, #18]
 800a718:	8a7b      	ldrh	r3, [r7, #18]
 800a71a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a71e:	827b      	strh	r3, [r7, #18]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	441a      	add	r2, r3
 800a72a:	8a7b      	ldrh	r3, [r7, #18]
 800a72c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d103      	bne.n	800a768 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2280      	movs	r2, #128	; 0x80
 800a764:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a79e:	68fb      	ldr	r3, [r7, #12]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b08b      	sub	sp, #44	; 0x2c
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	80fb      	strh	r3, [r7, #6]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a7c2:	88bb      	ldrh	r3, [r7, #4]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	005a      	lsls	r2, r3, #1
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e4:	e01e      	b.n	800a824 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	021b      	lsls	r3, r3, #8
 800a7f4:	b21a      	sxth	r2, r3
 800a7f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	8a7a      	ldrh	r2, [r7, #18]
 800a804:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	3302      	adds	r3, #2
 800a80a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	3302      	adds	r3, #2
 800a810:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	3301      	adds	r3, #1
 800a816:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	3301      	adds	r3, #1
 800a81c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	3b01      	subs	r3, #1
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1dd      	bne.n	800a7e6 <USB_WritePMA+0x3a>
  }
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	372c      	adds	r7, #44	; 0x2c
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a838:	b480      	push	{r7}
 800a83a:	b08b      	sub	sp, #44	; 0x2c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4611      	mov	r1, r2
 800a844:	461a      	mov	r2, r3
 800a846:	460b      	mov	r3, r1
 800a848:	80fb      	strh	r3, [r7, #6]
 800a84a:	4613      	mov	r3, r2
 800a84c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a84e:	88bb      	ldrh	r3, [r7, #4]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	b29b      	uxth	r3, r3
 800a854:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	005a      	lsls	r2, r3, #1
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a86a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
 800a870:	e01b      	b.n	800a8aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	b29b      	uxth	r3, r3
 800a878:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	3302      	adds	r3, #2
 800a87e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	b2da      	uxtb	r2, r3
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	3301      	adds	r3, #1
 800a88c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	0a1b      	lsrs	r3, r3, #8
 800a892:	b2da      	uxtb	r2, r3
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	3301      	adds	r3, #1
 800a89c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e0      	bne.n	800a872 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a8b0:	88bb      	ldrh	r3, [r7, #4]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d007      	beq.n	800a8cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	701a      	strb	r2, [r3, #0]
  }
}
 800a8cc:	bf00      	nop
 800a8ce:	372c      	adds	r7, #44	; 0x2c
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7c1b      	ldrb	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d115      	bne.n	800a91c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	2181      	movs	r1, #129	; 0x81
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 fef2 	bl	800c6e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a904:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a908:	2202      	movs	r2, #2
 800a90a:	2101      	movs	r1, #1
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f001 fee8 	bl	800c6e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a91a:	e012      	b.n	800a942 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a91c:	2340      	movs	r3, #64	; 0x40
 800a91e:	2202      	movs	r2, #2
 800a920:	2181      	movs	r1, #129	; 0x81
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 fedd 	bl	800c6e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a92e:	2340      	movs	r3, #64	; 0x40
 800a930:	2202      	movs	r2, #2
 800a932:	2101      	movs	r1, #1
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f001 fed4 	bl	800c6e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a942:	2308      	movs	r3, #8
 800a944:	2203      	movs	r2, #3
 800a946:	2182      	movs	r1, #130	; 0x82
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 feca 	bl	800c6e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a954:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a958:	f001 ffec 	bl	800c934 <USBD_static_malloc>
 800a95c:	4602      	mov	r2, r0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d102      	bne.n	800a974 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a96e:	2301      	movs	r3, #1
 800a970:	73fb      	strb	r3, [r7, #15]
 800a972:	e026      	b.n	800a9c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7c1b      	ldrb	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 ff8b 	bl	800c8c6 <USBD_LL_PrepareReceive>
 800a9b0:	e007      	b.n	800a9c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 ff82 	bl	800c8c6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a9dc:	2181      	movs	r1, #129	; 0x81
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 fea5 	bl	800c72e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fe9e 	bl	800c72e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9fa:	2182      	movs	r1, #130	; 0x82
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 fe96 	bl	800c72e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00e      	beq.n	800aa30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 ff94 	bl	800c950 <USBD_static_free>
    pdev->pClassData = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d039      	beq.n	800aad8 <USBD_CDC_Setup+0x9e>
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d17f      	bne.n	800ab68 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	88db      	ldrh	r3, [r3, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d029      	beq.n	800aac4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	b25b      	sxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da11      	bge.n	800aa9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aa86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	88d2      	ldrh	r2, [r2, #6]
 800aa8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa8e:	6939      	ldr	r1, [r7, #16]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	88db      	ldrh	r3, [r3, #6]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 fa13 	bl	800bec2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aa9c:	e06b      	b.n	800ab76 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	785a      	ldrb	r2, [r3, #1]
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	88db      	ldrh	r3, [r3, #6]
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aab4:	6939      	ldr	r1, [r7, #16]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	88db      	ldrh	r3, [r3, #6]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fa2e 	bl	800bf1e <USBD_CtlPrepareRx>
      break;
 800aac2:	e058      	b.n	800ab76 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	7850      	ldrb	r0, [r2, #1]
 800aad0:	2200      	movs	r2, #0
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	4798      	blx	r3
      break;
 800aad6:	e04e      	b.n	800ab76 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	785b      	ldrb	r3, [r3, #1]
 800aadc:	2b0b      	cmp	r3, #11
 800aade:	d02e      	beq.n	800ab3e <USBD_CDC_Setup+0x104>
 800aae0:	2b0b      	cmp	r3, #11
 800aae2:	dc38      	bgt.n	800ab56 <USBD_CDC_Setup+0x11c>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <USBD_CDC_Setup+0xb4>
 800aae8:	2b0a      	cmp	r3, #10
 800aaea:	d014      	beq.n	800ab16 <USBD_CDC_Setup+0xdc>
 800aaec:	e033      	b.n	800ab56 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d107      	bne.n	800ab08 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aaf8:	f107 030c 	add.w	r3, r7, #12
 800aafc:	2202      	movs	r2, #2
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 f9de 	bl	800bec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab06:	e02e      	b.n	800ab66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 f96e 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800ab10:	2302      	movs	r3, #2
 800ab12:	75fb      	strb	r3, [r7, #23]
          break;
 800ab14:	e027      	b.n	800ab66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d107      	bne.n	800ab30 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab20:	f107 030f 	add.w	r3, r7, #15
 800ab24:	2201      	movs	r2, #1
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 f9ca 	bl	800bec2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab2e:	e01a      	b.n	800ab66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f95a 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800ab38:	2302      	movs	r3, #2
 800ab3a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab3c:	e013      	b.n	800ab66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d00d      	beq.n	800ab64 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f94e 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800ab50:	2302      	movs	r3, #2
 800ab52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab54:	e006      	b.n	800ab64 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 f947 	bl	800bdec <USBD_CtlError>
          ret = USBD_FAIL;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	75fb      	strb	r3, [r7, #23]
          break;
 800ab62:	e000      	b.n	800ab66 <USBD_CDC_Setup+0x12c>
          break;
 800ab64:	bf00      	nop
      }
      break;
 800ab66:	e006      	b.n	800ab76 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f001 f93e 	bl	800bdec <USBD_CtlError>
      ret = USBD_FAIL;
 800ab70:	2302      	movs	r3, #2
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	bf00      	nop
  }

  return ret;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab9a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d03a      	beq.n	800ac1c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	440b      	add	r3, r1
 800abb4:	331c      	adds	r3, #28
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d029      	beq.n	800ac10 <USBD_CDC_DataIn+0x90>
 800abbc:	78fa      	ldrb	r2, [r7, #3]
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	331c      	adds	r3, #28
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	78f9      	ldrb	r1, [r7, #3]
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	460b      	mov	r3, r1
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	4403      	add	r3, r0
 800abdc:	3338      	adds	r3, #56	; 0x38
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abe4:	fb01 f303 	mul.w	r3, r1, r3
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d110      	bne.n	800ac10 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	331c      	adds	r3, #28
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac02:	78f9      	ldrb	r1, [r7, #3]
 800ac04:	2300      	movs	r3, #0
 800ac06:	2200      	movs	r2, #0
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 fe39 	bl	800c880 <USBD_LL_Transmit>
 800ac0e:	e003      	b.n	800ac18 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e000      	b.n	800ac1e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ac1c:	2302      	movs	r3, #2
  }
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 fe64 	bl	800c90c <USBD_LL_GetRxDataSize>
 800ac44:	4602      	mov	r2, r0
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00d      	beq.n	800ac72 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4798      	blx	r3

    return USBD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e000      	b.n	800ac74 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac72:	2302      	movs	r3, #2
  }
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d015      	beq.n	800acc2 <USBD_CDC_EP0_RxReady+0x46>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac9c:	2bff      	cmp	r3, #255	; 0xff
 800ac9e:	d010      	beq.n	800acc2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800acae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800acb6:	b292      	uxth	r2, r2
 800acb8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	22ff      	movs	r2, #255	; 0xff
 800acbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2243      	movs	r2, #67	; 0x43
 800acd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800acda:	4b03      	ldr	r3, [pc, #12]	; (800ace8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	200000c0 	.word	0x200000c0

0800acec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2243      	movs	r2, #67	; 0x43
 800acf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800acfa:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	2000007c 	.word	0x2000007c

0800ad0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2243      	movs	r2, #67	; 0x43
 800ad18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000104 	.word	0x20000104

0800ad2c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	220a      	movs	r2, #10
 800ad38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ad3a:	4b03      	ldr	r3, [pc, #12]	; (800ad48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	20000038 	.word	0x20000038

0800ad4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad56:	2302      	movs	r3, #2
 800ad58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b087      	sub	sp, #28
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	60f8      	str	r0, [r7, #12]
 800ad82:	60b9      	str	r1, [r7, #8]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad98:	88fa      	ldrh	r2, [r7, #6]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01c      	beq.n	800ae2a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d115      	bne.n	800ae26 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	2181      	movs	r1, #129	; 0x81
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 fd2f 	bl	800c880 <USBD_LL_Transmit>

      return USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e002      	b.n	800ae2c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e000      	b.n	800ae2c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d017      	beq.n	800ae7e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7c1b      	ldrb	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae60:	2101      	movs	r1, #1
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f001 fd2f 	bl	800c8c6 <USBD_LL_PrepareReceive>
 800ae68:	e007      	b.n	800ae7a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	2101      	movs	r1, #1
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f001 fd26 	bl	800c8c6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae7e:	2302      	movs	r3, #2
  }
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e01a      	b.n	800aed6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	79fa      	ldrb	r2, [r7, #7]
 800aecc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 fb92 	bl	800c5f8 <USBD_LL_Init>

  return USBD_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aede:	b480      	push	{r7}
 800aee0:	b085      	sub	sp, #20
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d006      	beq.n	800af00 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]
 800aefe:	e001      	b.n	800af04 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800af00:	2302      	movs	r3, #2
 800af02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 fbc6 	bl	800c6ac <USBD_LL_Start>

  return USBD_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af4c:	2302      	movs	r3, #2
 800af4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00c      	beq.n	800af74 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	4611      	mov	r1, r2
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	78fa      	ldrb	r2, [r7, #3]
 800af94:	4611      	mov	r1, r2
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3

  return USBD_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fedb 	bl	800bd72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afd8:	f003 031f 	and.w	r3, r3, #31
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d016      	beq.n	800b00e <USBD_LL_SetupStage+0x6a>
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d81c      	bhi.n	800b01e <USBD_LL_SetupStage+0x7a>
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <USBD_LL_SetupStage+0x4a>
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d008      	beq.n	800affe <USBD_LL_SetupStage+0x5a>
 800afec:	e017      	b.n	800b01e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f9ce 	bl	800b398 <USBD_StdDevReq>
      break;
 800affc:	e01a      	b.n	800b034 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa30 	bl	800b46c <USBD_StdItfReq>
      break;
 800b00c:	e012      	b.n	800b034 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa70 	bl	800b4fc <USBD_StdEPReq>
      break;
 800b01c:	e00a      	b.n	800b034 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fb9d 	bl	800c76c <USBD_LL_StallEP>
      break;
 800b032:	bf00      	nop
  }

  return USBD_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	460b      	mov	r3, r1
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b04c:	7afb      	ldrb	r3, [r7, #11]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d14b      	bne.n	800b0ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b058:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b060:	2b03      	cmp	r3, #3
 800b062:	d134      	bne.n	800b0ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d919      	bls.n	800b0a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	1ad2      	subs	r2, r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b086:	429a      	cmp	r2, r3
 800b088:	d203      	bcs.n	800b092 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b08e:	b29b      	uxth	r3, r3
 800b090:	e002      	b.n	800b098 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b096:	b29b      	uxth	r3, r3
 800b098:	461a      	mov	r2, r3
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 ff5c 	bl	800bf5a <USBD_CtlContinueRx>
 800b0a2:	e038      	b.n	800b116 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d105      	bne.n	800b0c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 ff59 	bl	800bf7e <USBD_CtlSendStatus>
 800b0cc:	e023      	b.n	800b116 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0d4:	2b05      	cmp	r3, #5
 800b0d6:	d11e      	bne.n	800b116 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f001 fb42 	bl	800c76c <USBD_LL_StallEP>
 800b0e8:	e015      	b.n	800b116 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00d      	beq.n	800b112 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d108      	bne.n	800b112 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	7afa      	ldrb	r2, [r7, #11]
 800b10a:	4611      	mov	r1, r2
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	4798      	blx	r3
 800b110:	e001      	b.n	800b116 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	e000      	b.n	800b118 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	460b      	mov	r3, r1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d17f      	bne.n	800b234 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3314      	adds	r3, #20
 800b138:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b140:	2b02      	cmp	r3, #2
 800b142:	d15c      	bne.n	800b1fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d915      	bls.n	800b17c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	1ad2      	subs	r2, r2, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	b29b      	uxth	r3, r3
 800b164:	461a      	mov	r2, r3
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fec6 	bl	800befa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b16e:	2300      	movs	r3, #0
 800b170:	2200      	movs	r2, #0
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f001 fba6 	bl	800c8c6 <USBD_LL_PrepareReceive>
 800b17a:	e04e      	b.n	800b21a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	6912      	ldr	r2, [r2, #16]
 800b184:	fbb3 f1f2 	udiv	r1, r3, r2
 800b188:	fb01 f202 	mul.w	r2, r1, r2
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d11c      	bne.n	800b1cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d316      	bcc.n	800b1cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d20f      	bcs.n	800b1cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fea2 	bl	800befa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f001 fb7e 	bl	800c8c6 <USBD_LL_PrepareReceive>
 800b1ca:	e026      	b.n	800b21a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00a      	beq.n	800b1ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d105      	bne.n	800b1ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f001 fabb 	bl	800c76c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 fed4 	bl	800bfa4 <USBD_CtlReceiveStatus>
 800b1fc:	e00d      	b.n	800b21a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b204:	2b04      	cmp	r3, #4
 800b206:	d004      	beq.n	800b212 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b212:	2180      	movs	r1, #128	; 0x80
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f001 faa9 	bl	800c76c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b220:	2b01      	cmp	r3, #1
 800b222:	d11d      	bne.n	800b260 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fe80 	bl	800af2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b232:	e015      	b.n	800b260 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00d      	beq.n	800b25c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b246:	2b03      	cmp	r3, #3
 800b248:	d108      	bne.n	800b25c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	7afa      	ldrb	r2, [r7, #11]
 800b254:	4611      	mov	r1, r2
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	4798      	blx	r3
 800b25a:	e001      	b.n	800b260 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b25c:	2302      	movs	r3, #2
 800b25e:	e000      	b.n	800b262 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b272:	2340      	movs	r3, #64	; 0x40
 800b274:	2200      	movs	r2, #0
 800b276:	2100      	movs	r1, #0
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 fa32 	bl	800c6e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2240      	movs	r2, #64	; 0x40
 800b28a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	2200      	movs	r2, #0
 800b292:	2180      	movs	r1, #128	; 0x80
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 fa24 	bl	800c6e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2240      	movs	r2, #64	; 0x40
 800b2a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6852      	ldr	r2, [r2, #4]
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	4611      	mov	r1, r2
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	4798      	blx	r3
  }

  return USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	78fa      	ldrb	r2, [r7, #3]
 800b2fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2204      	movs	r2, #4
 800b324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b344:	2b04      	cmp	r3, #4
 800b346:	d105      	bne.n	800b354 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b370:	2b03      	cmp	r3, #3
 800b372:	d10b      	bne.n	800b38c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d005      	beq.n	800b38c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3ae:	2b40      	cmp	r3, #64	; 0x40
 800b3b0:	d005      	beq.n	800b3be <USBD_StdDevReq+0x26>
 800b3b2:	2b40      	cmp	r3, #64	; 0x40
 800b3b4:	d84f      	bhi.n	800b456 <USBD_StdDevReq+0xbe>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <USBD_StdDevReq+0x36>
 800b3ba:	2b20      	cmp	r3, #32
 800b3bc:	d14b      	bne.n	800b456 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	4798      	blx	r3
      break;
 800b3cc:	e048      	b.n	800b460 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d839      	bhi.n	800b44a <USBD_StdDevReq+0xb2>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <USBD_StdDevReq+0x44>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b42d 	.word	0x0800b42d
 800b3e0:	0800b441 	.word	0x0800b441
 800b3e4:	0800b44b 	.word	0x0800b44b
 800b3e8:	0800b437 	.word	0x0800b437
 800b3ec:	0800b44b 	.word	0x0800b44b
 800b3f0:	0800b40f 	.word	0x0800b40f
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b44b 	.word	0x0800b44b
 800b3fc:	0800b423 	.word	0x0800b423
 800b400:	0800b419 	.word	0x0800b419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f9dc 	bl	800b7c4 <USBD_GetDescriptor>
          break;
 800b40c:	e022      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fb3f 	bl	800ba94 <USBD_SetAddress>
          break;
 800b416:	e01d      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fb7e 	bl	800bb1c <USBD_SetConfig>
          break;
 800b420:	e018      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fc07 	bl	800bc38 <USBD_GetConfig>
          break;
 800b42a:	e013      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fc37 	bl	800bca2 <USBD_GetStatus>
          break;
 800b434:	e00e      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fc65 	bl	800bd08 <USBD_SetFeature>
          break;
 800b43e:	e009      	b.n	800b454 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fc74 	bl	800bd30 <USBD_ClrFeature>
          break;
 800b448:	e004      	b.n	800b454 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fccd 	bl	800bdec <USBD_CtlError>
          break;
 800b452:	bf00      	nop
      }
      break;
 800b454:	e004      	b.n	800b460 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fcc7 	bl	800bdec <USBD_CtlError>
      break;
 800b45e:	bf00      	nop
  }

  return ret;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop

0800b46c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b482:	2b40      	cmp	r3, #64	; 0x40
 800b484:	d005      	beq.n	800b492 <USBD_StdItfReq+0x26>
 800b486:	2b40      	cmp	r3, #64	; 0x40
 800b488:	d82e      	bhi.n	800b4e8 <USBD_StdItfReq+0x7c>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <USBD_StdItfReq+0x26>
 800b48e:	2b20      	cmp	r3, #32
 800b490:	d12a      	bne.n	800b4e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d81d      	bhi.n	800b4da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	889b      	ldrh	r3, [r3, #4]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d813      	bhi.n	800b4d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	88db      	ldrh	r3, [r3, #6]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d110      	bne.n	800b4e4 <USBD_StdItfReq+0x78>
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10d      	bne.n	800b4e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fd58 	bl	800bf7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ce:	e009      	b.n	800b4e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fc8a 	bl	800bdec <USBD_CtlError>
          break;
 800b4d8:	e004      	b.n	800b4e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fc85 	bl	800bdec <USBD_CtlError>
          break;
 800b4e2:	e000      	b.n	800b4e6 <USBD_StdItfReq+0x7a>
          break;
 800b4e4:	bf00      	nop
      }
      break;
 800b4e6:	e004      	b.n	800b4f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fc7e 	bl	800bdec <USBD_CtlError>
      break;
 800b4f0:	bf00      	nop
  }

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	889b      	ldrh	r3, [r3, #4]
 800b50e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	d007      	beq.n	800b52c <USBD_StdEPReq+0x30>
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	f200 8146 	bhi.w	800b7ae <USBD_StdEPReq+0x2b2>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <USBD_StdEPReq+0x40>
 800b526:	2b20      	cmp	r3, #32
 800b528:	f040 8141 	bne.w	800b7ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
      break;
 800b53a:	e13d      	b.n	800b7b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b544:	2b20      	cmp	r3, #32
 800b546:	d10a      	bne.n	800b55e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
 800b556:	4603      	mov	r3, r0
 800b558:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	e12d      	b.n	800b7ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	2b03      	cmp	r3, #3
 800b564:	d007      	beq.n	800b576 <USBD_StdEPReq+0x7a>
 800b566:	2b03      	cmp	r3, #3
 800b568:	f300 811b 	bgt.w	800b7a2 <USBD_StdEPReq+0x2a6>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d072      	beq.n	800b656 <USBD_StdEPReq+0x15a>
 800b570:	2b01      	cmp	r3, #1
 800b572:	d03a      	beq.n	800b5ea <USBD_StdEPReq+0xee>
 800b574:	e115      	b.n	800b7a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d002      	beq.n	800b586 <USBD_StdEPReq+0x8a>
 800b580:	2b03      	cmp	r3, #3
 800b582:	d015      	beq.n	800b5b0 <USBD_StdEPReq+0xb4>
 800b584:	e02b      	b.n	800b5de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00c      	beq.n	800b5a6 <USBD_StdEPReq+0xaa>
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d009      	beq.n	800b5a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f001 f8e8 	bl	800c76c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b59c:	2180      	movs	r1, #128	; 0x80
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f8e4 	bl	800c76c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5a4:	e020      	b.n	800b5e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fc1f 	bl	800bdec <USBD_CtlError>
              break;
 800b5ae:	e01b      	b.n	800b5e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	885b      	ldrh	r3, [r3, #2]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10e      	bne.n	800b5d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <USBD_StdEPReq+0xda>
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b80      	cmp	r3, #128	; 0x80
 800b5c2:	d008      	beq.n	800b5d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	88db      	ldrh	r3, [r3, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 f8cb 	bl	800c76c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fcd1 	bl	800bf7e <USBD_CtlSendStatus>

              break;
 800b5dc:	e004      	b.n	800b5e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc03 	bl	800bdec <USBD_CtlError>
              break;
 800b5e6:	bf00      	nop
          }
          break;
 800b5e8:	e0e0      	b.n	800b7ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d002      	beq.n	800b5fa <USBD_StdEPReq+0xfe>
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d015      	beq.n	800b624 <USBD_StdEPReq+0x128>
 800b5f8:	e026      	b.n	800b648 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00c      	beq.n	800b61a <USBD_StdEPReq+0x11e>
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	2b80      	cmp	r3, #128	; 0x80
 800b604:	d009      	beq.n	800b61a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f001 f8ae 	bl	800c76c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b610:	2180      	movs	r1, #128	; 0x80
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 f8aa 	bl	800c76c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b618:	e01c      	b.n	800b654 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fbe5 	bl	800bdec <USBD_CtlError>
              break;
 800b622:	e017      	b.n	800b654 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	885b      	ldrh	r3, [r3, #2]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d112      	bne.n	800b652 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b632:	2b00      	cmp	r3, #0
 800b634:	d004      	beq.n	800b640 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 f8b5 	bl	800c7aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fc9c 	bl	800bf7e <USBD_CtlSendStatus>
              }
              break;
 800b646:	e004      	b.n	800b652 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fbce 	bl	800bdec <USBD_CtlError>
              break;
 800b650:	e000      	b.n	800b654 <USBD_StdEPReq+0x158>
              break;
 800b652:	bf00      	nop
          }
          break;
 800b654:	e0aa      	b.n	800b7ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d002      	beq.n	800b666 <USBD_StdEPReq+0x16a>
 800b660:	2b03      	cmp	r3, #3
 800b662:	d032      	beq.n	800b6ca <USBD_StdEPReq+0x1ce>
 800b664:	e097      	b.n	800b796 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d007      	beq.n	800b67c <USBD_StdEPReq+0x180>
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	2b80      	cmp	r3, #128	; 0x80
 800b670:	d004      	beq.n	800b67c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fbb9 	bl	800bdec <USBD_CtlError>
                break;
 800b67a:	e091      	b.n	800b7a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b67c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b680:	2b00      	cmp	r3, #0
 800b682:	da0b      	bge.n	800b69c <USBD_StdEPReq+0x1a0>
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	3310      	adds	r3, #16
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	3304      	adds	r3, #4
 800b69a:	e00b      	b.n	800b6b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fbfd 	bl	800bec2 <USBD_CtlSendData>
              break;
 800b6c8:	e06a      	b.n	800b7a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da11      	bge.n	800b6f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	f003 020f 	and.w	r2, r3, #15
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	3318      	adds	r3, #24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d117      	bne.n	800b71c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fb7c 	bl	800bdec <USBD_CtlError>
                  break;
 800b6f4:	e054      	b.n	800b7a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	f003 020f 	and.w	r2, r3, #15
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d104      	bne.n	800b71c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fb69 	bl	800bdec <USBD_CtlError>
                  break;
 800b71a:	e041      	b.n	800b7a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b71c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b720:	2b00      	cmp	r3, #0
 800b722:	da0b      	bge.n	800b73c <USBD_StdEPReq+0x240>
 800b724:	7bbb      	ldrb	r3, [r7, #14]
 800b726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b72a:	4613      	mov	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	3310      	adds	r3, #16
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4413      	add	r3, r2
 800b738:	3304      	adds	r3, #4
 800b73a:	e00b      	b.n	800b754 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	3304      	adds	r3, #4
 800b754:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <USBD_StdEPReq+0x266>
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b80      	cmp	r3, #128	; 0x80
 800b760:	d103      	bne.n	800b76a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e00e      	b.n	800b788 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 f83a 	bl	800c7e8 <USBD_LL_IsStallEP>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2201      	movs	r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	e002      	b.n	800b788 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2202      	movs	r2, #2
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fb97 	bl	800bec2 <USBD_CtlSendData>
              break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb27 	bl	800bdec <USBD_CtlError>
              break;
 800b79e:	bf00      	nop
          }
          break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fb21 	bl	800bdec <USBD_CtlError>
          break;
 800b7aa:	bf00      	nop
      }
      break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fb1b 	bl	800bdec <USBD_CtlError>
      break;
 800b7b6:	bf00      	nop
  }

  return ret;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	885b      	ldrh	r3, [r3, #2]
 800b7de:	0a1b      	lsrs	r3, r3, #8
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	2b06      	cmp	r3, #6
 800b7e6:	f200 8128 	bhi.w	800ba3a <USBD_GetDescriptor+0x276>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <USBD_GetDescriptor+0x2c>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b80d 	.word	0x0800b80d
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b865 	.word	0x0800b865
 800b7fc:	0800ba3b 	.word	0x0800ba3b
 800b800:	0800ba3b 	.word	0x0800ba3b
 800b804:	0800b9db 	.word	0x0800b9db
 800b808:	0800ba07 	.word	0x0800ba07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7c12      	ldrb	r2, [r2, #16]
 800b818:	f107 0108 	add.w	r1, r7, #8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	60f8      	str	r0, [r7, #12]
      break;
 800b822:	e112      	b.n	800ba4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7c1b      	ldrb	r3, [r3, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10d      	bne.n	800b848 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b834:	f107 0208 	add.w	r2, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3301      	adds	r3, #1
 800b842:	2202      	movs	r2, #2
 800b844:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b846:	e100      	b.n	800ba4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	f107 0208 	add.w	r2, r7, #8
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	2202      	movs	r2, #2
 800b860:	701a      	strb	r2, [r3, #0]
      break;
 800b862:	e0f2      	b.n	800ba4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	885b      	ldrh	r3, [r3, #2]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	f200 80ac 	bhi.w	800b9c8 <USBD_GetDescriptor+0x204>
 800b870:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <USBD_GetDescriptor+0xb4>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b891 	.word	0x0800b891
 800b87c:	0800b8c5 	.word	0x0800b8c5
 800b880:	0800b8f9 	.word	0x0800b8f9
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b961 	.word	0x0800b961
 800b88c:	0800b995 	.word	0x0800b995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	7c12      	ldrb	r2, [r2, #16]
 800b8a8:	f107 0108 	add.w	r1, r7, #8
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b2:	e091      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fa98 	bl	800bdec <USBD_CtlError>
            err++;
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c2:	e089      	b.n	800b9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	7c12      	ldrb	r2, [r2, #16]
 800b8dc:	f107 0108 	add.w	r1, r7, #8
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
 800b8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e6:	e077      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fa7e 	bl	800bdec <USBD_CtlError>
            err++;
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f6:	e06f      	b.n	800b9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e05d      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa64 	bl	800bdec <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e055      	b.n	800b9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e043      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa4a 	bl	800bdec <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e03b      	b.n	800b9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e029      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa30 	bl	800bdec <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e021      	b.n	800b9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	7c12      	ldrb	r2, [r2, #16]
 800b9ac:	f107 0108 	add.w	r1, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b6:	e00f      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa16 	bl	800bdec <USBD_CtlError>
            err++;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c6:	e007      	b.n	800b9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa0e 	bl	800bdec <USBD_CtlError>
          err++;
 800b9d0:	7afb      	ldrb	r3, [r7, #11]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b9d6:	e038      	b.n	800ba4a <USBD_GetDescriptor+0x286>
 800b9d8:	e037      	b.n	800ba4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	7c1b      	ldrb	r3, [r3, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d109      	bne.n	800b9f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	f107 0208 	add.w	r2, r7, #8
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	4798      	blx	r3
 800b9f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9f4:	e029      	b.n	800ba4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f9f7 	bl	800bdec <USBD_CtlError>
        err++;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3301      	adds	r3, #1
 800ba02:	72fb      	strb	r3, [r7, #11]
      break;
 800ba04:	e021      	b.n	800ba4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7c1b      	ldrb	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10d      	bne.n	800ba2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	f107 0208 	add.w	r2, r7, #8
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4798      	blx	r3
 800ba1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3301      	adds	r3, #1
 800ba24:	2207      	movs	r2, #7
 800ba26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba28:	e00f      	b.n	800ba4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f9dd 	bl	800bdec <USBD_CtlError>
        err++;
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	3301      	adds	r3, #1
 800ba36:	72fb      	strb	r3, [r7, #11]
      break;
 800ba38:	e007      	b.n	800ba4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f9d5 	bl	800bdec <USBD_CtlError>
      err++;
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	3301      	adds	r3, #1
 800ba46:	72fb      	strb	r3, [r7, #11]
      break;
 800ba48:	bf00      	nop
  }

  if (err != 0U)
 800ba4a:	7afb      	ldrb	r3, [r7, #11]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d11c      	bne.n	800ba8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba50:	893b      	ldrh	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d011      	beq.n	800ba7a <USBD_GetDescriptor+0x2b6>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	88da      	ldrh	r2, [r3, #6]
 800ba62:	893b      	ldrh	r3, [r7, #8]
 800ba64:	4293      	cmp	r3, r2
 800ba66:	bf28      	it	cs
 800ba68:	4613      	movcs	r3, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba6e:	893b      	ldrh	r3, [r7, #8]
 800ba70:	461a      	mov	r2, r3
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa24 	bl	800bec2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	88db      	ldrh	r3, [r3, #6]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fa7b 	bl	800bf7e <USBD_CtlSendStatus>
 800ba88:	e000      	b.n	800ba8c <USBD_GetDescriptor+0x2c8>
    return;
 800ba8a:	bf00      	nop
    }
  }
}
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop

0800ba94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	889b      	ldrh	r3, [r3, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d130      	bne.n	800bb08 <USBD_SetAddress+0x74>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	88db      	ldrh	r3, [r3, #6]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d12c      	bne.n	800bb08 <USBD_SetAddress+0x74>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	885b      	ldrh	r3, [r3, #2]
 800bab2:	2b7f      	cmp	r3, #127	; 0x7f
 800bab4:	d828      	bhi.n	800bb08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	885b      	ldrh	r3, [r3, #2]
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d104      	bne.n	800bad6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f98c 	bl	800bdec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad4:	e01d      	b.n	800bb12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	7bfa      	ldrb	r2, [r7, #15]
 800bada:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fead 	bl	800c842 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fa48 	bl	800bf7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d004      	beq.n	800bafe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bafc:	e009      	b.n	800bb12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb06:	e004      	b.n	800bb12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f96e 	bl	800bdec <USBD_CtlError>
  }
}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	885b      	ldrh	r3, [r3, #2]
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	4b41      	ldr	r3, [pc, #260]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb30:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d904      	bls.n	800bb42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f956 	bl	800bdec <USBD_CtlError>
 800bb40:	e075      	b.n	800bc2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d002      	beq.n	800bb52 <USBD_SetConfig+0x36>
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d023      	beq.n	800bb98 <USBD_SetConfig+0x7c>
 800bb50:	e062      	b.n	800bc18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb52:	4b38      	ldr	r3, [pc, #224]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01a      	beq.n	800bb90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb5a:	4b36      	ldr	r3, [pc, #216]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2203      	movs	r2, #3
 800bb68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb6c:	4b31      	ldr	r3, [pc, #196]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff f9e4 	bl	800af40 <USBD_SetClassConfig>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d104      	bne.n	800bb88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f933 	bl	800bdec <USBD_CtlError>
            return;
 800bb86:	e052      	b.n	800bc2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f9f8 	bl	800bf7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb8e:	e04e      	b.n	800bc2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f9f4 	bl	800bf7e <USBD_CtlSendStatus>
        break;
 800bb96:	e04a      	b.n	800bc2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bb98:	4b26      	ldr	r3, [pc, #152]	; (800bc34 <USBD_SetConfig+0x118>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d112      	bne.n	800bbc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bba8:	4b22      	ldr	r3, [pc, #136]	; (800bc34 <USBD_SetConfig+0x118>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bbb2:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <USBD_SetConfig+0x118>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff f9e0 	bl	800af7e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f9dd 	bl	800bf7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbc4:	e033      	b.n	800bc2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bbc6:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <USBD_SetConfig+0x118>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d01d      	beq.n	800bc10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff f9ce 	bl	800af7e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bbe2:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <USBD_SetConfig+0x118>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bbec:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <USBD_SetConfig+0x118>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff f9a4 	bl	800af40 <USBD_SetClassConfig>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d104      	bne.n	800bc08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f8f3 	bl	800bdec <USBD_CtlError>
            return;
 800bc06:	e012      	b.n	800bc2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f9b8 	bl	800bf7e <USBD_CtlSendStatus>
        break;
 800bc0e:	e00e      	b.n	800bc2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f9b4 	bl	800bf7e <USBD_CtlSendStatus>
        break;
 800bc16:	e00a      	b.n	800bc2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f8e6 	bl	800bdec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc20:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <USBD_SetConfig+0x118>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff f9a9 	bl	800af7e <USBD_ClrClassConfig>
        break;
 800bc2c:	bf00      	nop
    }
  }
}
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20000424 	.word	0x20000424

0800bc38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	88db      	ldrh	r3, [r3, #6]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d004      	beq.n	800bc54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f8cd 	bl	800bdec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc52:	e022      	b.n	800bc9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	dc02      	bgt.n	800bc64 <USBD_GetConfig+0x2c>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dc03      	bgt.n	800bc6a <USBD_GetConfig+0x32>
 800bc62:	e015      	b.n	800bc90 <USBD_GetConfig+0x58>
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d00b      	beq.n	800bc80 <USBD_GetConfig+0x48>
 800bc68:	e012      	b.n	800bc90 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3308      	adds	r3, #8
 800bc74:	2201      	movs	r2, #1
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f922 	bl	800bec2 <USBD_CtlSendData>
        break;
 800bc7e:	e00c      	b.n	800bc9a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3304      	adds	r3, #4
 800bc84:	2201      	movs	r2, #1
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f91a 	bl	800bec2 <USBD_CtlSendData>
        break;
 800bc8e:	e004      	b.n	800bc9a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f8aa 	bl	800bdec <USBD_CtlError>
        break;
 800bc98:	bf00      	nop
}
 800bc9a:	bf00      	nop
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d81e      	bhi.n	800bcf6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	88db      	ldrh	r3, [r3, #6]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d004      	beq.n	800bcca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f892 	bl	800bdec <USBD_CtlError>
        break;
 800bcc8:	e01a      	b.n	800bd00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f043 0202 	orr.w	r2, r3, #2
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	330c      	adds	r3, #12
 800bcea:	2202      	movs	r2, #2
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f8e7 	bl	800bec2 <USBD_CtlSendData>
      break;
 800bcf4:	e004      	b.n	800bd00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f877 	bl	800bdec <USBD_CtlError>
      break;
 800bcfe:	bf00      	nop
  }
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	885b      	ldrh	r3, [r3, #2]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d106      	bne.n	800bd28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f92b 	bl	800bf7e <USBD_CtlSendStatus>
  }
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd40:	3b01      	subs	r3, #1
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d80b      	bhi.n	800bd5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d10c      	bne.n	800bd68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f911 	bl	800bf7e <USBD_CtlSendStatus>
      }
      break;
 800bd5c:	e004      	b.n	800bd68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f843 	bl	800bdec <USBD_CtlError>
      break;
 800bd66:	e000      	b.n	800bd6a <USBD_ClrFeature+0x3a>
      break;
 800bd68:	bf00      	nop
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	781a      	ldrb	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	785a      	ldrb	r2, [r3, #1]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	3302      	adds	r3, #2
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	3303      	adds	r3, #3
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	4413      	add	r3, r2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	3305      	adds	r3, #5
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	021b      	lsls	r3, r3, #8
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	3306      	adds	r3, #6
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	3307      	adds	r3, #7
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	021b      	lsls	r3, r3, #8
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4413      	add	r3, r2
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	80da      	strh	r2, [r3, #6]

}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bdf6:	2180      	movs	r1, #128	; 0x80
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fcb7 	bl	800c76c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bdfe:	2100      	movs	r1, #0
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fcb3 	bl	800c76c <USBD_LL_StallEP>
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d032      	beq.n	800be8a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 f834 	bl	800be92 <USBD_GetLen>
 800be2a:	4603      	mov	r3, r0
 800be2c:	3301      	adds	r3, #1
 800be2e:	b29b      	uxth	r3, r3
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	75fa      	strb	r2, [r7, #23]
 800be3e:	461a      	mov	r2, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	4413      	add	r3, r2
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	75fa      	strb	r2, [r7, #23]
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	4413      	add	r3, r2
 800be56:	2203      	movs	r2, #3
 800be58:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be5a:	e012      	b.n	800be82 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	60fa      	str	r2, [r7, #12]
 800be62:	7dfa      	ldrb	r2, [r7, #23]
 800be64:	1c51      	adds	r1, r2, #1
 800be66:	75f9      	strb	r1, [r7, #23]
 800be68:	4611      	mov	r1, r2
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	440a      	add	r2, r1
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	75fa      	strb	r2, [r7, #23]
 800be78:	461a      	mov	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1e8      	bne.n	800be5c <USBD_GetString+0x4e>
    }
  }
}
 800be8a:	bf00      	nop
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be92:	b480      	push	{r7}
 800be94:	b085      	sub	sp, #20
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800be9e:	e005      	b.n	800beac <USBD_GetLen+0x1a>
  {
    len++;
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	3301      	adds	r3, #1
 800bea4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3301      	adds	r3, #1
 800beaa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1f5      	bne.n	800bea0 <USBD_GetLen+0xe>
  }

  return len;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	4613      	mov	r3, r2
 800bece:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bede:	88fa      	ldrh	r2, [r7, #6]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bee4:	88fb      	ldrh	r3, [r7, #6]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	2100      	movs	r1, #0
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fcc8 	bl	800c880 <USBD_LL_Transmit>

  return USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	4613      	mov	r3, r2
 800bf06:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf08:	88fb      	ldrh	r3, [r7, #6]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 fcb6 	bl	800c880 <USBD_LL_Transmit>

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2203      	movs	r2, #3
 800bf30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf34:	88fa      	ldrh	r2, [r7, #6]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bf3c:	88fa      	ldrh	r2, [r7, #6]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fcbb 	bl	800c8c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf68:	88fb      	ldrh	r3, [r7, #6]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 fca9 	bl	800c8c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2204      	movs	r2, #4
 800bf8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf8e:	2300      	movs	r3, #0
 800bf90:	2200      	movs	r2, #0
 800bf92:	2100      	movs	r1, #0
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fc73 	bl	800c880 <USBD_LL_Transmit>

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2205      	movs	r2, #5
 800bfb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fc83 	bl	800c8c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4912      	ldr	r1, [pc, #72]	; (800c01c <MX_USB_DEVICE_Init+0x50>)
 800bfd4:	4812      	ldr	r0, [pc, #72]	; (800c020 <MX_USB_DEVICE_Init+0x54>)
 800bfd6:	f7fe ff57 	bl	800ae88 <USBD_Init>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfe0:	f7f6 fdc0 	bl	8002b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfe4:	490f      	ldr	r1, [pc, #60]	; (800c024 <MX_USB_DEVICE_Init+0x58>)
 800bfe6:	480e      	ldr	r0, [pc, #56]	; (800c020 <MX_USB_DEVICE_Init+0x54>)
 800bfe8:	f7fe ff79 	bl	800aede <USBD_RegisterClass>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bff2:	f7f6 fdb7 	bl	8002b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bff6:	490c      	ldr	r1, [pc, #48]	; (800c028 <MX_USB_DEVICE_Init+0x5c>)
 800bff8:	4809      	ldr	r0, [pc, #36]	; (800c020 <MX_USB_DEVICE_Init+0x54>)
 800bffa:	f7fe fea7 	bl	800ad4c <USBD_CDC_RegisterInterface>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c004:	f7f6 fdae 	bl	8002b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c008:	4805      	ldr	r0, [pc, #20]	; (800c020 <MX_USB_DEVICE_Init+0x54>)
 800c00a:	f7fe ff82 	bl	800af12 <USBD_Start>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c014:	f7f6 fda6 	bl	8002b64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c018:	bf00      	nop
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20000158 	.word	0x20000158
 800c020:	20000428 	.word	0x20000428
 800c024:	20000044 	.word	0x20000044
 800c028:	20000148 	.word	0x20000148

0800c02c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c030:	2200      	movs	r2, #0
 800c032:	4905      	ldr	r1, [pc, #20]	; (800c048 <CDC_Init_FS+0x1c>)
 800c034:	4805      	ldr	r0, [pc, #20]	; (800c04c <CDC_Init_FS+0x20>)
 800c036:	f7fe fea0 	bl	800ad7a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c03a:	4905      	ldr	r1, [pc, #20]	; (800c050 <CDC_Init_FS+0x24>)
 800c03c:	4803      	ldr	r0, [pc, #12]	; (800c04c <CDC_Init_FS+0x20>)
 800c03e:	f7fe feb6 	bl	800adae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c042:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c044:	4618      	mov	r0, r3
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20000b18 	.word	0x20000b18
 800c04c:	20000428 	.word	0x20000428
 800c050:	20000730 	.word	0x20000730

0800c054 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c058:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	6039      	str	r1, [r7, #0]
 800c06e:	71fb      	strb	r3, [r7, #7]
 800c070:	4613      	mov	r3, r2
 800c072:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c074:	79fb      	ldrb	r3, [r7, #7]
 800c076:	2b23      	cmp	r3, #35	; 0x23
 800c078:	d84a      	bhi.n	800c110 <CDC_Control_FS+0xac>
 800c07a:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <CDC_Control_FS+0x1c>)
 800c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c111 	.word	0x0800c111
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c111 	.word	0x0800c111
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c111 	.word	0x0800c111
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c111 	.word	0x0800c111
 800c0e0:	0800c111 	.word	0x0800c111
 800c0e4:	0800c111 	.word	0x0800c111
 800c0e8:	0800c111 	.word	0x0800c111
 800c0ec:	0800c111 	.word	0x0800c111
 800c0f0:	0800c111 	.word	0x0800c111
 800c0f4:	0800c111 	.word	0x0800c111
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c111 	.word	0x0800c111
 800c100:	0800c111 	.word	0x0800c111
 800c104:	0800c111 	.word	0x0800c111
 800c108:	0800c111 	.word	0x0800c111
 800c10c:	0800c111 	.word	0x0800c111
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c110:	bf00      	nop
  }

  return (USBD_OK);
 800c112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	4813      	ldr	r0, [pc, #76]	; (800c17c <CDC_Receive_FS+0x5c>)
 800c12e:	f7fe fe3e 	bl	800adae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c132:	4812      	ldr	r0, [pc, #72]	; (800c17c <CDC_Receive_FS+0x5c>)
 800c134:	f7fe fe7e 	bl	800ae34 <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	60fb      	str	r3, [r7, #12]
  if(cdc_rx_buf_len + len < CDC_RX_BUF_LEN) {
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <CDC_Receive_FS+0x60>)
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	2b3f      	cmp	r3, #63	; 0x3f
 800c148:	d813      	bhi.n	800c172 <CDC_Receive_FS+0x52>
	  memcpy(&cdc_rx_buf[cdc_rx_buf_len], Buf, len);
 800c14a:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <CDC_Receive_FS+0x60>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a0d      	ldr	r2, [pc, #52]	; (800c184 <CDC_Receive_FS+0x64>)
 800c150:	4413      	add	r3, r2
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fc6e 	bl	800ca38 <memcpy>
	  cdc_rx_buf_len += len;
 800c15c:	4b08      	ldr	r3, [pc, #32]	; (800c180 <CDC_Receive_FS+0x60>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4413      	add	r3, r2
 800c164:	4a06      	ldr	r2, [pc, #24]	; (800c180 <CDC_Receive_FS+0x60>)
 800c166:	6013      	str	r3, [r2, #0]
	  cdc_rx_buf[cdc_rx_buf_len] = 0;
 800c168:	4b05      	ldr	r3, [pc, #20]	; (800c180 <CDC_Receive_FS+0x60>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a05      	ldr	r2, [pc, #20]	; (800c184 <CDC_Receive_FS+0x64>)
 800c16e:	2100      	movs	r1, #0
 800c170:	54d1      	strb	r1, [r2, r3]
  }
  return (USBD_OK);
 800c172:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20000428 	.word	0x20000428
 800c180:	200006ec 	.word	0x200006ec
 800c184:	200006f0 	.word	0x200006f0

0800c188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c198:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <CDC_Transmit_FS+0x48>)
 800c19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c19e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e00b      	b.n	800c1c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1ae:	887b      	ldrh	r3, [r7, #2]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4806      	ldr	r0, [pc, #24]	; (800c1d0 <CDC_Transmit_FS+0x48>)
 800c1b6:	f7fe fde0 	bl	800ad7a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1ba:	4805      	ldr	r0, [pc, #20]	; (800c1d0 <CDC_Transmit_FS+0x48>)
 800c1bc:	f7fe fe0b 	bl	800add6 <USBD_CDC_TransmitPacket>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000428 	.word	0x20000428

0800c1d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2212      	movs	r2, #18
 800c1e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1e6:	4b03      	ldr	r3, [pc, #12]	; (800c1f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	20000174 	.word	0x20000174

0800c1f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2204      	movs	r2, #4
 800c208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	20000188 	.word	0x20000188

0800c21c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	4603      	mov	r3, r0
 800c224:	6039      	str	r1, [r7, #0]
 800c226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c228:	79fb      	ldrb	r3, [r7, #7]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d105      	bne.n	800c23a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	4907      	ldr	r1, [pc, #28]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
 800c232:	4808      	ldr	r0, [pc, #32]	; (800c254 <USBD_FS_ProductStrDescriptor+0x38>)
 800c234:	f7ff fdeb 	bl	800be0e <USBD_GetString>
 800c238:	e004      	b.n	800c244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	4904      	ldr	r1, [pc, #16]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
 800c23e:	4805      	ldr	r0, [pc, #20]	; (800c254 <USBD_FS_ProductStrDescriptor+0x38>)
 800c240:	f7ff fde5 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000f00 	.word	0x20000f00
 800c254:	0801175c 	.word	0x0801175c

0800c258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	4904      	ldr	r1, [pc, #16]	; (800c278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c268:	4804      	ldr	r0, [pc, #16]	; (800c27c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c26a:	f7ff fdd0 	bl	800be0e <USBD_GetString>
  return USBD_StrDesc;
 800c26e:	4b02      	ldr	r3, [pc, #8]	; (800c278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20000f00 	.word	0x20000f00
 800c27c:	08011774 	.word	0x08011774

0800c280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	6039      	str	r1, [r7, #0]
 800c28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	221a      	movs	r2, #26
 800c290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c292:	f000 f843 	bl	800c31c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c296:	4b02      	ldr	r3, [pc, #8]	; (800c2a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	2000018c 	.word	0x2000018c

0800c2a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	6039      	str	r1, [r7, #0]
 800c2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	4907      	ldr	r1, [pc, #28]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ba:	4808      	ldr	r0, [pc, #32]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2bc:	f7ff fda7 	bl	800be0e <USBD_GetString>
 800c2c0:	e004      	b.n	800c2cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4904      	ldr	r1, [pc, #16]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2c6:	4805      	ldr	r0, [pc, #20]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c8:	f7ff fda1 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000f00 	.word	0x20000f00
 800c2dc:	08011784 	.word	0x08011784

0800c2e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2ec:	79fb      	ldrb	r3, [r7, #7]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4907      	ldr	r1, [pc, #28]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f6:	4808      	ldr	r0, [pc, #32]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f8:	f7ff fd89 	bl	800be0e <USBD_GetString>
 800c2fc:	e004      	b.n	800c308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4904      	ldr	r1, [pc, #16]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c302:	4805      	ldr	r0, [pc, #20]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c304:	f7ff fd83 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c308:	4b02      	ldr	r3, [pc, #8]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20000f00 	.word	0x20000f00
 800c318:	08011790 	.word	0x08011790

0800c31c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c322:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <Get_SerialNum+0x44>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c328:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <Get_SerialNum+0x48>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c32e:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <Get_SerialNum+0x4c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4413      	add	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d009      	beq.n	800c356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c342:	2208      	movs	r2, #8
 800c344:	4909      	ldr	r1, [pc, #36]	; (800c36c <Get_SerialNum+0x50>)
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f000 f814 	bl	800c374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c34c:	2204      	movs	r2, #4
 800c34e:	4908      	ldr	r1, [pc, #32]	; (800c370 <Get_SerialNum+0x54>)
 800c350:	68b8      	ldr	r0, [r7, #8]
 800c352:	f000 f80f 	bl	800c374 <IntToUnicode>
  }
}
 800c356:	bf00      	nop
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	1ffff7ac 	.word	0x1ffff7ac
 800c364:	1ffff7b0 	.word	0x1ffff7b0
 800c368:	1ffff7b4 	.word	0x1ffff7b4
 800c36c:	2000018e 	.word	0x2000018e
 800c370:	2000019e 	.word	0x2000019e

0800c374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c386:	2300      	movs	r3, #0
 800c388:	75fb      	strb	r3, [r7, #23]
 800c38a:	e027      	b.n	800c3dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	0f1b      	lsrs	r3, r3, #28
 800c390:	2b09      	cmp	r3, #9
 800c392:	d80b      	bhi.n	800c3ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	0f1b      	lsrs	r3, r3, #28
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4619      	mov	r1, r3
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	440b      	add	r3, r1
 800c3a4:	3230      	adds	r2, #48	; 0x30
 800c3a6:	b2d2      	uxtb	r2, r2
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	e00a      	b.n	800c3c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	0f1b      	lsrs	r3, r3, #28
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3237      	adds	r2, #55	; 0x37
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3c8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	75fb      	strb	r3, [r7, #23]
 800c3dc:	7dfa      	ldrb	r2, [r7, #23]
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d3d3      	bcc.n	800c38c <IntToUnicode+0x18>
  }
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	; 0x28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3fc:	f107 0314 	add.w	r3, r7, #20
 800c400:	2200      	movs	r2, #0
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	605a      	str	r2, [r3, #4]
 800c406:	609a      	str	r2, [r3, #8]
 800c408:	60da      	str	r2, [r3, #12]
 800c40a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a29      	ldr	r2, [pc, #164]	; (800c4b8 <HAL_PCD_MspInit+0xc4>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d14b      	bne.n	800c4ae <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c416:	4b29      	ldr	r3, [pc, #164]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	4a28      	ldr	r2, [pc, #160]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c420:	6153      	str	r3, [r2, #20]
 800c422:	4b26      	ldr	r3, [pc, #152]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c434:	2302      	movs	r3, #2
 800c436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c43c:	2303      	movs	r3, #3
 800c43e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c440:	230e      	movs	r3, #14
 800c442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c444:	f107 0314 	add.w	r3, r7, #20
 800c448:	4619      	mov	r1, r3
 800c44a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c44e:	f7f7 fe93 	bl	8004178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c458:	2302      	movs	r3, #2
 800c45a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c45c:	2301      	movs	r3, #1
 800c45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c460:	2303      	movs	r3, #3
 800c462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c464:	230e      	movs	r3, #14
 800c466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c468:	f107 0314 	add.w	r3, r7, #20
 800c46c:	4619      	mov	r1, r3
 800c46e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c472:	f7f7 fe81 	bl	8004178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c476:	4b11      	ldr	r3, [pc, #68]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	4a10      	ldr	r2, [pc, #64]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c47c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c480:	61d3      	str	r3, [r2, #28]
 800c482:	4b0e      	ldr	r3, [pc, #56]	; (800c4bc <HAL_PCD_MspInit+0xc8>)
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 800c48e:	2200      	movs	r2, #0
 800c490:	2105      	movs	r1, #5
 800c492:	204a      	movs	r0, #74	; 0x4a
 800c494:	f7f7 fe39 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800c498:	204a      	movs	r0, #74	; 0x4a
 800c49a:	f7f7 fe52 	bl	8004142 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2105      	movs	r1, #5
 800c4a2:	204b      	movs	r0, #75	; 0x4b
 800c4a4:	f7f7 fe31 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c4a8:	204b      	movs	r0, #75	; 0x4b
 800c4aa:	f7f7 fe4a 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3728      	adds	r7, #40	; 0x28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40005c00 	.word	0x40005c00
 800c4bc:	40021000 	.word	0x40021000

0800c4c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7fe fd64 	bl	800afa4 <USBD_LL_SetupStage>
}
 800c4dc:	bf00      	nop
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c4f6:	78fa      	ldrb	r2, [r7, #3]
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	440b      	add	r3, r1
 800c504:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	4619      	mov	r1, r3
 800c50e:	f7fe fd96 	bl	800b03e <USBD_LL_DataOutStage>
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	460b      	mov	r3, r1
 800c524:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c52c:	78fa      	ldrb	r2, [r7, #3]
 800c52e:	6879      	ldr	r1, [r7, #4]
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	440b      	add	r3, r1
 800c53a:	333c      	adds	r3, #60	; 0x3c
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	4619      	mov	r1, r3
 800c542:	f7fe fded 	bl	800b120 <USBD_LL_DataInStage>
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe ff00 	bl	800b362 <USBD_LL_SOF>
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c572:	2301      	movs	r3, #1
 800c574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d001      	beq.n	800c582 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c57e:	f7f6 faf1 	bl	8002b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c588:	7bfa      	ldrb	r2, [r7, #15]
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fead 	bl	800b2ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fe66 	bl	800b26a <USBD_LL_Reset>
}
 800c59e:	bf00      	nop
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fea8 	bl	800b30c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <HAL_PCD_SuspendCallback+0x30>)
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <HAL_PCD_SuspendCallback+0x30>)
 800c5ca:	f043 0306 	orr.w	r3, r3, #6
 800c5ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	e000ed00 	.word	0xe000ed00

0800c5dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fea3 	bl	800b336 <USBD_LL_Resume>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c600:	4a28      	ldr	r2, [pc, #160]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a26      	ldr	r2, [pc, #152]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c60c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c610:	4b24      	ldr	r3, [pc, #144]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c612:	4a25      	ldr	r2, [pc, #148]	; (800c6a8 <USBD_LL_Init+0xb0>)
 800c614:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c616:	4b23      	ldr	r3, [pc, #140]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c618:	2208      	movs	r2, #8
 800c61a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c61c:	4b21      	ldr	r3, [pc, #132]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c61e:	2202      	movs	r2, #2
 800c620:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c622:	4b20      	ldr	r3, [pc, #128]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c624:	2202      	movs	r2, #2
 800c626:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c628:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c62e:	4b1d      	ldr	r3, [pc, #116]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c630:	2200      	movs	r2, #0
 800c632:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c634:	481b      	ldr	r0, [pc, #108]	; (800c6a4 <USBD_LL_Init+0xac>)
 800c636:	f7f7 ff54 	bl	80044e2 <HAL_PCD_Init>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c640:	f7f6 fa90 	bl	8002b64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c64a:	2318      	movs	r3, #24
 800c64c:	2200      	movs	r2, #0
 800c64e:	2100      	movs	r1, #0
 800c650:	f7f9 fbdd 	bl	8005e0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c65a:	2358      	movs	r3, #88	; 0x58
 800c65c:	2200      	movs	r2, #0
 800c65e:	2180      	movs	r1, #128	; 0x80
 800c660:	f7f9 fbd5 	bl	8005e0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c66a:	23c0      	movs	r3, #192	; 0xc0
 800c66c:	2200      	movs	r2, #0
 800c66e:	2181      	movs	r1, #129	; 0x81
 800c670:	f7f9 fbcd 	bl	8005e0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c67a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c67e:	2200      	movs	r2, #0
 800c680:	2101      	movs	r1, #1
 800c682:	f7f9 fbc4 	bl	8005e0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c68c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c690:	2200      	movs	r2, #0
 800c692:	2182      	movs	r1, #130	; 0x82
 800c694:	f7f9 fbbb 	bl	8005e0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20001100 	.word	0x20001100
 800c6a8:	40005c00 	.word	0x40005c00

0800c6ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f7 ffdf 	bl	8004686 <HAL_PCD_Start>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 f954 	bl	800c97c <USBD_Get_USB_Status>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	4608      	mov	r0, r1
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	70fb      	strb	r3, [r7, #3]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70bb      	strb	r3, [r7, #2]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c70a:	78bb      	ldrb	r3, [r7, #2]
 800c70c:	883a      	ldrh	r2, [r7, #0]
 800c70e:	78f9      	ldrb	r1, [r7, #3]
 800c710:	f7f8 f8d8 	bl	80048c4 <HAL_PCD_EP_Open>
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 f92e 	bl	800c97c <USBD_Get_USB_Status>
 800c720:	4603      	mov	r3, r0
 800c722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c724:	7bbb      	ldrb	r3, [r7, #14]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	460b      	mov	r3, r1
 800c738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c73a:	2300      	movs	r3, #0
 800c73c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	4611      	mov	r1, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7f8 f916 	bl	800497e <HAL_PCD_EP_Close>
 800c752:	4603      	mov	r3, r0
 800c754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c756:	7bfb      	ldrb	r3, [r7, #15]
 800c758:	4618      	mov	r0, r3
 800c75a:	f000 f90f 	bl	800c97c <USBD_Get_USB_Status>
 800c75e:	4603      	mov	r3, r0
 800c760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c762:	7bbb      	ldrb	r3, [r7, #14]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7f8 f9bf 	bl	8004b0e <HAL_PCD_EP_SetStall>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	4618      	mov	r0, r3
 800c798:	f000 f8f0 	bl	800c97c <USBD_Get_USB_Status>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7c4:	78fa      	ldrb	r2, [r7, #3]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7f8 f9f2 	bl	8004bb2 <HAL_PCD_EP_ClrStall>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 f8d1 	bl	800c97c <USBD_Get_USB_Status>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c800:	2b00      	cmp	r3, #0
 800c802:	da0c      	bge.n	800c81e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c804:	78fb      	ldrb	r3, [r7, #3]
 800c806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c80a:	68f9      	ldr	r1, [r7, #12]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	4613      	mov	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3302      	adds	r3, #2
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	e00b      	b.n	800c836 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c81e:	78fb      	ldrb	r3, [r7, #3]
 800c820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c824:	68f9      	ldr	r1, [r7, #12]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	00db      	lsls	r3, r3, #3
 800c82e:	440b      	add	r3, r1
 800c830:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c834:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c836:	4618      	mov	r0, r3
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	460b      	mov	r3, r1
 800c84c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c85c:	78fa      	ldrb	r2, [r7, #3]
 800c85e:	4611      	mov	r1, r2
 800c860:	4618      	mov	r0, r3
 800c862:	f7f8 f80a 	bl	800487a <HAL_PCD_SetAddress>
 800c866:	4603      	mov	r3, r0
 800c868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 f885 	bl	800c97c <USBD_Get_USB_Status>
 800c872:	4603      	mov	r3, r0
 800c874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c876:	7bbb      	ldrb	r3, [r7, #14]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	607a      	str	r2, [r7, #4]
 800c88a:	461a      	mov	r2, r3
 800c88c:	460b      	mov	r3, r1
 800c88e:	72fb      	strb	r3, [r7, #11]
 800c890:	4613      	mov	r3, r2
 800c892:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8a2:	893b      	ldrh	r3, [r7, #8]
 800c8a4:	7af9      	ldrb	r1, [r7, #11]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	f7f8 f8fa 	bl	8004aa0 <HAL_PCD_EP_Transmit>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f862 	bl	800c97c <USBD_Get_USB_Status>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b086      	sub	sp, #24
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	72fb      	strb	r3, [r7, #11]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8e8:	893b      	ldrh	r3, [r7, #8]
 800c8ea:	7af9      	ldrb	r1, [r7, #11]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	f7f8 f88e 	bl	8004a0e <HAL_PCD_EP_Receive>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 f83f 	bl	800c97c <USBD_Get_USB_Status>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c902:	7dbb      	ldrb	r3, [r7, #22]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c91e:	78fa      	ldrb	r2, [r7, #3]
 800c920:	4611      	mov	r1, r2
 800c922:	4618      	mov	r0, r3
 800c924:	f7f8 f8a4 	bl	8004a70 <HAL_PCD_EP_GetRxCount>
 800c928:	4603      	mov	r3, r0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c93c:	4b03      	ldr	r3, [pc, #12]	; (800c94c <USBD_static_malloc+0x18>)
}
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	200013ec 	.word	0x200013ec

0800c950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]

}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	d817      	bhi.n	800c9c0 <USBD_Get_USB_Status+0x44>
 800c990:	a201      	add	r2, pc, #4	; (adr r2, 800c998 <USBD_Get_USB_Status+0x1c>)
 800c992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c996:	bf00      	nop
 800c998:	0800c9a9 	.word	0x0800c9a9
 800c99c:	0800c9af 	.word	0x0800c9af
 800c9a0:	0800c9b5 	.word	0x0800c9b5
 800c9a4:	0800c9bb 	.word	0x0800c9bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ac:	e00b      	b.n	800c9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b2:	e008      	b.n	800c9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b8:	e005      	b.n	800c9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9be:	e002      	b.n	800c9c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c4:	bf00      	nop
  }
  return usb_status;
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3714      	adds	r7, #20
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <__errno>:
 800c9d4:	4b01      	ldr	r3, [pc, #4]	; (800c9dc <__errno+0x8>)
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	200001a8 	.word	0x200001a8

0800c9e0 <__libc_init_array>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4d0d      	ldr	r5, [pc, #52]	; (800ca18 <__libc_init_array+0x38>)
 800c9e4:	4c0d      	ldr	r4, [pc, #52]	; (800ca1c <__libc_init_array+0x3c>)
 800c9e6:	1b64      	subs	r4, r4, r5
 800c9e8:	10a4      	asrs	r4, r4, #2
 800c9ea:	2600      	movs	r6, #0
 800c9ec:	42a6      	cmp	r6, r4
 800c9ee:	d109      	bne.n	800ca04 <__libc_init_array+0x24>
 800c9f0:	4d0b      	ldr	r5, [pc, #44]	; (800ca20 <__libc_init_array+0x40>)
 800c9f2:	4c0c      	ldr	r4, [pc, #48]	; (800ca24 <__libc_init_array+0x44>)
 800c9f4:	f004 fb18 	bl	8011028 <_init>
 800c9f8:	1b64      	subs	r4, r4, r5
 800c9fa:	10a4      	asrs	r4, r4, #2
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	42a6      	cmp	r6, r4
 800ca00:	d105      	bne.n	800ca0e <__libc_init_array+0x2e>
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca08:	4798      	blx	r3
 800ca0a:	3601      	adds	r6, #1
 800ca0c:	e7ee      	b.n	800c9ec <__libc_init_array+0xc>
 800ca0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca12:	4798      	blx	r3
 800ca14:	3601      	adds	r6, #1
 800ca16:	e7f2      	b.n	800c9fe <__libc_init_array+0x1e>
 800ca18:	08011c74 	.word	0x08011c74
 800ca1c:	08011c74 	.word	0x08011c74
 800ca20:	08011c74 	.word	0x08011c74
 800ca24:	08011c78 	.word	0x08011c78

0800ca28 <isspace>:
 800ca28:	4b02      	ldr	r3, [pc, #8]	; (800ca34 <isspace+0xc>)
 800ca2a:	4418      	add	r0, r3
 800ca2c:	7840      	ldrb	r0, [r0, #1]
 800ca2e:	f000 0008 	and.w	r0, r0, #8
 800ca32:	4770      	bx	lr
 800ca34:	080117d0 	.word	0x080117d0

0800ca38 <memcpy>:
 800ca38:	440a      	add	r2, r1
 800ca3a:	4291      	cmp	r1, r2
 800ca3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca40:	d100      	bne.n	800ca44 <memcpy+0xc>
 800ca42:	4770      	bx	lr
 800ca44:	b510      	push	{r4, lr}
 800ca46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	d1f9      	bne.n	800ca46 <memcpy+0xe>
 800ca52:	bd10      	pop	{r4, pc}

0800ca54 <memset>:
 800ca54:	4402      	add	r2, r0
 800ca56:	4603      	mov	r3, r0
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d100      	bne.n	800ca5e <memset+0xa>
 800ca5c:	4770      	bx	lr
 800ca5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca62:	e7f9      	b.n	800ca58 <memset+0x4>

0800ca64 <__cvt>:
 800ca64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca68:	ec55 4b10 	vmov	r4, r5, d0
 800ca6c:	2d00      	cmp	r5, #0
 800ca6e:	460e      	mov	r6, r1
 800ca70:	4619      	mov	r1, r3
 800ca72:	462b      	mov	r3, r5
 800ca74:	bfbb      	ittet	lt
 800ca76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca7a:	461d      	movlt	r5, r3
 800ca7c:	2300      	movge	r3, #0
 800ca7e:	232d      	movlt	r3, #45	; 0x2d
 800ca80:	700b      	strb	r3, [r1, #0]
 800ca82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca88:	4691      	mov	r9, r2
 800ca8a:	f023 0820 	bic.w	r8, r3, #32
 800ca8e:	bfbc      	itt	lt
 800ca90:	4622      	movlt	r2, r4
 800ca92:	4614      	movlt	r4, r2
 800ca94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca98:	d005      	beq.n	800caa6 <__cvt+0x42>
 800ca9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca9e:	d100      	bne.n	800caa2 <__cvt+0x3e>
 800caa0:	3601      	adds	r6, #1
 800caa2:	2102      	movs	r1, #2
 800caa4:	e000      	b.n	800caa8 <__cvt+0x44>
 800caa6:	2103      	movs	r1, #3
 800caa8:	ab03      	add	r3, sp, #12
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	ab02      	add	r3, sp, #8
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	ec45 4b10 	vmov	d0, r4, r5
 800cab4:	4653      	mov	r3, sl
 800cab6:	4632      	mov	r2, r6
 800cab8:	f001 fc16 	bl	800e2e8 <_dtoa_r>
 800cabc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cac0:	4607      	mov	r7, r0
 800cac2:	d102      	bne.n	800caca <__cvt+0x66>
 800cac4:	f019 0f01 	tst.w	r9, #1
 800cac8:	d022      	beq.n	800cb10 <__cvt+0xac>
 800caca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cace:	eb07 0906 	add.w	r9, r7, r6
 800cad2:	d110      	bne.n	800caf6 <__cvt+0x92>
 800cad4:	783b      	ldrb	r3, [r7, #0]
 800cad6:	2b30      	cmp	r3, #48	; 0x30
 800cad8:	d10a      	bne.n	800caf0 <__cvt+0x8c>
 800cada:	2200      	movs	r2, #0
 800cadc:	2300      	movs	r3, #0
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7f3 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae6:	b918      	cbnz	r0, 800caf0 <__cvt+0x8c>
 800cae8:	f1c6 0601 	rsb	r6, r6, #1
 800caec:	f8ca 6000 	str.w	r6, [sl]
 800caf0:	f8da 3000 	ldr.w	r3, [sl]
 800caf4:	4499      	add	r9, r3
 800caf6:	2200      	movs	r2, #0
 800caf8:	2300      	movs	r3, #0
 800cafa:	4620      	mov	r0, r4
 800cafc:	4629      	mov	r1, r5
 800cafe:	f7f3 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb02:	b108      	cbz	r0, 800cb08 <__cvt+0xa4>
 800cb04:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb08:	2230      	movs	r2, #48	; 0x30
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	454b      	cmp	r3, r9
 800cb0e:	d307      	bcc.n	800cb20 <__cvt+0xbc>
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb14:	1bdb      	subs	r3, r3, r7
 800cb16:	4638      	mov	r0, r7
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	b004      	add	sp, #16
 800cb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb20:	1c59      	adds	r1, r3, #1
 800cb22:	9103      	str	r1, [sp, #12]
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e7f0      	b.n	800cb0a <__cvt+0xa6>

0800cb28 <__exponent>:
 800cb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	bfb8      	it	lt
 800cb30:	4249      	neglt	r1, r1
 800cb32:	f803 2b02 	strb.w	r2, [r3], #2
 800cb36:	bfb4      	ite	lt
 800cb38:	222d      	movlt	r2, #45	; 0x2d
 800cb3a:	222b      	movge	r2, #43	; 0x2b
 800cb3c:	2909      	cmp	r1, #9
 800cb3e:	7042      	strb	r2, [r0, #1]
 800cb40:	dd2a      	ble.n	800cb98 <__exponent+0x70>
 800cb42:	f10d 0407 	add.w	r4, sp, #7
 800cb46:	46a4      	mov	ip, r4
 800cb48:	270a      	movs	r7, #10
 800cb4a:	46a6      	mov	lr, r4
 800cb4c:	460a      	mov	r2, r1
 800cb4e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb52:	fb07 1516 	mls	r5, r7, r6, r1
 800cb56:	3530      	adds	r5, #48	; 0x30
 800cb58:	2a63      	cmp	r2, #99	; 0x63
 800cb5a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb62:	4631      	mov	r1, r6
 800cb64:	dcf1      	bgt.n	800cb4a <__exponent+0x22>
 800cb66:	3130      	adds	r1, #48	; 0x30
 800cb68:	f1ae 0502 	sub.w	r5, lr, #2
 800cb6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb70:	1c44      	adds	r4, r0, #1
 800cb72:	4629      	mov	r1, r5
 800cb74:	4561      	cmp	r1, ip
 800cb76:	d30a      	bcc.n	800cb8e <__exponent+0x66>
 800cb78:	f10d 0209 	add.w	r2, sp, #9
 800cb7c:	eba2 020e 	sub.w	r2, r2, lr
 800cb80:	4565      	cmp	r5, ip
 800cb82:	bf88      	it	hi
 800cb84:	2200      	movhi	r2, #0
 800cb86:	4413      	add	r3, r2
 800cb88:	1a18      	subs	r0, r3, r0
 800cb8a:	b003      	add	sp, #12
 800cb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb92:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb96:	e7ed      	b.n	800cb74 <__exponent+0x4c>
 800cb98:	2330      	movs	r3, #48	; 0x30
 800cb9a:	3130      	adds	r1, #48	; 0x30
 800cb9c:	7083      	strb	r3, [r0, #2]
 800cb9e:	70c1      	strb	r1, [r0, #3]
 800cba0:	1d03      	adds	r3, r0, #4
 800cba2:	e7f1      	b.n	800cb88 <__exponent+0x60>

0800cba4 <_printf_float>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	ed2d 8b02 	vpush	{d8}
 800cbac:	b08d      	sub	sp, #52	; 0x34
 800cbae:	460c      	mov	r4, r1
 800cbb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	461f      	mov	r7, r3
 800cbb8:	4605      	mov	r5, r0
 800cbba:	f002 fcf3 	bl	800f5a4 <_localeconv_r>
 800cbbe:	f8d0 a000 	ldr.w	sl, [r0]
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	f7f3 fb04 	bl	80001d0 <strlen>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	930a      	str	r3, [sp, #40]	; 0x28
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbd8:	3307      	adds	r3, #7
 800cbda:	f023 0307 	bic.w	r3, r3, #7
 800cbde:	f103 0208 	add.w	r2, r3, #8
 800cbe2:	f8c8 2000 	str.w	r2, [r8]
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbfc:	ee08 0a10 	vmov	s16, r0
 800cc00:	4b9f      	ldr	r3, [pc, #636]	; (800ce80 <_printf_float+0x2dc>)
 800cc02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc06:	f04f 32ff 	mov.w	r2, #4294967295
 800cc0a:	f7f3 ff8f 	bl	8000b2c <__aeabi_dcmpun>
 800cc0e:	bb88      	cbnz	r0, 800cc74 <_printf_float+0xd0>
 800cc10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc14:	4b9a      	ldr	r3, [pc, #616]	; (800ce80 <_printf_float+0x2dc>)
 800cc16:	f04f 32ff 	mov.w	r2, #4294967295
 800cc1a:	f7f3 ff69 	bl	8000af0 <__aeabi_dcmple>
 800cc1e:	bb48      	cbnz	r0, 800cc74 <_printf_float+0xd0>
 800cc20:	2200      	movs	r2, #0
 800cc22:	2300      	movs	r3, #0
 800cc24:	4640      	mov	r0, r8
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 ff58 	bl	8000adc <__aeabi_dcmplt>
 800cc2c:	b110      	cbz	r0, 800cc34 <_printf_float+0x90>
 800cc2e:	232d      	movs	r3, #45	; 0x2d
 800cc30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc34:	4b93      	ldr	r3, [pc, #588]	; (800ce84 <_printf_float+0x2e0>)
 800cc36:	4894      	ldr	r0, [pc, #592]	; (800ce88 <_printf_float+0x2e4>)
 800cc38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc3c:	bf94      	ite	ls
 800cc3e:	4698      	movls	r8, r3
 800cc40:	4680      	movhi	r8, r0
 800cc42:	2303      	movs	r3, #3
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	9b05      	ldr	r3, [sp, #20]
 800cc48:	f023 0204 	bic.w	r2, r3, #4
 800cc4c:	6022      	str	r2, [r4, #0]
 800cc4e:	f04f 0900 	mov.w	r9, #0
 800cc52:	9700      	str	r7, [sp, #0]
 800cc54:	4633      	mov	r3, r6
 800cc56:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f000 f9d8 	bl	800d010 <_printf_common>
 800cc60:	3001      	adds	r0, #1
 800cc62:	f040 8090 	bne.w	800cd86 <_printf_float+0x1e2>
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	b00d      	add	sp, #52	; 0x34
 800cc6c:	ecbd 8b02 	vpop	{d8}
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	f7f3 ff56 	bl	8000b2c <__aeabi_dcmpun>
 800cc80:	b140      	cbz	r0, 800cc94 <_printf_float+0xf0>
 800cc82:	464b      	mov	r3, r9
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bfbc      	itt	lt
 800cc88:	232d      	movlt	r3, #45	; 0x2d
 800cc8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc8e:	487f      	ldr	r0, [pc, #508]	; (800ce8c <_printf_float+0x2e8>)
 800cc90:	4b7f      	ldr	r3, [pc, #508]	; (800ce90 <_printf_float+0x2ec>)
 800cc92:	e7d1      	b.n	800cc38 <_printf_float+0x94>
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc9a:	9206      	str	r2, [sp, #24]
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	d13f      	bne.n	800cd20 <_printf_float+0x17c>
 800cca0:	2306      	movs	r3, #6
 800cca2:	6063      	str	r3, [r4, #4]
 800cca4:	9b05      	ldr	r3, [sp, #20]
 800cca6:	6861      	ldr	r1, [r4, #4]
 800cca8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccac:	2300      	movs	r3, #0
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	ab0a      	add	r3, sp, #40	; 0x28
 800ccb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccb6:	ab09      	add	r3, sp, #36	; 0x24
 800ccb8:	ec49 8b10 	vmov	d0, r8, r9
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	6022      	str	r2, [r4, #0]
 800ccc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f7ff fecd 	bl	800ca64 <__cvt>
 800ccca:	9b06      	ldr	r3, [sp, #24]
 800cccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccce:	2b47      	cmp	r3, #71	; 0x47
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	d108      	bne.n	800cce6 <_printf_float+0x142>
 800ccd4:	1cc8      	adds	r0, r1, #3
 800ccd6:	db02      	blt.n	800ccde <_printf_float+0x13a>
 800ccd8:	6863      	ldr	r3, [r4, #4]
 800ccda:	4299      	cmp	r1, r3
 800ccdc:	dd41      	ble.n	800cd62 <_printf_float+0x1be>
 800ccde:	f1ab 0b02 	sub.w	fp, fp, #2
 800cce2:	fa5f fb8b 	uxtb.w	fp, fp
 800cce6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccea:	d820      	bhi.n	800cd2e <_printf_float+0x18a>
 800ccec:	3901      	subs	r1, #1
 800ccee:	465a      	mov	r2, fp
 800ccf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccf4:	9109      	str	r1, [sp, #36]	; 0x24
 800ccf6:	f7ff ff17 	bl	800cb28 <__exponent>
 800ccfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccfc:	1813      	adds	r3, r2, r0
 800ccfe:	2a01      	cmp	r2, #1
 800cd00:	4681      	mov	r9, r0
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	dc02      	bgt.n	800cd0c <_printf_float+0x168>
 800cd06:	6822      	ldr	r2, [r4, #0]
 800cd08:	07d2      	lsls	r2, r2, #31
 800cd0a:	d501      	bpl.n	800cd10 <_printf_float+0x16c>
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d09c      	beq.n	800cc52 <_printf_float+0xae>
 800cd18:	232d      	movs	r3, #45	; 0x2d
 800cd1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd1e:	e798      	b.n	800cc52 <_printf_float+0xae>
 800cd20:	9a06      	ldr	r2, [sp, #24]
 800cd22:	2a47      	cmp	r2, #71	; 0x47
 800cd24:	d1be      	bne.n	800cca4 <_printf_float+0x100>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1bc      	bne.n	800cca4 <_printf_float+0x100>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e7b9      	b.n	800cca2 <_printf_float+0xfe>
 800cd2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd32:	d118      	bne.n	800cd66 <_printf_float+0x1c2>
 800cd34:	2900      	cmp	r1, #0
 800cd36:	6863      	ldr	r3, [r4, #4]
 800cd38:	dd0b      	ble.n	800cd52 <_printf_float+0x1ae>
 800cd3a:	6121      	str	r1, [r4, #16]
 800cd3c:	b913      	cbnz	r3, 800cd44 <_printf_float+0x1a0>
 800cd3e:	6822      	ldr	r2, [r4, #0]
 800cd40:	07d0      	lsls	r0, r2, #31
 800cd42:	d502      	bpl.n	800cd4a <_printf_float+0x1a6>
 800cd44:	3301      	adds	r3, #1
 800cd46:	440b      	add	r3, r1
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd4c:	f04f 0900 	mov.w	r9, #0
 800cd50:	e7de      	b.n	800cd10 <_printf_float+0x16c>
 800cd52:	b913      	cbnz	r3, 800cd5a <_printf_float+0x1b6>
 800cd54:	6822      	ldr	r2, [r4, #0]
 800cd56:	07d2      	lsls	r2, r2, #31
 800cd58:	d501      	bpl.n	800cd5e <_printf_float+0x1ba>
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	e7f4      	b.n	800cd48 <_printf_float+0x1a4>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e7f2      	b.n	800cd48 <_printf_float+0x1a4>
 800cd62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd68:	4299      	cmp	r1, r3
 800cd6a:	db05      	blt.n	800cd78 <_printf_float+0x1d4>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	6121      	str	r1, [r4, #16]
 800cd70:	07d8      	lsls	r0, r3, #31
 800cd72:	d5ea      	bpl.n	800cd4a <_printf_float+0x1a6>
 800cd74:	1c4b      	adds	r3, r1, #1
 800cd76:	e7e7      	b.n	800cd48 <_printf_float+0x1a4>
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	bfd4      	ite	le
 800cd7c:	f1c1 0202 	rsble	r2, r1, #2
 800cd80:	2201      	movgt	r2, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	e7e0      	b.n	800cd48 <_printf_float+0x1a4>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	055a      	lsls	r2, r3, #21
 800cd8a:	d407      	bmi.n	800cd9c <_printf_float+0x1f8>
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	4642      	mov	r2, r8
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	d12c      	bne.n	800cdf4 <_printf_float+0x250>
 800cd9a:	e764      	b.n	800cc66 <_printf_float+0xc2>
 800cd9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cda0:	f240 80e0 	bls.w	800cf64 <_printf_float+0x3c0>
 800cda4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f7f3 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d034      	beq.n	800ce1e <_printf_float+0x27a>
 800cdb4:	4a37      	ldr	r2, [pc, #220]	; (800ce94 <_printf_float+0x2f0>)
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f43f af51 	beq.w	800cc66 <_printf_float+0xc2>
 800cdc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	db02      	blt.n	800cdd2 <_printf_float+0x22e>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	07d8      	lsls	r0, r3, #31
 800cdd0:	d510      	bpl.n	800cdf4 <_printf_float+0x250>
 800cdd2:	ee18 3a10 	vmov	r3, s16
 800cdd6:	4652      	mov	r2, sl
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f af41 	beq.w	800cc66 <_printf_float+0xc2>
 800cde4:	f04f 0800 	mov.w	r8, #0
 800cde8:	f104 091a 	add.w	r9, r4, #26
 800cdec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	4543      	cmp	r3, r8
 800cdf2:	dc09      	bgt.n	800ce08 <_printf_float+0x264>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	079b      	lsls	r3, r3, #30
 800cdf8:	f100 8105 	bmi.w	800d006 <_printf_float+0x462>
 800cdfc:	68e0      	ldr	r0, [r4, #12]
 800cdfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce00:	4298      	cmp	r0, r3
 800ce02:	bfb8      	it	lt
 800ce04:	4618      	movlt	r0, r3
 800ce06:	e730      	b.n	800cc6a <_printf_float+0xc6>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	464a      	mov	r2, r9
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4628      	mov	r0, r5
 800ce10:	47b8      	blx	r7
 800ce12:	3001      	adds	r0, #1
 800ce14:	f43f af27 	beq.w	800cc66 <_printf_float+0xc2>
 800ce18:	f108 0801 	add.w	r8, r8, #1
 800ce1c:	e7e6      	b.n	800cdec <_printf_float+0x248>
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	dc39      	bgt.n	800ce98 <_printf_float+0x2f4>
 800ce24:	4a1b      	ldr	r2, [pc, #108]	; (800ce94 <_printf_float+0x2f0>)
 800ce26:	2301      	movs	r3, #1
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b8      	blx	r7
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f43f af19 	beq.w	800cc66 <_printf_float+0xc2>
 800ce34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	d102      	bne.n	800ce42 <_printf_float+0x29e>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	07d9      	lsls	r1, r3, #31
 800ce40:	d5d8      	bpl.n	800cdf4 <_printf_float+0x250>
 800ce42:	ee18 3a10 	vmov	r3, s16
 800ce46:	4652      	mov	r2, sl
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f43f af09 	beq.w	800cc66 <_printf_float+0xc2>
 800ce54:	f04f 0900 	mov.w	r9, #0
 800ce58:	f104 0a1a 	add.w	sl, r4, #26
 800ce5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5e:	425b      	negs	r3, r3
 800ce60:	454b      	cmp	r3, r9
 800ce62:	dc01      	bgt.n	800ce68 <_printf_float+0x2c4>
 800ce64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce66:	e792      	b.n	800cd8e <_printf_float+0x1ea>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	47b8      	blx	r7
 800ce72:	3001      	adds	r0, #1
 800ce74:	f43f aef7 	beq.w	800cc66 <_printf_float+0xc2>
 800ce78:	f109 0901 	add.w	r9, r9, #1
 800ce7c:	e7ee      	b.n	800ce5c <_printf_float+0x2b8>
 800ce7e:	bf00      	nop
 800ce80:	7fefffff 	.word	0x7fefffff
 800ce84:	080118d8 	.word	0x080118d8
 800ce88:	080118dc 	.word	0x080118dc
 800ce8c:	080118e4 	.word	0x080118e4
 800ce90:	080118e0 	.word	0x080118e0
 800ce94:	080118e8 	.word	0x080118e8
 800ce98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	bfa8      	it	ge
 800cea0:	461a      	movge	r2, r3
 800cea2:	2a00      	cmp	r2, #0
 800cea4:	4691      	mov	r9, r2
 800cea6:	dc37      	bgt.n	800cf18 <_printf_float+0x374>
 800cea8:	f04f 0b00 	mov.w	fp, #0
 800ceac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceb0:	f104 021a 	add.w	r2, r4, #26
 800ceb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceb6:	9305      	str	r3, [sp, #20]
 800ceb8:	eba3 0309 	sub.w	r3, r3, r9
 800cebc:	455b      	cmp	r3, fp
 800cebe:	dc33      	bgt.n	800cf28 <_printf_float+0x384>
 800cec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cec4:	429a      	cmp	r2, r3
 800cec6:	db3b      	blt.n	800cf40 <_printf_float+0x39c>
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	07da      	lsls	r2, r3, #31
 800cecc:	d438      	bmi.n	800cf40 <_printf_float+0x39c>
 800cece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced0:	9a05      	ldr	r2, [sp, #20]
 800ced2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ced4:	1a9a      	subs	r2, r3, r2
 800ced6:	eba3 0901 	sub.w	r9, r3, r1
 800ceda:	4591      	cmp	r9, r2
 800cedc:	bfa8      	it	ge
 800cede:	4691      	movge	r9, r2
 800cee0:	f1b9 0f00 	cmp.w	r9, #0
 800cee4:	dc35      	bgt.n	800cf52 <_printf_float+0x3ae>
 800cee6:	f04f 0800 	mov.w	r8, #0
 800ceea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceee:	f104 0a1a 	add.w	sl, r4, #26
 800cef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	eba3 0309 	sub.w	r3, r3, r9
 800cefc:	4543      	cmp	r3, r8
 800cefe:	f77f af79 	ble.w	800cdf4 <_printf_float+0x250>
 800cf02:	2301      	movs	r3, #1
 800cf04:	4652      	mov	r2, sl
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	47b8      	blx	r7
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	f43f aeaa 	beq.w	800cc66 <_printf_float+0xc2>
 800cf12:	f108 0801 	add.w	r8, r8, #1
 800cf16:	e7ec      	b.n	800cef2 <_printf_float+0x34e>
 800cf18:	4613      	mov	r3, r2
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b8      	blx	r7
 800cf22:	3001      	adds	r0, #1
 800cf24:	d1c0      	bne.n	800cea8 <_printf_float+0x304>
 800cf26:	e69e      	b.n	800cc66 <_printf_float+0xc2>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	9205      	str	r2, [sp, #20]
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	f43f ae97 	beq.w	800cc66 <_printf_float+0xc2>
 800cf38:	9a05      	ldr	r2, [sp, #20]
 800cf3a:	f10b 0b01 	add.w	fp, fp, #1
 800cf3e:	e7b9      	b.n	800ceb4 <_printf_float+0x310>
 800cf40:	ee18 3a10 	vmov	r3, s16
 800cf44:	4652      	mov	r2, sl
 800cf46:	4631      	mov	r1, r6
 800cf48:	4628      	mov	r0, r5
 800cf4a:	47b8      	blx	r7
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d1be      	bne.n	800cece <_printf_float+0x32a>
 800cf50:	e689      	b.n	800cc66 <_printf_float+0xc2>
 800cf52:	9a05      	ldr	r2, [sp, #20]
 800cf54:	464b      	mov	r3, r9
 800cf56:	4442      	add	r2, r8
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	d1c1      	bne.n	800cee6 <_printf_float+0x342>
 800cf62:	e680      	b.n	800cc66 <_printf_float+0xc2>
 800cf64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf66:	2a01      	cmp	r2, #1
 800cf68:	dc01      	bgt.n	800cf6e <_printf_float+0x3ca>
 800cf6a:	07db      	lsls	r3, r3, #31
 800cf6c:	d538      	bpl.n	800cfe0 <_printf_float+0x43c>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	4642      	mov	r2, r8
 800cf72:	4631      	mov	r1, r6
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	f43f ae74 	beq.w	800cc66 <_printf_float+0xc2>
 800cf7e:	ee18 3a10 	vmov	r3, s16
 800cf82:	4652      	mov	r2, sl
 800cf84:	4631      	mov	r1, r6
 800cf86:	4628      	mov	r0, r5
 800cf88:	47b8      	blx	r7
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	f43f ae6b 	beq.w	800cc66 <_printf_float+0xc2>
 800cf90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf94:	2200      	movs	r2, #0
 800cf96:	2300      	movs	r3, #0
 800cf98:	f7f3 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf9c:	b9d8      	cbnz	r0, 800cfd6 <_printf_float+0x432>
 800cf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa0:	f108 0201 	add.w	r2, r8, #1
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	47b8      	blx	r7
 800cfac:	3001      	adds	r0, #1
 800cfae:	d10e      	bne.n	800cfce <_printf_float+0x42a>
 800cfb0:	e659      	b.n	800cc66 <_printf_float+0xc2>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	4652      	mov	r2, sl
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b8      	blx	r7
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	f43f ae52 	beq.w	800cc66 <_printf_float+0xc2>
 800cfc2:	f108 0801 	add.w	r8, r8, #1
 800cfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	4543      	cmp	r3, r8
 800cfcc:	dcf1      	bgt.n	800cfb2 <_printf_float+0x40e>
 800cfce:	464b      	mov	r3, r9
 800cfd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfd4:	e6dc      	b.n	800cd90 <_printf_float+0x1ec>
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	f104 0a1a 	add.w	sl, r4, #26
 800cfde:	e7f2      	b.n	800cfc6 <_printf_float+0x422>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	e7df      	b.n	800cfa6 <_printf_float+0x402>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	464a      	mov	r2, r9
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b8      	blx	r7
 800cff0:	3001      	adds	r0, #1
 800cff2:	f43f ae38 	beq.w	800cc66 <_printf_float+0xc2>
 800cff6:	f108 0801 	add.w	r8, r8, #1
 800cffa:	68e3      	ldr	r3, [r4, #12]
 800cffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cffe:	1a5b      	subs	r3, r3, r1
 800d000:	4543      	cmp	r3, r8
 800d002:	dcf0      	bgt.n	800cfe6 <_printf_float+0x442>
 800d004:	e6fa      	b.n	800cdfc <_printf_float+0x258>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	f104 0919 	add.w	r9, r4, #25
 800d00e:	e7f4      	b.n	800cffa <_printf_float+0x456>

0800d010 <_printf_common>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	4616      	mov	r6, r2
 800d016:	4699      	mov	r9, r3
 800d018:	688a      	ldr	r2, [r1, #8]
 800d01a:	690b      	ldr	r3, [r1, #16]
 800d01c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d020:	4293      	cmp	r3, r2
 800d022:	bfb8      	it	lt
 800d024:	4613      	movlt	r3, r2
 800d026:	6033      	str	r3, [r6, #0]
 800d028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d02c:	4607      	mov	r7, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	b10a      	cbz	r2, 800d036 <_printf_common+0x26>
 800d032:	3301      	adds	r3, #1
 800d034:	6033      	str	r3, [r6, #0]
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	0699      	lsls	r1, r3, #26
 800d03a:	bf42      	ittt	mi
 800d03c:	6833      	ldrmi	r3, [r6, #0]
 800d03e:	3302      	addmi	r3, #2
 800d040:	6033      	strmi	r3, [r6, #0]
 800d042:	6825      	ldr	r5, [r4, #0]
 800d044:	f015 0506 	ands.w	r5, r5, #6
 800d048:	d106      	bne.n	800d058 <_printf_common+0x48>
 800d04a:	f104 0a19 	add.w	sl, r4, #25
 800d04e:	68e3      	ldr	r3, [r4, #12]
 800d050:	6832      	ldr	r2, [r6, #0]
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	42ab      	cmp	r3, r5
 800d056:	dc26      	bgt.n	800d0a6 <_printf_common+0x96>
 800d058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d05c:	1e13      	subs	r3, r2, #0
 800d05e:	6822      	ldr	r2, [r4, #0]
 800d060:	bf18      	it	ne
 800d062:	2301      	movne	r3, #1
 800d064:	0692      	lsls	r2, r2, #26
 800d066:	d42b      	bmi.n	800d0c0 <_printf_common+0xb0>
 800d068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d06c:	4649      	mov	r1, r9
 800d06e:	4638      	mov	r0, r7
 800d070:	47c0      	blx	r8
 800d072:	3001      	adds	r0, #1
 800d074:	d01e      	beq.n	800d0b4 <_printf_common+0xa4>
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	68e5      	ldr	r5, [r4, #12]
 800d07a:	6832      	ldr	r2, [r6, #0]
 800d07c:	f003 0306 	and.w	r3, r3, #6
 800d080:	2b04      	cmp	r3, #4
 800d082:	bf08      	it	eq
 800d084:	1aad      	subeq	r5, r5, r2
 800d086:	68a3      	ldr	r3, [r4, #8]
 800d088:	6922      	ldr	r2, [r4, #16]
 800d08a:	bf0c      	ite	eq
 800d08c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d090:	2500      	movne	r5, #0
 800d092:	4293      	cmp	r3, r2
 800d094:	bfc4      	itt	gt
 800d096:	1a9b      	subgt	r3, r3, r2
 800d098:	18ed      	addgt	r5, r5, r3
 800d09a:	2600      	movs	r6, #0
 800d09c:	341a      	adds	r4, #26
 800d09e:	42b5      	cmp	r5, r6
 800d0a0:	d11a      	bne.n	800d0d8 <_printf_common+0xc8>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e008      	b.n	800d0b8 <_printf_common+0xa8>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4652      	mov	r2, sl
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	4638      	mov	r0, r7
 800d0ae:	47c0      	blx	r8
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d103      	bne.n	800d0bc <_printf_common+0xac>
 800d0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0bc:	3501      	adds	r5, #1
 800d0be:	e7c6      	b.n	800d04e <_printf_common+0x3e>
 800d0c0:	18e1      	adds	r1, r4, r3
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	2030      	movs	r0, #48	; 0x30
 800d0c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0ca:	4422      	add	r2, r4
 800d0cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0d4:	3302      	adds	r3, #2
 800d0d6:	e7c7      	b.n	800d068 <_printf_common+0x58>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4649      	mov	r1, r9
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c0      	blx	r8
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	d0e6      	beq.n	800d0b4 <_printf_common+0xa4>
 800d0e6:	3601      	adds	r6, #1
 800d0e8:	e7d9      	b.n	800d09e <_printf_common+0x8e>
	...

0800d0ec <_printf_i>:
 800d0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	7e0f      	ldrb	r7, [r1, #24]
 800d0f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0f4:	2f78      	cmp	r7, #120	; 0x78
 800d0f6:	4691      	mov	r9, r2
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	469a      	mov	sl, r3
 800d0fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d102:	d807      	bhi.n	800d114 <_printf_i+0x28>
 800d104:	2f62      	cmp	r7, #98	; 0x62
 800d106:	d80a      	bhi.n	800d11e <_printf_i+0x32>
 800d108:	2f00      	cmp	r7, #0
 800d10a:	f000 80d8 	beq.w	800d2be <_printf_i+0x1d2>
 800d10e:	2f58      	cmp	r7, #88	; 0x58
 800d110:	f000 80a3 	beq.w	800d25a <_printf_i+0x16e>
 800d114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d11c:	e03a      	b.n	800d194 <_printf_i+0xa8>
 800d11e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d122:	2b15      	cmp	r3, #21
 800d124:	d8f6      	bhi.n	800d114 <_printf_i+0x28>
 800d126:	a101      	add	r1, pc, #4	; (adr r1, 800d12c <_printf_i+0x40>)
 800d128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d12c:	0800d185 	.word	0x0800d185
 800d130:	0800d199 	.word	0x0800d199
 800d134:	0800d115 	.word	0x0800d115
 800d138:	0800d115 	.word	0x0800d115
 800d13c:	0800d115 	.word	0x0800d115
 800d140:	0800d115 	.word	0x0800d115
 800d144:	0800d199 	.word	0x0800d199
 800d148:	0800d115 	.word	0x0800d115
 800d14c:	0800d115 	.word	0x0800d115
 800d150:	0800d115 	.word	0x0800d115
 800d154:	0800d115 	.word	0x0800d115
 800d158:	0800d2a5 	.word	0x0800d2a5
 800d15c:	0800d1c9 	.word	0x0800d1c9
 800d160:	0800d287 	.word	0x0800d287
 800d164:	0800d115 	.word	0x0800d115
 800d168:	0800d115 	.word	0x0800d115
 800d16c:	0800d2c7 	.word	0x0800d2c7
 800d170:	0800d115 	.word	0x0800d115
 800d174:	0800d1c9 	.word	0x0800d1c9
 800d178:	0800d115 	.word	0x0800d115
 800d17c:	0800d115 	.word	0x0800d115
 800d180:	0800d28f 	.word	0x0800d28f
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	1d1a      	adds	r2, r3, #4
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	602a      	str	r2, [r5, #0]
 800d18c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d194:	2301      	movs	r3, #1
 800d196:	e0a3      	b.n	800d2e0 <_printf_i+0x1f4>
 800d198:	6820      	ldr	r0, [r4, #0]
 800d19a:	6829      	ldr	r1, [r5, #0]
 800d19c:	0606      	lsls	r6, r0, #24
 800d19e:	f101 0304 	add.w	r3, r1, #4
 800d1a2:	d50a      	bpl.n	800d1ba <_printf_i+0xce>
 800d1a4:	680e      	ldr	r6, [r1, #0]
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	2e00      	cmp	r6, #0
 800d1aa:	da03      	bge.n	800d1b4 <_printf_i+0xc8>
 800d1ac:	232d      	movs	r3, #45	; 0x2d
 800d1ae:	4276      	negs	r6, r6
 800d1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1b4:	485e      	ldr	r0, [pc, #376]	; (800d330 <_printf_i+0x244>)
 800d1b6:	230a      	movs	r3, #10
 800d1b8:	e019      	b.n	800d1ee <_printf_i+0x102>
 800d1ba:	680e      	ldr	r6, [r1, #0]
 800d1bc:	602b      	str	r3, [r5, #0]
 800d1be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1c2:	bf18      	it	ne
 800d1c4:	b236      	sxthne	r6, r6
 800d1c6:	e7ef      	b.n	800d1a8 <_printf_i+0xbc>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	6820      	ldr	r0, [r4, #0]
 800d1cc:	1d19      	adds	r1, r3, #4
 800d1ce:	6029      	str	r1, [r5, #0]
 800d1d0:	0601      	lsls	r1, r0, #24
 800d1d2:	d501      	bpl.n	800d1d8 <_printf_i+0xec>
 800d1d4:	681e      	ldr	r6, [r3, #0]
 800d1d6:	e002      	b.n	800d1de <_printf_i+0xf2>
 800d1d8:	0646      	lsls	r6, r0, #25
 800d1da:	d5fb      	bpl.n	800d1d4 <_printf_i+0xe8>
 800d1dc:	881e      	ldrh	r6, [r3, #0]
 800d1de:	4854      	ldr	r0, [pc, #336]	; (800d330 <_printf_i+0x244>)
 800d1e0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1e2:	bf0c      	ite	eq
 800d1e4:	2308      	moveq	r3, #8
 800d1e6:	230a      	movne	r3, #10
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1ee:	6865      	ldr	r5, [r4, #4]
 800d1f0:	60a5      	str	r5, [r4, #8]
 800d1f2:	2d00      	cmp	r5, #0
 800d1f4:	bfa2      	ittt	ge
 800d1f6:	6821      	ldrge	r1, [r4, #0]
 800d1f8:	f021 0104 	bicge.w	r1, r1, #4
 800d1fc:	6021      	strge	r1, [r4, #0]
 800d1fe:	b90e      	cbnz	r6, 800d204 <_printf_i+0x118>
 800d200:	2d00      	cmp	r5, #0
 800d202:	d04d      	beq.n	800d2a0 <_printf_i+0x1b4>
 800d204:	4615      	mov	r5, r2
 800d206:	fbb6 f1f3 	udiv	r1, r6, r3
 800d20a:	fb03 6711 	mls	r7, r3, r1, r6
 800d20e:	5dc7      	ldrb	r7, [r0, r7]
 800d210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d214:	4637      	mov	r7, r6
 800d216:	42bb      	cmp	r3, r7
 800d218:	460e      	mov	r6, r1
 800d21a:	d9f4      	bls.n	800d206 <_printf_i+0x11a>
 800d21c:	2b08      	cmp	r3, #8
 800d21e:	d10b      	bne.n	800d238 <_printf_i+0x14c>
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	07de      	lsls	r6, r3, #31
 800d224:	d508      	bpl.n	800d238 <_printf_i+0x14c>
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	6861      	ldr	r1, [r4, #4]
 800d22a:	4299      	cmp	r1, r3
 800d22c:	bfde      	ittt	le
 800d22e:	2330      	movle	r3, #48	; 0x30
 800d230:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d234:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d238:	1b52      	subs	r2, r2, r5
 800d23a:	6122      	str	r2, [r4, #16]
 800d23c:	f8cd a000 	str.w	sl, [sp]
 800d240:	464b      	mov	r3, r9
 800d242:	aa03      	add	r2, sp, #12
 800d244:	4621      	mov	r1, r4
 800d246:	4640      	mov	r0, r8
 800d248:	f7ff fee2 	bl	800d010 <_printf_common>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d14c      	bne.n	800d2ea <_printf_i+0x1fe>
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	b004      	add	sp, #16
 800d256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25a:	4835      	ldr	r0, [pc, #212]	; (800d330 <_printf_i+0x244>)
 800d25c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d260:	6829      	ldr	r1, [r5, #0]
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f851 6b04 	ldr.w	r6, [r1], #4
 800d268:	6029      	str	r1, [r5, #0]
 800d26a:	061d      	lsls	r5, r3, #24
 800d26c:	d514      	bpl.n	800d298 <_printf_i+0x1ac>
 800d26e:	07df      	lsls	r7, r3, #31
 800d270:	bf44      	itt	mi
 800d272:	f043 0320 	orrmi.w	r3, r3, #32
 800d276:	6023      	strmi	r3, [r4, #0]
 800d278:	b91e      	cbnz	r6, 800d282 <_printf_i+0x196>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	f023 0320 	bic.w	r3, r3, #32
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	2310      	movs	r3, #16
 800d284:	e7b0      	b.n	800d1e8 <_printf_i+0xfc>
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	f043 0320 	orr.w	r3, r3, #32
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	2378      	movs	r3, #120	; 0x78
 800d290:	4828      	ldr	r0, [pc, #160]	; (800d334 <_printf_i+0x248>)
 800d292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d296:	e7e3      	b.n	800d260 <_printf_i+0x174>
 800d298:	0659      	lsls	r1, r3, #25
 800d29a:	bf48      	it	mi
 800d29c:	b2b6      	uxthmi	r6, r6
 800d29e:	e7e6      	b.n	800d26e <_printf_i+0x182>
 800d2a0:	4615      	mov	r5, r2
 800d2a2:	e7bb      	b.n	800d21c <_printf_i+0x130>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	6826      	ldr	r6, [r4, #0]
 800d2a8:	6961      	ldr	r1, [r4, #20]
 800d2aa:	1d18      	adds	r0, r3, #4
 800d2ac:	6028      	str	r0, [r5, #0]
 800d2ae:	0635      	lsls	r5, r6, #24
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	d501      	bpl.n	800d2b8 <_printf_i+0x1cc>
 800d2b4:	6019      	str	r1, [r3, #0]
 800d2b6:	e002      	b.n	800d2be <_printf_i+0x1d2>
 800d2b8:	0670      	lsls	r0, r6, #25
 800d2ba:	d5fb      	bpl.n	800d2b4 <_printf_i+0x1c8>
 800d2bc:	8019      	strh	r1, [r3, #0]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	6123      	str	r3, [r4, #16]
 800d2c2:	4615      	mov	r5, r2
 800d2c4:	e7ba      	b.n	800d23c <_printf_i+0x150>
 800d2c6:	682b      	ldr	r3, [r5, #0]
 800d2c8:	1d1a      	adds	r2, r3, #4
 800d2ca:	602a      	str	r2, [r5, #0]
 800d2cc:	681d      	ldr	r5, [r3, #0]
 800d2ce:	6862      	ldr	r2, [r4, #4]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f7f2 ff84 	bl	80001e0 <memchr>
 800d2d8:	b108      	cbz	r0, 800d2de <_printf_i+0x1f2>
 800d2da:	1b40      	subs	r0, r0, r5
 800d2dc:	6060      	str	r0, [r4, #4]
 800d2de:	6863      	ldr	r3, [r4, #4]
 800d2e0:	6123      	str	r3, [r4, #16]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e8:	e7a8      	b.n	800d23c <_printf_i+0x150>
 800d2ea:	6923      	ldr	r3, [r4, #16]
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	47d0      	blx	sl
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d0ab      	beq.n	800d250 <_printf_i+0x164>
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	079b      	lsls	r3, r3, #30
 800d2fc:	d413      	bmi.n	800d326 <_printf_i+0x23a>
 800d2fe:	68e0      	ldr	r0, [r4, #12]
 800d300:	9b03      	ldr	r3, [sp, #12]
 800d302:	4298      	cmp	r0, r3
 800d304:	bfb8      	it	lt
 800d306:	4618      	movlt	r0, r3
 800d308:	e7a4      	b.n	800d254 <_printf_i+0x168>
 800d30a:	2301      	movs	r3, #1
 800d30c:	4632      	mov	r2, r6
 800d30e:	4649      	mov	r1, r9
 800d310:	4640      	mov	r0, r8
 800d312:	47d0      	blx	sl
 800d314:	3001      	adds	r0, #1
 800d316:	d09b      	beq.n	800d250 <_printf_i+0x164>
 800d318:	3501      	adds	r5, #1
 800d31a:	68e3      	ldr	r3, [r4, #12]
 800d31c:	9903      	ldr	r1, [sp, #12]
 800d31e:	1a5b      	subs	r3, r3, r1
 800d320:	42ab      	cmp	r3, r5
 800d322:	dcf2      	bgt.n	800d30a <_printf_i+0x21e>
 800d324:	e7eb      	b.n	800d2fe <_printf_i+0x212>
 800d326:	2500      	movs	r5, #0
 800d328:	f104 0619 	add.w	r6, r4, #25
 800d32c:	e7f5      	b.n	800d31a <_printf_i+0x22e>
 800d32e:	bf00      	nop
 800d330:	080118ea 	.word	0x080118ea
 800d334:	080118fb 	.word	0x080118fb

0800d338 <realloc>:
 800d338:	4b02      	ldr	r3, [pc, #8]	; (800d344 <realloc+0xc>)
 800d33a:	460a      	mov	r2, r1
 800d33c:	4601      	mov	r1, r0
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	f002 bf06 	b.w	8010150 <_realloc_r>
 800d344:	200001a8 	.word	0x200001a8

0800d348 <sniprintf>:
 800d348:	b40c      	push	{r2, r3}
 800d34a:	b530      	push	{r4, r5, lr}
 800d34c:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <sniprintf+0x64>)
 800d34e:	1e0c      	subs	r4, r1, #0
 800d350:	681d      	ldr	r5, [r3, #0]
 800d352:	b09d      	sub	sp, #116	; 0x74
 800d354:	da08      	bge.n	800d368 <sniprintf+0x20>
 800d356:	238b      	movs	r3, #139	; 0x8b
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	f04f 30ff 	mov.w	r0, #4294967295
 800d35e:	b01d      	add	sp, #116	; 0x74
 800d360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d364:	b002      	add	sp, #8
 800d366:	4770      	bx	lr
 800d368:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d36c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d370:	bf14      	ite	ne
 800d372:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d376:	4623      	moveq	r3, r4
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	9307      	str	r3, [sp, #28]
 800d37c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d380:	9002      	str	r0, [sp, #8]
 800d382:	9006      	str	r0, [sp, #24]
 800d384:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d388:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d38a:	ab21      	add	r3, sp, #132	; 0x84
 800d38c:	a902      	add	r1, sp, #8
 800d38e:	4628      	mov	r0, r5
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	f002 ff67 	bl	8010264 <_svfiprintf_r>
 800d396:	1c43      	adds	r3, r0, #1
 800d398:	bfbc      	itt	lt
 800d39a:	238b      	movlt	r3, #139	; 0x8b
 800d39c:	602b      	strlt	r3, [r5, #0]
 800d39e:	2c00      	cmp	r4, #0
 800d3a0:	d0dd      	beq.n	800d35e <sniprintf+0x16>
 800d3a2:	9b02      	ldr	r3, [sp, #8]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	e7d9      	b.n	800d35e <sniprintf+0x16>
 800d3aa:	bf00      	nop
 800d3ac:	200001a8 	.word	0x200001a8

0800d3b0 <strncmp>:
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	b17a      	cbz	r2, 800d3d4 <strncmp+0x24>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	3901      	subs	r1, #1
 800d3b8:	1884      	adds	r4, r0, r2
 800d3ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d3c2:	4290      	cmp	r0, r2
 800d3c4:	d101      	bne.n	800d3ca <strncmp+0x1a>
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	d101      	bne.n	800d3ce <strncmp+0x1e>
 800d3ca:	1a80      	subs	r0, r0, r2
 800d3cc:	bd10      	pop	{r4, pc}
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d1f3      	bne.n	800d3ba <strncmp+0xa>
 800d3d2:	e7fa      	b.n	800d3ca <strncmp+0x1a>
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	e7f9      	b.n	800d3cc <strncmp+0x1c>

0800d3d8 <sulp>:
 800d3d8:	b570      	push	{r4, r5, r6, lr}
 800d3da:	4604      	mov	r4, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	ec45 4b10 	vmov	d0, r4, r5
 800d3e2:	4616      	mov	r6, r2
 800d3e4:	f002 fc6e 	bl	800fcc4 <__ulp>
 800d3e8:	ec51 0b10 	vmov	r0, r1, d0
 800d3ec:	b17e      	cbz	r6, 800d40e <sulp+0x36>
 800d3ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	dd09      	ble.n	800d40e <sulp+0x36>
 800d3fa:	051b      	lsls	r3, r3, #20
 800d3fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d400:	2400      	movs	r4, #0
 800d402:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d406:	4622      	mov	r2, r4
 800d408:	462b      	mov	r3, r5
 800d40a:	f7f3 f8f5 	bl	80005f8 <__aeabi_dmul>
 800d40e:	bd70      	pop	{r4, r5, r6, pc}

0800d410 <_strtod_l>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	ed2d 8b02 	vpush	{d8}
 800d418:	b09d      	sub	sp, #116	; 0x74
 800d41a:	461f      	mov	r7, r3
 800d41c:	2300      	movs	r3, #0
 800d41e:	9318      	str	r3, [sp, #96]	; 0x60
 800d420:	4ba2      	ldr	r3, [pc, #648]	; (800d6ac <_strtod_l+0x29c>)
 800d422:	9213      	str	r2, [sp, #76]	; 0x4c
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	9305      	str	r3, [sp, #20]
 800d428:	4604      	mov	r4, r0
 800d42a:	4618      	mov	r0, r3
 800d42c:	4688      	mov	r8, r1
 800d42e:	f7f2 fecf 	bl	80001d0 <strlen>
 800d432:	f04f 0a00 	mov.w	sl, #0
 800d436:	4605      	mov	r5, r0
 800d438:	f04f 0b00 	mov.w	fp, #0
 800d43c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d442:	781a      	ldrb	r2, [r3, #0]
 800d444:	2a2b      	cmp	r2, #43	; 0x2b
 800d446:	d04e      	beq.n	800d4e6 <_strtod_l+0xd6>
 800d448:	d83b      	bhi.n	800d4c2 <_strtod_l+0xb2>
 800d44a:	2a0d      	cmp	r2, #13
 800d44c:	d834      	bhi.n	800d4b8 <_strtod_l+0xa8>
 800d44e:	2a08      	cmp	r2, #8
 800d450:	d834      	bhi.n	800d4bc <_strtod_l+0xac>
 800d452:	2a00      	cmp	r2, #0
 800d454:	d03e      	beq.n	800d4d4 <_strtod_l+0xc4>
 800d456:	2300      	movs	r3, #0
 800d458:	930a      	str	r3, [sp, #40]	; 0x28
 800d45a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d45c:	7833      	ldrb	r3, [r6, #0]
 800d45e:	2b30      	cmp	r3, #48	; 0x30
 800d460:	f040 80b0 	bne.w	800d5c4 <_strtod_l+0x1b4>
 800d464:	7873      	ldrb	r3, [r6, #1]
 800d466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d46a:	2b58      	cmp	r3, #88	; 0x58
 800d46c:	d168      	bne.n	800d540 <_strtod_l+0x130>
 800d46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	ab18      	add	r3, sp, #96	; 0x60
 800d474:	9702      	str	r7, [sp, #8]
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	4a8d      	ldr	r2, [pc, #564]	; (800d6b0 <_strtod_l+0x2a0>)
 800d47a:	ab19      	add	r3, sp, #100	; 0x64
 800d47c:	a917      	add	r1, sp, #92	; 0x5c
 800d47e:	4620      	mov	r0, r4
 800d480:	f001 fd88 	bl	800ef94 <__gethex>
 800d484:	f010 0707 	ands.w	r7, r0, #7
 800d488:	4605      	mov	r5, r0
 800d48a:	d005      	beq.n	800d498 <_strtod_l+0x88>
 800d48c:	2f06      	cmp	r7, #6
 800d48e:	d12c      	bne.n	800d4ea <_strtod_l+0xda>
 800d490:	3601      	adds	r6, #1
 800d492:	2300      	movs	r3, #0
 800d494:	9617      	str	r6, [sp, #92]	; 0x5c
 800d496:	930a      	str	r3, [sp, #40]	; 0x28
 800d498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f040 8590 	bne.w	800dfc0 <_strtod_l+0xbb0>
 800d4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a2:	b1eb      	cbz	r3, 800d4e0 <_strtod_l+0xd0>
 800d4a4:	4652      	mov	r2, sl
 800d4a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d4aa:	ec43 2b10 	vmov	d0, r2, r3
 800d4ae:	b01d      	add	sp, #116	; 0x74
 800d4b0:	ecbd 8b02 	vpop	{d8}
 800d4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b8:	2a20      	cmp	r2, #32
 800d4ba:	d1cc      	bne.n	800d456 <_strtod_l+0x46>
 800d4bc:	3301      	adds	r3, #1
 800d4be:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4c0:	e7be      	b.n	800d440 <_strtod_l+0x30>
 800d4c2:	2a2d      	cmp	r2, #45	; 0x2d
 800d4c4:	d1c7      	bne.n	800d456 <_strtod_l+0x46>
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4ce:	785b      	ldrb	r3, [r3, #1]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1c2      	bne.n	800d45a <_strtod_l+0x4a>
 800d4d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f040 856e 	bne.w	800dfbc <_strtod_l+0xbac>
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	465b      	mov	r3, fp
 800d4e4:	e7e1      	b.n	800d4aa <_strtod_l+0x9a>
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	e7ee      	b.n	800d4c8 <_strtod_l+0xb8>
 800d4ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d4ec:	b13a      	cbz	r2, 800d4fe <_strtod_l+0xee>
 800d4ee:	2135      	movs	r1, #53	; 0x35
 800d4f0:	a81a      	add	r0, sp, #104	; 0x68
 800d4f2:	f002 fcf2 	bl	800feda <__copybits>
 800d4f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f002 f8b1 	bl	800f660 <_Bfree>
 800d4fe:	3f01      	subs	r7, #1
 800d500:	2f04      	cmp	r7, #4
 800d502:	d806      	bhi.n	800d512 <_strtod_l+0x102>
 800d504:	e8df f007 	tbb	[pc, r7]
 800d508:	1714030a 	.word	0x1714030a
 800d50c:	0a          	.byte	0x0a
 800d50d:	00          	.byte	0x00
 800d50e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d512:	0728      	lsls	r0, r5, #28
 800d514:	d5c0      	bpl.n	800d498 <_strtod_l+0x88>
 800d516:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d51a:	e7bd      	b.n	800d498 <_strtod_l+0x88>
 800d51c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d520:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d526:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d52a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d52e:	e7f0      	b.n	800d512 <_strtod_l+0x102>
 800d530:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d6b4 <_strtod_l+0x2a4>
 800d534:	e7ed      	b.n	800d512 <_strtod_l+0x102>
 800d536:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d53a:	f04f 3aff 	mov.w	sl, #4294967295
 800d53e:	e7e8      	b.n	800d512 <_strtod_l+0x102>
 800d540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	9217      	str	r2, [sp, #92]	; 0x5c
 800d546:	785b      	ldrb	r3, [r3, #1]
 800d548:	2b30      	cmp	r3, #48	; 0x30
 800d54a:	d0f9      	beq.n	800d540 <_strtod_l+0x130>
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d0a3      	beq.n	800d498 <_strtod_l+0x88>
 800d550:	2301      	movs	r3, #1
 800d552:	f04f 0900 	mov.w	r9, #0
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d55a:	9308      	str	r3, [sp, #32]
 800d55c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d560:	464f      	mov	r7, r9
 800d562:	220a      	movs	r2, #10
 800d564:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d566:	7806      	ldrb	r6, [r0, #0]
 800d568:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d56c:	b2d9      	uxtb	r1, r3
 800d56e:	2909      	cmp	r1, #9
 800d570:	d92a      	bls.n	800d5c8 <_strtod_l+0x1b8>
 800d572:	9905      	ldr	r1, [sp, #20]
 800d574:	462a      	mov	r2, r5
 800d576:	f7ff ff1b 	bl	800d3b0 <strncmp>
 800d57a:	b398      	cbz	r0, 800d5e4 <_strtod_l+0x1d4>
 800d57c:	2000      	movs	r0, #0
 800d57e:	4632      	mov	r2, r6
 800d580:	463d      	mov	r5, r7
 800d582:	9005      	str	r0, [sp, #20]
 800d584:	4603      	mov	r3, r0
 800d586:	2a65      	cmp	r2, #101	; 0x65
 800d588:	d001      	beq.n	800d58e <_strtod_l+0x17e>
 800d58a:	2a45      	cmp	r2, #69	; 0x45
 800d58c:	d118      	bne.n	800d5c0 <_strtod_l+0x1b0>
 800d58e:	b91d      	cbnz	r5, 800d598 <_strtod_l+0x188>
 800d590:	9a04      	ldr	r2, [sp, #16]
 800d592:	4302      	orrs	r2, r0
 800d594:	d09e      	beq.n	800d4d4 <_strtod_l+0xc4>
 800d596:	2500      	movs	r5, #0
 800d598:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d59c:	f108 0201 	add.w	r2, r8, #1
 800d5a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d5a6:	2a2b      	cmp	r2, #43	; 0x2b
 800d5a8:	d075      	beq.n	800d696 <_strtod_l+0x286>
 800d5aa:	2a2d      	cmp	r2, #45	; 0x2d
 800d5ac:	d07b      	beq.n	800d6a6 <_strtod_l+0x296>
 800d5ae:	f04f 0c00 	mov.w	ip, #0
 800d5b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d5b6:	2909      	cmp	r1, #9
 800d5b8:	f240 8082 	bls.w	800d6c0 <_strtod_l+0x2b0>
 800d5bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d5c0:	2600      	movs	r6, #0
 800d5c2:	e09d      	b.n	800d700 <_strtod_l+0x2f0>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e7c4      	b.n	800d552 <_strtod_l+0x142>
 800d5c8:	2f08      	cmp	r7, #8
 800d5ca:	bfd8      	it	le
 800d5cc:	9907      	ldrle	r1, [sp, #28]
 800d5ce:	f100 0001 	add.w	r0, r0, #1
 800d5d2:	bfda      	itte	le
 800d5d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5d8:	9307      	strle	r3, [sp, #28]
 800d5da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d5de:	3701      	adds	r7, #1
 800d5e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d5e2:	e7bf      	b.n	800d564 <_strtod_l+0x154>
 800d5e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5e6:	195a      	adds	r2, r3, r5
 800d5e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5ea:	5d5a      	ldrb	r2, [r3, r5]
 800d5ec:	2f00      	cmp	r7, #0
 800d5ee:	d037      	beq.n	800d660 <_strtod_l+0x250>
 800d5f0:	9005      	str	r0, [sp, #20]
 800d5f2:	463d      	mov	r5, r7
 800d5f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d5f8:	2b09      	cmp	r3, #9
 800d5fa:	d912      	bls.n	800d622 <_strtod_l+0x212>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e7c2      	b.n	800d586 <_strtod_l+0x176>
 800d600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	9217      	str	r2, [sp, #92]	; 0x5c
 800d606:	785a      	ldrb	r2, [r3, #1]
 800d608:	3001      	adds	r0, #1
 800d60a:	2a30      	cmp	r2, #48	; 0x30
 800d60c:	d0f8      	beq.n	800d600 <_strtod_l+0x1f0>
 800d60e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d612:	2b08      	cmp	r3, #8
 800d614:	f200 84d9 	bhi.w	800dfca <_strtod_l+0xbba>
 800d618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d61a:	9005      	str	r0, [sp, #20]
 800d61c:	2000      	movs	r0, #0
 800d61e:	9308      	str	r3, [sp, #32]
 800d620:	4605      	mov	r5, r0
 800d622:	3a30      	subs	r2, #48	; 0x30
 800d624:	f100 0301 	add.w	r3, r0, #1
 800d628:	d014      	beq.n	800d654 <_strtod_l+0x244>
 800d62a:	9905      	ldr	r1, [sp, #20]
 800d62c:	4419      	add	r1, r3
 800d62e:	9105      	str	r1, [sp, #20]
 800d630:	462b      	mov	r3, r5
 800d632:	eb00 0e05 	add.w	lr, r0, r5
 800d636:	210a      	movs	r1, #10
 800d638:	4573      	cmp	r3, lr
 800d63a:	d113      	bne.n	800d664 <_strtod_l+0x254>
 800d63c:	182b      	adds	r3, r5, r0
 800d63e:	2b08      	cmp	r3, #8
 800d640:	f105 0501 	add.w	r5, r5, #1
 800d644:	4405      	add	r5, r0
 800d646:	dc1c      	bgt.n	800d682 <_strtod_l+0x272>
 800d648:	9907      	ldr	r1, [sp, #28]
 800d64a:	230a      	movs	r3, #10
 800d64c:	fb03 2301 	mla	r3, r3, r1, r2
 800d650:	9307      	str	r3, [sp, #28]
 800d652:	2300      	movs	r3, #0
 800d654:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d656:	1c51      	adds	r1, r2, #1
 800d658:	9117      	str	r1, [sp, #92]	; 0x5c
 800d65a:	7852      	ldrb	r2, [r2, #1]
 800d65c:	4618      	mov	r0, r3
 800d65e:	e7c9      	b.n	800d5f4 <_strtod_l+0x1e4>
 800d660:	4638      	mov	r0, r7
 800d662:	e7d2      	b.n	800d60a <_strtod_l+0x1fa>
 800d664:	2b08      	cmp	r3, #8
 800d666:	dc04      	bgt.n	800d672 <_strtod_l+0x262>
 800d668:	9e07      	ldr	r6, [sp, #28]
 800d66a:	434e      	muls	r6, r1
 800d66c:	9607      	str	r6, [sp, #28]
 800d66e:	3301      	adds	r3, #1
 800d670:	e7e2      	b.n	800d638 <_strtod_l+0x228>
 800d672:	f103 0c01 	add.w	ip, r3, #1
 800d676:	f1bc 0f10 	cmp.w	ip, #16
 800d67a:	bfd8      	it	le
 800d67c:	fb01 f909 	mulle.w	r9, r1, r9
 800d680:	e7f5      	b.n	800d66e <_strtod_l+0x25e>
 800d682:	2d10      	cmp	r5, #16
 800d684:	bfdc      	itt	le
 800d686:	230a      	movle	r3, #10
 800d688:	fb03 2909 	mlale	r9, r3, r9, r2
 800d68c:	e7e1      	b.n	800d652 <_strtod_l+0x242>
 800d68e:	2300      	movs	r3, #0
 800d690:	9305      	str	r3, [sp, #20]
 800d692:	2301      	movs	r3, #1
 800d694:	e77c      	b.n	800d590 <_strtod_l+0x180>
 800d696:	f04f 0c00 	mov.w	ip, #0
 800d69a:	f108 0202 	add.w	r2, r8, #2
 800d69e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d6a4:	e785      	b.n	800d5b2 <_strtod_l+0x1a2>
 800d6a6:	f04f 0c01 	mov.w	ip, #1
 800d6aa:	e7f6      	b.n	800d69a <_strtod_l+0x28a>
 800d6ac:	08011a58 	.word	0x08011a58
 800d6b0:	0801190c 	.word	0x0801190c
 800d6b4:	7ff00000 	.word	0x7ff00000
 800d6b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6ba:	1c51      	adds	r1, r2, #1
 800d6bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6be:	7852      	ldrb	r2, [r2, #1]
 800d6c0:	2a30      	cmp	r2, #48	; 0x30
 800d6c2:	d0f9      	beq.n	800d6b8 <_strtod_l+0x2a8>
 800d6c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d6c8:	2908      	cmp	r1, #8
 800d6ca:	f63f af79 	bhi.w	800d5c0 <_strtod_l+0x1b0>
 800d6ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d6d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6d4:	9206      	str	r2, [sp, #24]
 800d6d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6d8:	1c51      	adds	r1, r2, #1
 800d6da:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6dc:	7852      	ldrb	r2, [r2, #1]
 800d6de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d6e2:	2e09      	cmp	r6, #9
 800d6e4:	d937      	bls.n	800d756 <_strtod_l+0x346>
 800d6e6:	9e06      	ldr	r6, [sp, #24]
 800d6e8:	1b89      	subs	r1, r1, r6
 800d6ea:	2908      	cmp	r1, #8
 800d6ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d6f0:	dc02      	bgt.n	800d6f8 <_strtod_l+0x2e8>
 800d6f2:	4576      	cmp	r6, lr
 800d6f4:	bfa8      	it	ge
 800d6f6:	4676      	movge	r6, lr
 800d6f8:	f1bc 0f00 	cmp.w	ip, #0
 800d6fc:	d000      	beq.n	800d700 <_strtod_l+0x2f0>
 800d6fe:	4276      	negs	r6, r6
 800d700:	2d00      	cmp	r5, #0
 800d702:	d14d      	bne.n	800d7a0 <_strtod_l+0x390>
 800d704:	9904      	ldr	r1, [sp, #16]
 800d706:	4301      	orrs	r1, r0
 800d708:	f47f aec6 	bne.w	800d498 <_strtod_l+0x88>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f47f aee1 	bne.w	800d4d4 <_strtod_l+0xc4>
 800d712:	2a69      	cmp	r2, #105	; 0x69
 800d714:	d027      	beq.n	800d766 <_strtod_l+0x356>
 800d716:	dc24      	bgt.n	800d762 <_strtod_l+0x352>
 800d718:	2a49      	cmp	r2, #73	; 0x49
 800d71a:	d024      	beq.n	800d766 <_strtod_l+0x356>
 800d71c:	2a4e      	cmp	r2, #78	; 0x4e
 800d71e:	f47f aed9 	bne.w	800d4d4 <_strtod_l+0xc4>
 800d722:	499f      	ldr	r1, [pc, #636]	; (800d9a0 <_strtod_l+0x590>)
 800d724:	a817      	add	r0, sp, #92	; 0x5c
 800d726:	f001 fe8d 	bl	800f444 <__match>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	f43f aed2 	beq.w	800d4d4 <_strtod_l+0xc4>
 800d730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b28      	cmp	r3, #40	; 0x28
 800d736:	d12d      	bne.n	800d794 <_strtod_l+0x384>
 800d738:	499a      	ldr	r1, [pc, #616]	; (800d9a4 <_strtod_l+0x594>)
 800d73a:	aa1a      	add	r2, sp, #104	; 0x68
 800d73c:	a817      	add	r0, sp, #92	; 0x5c
 800d73e:	f001 fe95 	bl	800f46c <__hexnan>
 800d742:	2805      	cmp	r0, #5
 800d744:	d126      	bne.n	800d794 <_strtod_l+0x384>
 800d746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d748:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d74c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d750:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d754:	e6a0      	b.n	800d498 <_strtod_l+0x88>
 800d756:	210a      	movs	r1, #10
 800d758:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d75c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d760:	e7b9      	b.n	800d6d6 <_strtod_l+0x2c6>
 800d762:	2a6e      	cmp	r2, #110	; 0x6e
 800d764:	e7db      	b.n	800d71e <_strtod_l+0x30e>
 800d766:	4990      	ldr	r1, [pc, #576]	; (800d9a8 <_strtod_l+0x598>)
 800d768:	a817      	add	r0, sp, #92	; 0x5c
 800d76a:	f001 fe6b 	bl	800f444 <__match>
 800d76e:	2800      	cmp	r0, #0
 800d770:	f43f aeb0 	beq.w	800d4d4 <_strtod_l+0xc4>
 800d774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d776:	498d      	ldr	r1, [pc, #564]	; (800d9ac <_strtod_l+0x59c>)
 800d778:	3b01      	subs	r3, #1
 800d77a:	a817      	add	r0, sp, #92	; 0x5c
 800d77c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d77e:	f001 fe61 	bl	800f444 <__match>
 800d782:	b910      	cbnz	r0, 800d78a <_strtod_l+0x37a>
 800d784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d786:	3301      	adds	r3, #1
 800d788:	9317      	str	r3, [sp, #92]	; 0x5c
 800d78a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d9bc <_strtod_l+0x5ac>
 800d78e:	f04f 0a00 	mov.w	sl, #0
 800d792:	e681      	b.n	800d498 <_strtod_l+0x88>
 800d794:	4886      	ldr	r0, [pc, #536]	; (800d9b0 <_strtod_l+0x5a0>)
 800d796:	f002 fe67 	bl	8010468 <nan>
 800d79a:	ec5b ab10 	vmov	sl, fp, d0
 800d79e:	e67b      	b.n	800d498 <_strtod_l+0x88>
 800d7a0:	9b05      	ldr	r3, [sp, #20]
 800d7a2:	9807      	ldr	r0, [sp, #28]
 800d7a4:	1af3      	subs	r3, r6, r3
 800d7a6:	2f00      	cmp	r7, #0
 800d7a8:	bf08      	it	eq
 800d7aa:	462f      	moveq	r7, r5
 800d7ac:	2d10      	cmp	r5, #16
 800d7ae:	9306      	str	r3, [sp, #24]
 800d7b0:	46a8      	mov	r8, r5
 800d7b2:	bfa8      	it	ge
 800d7b4:	f04f 0810 	movge.w	r8, #16
 800d7b8:	f7f2 fea4 	bl	8000504 <__aeabi_ui2d>
 800d7bc:	2d09      	cmp	r5, #9
 800d7be:	4682      	mov	sl, r0
 800d7c0:	468b      	mov	fp, r1
 800d7c2:	dd13      	ble.n	800d7ec <_strtod_l+0x3dc>
 800d7c4:	4b7b      	ldr	r3, [pc, #492]	; (800d9b4 <_strtod_l+0x5a4>)
 800d7c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d7ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d7ce:	f7f2 ff13 	bl	80005f8 <__aeabi_dmul>
 800d7d2:	4682      	mov	sl, r0
 800d7d4:	4648      	mov	r0, r9
 800d7d6:	468b      	mov	fp, r1
 800d7d8:	f7f2 fe94 	bl	8000504 <__aeabi_ui2d>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4650      	mov	r0, sl
 800d7e2:	4659      	mov	r1, fp
 800d7e4:	f7f2 fd52 	bl	800028c <__adddf3>
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	468b      	mov	fp, r1
 800d7ec:	2d0f      	cmp	r5, #15
 800d7ee:	dc38      	bgt.n	800d862 <_strtod_l+0x452>
 800d7f0:	9b06      	ldr	r3, [sp, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f43f ae50 	beq.w	800d498 <_strtod_l+0x88>
 800d7f8:	dd24      	ble.n	800d844 <_strtod_l+0x434>
 800d7fa:	2b16      	cmp	r3, #22
 800d7fc:	dc0b      	bgt.n	800d816 <_strtod_l+0x406>
 800d7fe:	496d      	ldr	r1, [pc, #436]	; (800d9b4 <_strtod_l+0x5a4>)
 800d800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d804:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d808:	4652      	mov	r2, sl
 800d80a:	465b      	mov	r3, fp
 800d80c:	f7f2 fef4 	bl	80005f8 <__aeabi_dmul>
 800d810:	4682      	mov	sl, r0
 800d812:	468b      	mov	fp, r1
 800d814:	e640      	b.n	800d498 <_strtod_l+0x88>
 800d816:	9a06      	ldr	r2, [sp, #24]
 800d818:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d81c:	4293      	cmp	r3, r2
 800d81e:	db20      	blt.n	800d862 <_strtod_l+0x452>
 800d820:	4c64      	ldr	r4, [pc, #400]	; (800d9b4 <_strtod_l+0x5a4>)
 800d822:	f1c5 050f 	rsb	r5, r5, #15
 800d826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d82a:	4652      	mov	r2, sl
 800d82c:	465b      	mov	r3, fp
 800d82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d832:	f7f2 fee1 	bl	80005f8 <__aeabi_dmul>
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	1b5d      	subs	r5, r3, r5
 800d83a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d83e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d842:	e7e3      	b.n	800d80c <_strtod_l+0x3fc>
 800d844:	9b06      	ldr	r3, [sp, #24]
 800d846:	3316      	adds	r3, #22
 800d848:	db0b      	blt.n	800d862 <_strtod_l+0x452>
 800d84a:	9b05      	ldr	r3, [sp, #20]
 800d84c:	1b9e      	subs	r6, r3, r6
 800d84e:	4b59      	ldr	r3, [pc, #356]	; (800d9b4 <_strtod_l+0x5a4>)
 800d850:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d854:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d858:	4650      	mov	r0, sl
 800d85a:	4659      	mov	r1, fp
 800d85c:	f7f2 fff6 	bl	800084c <__aeabi_ddiv>
 800d860:	e7d6      	b.n	800d810 <_strtod_l+0x400>
 800d862:	9b06      	ldr	r3, [sp, #24]
 800d864:	eba5 0808 	sub.w	r8, r5, r8
 800d868:	4498      	add	r8, r3
 800d86a:	f1b8 0f00 	cmp.w	r8, #0
 800d86e:	dd74      	ble.n	800d95a <_strtod_l+0x54a>
 800d870:	f018 030f 	ands.w	r3, r8, #15
 800d874:	d00a      	beq.n	800d88c <_strtod_l+0x47c>
 800d876:	494f      	ldr	r1, [pc, #316]	; (800d9b4 <_strtod_l+0x5a4>)
 800d878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d87c:	4652      	mov	r2, sl
 800d87e:	465b      	mov	r3, fp
 800d880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	4682      	mov	sl, r0
 800d88a:	468b      	mov	fp, r1
 800d88c:	f038 080f 	bics.w	r8, r8, #15
 800d890:	d04f      	beq.n	800d932 <_strtod_l+0x522>
 800d892:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d896:	dd22      	ble.n	800d8de <_strtod_l+0x4ce>
 800d898:	2500      	movs	r5, #0
 800d89a:	462e      	mov	r6, r5
 800d89c:	9507      	str	r5, [sp, #28]
 800d89e:	9505      	str	r5, [sp, #20]
 800d8a0:	2322      	movs	r3, #34	; 0x22
 800d8a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d9bc <_strtod_l+0x5ac>
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	f04f 0a00 	mov.w	sl, #0
 800d8ac:	9b07      	ldr	r3, [sp, #28]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f43f adf2 	beq.w	800d498 <_strtod_l+0x88>
 800d8b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f001 fed2 	bl	800f660 <_Bfree>
 800d8bc:	9905      	ldr	r1, [sp, #20]
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f001 fece 	bl	800f660 <_Bfree>
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f001 feca 	bl	800f660 <_Bfree>
 800d8cc:	9907      	ldr	r1, [sp, #28]
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f001 fec6 	bl	800f660 <_Bfree>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f001 fec2 	bl	800f660 <_Bfree>
 800d8dc:	e5dc      	b.n	800d498 <_strtod_l+0x88>
 800d8de:	4b36      	ldr	r3, [pc, #216]	; (800d9b8 <_strtod_l+0x5a8>)
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d8e8:	4650      	mov	r0, sl
 800d8ea:	4659      	mov	r1, fp
 800d8ec:	4699      	mov	r9, r3
 800d8ee:	f1b8 0f01 	cmp.w	r8, #1
 800d8f2:	dc21      	bgt.n	800d938 <_strtod_l+0x528>
 800d8f4:	b10b      	cbz	r3, 800d8fa <_strtod_l+0x4ea>
 800d8f6:	4682      	mov	sl, r0
 800d8f8:	468b      	mov	fp, r1
 800d8fa:	4b2f      	ldr	r3, [pc, #188]	; (800d9b8 <_strtod_l+0x5a8>)
 800d8fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d900:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d904:	4652      	mov	r2, sl
 800d906:	465b      	mov	r3, fp
 800d908:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d90c:	f7f2 fe74 	bl	80005f8 <__aeabi_dmul>
 800d910:	4b2a      	ldr	r3, [pc, #168]	; (800d9bc <_strtod_l+0x5ac>)
 800d912:	460a      	mov	r2, r1
 800d914:	400b      	ands	r3, r1
 800d916:	492a      	ldr	r1, [pc, #168]	; (800d9c0 <_strtod_l+0x5b0>)
 800d918:	428b      	cmp	r3, r1
 800d91a:	4682      	mov	sl, r0
 800d91c:	d8bc      	bhi.n	800d898 <_strtod_l+0x488>
 800d91e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d922:	428b      	cmp	r3, r1
 800d924:	bf86      	itte	hi
 800d926:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d9c4 <_strtod_l+0x5b4>
 800d92a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d92e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d932:	2300      	movs	r3, #0
 800d934:	9304      	str	r3, [sp, #16]
 800d936:	e084      	b.n	800da42 <_strtod_l+0x632>
 800d938:	f018 0f01 	tst.w	r8, #1
 800d93c:	d005      	beq.n	800d94a <_strtod_l+0x53a>
 800d93e:	9b04      	ldr	r3, [sp, #16]
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	f7f2 fe58 	bl	80005f8 <__aeabi_dmul>
 800d948:	2301      	movs	r3, #1
 800d94a:	9a04      	ldr	r2, [sp, #16]
 800d94c:	3208      	adds	r2, #8
 800d94e:	f109 0901 	add.w	r9, r9, #1
 800d952:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d956:	9204      	str	r2, [sp, #16]
 800d958:	e7c9      	b.n	800d8ee <_strtod_l+0x4de>
 800d95a:	d0ea      	beq.n	800d932 <_strtod_l+0x522>
 800d95c:	f1c8 0800 	rsb	r8, r8, #0
 800d960:	f018 020f 	ands.w	r2, r8, #15
 800d964:	d00a      	beq.n	800d97c <_strtod_l+0x56c>
 800d966:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <_strtod_l+0x5a4>)
 800d968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d96c:	4650      	mov	r0, sl
 800d96e:	4659      	mov	r1, fp
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f7f2 ff6a 	bl	800084c <__aeabi_ddiv>
 800d978:	4682      	mov	sl, r0
 800d97a:	468b      	mov	fp, r1
 800d97c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d980:	d0d7      	beq.n	800d932 <_strtod_l+0x522>
 800d982:	f1b8 0f1f 	cmp.w	r8, #31
 800d986:	dd1f      	ble.n	800d9c8 <_strtod_l+0x5b8>
 800d988:	2500      	movs	r5, #0
 800d98a:	462e      	mov	r6, r5
 800d98c:	9507      	str	r5, [sp, #28]
 800d98e:	9505      	str	r5, [sp, #20]
 800d990:	2322      	movs	r3, #34	; 0x22
 800d992:	f04f 0a00 	mov.w	sl, #0
 800d996:	f04f 0b00 	mov.w	fp, #0
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	e786      	b.n	800d8ac <_strtod_l+0x49c>
 800d99e:	bf00      	nop
 800d9a0:	080118e5 	.word	0x080118e5
 800d9a4:	08011920 	.word	0x08011920
 800d9a8:	080118dd 	.word	0x080118dd
 800d9ac:	08011963 	.word	0x08011963
 800d9b0:	08011c10 	.word	0x08011c10
 800d9b4:	08011af0 	.word	0x08011af0
 800d9b8:	08011ac8 	.word	0x08011ac8
 800d9bc:	7ff00000 	.word	0x7ff00000
 800d9c0:	7ca00000 	.word	0x7ca00000
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	f018 0310 	ands.w	r3, r8, #16
 800d9cc:	bf18      	it	ne
 800d9ce:	236a      	movne	r3, #106	; 0x6a
 800d9d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dd80 <_strtod_l+0x970>
 800d9d4:	9304      	str	r3, [sp, #16]
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	4659      	mov	r1, fp
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f018 0f01 	tst.w	r8, #1
 800d9e0:	d004      	beq.n	800d9ec <_strtod_l+0x5dc>
 800d9e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d9e6:	f7f2 fe07 	bl	80005f8 <__aeabi_dmul>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d9f0:	f109 0908 	add.w	r9, r9, #8
 800d9f4:	d1f2      	bne.n	800d9dc <_strtod_l+0x5cc>
 800d9f6:	b10b      	cbz	r3, 800d9fc <_strtod_l+0x5ec>
 800d9f8:	4682      	mov	sl, r0
 800d9fa:	468b      	mov	fp, r1
 800d9fc:	9b04      	ldr	r3, [sp, #16]
 800d9fe:	b1c3      	cbz	r3, 800da32 <_strtod_l+0x622>
 800da00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da08:	2b00      	cmp	r3, #0
 800da0a:	4659      	mov	r1, fp
 800da0c:	dd11      	ble.n	800da32 <_strtod_l+0x622>
 800da0e:	2b1f      	cmp	r3, #31
 800da10:	f340 8124 	ble.w	800dc5c <_strtod_l+0x84c>
 800da14:	2b34      	cmp	r3, #52	; 0x34
 800da16:	bfde      	ittt	le
 800da18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800da1c:	f04f 33ff 	movle.w	r3, #4294967295
 800da20:	fa03 f202 	lslle.w	r2, r3, r2
 800da24:	f04f 0a00 	mov.w	sl, #0
 800da28:	bfcc      	ite	gt
 800da2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da2e:	ea02 0b01 	andle.w	fp, r2, r1
 800da32:	2200      	movs	r2, #0
 800da34:	2300      	movs	r3, #0
 800da36:	4650      	mov	r0, sl
 800da38:	4659      	mov	r1, fp
 800da3a:	f7f3 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d1a2      	bne.n	800d988 <_strtod_l+0x578>
 800da42:	9b07      	ldr	r3, [sp, #28]
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	9908      	ldr	r1, [sp, #32]
 800da48:	462b      	mov	r3, r5
 800da4a:	463a      	mov	r2, r7
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fe6f 	bl	800f730 <__s2b>
 800da52:	9007      	str	r0, [sp, #28]
 800da54:	2800      	cmp	r0, #0
 800da56:	f43f af1f 	beq.w	800d898 <_strtod_l+0x488>
 800da5a:	9b05      	ldr	r3, [sp, #20]
 800da5c:	1b9e      	subs	r6, r3, r6
 800da5e:	9b06      	ldr	r3, [sp, #24]
 800da60:	2b00      	cmp	r3, #0
 800da62:	bfb4      	ite	lt
 800da64:	4633      	movlt	r3, r6
 800da66:	2300      	movge	r3, #0
 800da68:	930c      	str	r3, [sp, #48]	; 0x30
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	2500      	movs	r5, #0
 800da6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da72:	9312      	str	r3, [sp, #72]	; 0x48
 800da74:	462e      	mov	r6, r5
 800da76:	9b07      	ldr	r3, [sp, #28]
 800da78:	4620      	mov	r0, r4
 800da7a:	6859      	ldr	r1, [r3, #4]
 800da7c:	f001 fdb0 	bl	800f5e0 <_Balloc>
 800da80:	9005      	str	r0, [sp, #20]
 800da82:	2800      	cmp	r0, #0
 800da84:	f43f af0c 	beq.w	800d8a0 <_strtod_l+0x490>
 800da88:	9b07      	ldr	r3, [sp, #28]
 800da8a:	691a      	ldr	r2, [r3, #16]
 800da8c:	3202      	adds	r2, #2
 800da8e:	f103 010c 	add.w	r1, r3, #12
 800da92:	0092      	lsls	r2, r2, #2
 800da94:	300c      	adds	r0, #12
 800da96:	f7fe ffcf 	bl	800ca38 <memcpy>
 800da9a:	ec4b ab10 	vmov	d0, sl, fp
 800da9e:	aa1a      	add	r2, sp, #104	; 0x68
 800daa0:	a919      	add	r1, sp, #100	; 0x64
 800daa2:	4620      	mov	r0, r4
 800daa4:	f002 f98a 	bl	800fdbc <__d2b>
 800daa8:	ec4b ab18 	vmov	d8, sl, fp
 800daac:	9018      	str	r0, [sp, #96]	; 0x60
 800daae:	2800      	cmp	r0, #0
 800dab0:	f43f aef6 	beq.w	800d8a0 <_strtod_l+0x490>
 800dab4:	2101      	movs	r1, #1
 800dab6:	4620      	mov	r0, r4
 800dab8:	f001 fed4 	bl	800f864 <__i2b>
 800dabc:	4606      	mov	r6, r0
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f43f aeee 	beq.w	800d8a0 <_strtod_l+0x490>
 800dac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dac6:	9904      	ldr	r1, [sp, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bfab      	itete	ge
 800dacc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800dace:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dad0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dad2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800dad6:	bfac      	ite	ge
 800dad8:	eb03 0902 	addge.w	r9, r3, r2
 800dadc:	1ad7      	sublt	r7, r2, r3
 800dade:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dae0:	eba3 0801 	sub.w	r8, r3, r1
 800dae4:	4490      	add	r8, r2
 800dae6:	4ba1      	ldr	r3, [pc, #644]	; (800dd6c <_strtod_l+0x95c>)
 800dae8:	f108 38ff 	add.w	r8, r8, #4294967295
 800daec:	4598      	cmp	r8, r3
 800daee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800daf2:	f280 80c7 	bge.w	800dc84 <_strtod_l+0x874>
 800daf6:	eba3 0308 	sub.w	r3, r3, r8
 800dafa:	2b1f      	cmp	r3, #31
 800dafc:	eba2 0203 	sub.w	r2, r2, r3
 800db00:	f04f 0101 	mov.w	r1, #1
 800db04:	f300 80b1 	bgt.w	800dc6a <_strtod_l+0x85a>
 800db08:	fa01 f303 	lsl.w	r3, r1, r3
 800db0c:	930d      	str	r3, [sp, #52]	; 0x34
 800db0e:	2300      	movs	r3, #0
 800db10:	9308      	str	r3, [sp, #32]
 800db12:	eb09 0802 	add.w	r8, r9, r2
 800db16:	9b04      	ldr	r3, [sp, #16]
 800db18:	45c1      	cmp	r9, r8
 800db1a:	4417      	add	r7, r2
 800db1c:	441f      	add	r7, r3
 800db1e:	464b      	mov	r3, r9
 800db20:	bfa8      	it	ge
 800db22:	4643      	movge	r3, r8
 800db24:	42bb      	cmp	r3, r7
 800db26:	bfa8      	it	ge
 800db28:	463b      	movge	r3, r7
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bfc2      	ittt	gt
 800db2e:	eba8 0803 	subgt.w	r8, r8, r3
 800db32:	1aff      	subgt	r7, r7, r3
 800db34:	eba9 0903 	subgt.w	r9, r9, r3
 800db38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	dd17      	ble.n	800db6e <_strtod_l+0x75e>
 800db3e:	4631      	mov	r1, r6
 800db40:	461a      	mov	r2, r3
 800db42:	4620      	mov	r0, r4
 800db44:	f001 ff4e 	bl	800f9e4 <__pow5mult>
 800db48:	4606      	mov	r6, r0
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f43f aea8 	beq.w	800d8a0 <_strtod_l+0x490>
 800db50:	4601      	mov	r1, r0
 800db52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db54:	4620      	mov	r0, r4
 800db56:	f001 fe9b 	bl	800f890 <__multiply>
 800db5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f43f ae9f 	beq.w	800d8a0 <_strtod_l+0x490>
 800db62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db64:	4620      	mov	r0, r4
 800db66:	f001 fd7b 	bl	800f660 <_Bfree>
 800db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db6c:	9318      	str	r3, [sp, #96]	; 0x60
 800db6e:	f1b8 0f00 	cmp.w	r8, #0
 800db72:	f300 808c 	bgt.w	800dc8e <_strtod_l+0x87e>
 800db76:	9b06      	ldr	r3, [sp, #24]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dd08      	ble.n	800db8e <_strtod_l+0x77e>
 800db7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db7e:	9905      	ldr	r1, [sp, #20]
 800db80:	4620      	mov	r0, r4
 800db82:	f001 ff2f 	bl	800f9e4 <__pow5mult>
 800db86:	9005      	str	r0, [sp, #20]
 800db88:	2800      	cmp	r0, #0
 800db8a:	f43f ae89 	beq.w	800d8a0 <_strtod_l+0x490>
 800db8e:	2f00      	cmp	r7, #0
 800db90:	dd08      	ble.n	800dba4 <_strtod_l+0x794>
 800db92:	9905      	ldr	r1, [sp, #20]
 800db94:	463a      	mov	r2, r7
 800db96:	4620      	mov	r0, r4
 800db98:	f001 ff7e 	bl	800fa98 <__lshift>
 800db9c:	9005      	str	r0, [sp, #20]
 800db9e:	2800      	cmp	r0, #0
 800dba0:	f43f ae7e 	beq.w	800d8a0 <_strtod_l+0x490>
 800dba4:	f1b9 0f00 	cmp.w	r9, #0
 800dba8:	dd08      	ble.n	800dbbc <_strtod_l+0x7ac>
 800dbaa:	4631      	mov	r1, r6
 800dbac:	464a      	mov	r2, r9
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f001 ff72 	bl	800fa98 <__lshift>
 800dbb4:	4606      	mov	r6, r0
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f43f ae72 	beq.w	800d8a0 <_strtod_l+0x490>
 800dbbc:	9a05      	ldr	r2, [sp, #20]
 800dbbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 fff5 	bl	800fbb0 <__mdiff>
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	f43f ae69 	beq.w	800d8a0 <_strtod_l+0x490>
 800dbce:	68c3      	ldr	r3, [r0, #12]
 800dbd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60c3      	str	r3, [r0, #12]
 800dbd6:	4631      	mov	r1, r6
 800dbd8:	f001 ffce 	bl	800fb78 <__mcmp>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	da60      	bge.n	800dca2 <_strtod_l+0x892>
 800dbe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe2:	ea53 030a 	orrs.w	r3, r3, sl
 800dbe6:	f040 8082 	bne.w	800dcee <_strtod_l+0x8de>
 800dbea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d17d      	bne.n	800dcee <_strtod_l+0x8de>
 800dbf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dbf6:	0d1b      	lsrs	r3, r3, #20
 800dbf8:	051b      	lsls	r3, r3, #20
 800dbfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dbfe:	d976      	bls.n	800dcee <_strtod_l+0x8de>
 800dc00:	696b      	ldr	r3, [r5, #20]
 800dc02:	b913      	cbnz	r3, 800dc0a <_strtod_l+0x7fa>
 800dc04:	692b      	ldr	r3, [r5, #16]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	dd71      	ble.n	800dcee <_strtod_l+0x8de>
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f001 ff42 	bl	800fa98 <__lshift>
 800dc14:	4631      	mov	r1, r6
 800dc16:	4605      	mov	r5, r0
 800dc18:	f001 ffae 	bl	800fb78 <__mcmp>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	dd66      	ble.n	800dcee <_strtod_l+0x8de>
 800dc20:	9904      	ldr	r1, [sp, #16]
 800dc22:	4a53      	ldr	r2, [pc, #332]	; (800dd70 <_strtod_l+0x960>)
 800dc24:	465b      	mov	r3, fp
 800dc26:	2900      	cmp	r1, #0
 800dc28:	f000 8081 	beq.w	800dd2e <_strtod_l+0x91e>
 800dc2c:	ea02 010b 	and.w	r1, r2, fp
 800dc30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc34:	dc7b      	bgt.n	800dd2e <_strtod_l+0x91e>
 800dc36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc3a:	f77f aea9 	ble.w	800d990 <_strtod_l+0x580>
 800dc3e:	4b4d      	ldr	r3, [pc, #308]	; (800dd74 <_strtod_l+0x964>)
 800dc40:	4650      	mov	r0, sl
 800dc42:	4659      	mov	r1, fp
 800dc44:	2200      	movs	r2, #0
 800dc46:	f7f2 fcd7 	bl	80005f8 <__aeabi_dmul>
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4303      	orrs	r3, r0
 800dc4e:	bf08      	it	eq
 800dc50:	2322      	moveq	r3, #34	; 0x22
 800dc52:	4682      	mov	sl, r0
 800dc54:	468b      	mov	fp, r1
 800dc56:	bf08      	it	eq
 800dc58:	6023      	streq	r3, [r4, #0]
 800dc5a:	e62b      	b.n	800d8b4 <_strtod_l+0x4a4>
 800dc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc60:	fa02 f303 	lsl.w	r3, r2, r3
 800dc64:	ea03 0a0a 	and.w	sl, r3, sl
 800dc68:	e6e3      	b.n	800da32 <_strtod_l+0x622>
 800dc6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dc6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dc72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dc76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dc7a:	fa01 f308 	lsl.w	r3, r1, r8
 800dc7e:	9308      	str	r3, [sp, #32]
 800dc80:	910d      	str	r1, [sp, #52]	; 0x34
 800dc82:	e746      	b.n	800db12 <_strtod_l+0x702>
 800dc84:	2300      	movs	r3, #0
 800dc86:	9308      	str	r3, [sp, #32]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc8c:	e741      	b.n	800db12 <_strtod_l+0x702>
 800dc8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc90:	4642      	mov	r2, r8
 800dc92:	4620      	mov	r0, r4
 800dc94:	f001 ff00 	bl	800fa98 <__lshift>
 800dc98:	9018      	str	r0, [sp, #96]	; 0x60
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	f47f af6b 	bne.w	800db76 <_strtod_l+0x766>
 800dca0:	e5fe      	b.n	800d8a0 <_strtod_l+0x490>
 800dca2:	465f      	mov	r7, fp
 800dca4:	d16e      	bne.n	800dd84 <_strtod_l+0x974>
 800dca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcac:	b342      	cbz	r2, 800dd00 <_strtod_l+0x8f0>
 800dcae:	4a32      	ldr	r2, [pc, #200]	; (800dd78 <_strtod_l+0x968>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d128      	bne.n	800dd06 <_strtod_l+0x8f6>
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	4651      	mov	r1, sl
 800dcb8:	b1eb      	cbz	r3, 800dcf6 <_strtod_l+0x8e6>
 800dcba:	4b2d      	ldr	r3, [pc, #180]	; (800dd70 <_strtod_l+0x960>)
 800dcbc:	403b      	ands	r3, r7
 800dcbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc6:	d819      	bhi.n	800dcfc <_strtod_l+0x8ec>
 800dcc8:	0d1b      	lsrs	r3, r3, #20
 800dcca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcce:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	d117      	bne.n	800dd06 <_strtod_l+0x8f6>
 800dcd6:	4b29      	ldr	r3, [pc, #164]	; (800dd7c <_strtod_l+0x96c>)
 800dcd8:	429f      	cmp	r7, r3
 800dcda:	d102      	bne.n	800dce2 <_strtod_l+0x8d2>
 800dcdc:	3101      	adds	r1, #1
 800dcde:	f43f addf 	beq.w	800d8a0 <_strtod_l+0x490>
 800dce2:	4b23      	ldr	r3, [pc, #140]	; (800dd70 <_strtod_l+0x960>)
 800dce4:	403b      	ands	r3, r7
 800dce6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dcea:	f04f 0a00 	mov.w	sl, #0
 800dcee:	9b04      	ldr	r3, [sp, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1a4      	bne.n	800dc3e <_strtod_l+0x82e>
 800dcf4:	e5de      	b.n	800d8b4 <_strtod_l+0x4a4>
 800dcf6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfa:	e7ea      	b.n	800dcd2 <_strtod_l+0x8c2>
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	e7e8      	b.n	800dcd2 <_strtod_l+0x8c2>
 800dd00:	ea53 030a 	orrs.w	r3, r3, sl
 800dd04:	d08c      	beq.n	800dc20 <_strtod_l+0x810>
 800dd06:	9b08      	ldr	r3, [sp, #32]
 800dd08:	b1db      	cbz	r3, 800dd42 <_strtod_l+0x932>
 800dd0a:	423b      	tst	r3, r7
 800dd0c:	d0ef      	beq.n	800dcee <_strtod_l+0x8de>
 800dd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd10:	9a04      	ldr	r2, [sp, #16]
 800dd12:	4650      	mov	r0, sl
 800dd14:	4659      	mov	r1, fp
 800dd16:	b1c3      	cbz	r3, 800dd4a <_strtod_l+0x93a>
 800dd18:	f7ff fb5e 	bl	800d3d8 <sulp>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	ec51 0b18 	vmov	r0, r1, d8
 800dd24:	f7f2 fab2 	bl	800028c <__adddf3>
 800dd28:	4682      	mov	sl, r0
 800dd2a:	468b      	mov	fp, r1
 800dd2c:	e7df      	b.n	800dcee <_strtod_l+0x8de>
 800dd2e:	4013      	ands	r3, r2
 800dd30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd3c:	f04f 3aff 	mov.w	sl, #4294967295
 800dd40:	e7d5      	b.n	800dcee <_strtod_l+0x8de>
 800dd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd44:	ea13 0f0a 	tst.w	r3, sl
 800dd48:	e7e0      	b.n	800dd0c <_strtod_l+0x8fc>
 800dd4a:	f7ff fb45 	bl	800d3d8 <sulp>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	ec51 0b18 	vmov	r0, r1, d8
 800dd56:	f7f2 fa97 	bl	8000288 <__aeabi_dsub>
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4682      	mov	sl, r0
 800dd60:	468b      	mov	fp, r1
 800dd62:	f7f2 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d0c1      	beq.n	800dcee <_strtod_l+0x8de>
 800dd6a:	e611      	b.n	800d990 <_strtod_l+0x580>
 800dd6c:	fffffc02 	.word	0xfffffc02
 800dd70:	7ff00000 	.word	0x7ff00000
 800dd74:	39500000 	.word	0x39500000
 800dd78:	000fffff 	.word	0x000fffff
 800dd7c:	7fefffff 	.word	0x7fefffff
 800dd80:	08011938 	.word	0x08011938
 800dd84:	4631      	mov	r1, r6
 800dd86:	4628      	mov	r0, r5
 800dd88:	f002 f874 	bl	800fe74 <__ratio>
 800dd8c:	ec59 8b10 	vmov	r8, r9, d0
 800dd90:	ee10 0a10 	vmov	r0, s0
 800dd94:	2200      	movs	r2, #0
 800dd96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	f7f2 fea8 	bl	8000af0 <__aeabi_dcmple>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d07a      	beq.n	800de9a <_strtod_l+0xa8a>
 800dda4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d04a      	beq.n	800de40 <_strtod_l+0xa30>
 800ddaa:	4b95      	ldr	r3, [pc, #596]	; (800e000 <_strtod_l+0xbf0>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e000 <_strtod_l+0xbf0>
 800ddb6:	f04f 0800 	mov.w	r8, #0
 800ddba:	4b92      	ldr	r3, [pc, #584]	; (800e004 <_strtod_l+0xbf4>)
 800ddbc:	403b      	ands	r3, r7
 800ddbe:	930d      	str	r3, [sp, #52]	; 0x34
 800ddc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddc2:	4b91      	ldr	r3, [pc, #580]	; (800e008 <_strtod_l+0xbf8>)
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	f040 80b0 	bne.w	800df2a <_strtod_l+0xb1a>
 800ddca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ddd2:	ec4b ab10 	vmov	d0, sl, fp
 800ddd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddda:	f001 ff73 	bl	800fcc4 <__ulp>
 800ddde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dde2:	ec53 2b10 	vmov	r2, r3, d0
 800dde6:	f7f2 fc07 	bl	80005f8 <__aeabi_dmul>
 800ddea:	4652      	mov	r2, sl
 800ddec:	465b      	mov	r3, fp
 800ddee:	f7f2 fa4d 	bl	800028c <__adddf3>
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4983      	ldr	r1, [pc, #524]	; (800e004 <_strtod_l+0xbf4>)
 800ddf6:	4a85      	ldr	r2, [pc, #532]	; (800e00c <_strtod_l+0xbfc>)
 800ddf8:	4019      	ands	r1, r3
 800ddfa:	4291      	cmp	r1, r2
 800ddfc:	4682      	mov	sl, r0
 800ddfe:	d960      	bls.n	800dec2 <_strtod_l+0xab2>
 800de00:	ee18 3a90 	vmov	r3, s17
 800de04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de08:	4293      	cmp	r3, r2
 800de0a:	d104      	bne.n	800de16 <_strtod_l+0xa06>
 800de0c:	ee18 3a10 	vmov	r3, s16
 800de10:	3301      	adds	r3, #1
 800de12:	f43f ad45 	beq.w	800d8a0 <_strtod_l+0x490>
 800de16:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e018 <_strtod_l+0xc08>
 800de1a:	f04f 3aff 	mov.w	sl, #4294967295
 800de1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de20:	4620      	mov	r0, r4
 800de22:	f001 fc1d 	bl	800f660 <_Bfree>
 800de26:	9905      	ldr	r1, [sp, #20]
 800de28:	4620      	mov	r0, r4
 800de2a:	f001 fc19 	bl	800f660 <_Bfree>
 800de2e:	4631      	mov	r1, r6
 800de30:	4620      	mov	r0, r4
 800de32:	f001 fc15 	bl	800f660 <_Bfree>
 800de36:	4629      	mov	r1, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	f001 fc11 	bl	800f660 <_Bfree>
 800de3e:	e61a      	b.n	800da76 <_strtod_l+0x666>
 800de40:	f1ba 0f00 	cmp.w	sl, #0
 800de44:	d11b      	bne.n	800de7e <_strtod_l+0xa6e>
 800de46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de4a:	b9f3      	cbnz	r3, 800de8a <_strtod_l+0xa7a>
 800de4c:	4b6c      	ldr	r3, [pc, #432]	; (800e000 <_strtod_l+0xbf0>)
 800de4e:	2200      	movs	r2, #0
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7f2 fe42 	bl	8000adc <__aeabi_dcmplt>
 800de58:	b9d0      	cbnz	r0, 800de90 <_strtod_l+0xa80>
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	4b6c      	ldr	r3, [pc, #432]	; (800e010 <_strtod_l+0xc00>)
 800de60:	2200      	movs	r2, #0
 800de62:	f7f2 fbc9 	bl	80005f8 <__aeabi_dmul>
 800de66:	4680      	mov	r8, r0
 800de68:	4689      	mov	r9, r1
 800de6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de72:	9315      	str	r3, [sp, #84]	; 0x54
 800de74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800de78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de7c:	e79d      	b.n	800ddba <_strtod_l+0x9aa>
 800de7e:	f1ba 0f01 	cmp.w	sl, #1
 800de82:	d102      	bne.n	800de8a <_strtod_l+0xa7a>
 800de84:	2f00      	cmp	r7, #0
 800de86:	f43f ad83 	beq.w	800d990 <_strtod_l+0x580>
 800de8a:	4b62      	ldr	r3, [pc, #392]	; (800e014 <_strtod_l+0xc04>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	e78e      	b.n	800ddae <_strtod_l+0x99e>
 800de90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e010 <_strtod_l+0xc00>
 800de94:	f04f 0800 	mov.w	r8, #0
 800de98:	e7e7      	b.n	800de6a <_strtod_l+0xa5a>
 800de9a:	4b5d      	ldr	r3, [pc, #372]	; (800e010 <_strtod_l+0xc00>)
 800de9c:	4640      	mov	r0, r8
 800de9e:	4649      	mov	r1, r9
 800dea0:	2200      	movs	r2, #0
 800dea2:	f7f2 fba9 	bl	80005f8 <__aeabi_dmul>
 800dea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dea8:	4680      	mov	r8, r0
 800deaa:	4689      	mov	r9, r1
 800deac:	b933      	cbnz	r3, 800debc <_strtod_l+0xaac>
 800deae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deb2:	900e      	str	r0, [sp, #56]	; 0x38
 800deb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800deb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800deba:	e7dd      	b.n	800de78 <_strtod_l+0xa68>
 800debc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dec0:	e7f9      	b.n	800deb6 <_strtod_l+0xaa6>
 800dec2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dec6:	9b04      	ldr	r3, [sp, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1a8      	bne.n	800de1e <_strtod_l+0xa0e>
 800decc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ded0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ded2:	0d1b      	lsrs	r3, r3, #20
 800ded4:	051b      	lsls	r3, r3, #20
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d1a1      	bne.n	800de1e <_strtod_l+0xa0e>
 800deda:	4640      	mov	r0, r8
 800dedc:	4649      	mov	r1, r9
 800dede:	f7f2 fed3 	bl	8000c88 <__aeabi_d2lz>
 800dee2:	f7f2 fb5b 	bl	800059c <__aeabi_l2d>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	4640      	mov	r0, r8
 800deec:	4649      	mov	r1, r9
 800deee:	f7f2 f9cb 	bl	8000288 <__aeabi_dsub>
 800def2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800def4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800def8:	ea43 030a 	orr.w	r3, r3, sl
 800defc:	4313      	orrs	r3, r2
 800defe:	4680      	mov	r8, r0
 800df00:	4689      	mov	r9, r1
 800df02:	d055      	beq.n	800dfb0 <_strtod_l+0xba0>
 800df04:	a336      	add	r3, pc, #216	; (adr r3, 800dfe0 <_strtod_l+0xbd0>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	f7f2 fde7 	bl	8000adc <__aeabi_dcmplt>
 800df0e:	2800      	cmp	r0, #0
 800df10:	f47f acd0 	bne.w	800d8b4 <_strtod_l+0x4a4>
 800df14:	a334      	add	r3, pc, #208	; (adr r3, 800dfe8 <_strtod_l+0xbd8>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	4640      	mov	r0, r8
 800df1c:	4649      	mov	r1, r9
 800df1e:	f7f2 fdfb 	bl	8000b18 <__aeabi_dcmpgt>
 800df22:	2800      	cmp	r0, #0
 800df24:	f43f af7b 	beq.w	800de1e <_strtod_l+0xa0e>
 800df28:	e4c4      	b.n	800d8b4 <_strtod_l+0x4a4>
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	b333      	cbz	r3, 800df7c <_strtod_l+0xb6c>
 800df2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df34:	d822      	bhi.n	800df7c <_strtod_l+0xb6c>
 800df36:	a32e      	add	r3, pc, #184	; (adr r3, 800dff0 <_strtod_l+0xbe0>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	4640      	mov	r0, r8
 800df3e:	4649      	mov	r1, r9
 800df40:	f7f2 fdd6 	bl	8000af0 <__aeabi_dcmple>
 800df44:	b1a0      	cbz	r0, 800df70 <_strtod_l+0xb60>
 800df46:	4649      	mov	r1, r9
 800df48:	4640      	mov	r0, r8
 800df4a:	f7f2 fe2d 	bl	8000ba8 <__aeabi_d2uiz>
 800df4e:	2801      	cmp	r0, #1
 800df50:	bf38      	it	cc
 800df52:	2001      	movcc	r0, #1
 800df54:	f7f2 fad6 	bl	8000504 <__aeabi_ui2d>
 800df58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df5a:	4680      	mov	r8, r0
 800df5c:	4689      	mov	r9, r1
 800df5e:	bb23      	cbnz	r3, 800dfaa <_strtod_l+0xb9a>
 800df60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df64:	9010      	str	r0, [sp, #64]	; 0x40
 800df66:	9311      	str	r3, [sp, #68]	; 0x44
 800df68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df78:	1a9b      	subs	r3, r3, r2
 800df7a:	9309      	str	r3, [sp, #36]	; 0x24
 800df7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df80:	eeb0 0a48 	vmov.f32	s0, s16
 800df84:	eef0 0a68 	vmov.f32	s1, s17
 800df88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df8c:	f001 fe9a 	bl	800fcc4 <__ulp>
 800df90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df94:	ec53 2b10 	vmov	r2, r3, d0
 800df98:	f7f2 fb2e 	bl	80005f8 <__aeabi_dmul>
 800df9c:	ec53 2b18 	vmov	r2, r3, d8
 800dfa0:	f7f2 f974 	bl	800028c <__adddf3>
 800dfa4:	4682      	mov	sl, r0
 800dfa6:	468b      	mov	fp, r1
 800dfa8:	e78d      	b.n	800dec6 <_strtod_l+0xab6>
 800dfaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dfae:	e7db      	b.n	800df68 <_strtod_l+0xb58>
 800dfb0:	a311      	add	r3, pc, #68	; (adr r3, 800dff8 <_strtod_l+0xbe8>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 fd91 	bl	8000adc <__aeabi_dcmplt>
 800dfba:	e7b2      	b.n	800df22 <_strtod_l+0xb12>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	930a      	str	r3, [sp, #40]	; 0x28
 800dfc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	f7ff ba6b 	b.w	800d4a0 <_strtod_l+0x90>
 800dfca:	2a65      	cmp	r2, #101	; 0x65
 800dfcc:	f43f ab5f 	beq.w	800d68e <_strtod_l+0x27e>
 800dfd0:	2a45      	cmp	r2, #69	; 0x45
 800dfd2:	f43f ab5c 	beq.w	800d68e <_strtod_l+0x27e>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	f7ff bb94 	b.w	800d704 <_strtod_l+0x2f4>
 800dfdc:	f3af 8000 	nop.w
 800dfe0:	94a03595 	.word	0x94a03595
 800dfe4:	3fdfffff 	.word	0x3fdfffff
 800dfe8:	35afe535 	.word	0x35afe535
 800dfec:	3fe00000 	.word	0x3fe00000
 800dff0:	ffc00000 	.word	0xffc00000
 800dff4:	41dfffff 	.word	0x41dfffff
 800dff8:	94a03595 	.word	0x94a03595
 800dffc:	3fcfffff 	.word	0x3fcfffff
 800e000:	3ff00000 	.word	0x3ff00000
 800e004:	7ff00000 	.word	0x7ff00000
 800e008:	7fe00000 	.word	0x7fe00000
 800e00c:	7c9fffff 	.word	0x7c9fffff
 800e010:	3fe00000 	.word	0x3fe00000
 800e014:	bff00000 	.word	0xbff00000
 800e018:	7fefffff 	.word	0x7fefffff

0800e01c <strtof>:
 800e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800e0d0 <strtof+0xb4>
 800e024:	4b26      	ldr	r3, [pc, #152]	; (800e0c0 <strtof+0xa4>)
 800e026:	460a      	mov	r2, r1
 800e028:	ed2d 8b02 	vpush	{d8}
 800e02c:	4601      	mov	r1, r0
 800e02e:	f8d8 0000 	ldr.w	r0, [r8]
 800e032:	f7ff f9ed 	bl	800d410 <_strtod_l>
 800e036:	ec55 4b10 	vmov	r4, r5, d0
 800e03a:	ee10 2a10 	vmov	r2, s0
 800e03e:	ee10 0a10 	vmov	r0, s0
 800e042:	462b      	mov	r3, r5
 800e044:	4629      	mov	r1, r5
 800e046:	f7f2 fd71 	bl	8000b2c <__aeabi_dcmpun>
 800e04a:	b190      	cbz	r0, 800e072 <strtof+0x56>
 800e04c:	2d00      	cmp	r5, #0
 800e04e:	481d      	ldr	r0, [pc, #116]	; (800e0c4 <strtof+0xa8>)
 800e050:	da09      	bge.n	800e066 <strtof+0x4a>
 800e052:	f002 fa21 	bl	8010498 <nanf>
 800e056:	eeb1 8a40 	vneg.f32	s16, s0
 800e05a:	eeb0 0a48 	vmov.f32	s0, s16
 800e05e:	ecbd 8b02 	vpop	{d8}
 800e062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e066:	ecbd 8b02 	vpop	{d8}
 800e06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e06e:	f002 ba13 	b.w	8010498 <nanf>
 800e072:	4620      	mov	r0, r4
 800e074:	4629      	mov	r1, r5
 800e076:	f7f2 fdb7 	bl	8000be8 <__aeabi_d2f>
 800e07a:	ee08 0a10 	vmov	s16, r0
 800e07e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e0c8 <strtof+0xac>
 800e082:	eeb0 7ac8 	vabs.f32	s14, s16
 800e086:	eeb4 7a67 	vcmp.f32	s14, s15
 800e08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e08e:	dde4      	ble.n	800e05a <strtof+0x3e>
 800e090:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800e094:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <strtof+0xb0>)
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	4620      	mov	r0, r4
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 fd45 	bl	8000b2c <__aeabi_dcmpun>
 800e0a2:	b940      	cbnz	r0, 800e0b6 <strtof+0x9a>
 800e0a4:	4b09      	ldr	r3, [pc, #36]	; (800e0cc <strtof+0xb0>)
 800e0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	f7f2 fd1f 	bl	8000af0 <__aeabi_dcmple>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0d1      	beq.n	800e05a <strtof+0x3e>
 800e0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ba:	2222      	movs	r2, #34	; 0x22
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	e7cc      	b.n	800e05a <strtof+0x3e>
 800e0c0:	20000210 	.word	0x20000210
 800e0c4:	08011c10 	.word	0x08011c10
 800e0c8:	7f7fffff 	.word	0x7f7fffff
 800e0cc:	7fefffff 	.word	0x7fefffff
 800e0d0:	200001a8 	.word	0x200001a8

0800e0d4 <_strtoul_l.constprop.0>:
 800e0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0d8:	4f36      	ldr	r7, [pc, #216]	; (800e1b4 <_strtoul_l.constprop.0+0xe0>)
 800e0da:	4686      	mov	lr, r0
 800e0dc:	460d      	mov	r5, r1
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0e4:	5de6      	ldrb	r6, [r4, r7]
 800e0e6:	f016 0608 	ands.w	r6, r6, #8
 800e0ea:	d1f8      	bne.n	800e0de <_strtoul_l.constprop.0+0xa>
 800e0ec:	2c2d      	cmp	r4, #45	; 0x2d
 800e0ee:	d12f      	bne.n	800e150 <_strtoul_l.constprop.0+0x7c>
 800e0f0:	782c      	ldrb	r4, [r5, #0]
 800e0f2:	2601      	movs	r6, #1
 800e0f4:	1c85      	adds	r5, r0, #2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d057      	beq.n	800e1aa <_strtoul_l.constprop.0+0xd6>
 800e0fa:	2b10      	cmp	r3, #16
 800e0fc:	d109      	bne.n	800e112 <_strtoul_l.constprop.0+0x3e>
 800e0fe:	2c30      	cmp	r4, #48	; 0x30
 800e100:	d107      	bne.n	800e112 <_strtoul_l.constprop.0+0x3e>
 800e102:	7828      	ldrb	r0, [r5, #0]
 800e104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e108:	2858      	cmp	r0, #88	; 0x58
 800e10a:	d149      	bne.n	800e1a0 <_strtoul_l.constprop.0+0xcc>
 800e10c:	786c      	ldrb	r4, [r5, #1]
 800e10e:	2310      	movs	r3, #16
 800e110:	3502      	adds	r5, #2
 800e112:	f04f 38ff 	mov.w	r8, #4294967295
 800e116:	2700      	movs	r7, #0
 800e118:	fbb8 f8f3 	udiv	r8, r8, r3
 800e11c:	fb03 f908 	mul.w	r9, r3, r8
 800e120:	ea6f 0909 	mvn.w	r9, r9
 800e124:	4638      	mov	r0, r7
 800e126:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e12a:	f1bc 0f09 	cmp.w	ip, #9
 800e12e:	d814      	bhi.n	800e15a <_strtoul_l.constprop.0+0x86>
 800e130:	4664      	mov	r4, ip
 800e132:	42a3      	cmp	r3, r4
 800e134:	dd22      	ble.n	800e17c <_strtoul_l.constprop.0+0xa8>
 800e136:	2f00      	cmp	r7, #0
 800e138:	db1d      	blt.n	800e176 <_strtoul_l.constprop.0+0xa2>
 800e13a:	4580      	cmp	r8, r0
 800e13c:	d31b      	bcc.n	800e176 <_strtoul_l.constprop.0+0xa2>
 800e13e:	d101      	bne.n	800e144 <_strtoul_l.constprop.0+0x70>
 800e140:	45a1      	cmp	r9, r4
 800e142:	db18      	blt.n	800e176 <_strtoul_l.constprop.0+0xa2>
 800e144:	fb00 4003 	mla	r0, r0, r3, r4
 800e148:	2701      	movs	r7, #1
 800e14a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e14e:	e7ea      	b.n	800e126 <_strtoul_l.constprop.0+0x52>
 800e150:	2c2b      	cmp	r4, #43	; 0x2b
 800e152:	bf04      	itt	eq
 800e154:	782c      	ldrbeq	r4, [r5, #0]
 800e156:	1c85      	addeq	r5, r0, #2
 800e158:	e7cd      	b.n	800e0f6 <_strtoul_l.constprop.0+0x22>
 800e15a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e15e:	f1bc 0f19 	cmp.w	ip, #25
 800e162:	d801      	bhi.n	800e168 <_strtoul_l.constprop.0+0x94>
 800e164:	3c37      	subs	r4, #55	; 0x37
 800e166:	e7e4      	b.n	800e132 <_strtoul_l.constprop.0+0x5e>
 800e168:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e16c:	f1bc 0f19 	cmp.w	ip, #25
 800e170:	d804      	bhi.n	800e17c <_strtoul_l.constprop.0+0xa8>
 800e172:	3c57      	subs	r4, #87	; 0x57
 800e174:	e7dd      	b.n	800e132 <_strtoul_l.constprop.0+0x5e>
 800e176:	f04f 37ff 	mov.w	r7, #4294967295
 800e17a:	e7e6      	b.n	800e14a <_strtoul_l.constprop.0+0x76>
 800e17c:	2f00      	cmp	r7, #0
 800e17e:	da07      	bge.n	800e190 <_strtoul_l.constprop.0+0xbc>
 800e180:	2322      	movs	r3, #34	; 0x22
 800e182:	f8ce 3000 	str.w	r3, [lr]
 800e186:	f04f 30ff 	mov.w	r0, #4294967295
 800e18a:	b932      	cbnz	r2, 800e19a <_strtoul_l.constprop.0+0xc6>
 800e18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e190:	b106      	cbz	r6, 800e194 <_strtoul_l.constprop.0+0xc0>
 800e192:	4240      	negs	r0, r0
 800e194:	2a00      	cmp	r2, #0
 800e196:	d0f9      	beq.n	800e18c <_strtoul_l.constprop.0+0xb8>
 800e198:	b107      	cbz	r7, 800e19c <_strtoul_l.constprop.0+0xc8>
 800e19a:	1e69      	subs	r1, r5, #1
 800e19c:	6011      	str	r1, [r2, #0]
 800e19e:	e7f5      	b.n	800e18c <_strtoul_l.constprop.0+0xb8>
 800e1a0:	2430      	movs	r4, #48	; 0x30
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1b5      	bne.n	800e112 <_strtoul_l.constprop.0+0x3e>
 800e1a6:	2308      	movs	r3, #8
 800e1a8:	e7b3      	b.n	800e112 <_strtoul_l.constprop.0+0x3e>
 800e1aa:	2c30      	cmp	r4, #48	; 0x30
 800e1ac:	d0a9      	beq.n	800e102 <_strtoul_l.constprop.0+0x2e>
 800e1ae:	230a      	movs	r3, #10
 800e1b0:	e7af      	b.n	800e112 <_strtoul_l.constprop.0+0x3e>
 800e1b2:	bf00      	nop
 800e1b4:	080117d1 	.word	0x080117d1

0800e1b8 <strtoul>:
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	460a      	mov	r2, r1
 800e1bc:	4601      	mov	r1, r0
 800e1be:	4802      	ldr	r0, [pc, #8]	; (800e1c8 <strtoul+0x10>)
 800e1c0:	6800      	ldr	r0, [r0, #0]
 800e1c2:	f7ff bf87 	b.w	800e0d4 <_strtoul_l.constprop.0>
 800e1c6:	bf00      	nop
 800e1c8:	200001a8 	.word	0x200001a8

0800e1cc <quorem>:
 800e1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	6903      	ldr	r3, [r0, #16]
 800e1d2:	690c      	ldr	r4, [r1, #16]
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	f2c0 8081 	blt.w	800e2de <quorem+0x112>
 800e1dc:	3c01      	subs	r4, #1
 800e1de:	f101 0814 	add.w	r8, r1, #20
 800e1e2:	f100 0514 	add.w	r5, r0, #20
 800e1e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e200:	fbb2 f6f3 	udiv	r6, r2, r3
 800e204:	d331      	bcc.n	800e26a <quorem+0x9e>
 800e206:	f04f 0e00 	mov.w	lr, #0
 800e20a:	4640      	mov	r0, r8
 800e20c:	46ac      	mov	ip, r5
 800e20e:	46f2      	mov	sl, lr
 800e210:	f850 2b04 	ldr.w	r2, [r0], #4
 800e214:	b293      	uxth	r3, r2
 800e216:	fb06 e303 	mla	r3, r6, r3, lr
 800e21a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e21e:	b29b      	uxth	r3, r3
 800e220:	ebaa 0303 	sub.w	r3, sl, r3
 800e224:	f8dc a000 	ldr.w	sl, [ip]
 800e228:	0c12      	lsrs	r2, r2, #16
 800e22a:	fa13 f38a 	uxtah	r3, r3, sl
 800e22e:	fb06 e202 	mla	r2, r6, r2, lr
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	9b00      	ldr	r3, [sp, #0]
 800e236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e23a:	b292      	uxth	r2, r2
 800e23c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e244:	f8bd 3000 	ldrh.w	r3, [sp]
 800e248:	4581      	cmp	r9, r0
 800e24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e24e:	f84c 3b04 	str.w	r3, [ip], #4
 800e252:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e256:	d2db      	bcs.n	800e210 <quorem+0x44>
 800e258:	f855 300b 	ldr.w	r3, [r5, fp]
 800e25c:	b92b      	cbnz	r3, 800e26a <quorem+0x9e>
 800e25e:	9b01      	ldr	r3, [sp, #4]
 800e260:	3b04      	subs	r3, #4
 800e262:	429d      	cmp	r5, r3
 800e264:	461a      	mov	r2, r3
 800e266:	d32e      	bcc.n	800e2c6 <quorem+0xfa>
 800e268:	613c      	str	r4, [r7, #16]
 800e26a:	4638      	mov	r0, r7
 800e26c:	f001 fc84 	bl	800fb78 <__mcmp>
 800e270:	2800      	cmp	r0, #0
 800e272:	db24      	blt.n	800e2be <quorem+0xf2>
 800e274:	3601      	adds	r6, #1
 800e276:	4628      	mov	r0, r5
 800e278:	f04f 0c00 	mov.w	ip, #0
 800e27c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e280:	f8d0 e000 	ldr.w	lr, [r0]
 800e284:	b293      	uxth	r3, r2
 800e286:	ebac 0303 	sub.w	r3, ip, r3
 800e28a:	0c12      	lsrs	r2, r2, #16
 800e28c:	fa13 f38e 	uxtah	r3, r3, lr
 800e290:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e298:	b29b      	uxth	r3, r3
 800e29a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e29e:	45c1      	cmp	r9, r8
 800e2a0:	f840 3b04 	str.w	r3, [r0], #4
 800e2a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e2a8:	d2e8      	bcs.n	800e27c <quorem+0xb0>
 800e2aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2b2:	b922      	cbnz	r2, 800e2be <quorem+0xf2>
 800e2b4:	3b04      	subs	r3, #4
 800e2b6:	429d      	cmp	r5, r3
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	d30a      	bcc.n	800e2d2 <quorem+0x106>
 800e2bc:	613c      	str	r4, [r7, #16]
 800e2be:	4630      	mov	r0, r6
 800e2c0:	b003      	add	sp, #12
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	3b04      	subs	r3, #4
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	d1cc      	bne.n	800e268 <quorem+0x9c>
 800e2ce:	3c01      	subs	r4, #1
 800e2d0:	e7c7      	b.n	800e262 <quorem+0x96>
 800e2d2:	6812      	ldr	r2, [r2, #0]
 800e2d4:	3b04      	subs	r3, #4
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	d1f0      	bne.n	800e2bc <quorem+0xf0>
 800e2da:	3c01      	subs	r4, #1
 800e2dc:	e7eb      	b.n	800e2b6 <quorem+0xea>
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e7ee      	b.n	800e2c0 <quorem+0xf4>
 800e2e2:	0000      	movs	r0, r0
 800e2e4:	0000      	movs	r0, r0
	...

0800e2e8 <_dtoa_r>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	ed2d 8b04 	vpush	{d8-d9}
 800e2f0:	ec57 6b10 	vmov	r6, r7, d0
 800e2f4:	b093      	sub	sp, #76	; 0x4c
 800e2f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2fc:	9106      	str	r1, [sp, #24]
 800e2fe:	ee10 aa10 	vmov	sl, s0
 800e302:	4604      	mov	r4, r0
 800e304:	9209      	str	r2, [sp, #36]	; 0x24
 800e306:	930c      	str	r3, [sp, #48]	; 0x30
 800e308:	46bb      	mov	fp, r7
 800e30a:	b975      	cbnz	r5, 800e32a <_dtoa_r+0x42>
 800e30c:	2010      	movs	r0, #16
 800e30e:	f001 f94d 	bl	800f5ac <malloc>
 800e312:	4602      	mov	r2, r0
 800e314:	6260      	str	r0, [r4, #36]	; 0x24
 800e316:	b920      	cbnz	r0, 800e322 <_dtoa_r+0x3a>
 800e318:	4ba7      	ldr	r3, [pc, #668]	; (800e5b8 <_dtoa_r+0x2d0>)
 800e31a:	21ea      	movs	r1, #234	; 0xea
 800e31c:	48a7      	ldr	r0, [pc, #668]	; (800e5bc <_dtoa_r+0x2d4>)
 800e31e:	f002 f8cf 	bl	80104c0 <__assert_func>
 800e322:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e326:	6005      	str	r5, [r0, #0]
 800e328:	60c5      	str	r5, [r0, #12]
 800e32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e32c:	6819      	ldr	r1, [r3, #0]
 800e32e:	b151      	cbz	r1, 800e346 <_dtoa_r+0x5e>
 800e330:	685a      	ldr	r2, [r3, #4]
 800e332:	604a      	str	r2, [r1, #4]
 800e334:	2301      	movs	r3, #1
 800e336:	4093      	lsls	r3, r2
 800e338:	608b      	str	r3, [r1, #8]
 800e33a:	4620      	mov	r0, r4
 800e33c:	f001 f990 	bl	800f660 <_Bfree>
 800e340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	1e3b      	subs	r3, r7, #0
 800e348:	bfaa      	itet	ge
 800e34a:	2300      	movge	r3, #0
 800e34c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e350:	f8c8 3000 	strge.w	r3, [r8]
 800e354:	4b9a      	ldr	r3, [pc, #616]	; (800e5c0 <_dtoa_r+0x2d8>)
 800e356:	bfbc      	itt	lt
 800e358:	2201      	movlt	r2, #1
 800e35a:	f8c8 2000 	strlt.w	r2, [r8]
 800e35e:	ea33 030b 	bics.w	r3, r3, fp
 800e362:	d11b      	bne.n	800e39c <_dtoa_r+0xb4>
 800e364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e366:	f242 730f 	movw	r3, #9999	; 0x270f
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e370:	4333      	orrs	r3, r6
 800e372:	f000 8592 	beq.w	800ee9a <_dtoa_r+0xbb2>
 800e376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e378:	b963      	cbnz	r3, 800e394 <_dtoa_r+0xac>
 800e37a:	4b92      	ldr	r3, [pc, #584]	; (800e5c4 <_dtoa_r+0x2dc>)
 800e37c:	e022      	b.n	800e3c4 <_dtoa_r+0xdc>
 800e37e:	4b92      	ldr	r3, [pc, #584]	; (800e5c8 <_dtoa_r+0x2e0>)
 800e380:	9301      	str	r3, [sp, #4]
 800e382:	3308      	adds	r3, #8
 800e384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	9801      	ldr	r0, [sp, #4]
 800e38a:	b013      	add	sp, #76	; 0x4c
 800e38c:	ecbd 8b04 	vpop	{d8-d9}
 800e390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e394:	4b8b      	ldr	r3, [pc, #556]	; (800e5c4 <_dtoa_r+0x2dc>)
 800e396:	9301      	str	r3, [sp, #4]
 800e398:	3303      	adds	r3, #3
 800e39a:	e7f3      	b.n	800e384 <_dtoa_r+0x9c>
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4650      	mov	r0, sl
 800e3a2:	4659      	mov	r1, fp
 800e3a4:	f7f2 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3a8:	ec4b ab19 	vmov	d9, sl, fp
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	b158      	cbz	r0, 800e3c8 <_dtoa_r+0xe0>
 800e3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	6013      	str	r3, [r2, #0]
 800e3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 856b 	beq.w	800ee94 <_dtoa_r+0xbac>
 800e3be:	4883      	ldr	r0, [pc, #524]	; (800e5cc <_dtoa_r+0x2e4>)
 800e3c0:	6018      	str	r0, [r3, #0]
 800e3c2:	1e43      	subs	r3, r0, #1
 800e3c4:	9301      	str	r3, [sp, #4]
 800e3c6:	e7df      	b.n	800e388 <_dtoa_r+0xa0>
 800e3c8:	ec4b ab10 	vmov	d0, sl, fp
 800e3cc:	aa10      	add	r2, sp, #64	; 0x40
 800e3ce:	a911      	add	r1, sp, #68	; 0x44
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f001 fcf3 	bl	800fdbc <__d2b>
 800e3d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3da:	ee08 0a10 	vmov	s16, r0
 800e3de:	2d00      	cmp	r5, #0
 800e3e0:	f000 8084 	beq.w	800e4ec <_dtoa_r+0x204>
 800e3e4:	ee19 3a90 	vmov	r3, s19
 800e3e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3f0:	4656      	mov	r6, sl
 800e3f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3fe:	4b74      	ldr	r3, [pc, #464]	; (800e5d0 <_dtoa_r+0x2e8>)
 800e400:	2200      	movs	r2, #0
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f1 ff3f 	bl	8000288 <__aeabi_dsub>
 800e40a:	a365      	add	r3, pc, #404	; (adr r3, 800e5a0 <_dtoa_r+0x2b8>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	f7f2 f8f2 	bl	80005f8 <__aeabi_dmul>
 800e414:	a364      	add	r3, pc, #400	; (adr r3, 800e5a8 <_dtoa_r+0x2c0>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	4606      	mov	r6, r0
 800e420:	4628      	mov	r0, r5
 800e422:	460f      	mov	r7, r1
 800e424:	f7f2 f87e 	bl	8000524 <__aeabi_i2d>
 800e428:	a361      	add	r3, pc, #388	; (adr r3, 800e5b0 <_dtoa_r+0x2c8>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f1 ff27 	bl	800028c <__adddf3>
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	f7f2 fb89 	bl	8000b58 <__aeabi_d2iz>
 800e446:	2200      	movs	r2, #0
 800e448:	9000      	str	r0, [sp, #0]
 800e44a:	2300      	movs	r3, #0
 800e44c:	4630      	mov	r0, r6
 800e44e:	4639      	mov	r1, r7
 800e450:	f7f2 fb44 	bl	8000adc <__aeabi_dcmplt>
 800e454:	b150      	cbz	r0, 800e46c <_dtoa_r+0x184>
 800e456:	9800      	ldr	r0, [sp, #0]
 800e458:	f7f2 f864 	bl	8000524 <__aeabi_i2d>
 800e45c:	4632      	mov	r2, r6
 800e45e:	463b      	mov	r3, r7
 800e460:	f7f2 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800e464:	b910      	cbnz	r0, 800e46c <_dtoa_r+0x184>
 800e466:	9b00      	ldr	r3, [sp, #0]
 800e468:	3b01      	subs	r3, #1
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	9b00      	ldr	r3, [sp, #0]
 800e46e:	2b16      	cmp	r3, #22
 800e470:	d85a      	bhi.n	800e528 <_dtoa_r+0x240>
 800e472:	9a00      	ldr	r2, [sp, #0]
 800e474:	4b57      	ldr	r3, [pc, #348]	; (800e5d4 <_dtoa_r+0x2ec>)
 800e476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	ec51 0b19 	vmov	r0, r1, d9
 800e482:	f7f2 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800e486:	2800      	cmp	r0, #0
 800e488:	d050      	beq.n	800e52c <_dtoa_r+0x244>
 800e48a:	9b00      	ldr	r3, [sp, #0]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	2300      	movs	r3, #0
 800e492:	930b      	str	r3, [sp, #44]	; 0x2c
 800e494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e496:	1b5d      	subs	r5, r3, r5
 800e498:	1e6b      	subs	r3, r5, #1
 800e49a:	9305      	str	r3, [sp, #20]
 800e49c:	bf45      	ittet	mi
 800e49e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e4a2:	9304      	strmi	r3, [sp, #16]
 800e4a4:	2300      	movpl	r3, #0
 800e4a6:	2300      	movmi	r3, #0
 800e4a8:	bf4c      	ite	mi
 800e4aa:	9305      	strmi	r3, [sp, #20]
 800e4ac:	9304      	strpl	r3, [sp, #16]
 800e4ae:	9b00      	ldr	r3, [sp, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	db3d      	blt.n	800e530 <_dtoa_r+0x248>
 800e4b4:	9b05      	ldr	r3, [sp, #20]
 800e4b6:	9a00      	ldr	r2, [sp, #0]
 800e4b8:	920a      	str	r2, [sp, #40]	; 0x28
 800e4ba:	4413      	add	r3, r2
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9307      	str	r3, [sp, #28]
 800e4c2:	9b06      	ldr	r3, [sp, #24]
 800e4c4:	2b09      	cmp	r3, #9
 800e4c6:	f200 8089 	bhi.w	800e5dc <_dtoa_r+0x2f4>
 800e4ca:	2b05      	cmp	r3, #5
 800e4cc:	bfc4      	itt	gt
 800e4ce:	3b04      	subgt	r3, #4
 800e4d0:	9306      	strgt	r3, [sp, #24]
 800e4d2:	9b06      	ldr	r3, [sp, #24]
 800e4d4:	f1a3 0302 	sub.w	r3, r3, #2
 800e4d8:	bfcc      	ite	gt
 800e4da:	2500      	movgt	r5, #0
 800e4dc:	2501      	movle	r5, #1
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	f200 8087 	bhi.w	800e5f2 <_dtoa_r+0x30a>
 800e4e4:	e8df f003 	tbb	[pc, r3]
 800e4e8:	59383a2d 	.word	0x59383a2d
 800e4ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4f0:	441d      	add	r5, r3
 800e4f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4f6:	2b20      	cmp	r3, #32
 800e4f8:	bfc1      	itttt	gt
 800e4fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e502:	fa0b f303 	lslgt.w	r3, fp, r3
 800e506:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e50a:	bfda      	itte	le
 800e50c:	f1c3 0320 	rsble	r3, r3, #32
 800e510:	fa06 f003 	lslle.w	r0, r6, r3
 800e514:	4318      	orrgt	r0, r3
 800e516:	f7f1 fff5 	bl	8000504 <__aeabi_ui2d>
 800e51a:	2301      	movs	r3, #1
 800e51c:	4606      	mov	r6, r0
 800e51e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e522:	3d01      	subs	r5, #1
 800e524:	930e      	str	r3, [sp, #56]	; 0x38
 800e526:	e76a      	b.n	800e3fe <_dtoa_r+0x116>
 800e528:	2301      	movs	r3, #1
 800e52a:	e7b2      	b.n	800e492 <_dtoa_r+0x1aa>
 800e52c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e52e:	e7b1      	b.n	800e494 <_dtoa_r+0x1ac>
 800e530:	9b04      	ldr	r3, [sp, #16]
 800e532:	9a00      	ldr	r2, [sp, #0]
 800e534:	1a9b      	subs	r3, r3, r2
 800e536:	9304      	str	r3, [sp, #16]
 800e538:	4253      	negs	r3, r2
 800e53a:	9307      	str	r3, [sp, #28]
 800e53c:	2300      	movs	r3, #0
 800e53e:	930a      	str	r3, [sp, #40]	; 0x28
 800e540:	e7bf      	b.n	800e4c2 <_dtoa_r+0x1da>
 800e542:	2300      	movs	r3, #0
 800e544:	9308      	str	r3, [sp, #32]
 800e546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e548:	2b00      	cmp	r3, #0
 800e54a:	dc55      	bgt.n	800e5f8 <_dtoa_r+0x310>
 800e54c:	2301      	movs	r3, #1
 800e54e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e552:	461a      	mov	r2, r3
 800e554:	9209      	str	r2, [sp, #36]	; 0x24
 800e556:	e00c      	b.n	800e572 <_dtoa_r+0x28a>
 800e558:	2301      	movs	r3, #1
 800e55a:	e7f3      	b.n	800e544 <_dtoa_r+0x25c>
 800e55c:	2300      	movs	r3, #0
 800e55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e560:	9308      	str	r3, [sp, #32]
 800e562:	9b00      	ldr	r3, [sp, #0]
 800e564:	4413      	add	r3, r2
 800e566:	9302      	str	r3, [sp, #8]
 800e568:	3301      	adds	r3, #1
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	9303      	str	r3, [sp, #12]
 800e56e:	bfb8      	it	lt
 800e570:	2301      	movlt	r3, #1
 800e572:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e574:	2200      	movs	r2, #0
 800e576:	6042      	str	r2, [r0, #4]
 800e578:	2204      	movs	r2, #4
 800e57a:	f102 0614 	add.w	r6, r2, #20
 800e57e:	429e      	cmp	r6, r3
 800e580:	6841      	ldr	r1, [r0, #4]
 800e582:	d93d      	bls.n	800e600 <_dtoa_r+0x318>
 800e584:	4620      	mov	r0, r4
 800e586:	f001 f82b 	bl	800f5e0 <_Balloc>
 800e58a:	9001      	str	r0, [sp, #4]
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d13b      	bne.n	800e608 <_dtoa_r+0x320>
 800e590:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <_dtoa_r+0x2f0>)
 800e592:	4602      	mov	r2, r0
 800e594:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e598:	e6c0      	b.n	800e31c <_dtoa_r+0x34>
 800e59a:	2301      	movs	r3, #1
 800e59c:	e7df      	b.n	800e55e <_dtoa_r+0x276>
 800e59e:	bf00      	nop
 800e5a0:	636f4361 	.word	0x636f4361
 800e5a4:	3fd287a7 	.word	0x3fd287a7
 800e5a8:	8b60c8b3 	.word	0x8b60c8b3
 800e5ac:	3fc68a28 	.word	0x3fc68a28
 800e5b0:	509f79fb 	.word	0x509f79fb
 800e5b4:	3fd34413 	.word	0x3fd34413
 800e5b8:	0801196d 	.word	0x0801196d
 800e5bc:	08011984 	.word	0x08011984
 800e5c0:	7ff00000 	.word	0x7ff00000
 800e5c4:	08011969 	.word	0x08011969
 800e5c8:	08011960 	.word	0x08011960
 800e5cc:	080118e9 	.word	0x080118e9
 800e5d0:	3ff80000 	.word	0x3ff80000
 800e5d4:	08011af0 	.word	0x08011af0
 800e5d8:	080119df 	.word	0x080119df
 800e5dc:	2501      	movs	r5, #1
 800e5de:	2300      	movs	r3, #0
 800e5e0:	9306      	str	r3, [sp, #24]
 800e5e2:	9508      	str	r5, [sp, #32]
 800e5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2312      	movs	r3, #18
 800e5f0:	e7b0      	b.n	800e554 <_dtoa_r+0x26c>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	9308      	str	r3, [sp, #32]
 800e5f6:	e7f5      	b.n	800e5e4 <_dtoa_r+0x2fc>
 800e5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5fe:	e7b8      	b.n	800e572 <_dtoa_r+0x28a>
 800e600:	3101      	adds	r1, #1
 800e602:	6041      	str	r1, [r0, #4]
 800e604:	0052      	lsls	r2, r2, #1
 800e606:	e7b8      	b.n	800e57a <_dtoa_r+0x292>
 800e608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	2b0e      	cmp	r3, #14
 800e612:	f200 809d 	bhi.w	800e750 <_dtoa_r+0x468>
 800e616:	2d00      	cmp	r5, #0
 800e618:	f000 809a 	beq.w	800e750 <_dtoa_r+0x468>
 800e61c:	9b00      	ldr	r3, [sp, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dd32      	ble.n	800e688 <_dtoa_r+0x3a0>
 800e622:	4ab7      	ldr	r2, [pc, #732]	; (800e900 <_dtoa_r+0x618>)
 800e624:	f003 030f 	and.w	r3, r3, #15
 800e628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e62c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e630:	9b00      	ldr	r3, [sp, #0]
 800e632:	05d8      	lsls	r0, r3, #23
 800e634:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e638:	d516      	bpl.n	800e668 <_dtoa_r+0x380>
 800e63a:	4bb2      	ldr	r3, [pc, #712]	; (800e904 <_dtoa_r+0x61c>)
 800e63c:	ec51 0b19 	vmov	r0, r1, d9
 800e640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e644:	f7f2 f902 	bl	800084c <__aeabi_ddiv>
 800e648:	f007 070f 	and.w	r7, r7, #15
 800e64c:	4682      	mov	sl, r0
 800e64e:	468b      	mov	fp, r1
 800e650:	2503      	movs	r5, #3
 800e652:	4eac      	ldr	r6, [pc, #688]	; (800e904 <_dtoa_r+0x61c>)
 800e654:	b957      	cbnz	r7, 800e66c <_dtoa_r+0x384>
 800e656:	4642      	mov	r2, r8
 800e658:	464b      	mov	r3, r9
 800e65a:	4650      	mov	r0, sl
 800e65c:	4659      	mov	r1, fp
 800e65e:	f7f2 f8f5 	bl	800084c <__aeabi_ddiv>
 800e662:	4682      	mov	sl, r0
 800e664:	468b      	mov	fp, r1
 800e666:	e028      	b.n	800e6ba <_dtoa_r+0x3d2>
 800e668:	2502      	movs	r5, #2
 800e66a:	e7f2      	b.n	800e652 <_dtoa_r+0x36a>
 800e66c:	07f9      	lsls	r1, r7, #31
 800e66e:	d508      	bpl.n	800e682 <_dtoa_r+0x39a>
 800e670:	4640      	mov	r0, r8
 800e672:	4649      	mov	r1, r9
 800e674:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e678:	f7f1 ffbe 	bl	80005f8 <__aeabi_dmul>
 800e67c:	3501      	adds	r5, #1
 800e67e:	4680      	mov	r8, r0
 800e680:	4689      	mov	r9, r1
 800e682:	107f      	asrs	r7, r7, #1
 800e684:	3608      	adds	r6, #8
 800e686:	e7e5      	b.n	800e654 <_dtoa_r+0x36c>
 800e688:	f000 809b 	beq.w	800e7c2 <_dtoa_r+0x4da>
 800e68c:	9b00      	ldr	r3, [sp, #0]
 800e68e:	4f9d      	ldr	r7, [pc, #628]	; (800e904 <_dtoa_r+0x61c>)
 800e690:	425e      	negs	r6, r3
 800e692:	4b9b      	ldr	r3, [pc, #620]	; (800e900 <_dtoa_r+0x618>)
 800e694:	f006 020f 	and.w	r2, r6, #15
 800e698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	ec51 0b19 	vmov	r0, r1, d9
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	1136      	asrs	r6, r6, #4
 800e6aa:	4682      	mov	sl, r0
 800e6ac:	468b      	mov	fp, r1
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	2502      	movs	r5, #2
 800e6b2:	2e00      	cmp	r6, #0
 800e6b4:	d17a      	bne.n	800e7ac <_dtoa_r+0x4c4>
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1d3      	bne.n	800e662 <_dtoa_r+0x37a>
 800e6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8082 	beq.w	800e7c6 <_dtoa_r+0x4de>
 800e6c2:	4b91      	ldr	r3, [pc, #580]	; (800e908 <_dtoa_r+0x620>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	4650      	mov	r0, sl
 800e6c8:	4659      	mov	r1, fp
 800e6ca:	f7f2 fa07 	bl	8000adc <__aeabi_dcmplt>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d079      	beq.n	800e7c6 <_dtoa_r+0x4de>
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d076      	beq.n	800e7c6 <_dtoa_r+0x4de>
 800e6d8:	9b02      	ldr	r3, [sp, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd36      	ble.n	800e74c <_dtoa_r+0x464>
 800e6de:	9b00      	ldr	r3, [sp, #0]
 800e6e0:	4650      	mov	r0, sl
 800e6e2:	4659      	mov	r1, fp
 800e6e4:	1e5f      	subs	r7, r3, #1
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	4b88      	ldr	r3, [pc, #544]	; (800e90c <_dtoa_r+0x624>)
 800e6ea:	f7f1 ff85 	bl	80005f8 <__aeabi_dmul>
 800e6ee:	9e02      	ldr	r6, [sp, #8]
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	468b      	mov	fp, r1
 800e6f4:	3501      	adds	r5, #1
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f7f1 ff14 	bl	8000524 <__aeabi_i2d>
 800e6fc:	4652      	mov	r2, sl
 800e6fe:	465b      	mov	r3, fp
 800e700:	f7f1 ff7a 	bl	80005f8 <__aeabi_dmul>
 800e704:	4b82      	ldr	r3, [pc, #520]	; (800e910 <_dtoa_r+0x628>)
 800e706:	2200      	movs	r2, #0
 800e708:	f7f1 fdc0 	bl	800028c <__adddf3>
 800e70c:	46d0      	mov	r8, sl
 800e70e:	46d9      	mov	r9, fp
 800e710:	4682      	mov	sl, r0
 800e712:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e716:	2e00      	cmp	r6, #0
 800e718:	d158      	bne.n	800e7cc <_dtoa_r+0x4e4>
 800e71a:	4b7e      	ldr	r3, [pc, #504]	; (800e914 <_dtoa_r+0x62c>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	4640      	mov	r0, r8
 800e720:	4649      	mov	r1, r9
 800e722:	f7f1 fdb1 	bl	8000288 <__aeabi_dsub>
 800e726:	4652      	mov	r2, sl
 800e728:	465b      	mov	r3, fp
 800e72a:	4680      	mov	r8, r0
 800e72c:	4689      	mov	r9, r1
 800e72e:	f7f2 f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 800e732:	2800      	cmp	r0, #0
 800e734:	f040 8295 	bne.w	800ec62 <_dtoa_r+0x97a>
 800e738:	4652      	mov	r2, sl
 800e73a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e73e:	4640      	mov	r0, r8
 800e740:	4649      	mov	r1, r9
 800e742:	f7f2 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800e746:	2800      	cmp	r0, #0
 800e748:	f040 8289 	bne.w	800ec5e <_dtoa_r+0x976>
 800e74c:	ec5b ab19 	vmov	sl, fp, d9
 800e750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e752:	2b00      	cmp	r3, #0
 800e754:	f2c0 8148 	blt.w	800e9e8 <_dtoa_r+0x700>
 800e758:	9a00      	ldr	r2, [sp, #0]
 800e75a:	2a0e      	cmp	r2, #14
 800e75c:	f300 8144 	bgt.w	800e9e8 <_dtoa_r+0x700>
 800e760:	4b67      	ldr	r3, [pc, #412]	; (800e900 <_dtoa_r+0x618>)
 800e762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e766:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f280 80d5 	bge.w	800e91c <_dtoa_r+0x634>
 800e772:	9b03      	ldr	r3, [sp, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f300 80d1 	bgt.w	800e91c <_dtoa_r+0x634>
 800e77a:	f040 826f 	bne.w	800ec5c <_dtoa_r+0x974>
 800e77e:	4b65      	ldr	r3, [pc, #404]	; (800e914 <_dtoa_r+0x62c>)
 800e780:	2200      	movs	r2, #0
 800e782:	4640      	mov	r0, r8
 800e784:	4649      	mov	r1, r9
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	4652      	mov	r2, sl
 800e78c:	465b      	mov	r3, fp
 800e78e:	f7f2 f9b9 	bl	8000b04 <__aeabi_dcmpge>
 800e792:	9e03      	ldr	r6, [sp, #12]
 800e794:	4637      	mov	r7, r6
 800e796:	2800      	cmp	r0, #0
 800e798:	f040 8245 	bne.w	800ec26 <_dtoa_r+0x93e>
 800e79c:	9d01      	ldr	r5, [sp, #4]
 800e79e:	2331      	movs	r3, #49	; 0x31
 800e7a0:	f805 3b01 	strb.w	r3, [r5], #1
 800e7a4:	9b00      	ldr	r3, [sp, #0]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	e240      	b.n	800ec2e <_dtoa_r+0x946>
 800e7ac:	07f2      	lsls	r2, r6, #31
 800e7ae:	d505      	bpl.n	800e7bc <_dtoa_r+0x4d4>
 800e7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	3501      	adds	r5, #1
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	1076      	asrs	r6, r6, #1
 800e7be:	3708      	adds	r7, #8
 800e7c0:	e777      	b.n	800e6b2 <_dtoa_r+0x3ca>
 800e7c2:	2502      	movs	r5, #2
 800e7c4:	e779      	b.n	800e6ba <_dtoa_r+0x3d2>
 800e7c6:	9f00      	ldr	r7, [sp, #0]
 800e7c8:	9e03      	ldr	r6, [sp, #12]
 800e7ca:	e794      	b.n	800e6f6 <_dtoa_r+0x40e>
 800e7cc:	9901      	ldr	r1, [sp, #4]
 800e7ce:	4b4c      	ldr	r3, [pc, #304]	; (800e900 <_dtoa_r+0x618>)
 800e7d0:	4431      	add	r1, r6
 800e7d2:	910d      	str	r1, [sp, #52]	; 0x34
 800e7d4:	9908      	ldr	r1, [sp, #32]
 800e7d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	d043      	beq.n	800e86a <_dtoa_r+0x582>
 800e7e2:	494d      	ldr	r1, [pc, #308]	; (800e918 <_dtoa_r+0x630>)
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f7f2 f831 	bl	800084c <__aeabi_ddiv>
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	465b      	mov	r3, fp
 800e7ee:	f7f1 fd4b 	bl	8000288 <__aeabi_dsub>
 800e7f2:	9d01      	ldr	r5, [sp, #4]
 800e7f4:	4682      	mov	sl, r0
 800e7f6:	468b      	mov	fp, r1
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	f7f2 f9ac 	bl	8000b58 <__aeabi_d2iz>
 800e800:	4606      	mov	r6, r0
 800e802:	f7f1 fe8f 	bl	8000524 <__aeabi_i2d>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	4640      	mov	r0, r8
 800e80c:	4649      	mov	r1, r9
 800e80e:	f7f1 fd3b 	bl	8000288 <__aeabi_dsub>
 800e812:	3630      	adds	r6, #48	; 0x30
 800e814:	f805 6b01 	strb.w	r6, [r5], #1
 800e818:	4652      	mov	r2, sl
 800e81a:	465b      	mov	r3, fp
 800e81c:	4680      	mov	r8, r0
 800e81e:	4689      	mov	r9, r1
 800e820:	f7f2 f95c 	bl	8000adc <__aeabi_dcmplt>
 800e824:	2800      	cmp	r0, #0
 800e826:	d163      	bne.n	800e8f0 <_dtoa_r+0x608>
 800e828:	4642      	mov	r2, r8
 800e82a:	464b      	mov	r3, r9
 800e82c:	4936      	ldr	r1, [pc, #216]	; (800e908 <_dtoa_r+0x620>)
 800e82e:	2000      	movs	r0, #0
 800e830:	f7f1 fd2a 	bl	8000288 <__aeabi_dsub>
 800e834:	4652      	mov	r2, sl
 800e836:	465b      	mov	r3, fp
 800e838:	f7f2 f950 	bl	8000adc <__aeabi_dcmplt>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f040 80b5 	bne.w	800e9ac <_dtoa_r+0x6c4>
 800e842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e844:	429d      	cmp	r5, r3
 800e846:	d081      	beq.n	800e74c <_dtoa_r+0x464>
 800e848:	4b30      	ldr	r3, [pc, #192]	; (800e90c <_dtoa_r+0x624>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	4650      	mov	r0, sl
 800e84e:	4659      	mov	r1, fp
 800e850:	f7f1 fed2 	bl	80005f8 <__aeabi_dmul>
 800e854:	4b2d      	ldr	r3, [pc, #180]	; (800e90c <_dtoa_r+0x624>)
 800e856:	4682      	mov	sl, r0
 800e858:	468b      	mov	fp, r1
 800e85a:	4640      	mov	r0, r8
 800e85c:	4649      	mov	r1, r9
 800e85e:	2200      	movs	r2, #0
 800e860:	f7f1 feca 	bl	80005f8 <__aeabi_dmul>
 800e864:	4680      	mov	r8, r0
 800e866:	4689      	mov	r9, r1
 800e868:	e7c6      	b.n	800e7f8 <_dtoa_r+0x510>
 800e86a:	4650      	mov	r0, sl
 800e86c:	4659      	mov	r1, fp
 800e86e:	f7f1 fec3 	bl	80005f8 <__aeabi_dmul>
 800e872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e874:	9d01      	ldr	r5, [sp, #4]
 800e876:	930f      	str	r3, [sp, #60]	; 0x3c
 800e878:	4682      	mov	sl, r0
 800e87a:	468b      	mov	fp, r1
 800e87c:	4649      	mov	r1, r9
 800e87e:	4640      	mov	r0, r8
 800e880:	f7f2 f96a 	bl	8000b58 <__aeabi_d2iz>
 800e884:	4606      	mov	r6, r0
 800e886:	f7f1 fe4d 	bl	8000524 <__aeabi_i2d>
 800e88a:	3630      	adds	r6, #48	; 0x30
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	4640      	mov	r0, r8
 800e892:	4649      	mov	r1, r9
 800e894:	f7f1 fcf8 	bl	8000288 <__aeabi_dsub>
 800e898:	f805 6b01 	strb.w	r6, [r5], #1
 800e89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e89e:	429d      	cmp	r5, r3
 800e8a0:	4680      	mov	r8, r0
 800e8a2:	4689      	mov	r9, r1
 800e8a4:	f04f 0200 	mov.w	r2, #0
 800e8a8:	d124      	bne.n	800e8f4 <_dtoa_r+0x60c>
 800e8aa:	4b1b      	ldr	r3, [pc, #108]	; (800e918 <_dtoa_r+0x630>)
 800e8ac:	4650      	mov	r0, sl
 800e8ae:	4659      	mov	r1, fp
 800e8b0:	f7f1 fcec 	bl	800028c <__adddf3>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	f7f2 f92c 	bl	8000b18 <__aeabi_dcmpgt>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d173      	bne.n	800e9ac <_dtoa_r+0x6c4>
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	465b      	mov	r3, fp
 800e8c8:	4913      	ldr	r1, [pc, #76]	; (800e918 <_dtoa_r+0x630>)
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	f7f1 fcdc 	bl	8000288 <__aeabi_dsub>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	f7f2 f900 	bl	8000adc <__aeabi_dcmplt>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	f43f af35 	beq.w	800e74c <_dtoa_r+0x464>
 800e8e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8e4:	1e6b      	subs	r3, r5, #1
 800e8e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8ec:	2b30      	cmp	r3, #48	; 0x30
 800e8ee:	d0f8      	beq.n	800e8e2 <_dtoa_r+0x5fa>
 800e8f0:	9700      	str	r7, [sp, #0]
 800e8f2:	e049      	b.n	800e988 <_dtoa_r+0x6a0>
 800e8f4:	4b05      	ldr	r3, [pc, #20]	; (800e90c <_dtoa_r+0x624>)
 800e8f6:	f7f1 fe7f 	bl	80005f8 <__aeabi_dmul>
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	4689      	mov	r9, r1
 800e8fe:	e7bd      	b.n	800e87c <_dtoa_r+0x594>
 800e900:	08011af0 	.word	0x08011af0
 800e904:	08011ac8 	.word	0x08011ac8
 800e908:	3ff00000 	.word	0x3ff00000
 800e90c:	40240000 	.word	0x40240000
 800e910:	401c0000 	.word	0x401c0000
 800e914:	40140000 	.word	0x40140000
 800e918:	3fe00000 	.word	0x3fe00000
 800e91c:	9d01      	ldr	r5, [sp, #4]
 800e91e:	4656      	mov	r6, sl
 800e920:	465f      	mov	r7, fp
 800e922:	4642      	mov	r2, r8
 800e924:	464b      	mov	r3, r9
 800e926:	4630      	mov	r0, r6
 800e928:	4639      	mov	r1, r7
 800e92a:	f7f1 ff8f 	bl	800084c <__aeabi_ddiv>
 800e92e:	f7f2 f913 	bl	8000b58 <__aeabi_d2iz>
 800e932:	4682      	mov	sl, r0
 800e934:	f7f1 fdf6 	bl	8000524 <__aeabi_i2d>
 800e938:	4642      	mov	r2, r8
 800e93a:	464b      	mov	r3, r9
 800e93c:	f7f1 fe5c 	bl	80005f8 <__aeabi_dmul>
 800e940:	4602      	mov	r2, r0
 800e942:	460b      	mov	r3, r1
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e94c:	f7f1 fc9c 	bl	8000288 <__aeabi_dsub>
 800e950:	f805 6b01 	strb.w	r6, [r5], #1
 800e954:	9e01      	ldr	r6, [sp, #4]
 800e956:	9f03      	ldr	r7, [sp, #12]
 800e958:	1bae      	subs	r6, r5, r6
 800e95a:	42b7      	cmp	r7, r6
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	d135      	bne.n	800e9ce <_dtoa_r+0x6e6>
 800e962:	f7f1 fc93 	bl	800028c <__adddf3>
 800e966:	4642      	mov	r2, r8
 800e968:	464b      	mov	r3, r9
 800e96a:	4606      	mov	r6, r0
 800e96c:	460f      	mov	r7, r1
 800e96e:	f7f2 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 800e972:	b9d0      	cbnz	r0, 800e9aa <_dtoa_r+0x6c2>
 800e974:	4642      	mov	r2, r8
 800e976:	464b      	mov	r3, r9
 800e978:	4630      	mov	r0, r6
 800e97a:	4639      	mov	r1, r7
 800e97c:	f7f2 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e980:	b110      	cbz	r0, 800e988 <_dtoa_r+0x6a0>
 800e982:	f01a 0f01 	tst.w	sl, #1
 800e986:	d110      	bne.n	800e9aa <_dtoa_r+0x6c2>
 800e988:	4620      	mov	r0, r4
 800e98a:	ee18 1a10 	vmov	r1, s16
 800e98e:	f000 fe67 	bl	800f660 <_Bfree>
 800e992:	2300      	movs	r3, #0
 800e994:	9800      	ldr	r0, [sp, #0]
 800e996:	702b      	strb	r3, [r5, #0]
 800e998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e99a:	3001      	adds	r0, #1
 800e99c:	6018      	str	r0, [r3, #0]
 800e99e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f43f acf1 	beq.w	800e388 <_dtoa_r+0xa0>
 800e9a6:	601d      	str	r5, [r3, #0]
 800e9a8:	e4ee      	b.n	800e388 <_dtoa_r+0xa0>
 800e9aa:	9f00      	ldr	r7, [sp, #0]
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	461d      	mov	r5, r3
 800e9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9b4:	2a39      	cmp	r2, #57	; 0x39
 800e9b6:	d106      	bne.n	800e9c6 <_dtoa_r+0x6de>
 800e9b8:	9a01      	ldr	r2, [sp, #4]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d1f7      	bne.n	800e9ae <_dtoa_r+0x6c6>
 800e9be:	9901      	ldr	r1, [sp, #4]
 800e9c0:	2230      	movs	r2, #48	; 0x30
 800e9c2:	3701      	adds	r7, #1
 800e9c4:	700a      	strb	r2, [r1, #0]
 800e9c6:	781a      	ldrb	r2, [r3, #0]
 800e9c8:	3201      	adds	r2, #1
 800e9ca:	701a      	strb	r2, [r3, #0]
 800e9cc:	e790      	b.n	800e8f0 <_dtoa_r+0x608>
 800e9ce:	4ba6      	ldr	r3, [pc, #664]	; (800ec68 <_dtoa_r+0x980>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f7f1 fe11 	bl	80005f8 <__aeabi_dmul>
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4606      	mov	r6, r0
 800e9dc:	460f      	mov	r7, r1
 800e9de:	f7f2 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d09d      	beq.n	800e922 <_dtoa_r+0x63a>
 800e9e6:	e7cf      	b.n	800e988 <_dtoa_r+0x6a0>
 800e9e8:	9a08      	ldr	r2, [sp, #32]
 800e9ea:	2a00      	cmp	r2, #0
 800e9ec:	f000 80d7 	beq.w	800eb9e <_dtoa_r+0x8b6>
 800e9f0:	9a06      	ldr	r2, [sp, #24]
 800e9f2:	2a01      	cmp	r2, #1
 800e9f4:	f300 80ba 	bgt.w	800eb6c <_dtoa_r+0x884>
 800e9f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	f000 80b2 	beq.w	800eb64 <_dtoa_r+0x87c>
 800ea00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea04:	9e07      	ldr	r6, [sp, #28]
 800ea06:	9d04      	ldr	r5, [sp, #16]
 800ea08:	9a04      	ldr	r2, [sp, #16]
 800ea0a:	441a      	add	r2, r3
 800ea0c:	9204      	str	r2, [sp, #16]
 800ea0e:	9a05      	ldr	r2, [sp, #20]
 800ea10:	2101      	movs	r1, #1
 800ea12:	441a      	add	r2, r3
 800ea14:	4620      	mov	r0, r4
 800ea16:	9205      	str	r2, [sp, #20]
 800ea18:	f000 ff24 	bl	800f864 <__i2b>
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	2d00      	cmp	r5, #0
 800ea20:	dd0c      	ble.n	800ea3c <_dtoa_r+0x754>
 800ea22:	9b05      	ldr	r3, [sp, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dd09      	ble.n	800ea3c <_dtoa_r+0x754>
 800ea28:	42ab      	cmp	r3, r5
 800ea2a:	9a04      	ldr	r2, [sp, #16]
 800ea2c:	bfa8      	it	ge
 800ea2e:	462b      	movge	r3, r5
 800ea30:	1ad2      	subs	r2, r2, r3
 800ea32:	9204      	str	r2, [sp, #16]
 800ea34:	9a05      	ldr	r2, [sp, #20]
 800ea36:	1aed      	subs	r5, r5, r3
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	9305      	str	r3, [sp, #20]
 800ea3c:	9b07      	ldr	r3, [sp, #28]
 800ea3e:	b31b      	cbz	r3, 800ea88 <_dtoa_r+0x7a0>
 800ea40:	9b08      	ldr	r3, [sp, #32]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 80af 	beq.w	800eba6 <_dtoa_r+0x8be>
 800ea48:	2e00      	cmp	r6, #0
 800ea4a:	dd13      	ble.n	800ea74 <_dtoa_r+0x78c>
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4632      	mov	r2, r6
 800ea50:	4620      	mov	r0, r4
 800ea52:	f000 ffc7 	bl	800f9e4 <__pow5mult>
 800ea56:	ee18 2a10 	vmov	r2, s16
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	4607      	mov	r7, r0
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f000 ff16 	bl	800f890 <__multiply>
 800ea64:	ee18 1a10 	vmov	r1, s16
 800ea68:	4680      	mov	r8, r0
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f000 fdf8 	bl	800f660 <_Bfree>
 800ea70:	ee08 8a10 	vmov	s16, r8
 800ea74:	9b07      	ldr	r3, [sp, #28]
 800ea76:	1b9a      	subs	r2, r3, r6
 800ea78:	d006      	beq.n	800ea88 <_dtoa_r+0x7a0>
 800ea7a:	ee18 1a10 	vmov	r1, s16
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 ffb0 	bl	800f9e4 <__pow5mult>
 800ea84:	ee08 0a10 	vmov	s16, r0
 800ea88:	2101      	movs	r1, #1
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f000 feea 	bl	800f864 <__i2b>
 800ea90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	4606      	mov	r6, r0
 800ea96:	f340 8088 	ble.w	800ebaa <_dtoa_r+0x8c2>
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4601      	mov	r1, r0
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f000 ffa0 	bl	800f9e4 <__pow5mult>
 800eaa4:	9b06      	ldr	r3, [sp, #24]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	f340 8081 	ble.w	800ebb0 <_dtoa_r+0x8c8>
 800eaae:	f04f 0800 	mov.w	r8, #0
 800eab2:	6933      	ldr	r3, [r6, #16]
 800eab4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eab8:	6918      	ldr	r0, [r3, #16]
 800eaba:	f000 fe83 	bl	800f7c4 <__hi0bits>
 800eabe:	f1c0 0020 	rsb	r0, r0, #32
 800eac2:	9b05      	ldr	r3, [sp, #20]
 800eac4:	4418      	add	r0, r3
 800eac6:	f010 001f 	ands.w	r0, r0, #31
 800eaca:	f000 8092 	beq.w	800ebf2 <_dtoa_r+0x90a>
 800eace:	f1c0 0320 	rsb	r3, r0, #32
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	f340 808a 	ble.w	800ebec <_dtoa_r+0x904>
 800ead8:	f1c0 001c 	rsb	r0, r0, #28
 800eadc:	9b04      	ldr	r3, [sp, #16]
 800eade:	4403      	add	r3, r0
 800eae0:	9304      	str	r3, [sp, #16]
 800eae2:	9b05      	ldr	r3, [sp, #20]
 800eae4:	4403      	add	r3, r0
 800eae6:	4405      	add	r5, r0
 800eae8:	9305      	str	r3, [sp, #20]
 800eaea:	9b04      	ldr	r3, [sp, #16]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	dd07      	ble.n	800eb00 <_dtoa_r+0x818>
 800eaf0:	ee18 1a10 	vmov	r1, s16
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 ffce 	bl	800fa98 <__lshift>
 800eafc:	ee08 0a10 	vmov	s16, r0
 800eb00:	9b05      	ldr	r3, [sp, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd05      	ble.n	800eb12 <_dtoa_r+0x82a>
 800eb06:	4631      	mov	r1, r6
 800eb08:	461a      	mov	r2, r3
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 ffc4 	bl	800fa98 <__lshift>
 800eb10:	4606      	mov	r6, r0
 800eb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d06e      	beq.n	800ebf6 <_dtoa_r+0x90e>
 800eb18:	ee18 0a10 	vmov	r0, s16
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	f001 f82b 	bl	800fb78 <__mcmp>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	da67      	bge.n	800ebf6 <_dtoa_r+0x90e>
 800eb26:	9b00      	ldr	r3, [sp, #0]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	ee18 1a10 	vmov	r1, s16
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	220a      	movs	r2, #10
 800eb32:	2300      	movs	r3, #0
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 fdb5 	bl	800f6a4 <__multadd>
 800eb3a:	9b08      	ldr	r3, [sp, #32]
 800eb3c:	ee08 0a10 	vmov	s16, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f000 81b1 	beq.w	800eea8 <_dtoa_r+0xbc0>
 800eb46:	2300      	movs	r3, #0
 800eb48:	4639      	mov	r1, r7
 800eb4a:	220a      	movs	r2, #10
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fda9 	bl	800f6a4 <__multadd>
 800eb52:	9b02      	ldr	r3, [sp, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	4607      	mov	r7, r0
 800eb58:	f300 808e 	bgt.w	800ec78 <_dtoa_r+0x990>
 800eb5c:	9b06      	ldr	r3, [sp, #24]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	dc51      	bgt.n	800ec06 <_dtoa_r+0x91e>
 800eb62:	e089      	b.n	800ec78 <_dtoa_r+0x990>
 800eb64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb6a:	e74b      	b.n	800ea04 <_dtoa_r+0x71c>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	1e5e      	subs	r6, r3, #1
 800eb70:	9b07      	ldr	r3, [sp, #28]
 800eb72:	42b3      	cmp	r3, r6
 800eb74:	bfbf      	itttt	lt
 800eb76:	9b07      	ldrlt	r3, [sp, #28]
 800eb78:	9607      	strlt	r6, [sp, #28]
 800eb7a:	1af2      	sublt	r2, r6, r3
 800eb7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb7e:	bfb6      	itet	lt
 800eb80:	189b      	addlt	r3, r3, r2
 800eb82:	1b9e      	subge	r6, r3, r6
 800eb84:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	bfb8      	it	lt
 800eb8a:	2600      	movlt	r6, #0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfb7      	itett	lt
 800eb90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb98:	1a9d      	sublt	r5, r3, r2
 800eb9a:	2300      	movlt	r3, #0
 800eb9c:	e734      	b.n	800ea08 <_dtoa_r+0x720>
 800eb9e:	9e07      	ldr	r6, [sp, #28]
 800eba0:	9d04      	ldr	r5, [sp, #16]
 800eba2:	9f08      	ldr	r7, [sp, #32]
 800eba4:	e73b      	b.n	800ea1e <_dtoa_r+0x736>
 800eba6:	9a07      	ldr	r2, [sp, #28]
 800eba8:	e767      	b.n	800ea7a <_dtoa_r+0x792>
 800ebaa:	9b06      	ldr	r3, [sp, #24]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	dc18      	bgt.n	800ebe2 <_dtoa_r+0x8fa>
 800ebb0:	f1ba 0f00 	cmp.w	sl, #0
 800ebb4:	d115      	bne.n	800ebe2 <_dtoa_r+0x8fa>
 800ebb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebba:	b993      	cbnz	r3, 800ebe2 <_dtoa_r+0x8fa>
 800ebbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebc0:	0d1b      	lsrs	r3, r3, #20
 800ebc2:	051b      	lsls	r3, r3, #20
 800ebc4:	b183      	cbz	r3, 800ebe8 <_dtoa_r+0x900>
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	9304      	str	r3, [sp, #16]
 800ebcc:	9b05      	ldr	r3, [sp, #20]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	9305      	str	r3, [sp, #20]
 800ebd2:	f04f 0801 	mov.w	r8, #1
 800ebd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f47f af6a 	bne.w	800eab2 <_dtoa_r+0x7ca>
 800ebde:	2001      	movs	r0, #1
 800ebe0:	e76f      	b.n	800eac2 <_dtoa_r+0x7da>
 800ebe2:	f04f 0800 	mov.w	r8, #0
 800ebe6:	e7f6      	b.n	800ebd6 <_dtoa_r+0x8ee>
 800ebe8:	4698      	mov	r8, r3
 800ebea:	e7f4      	b.n	800ebd6 <_dtoa_r+0x8ee>
 800ebec:	f43f af7d 	beq.w	800eaea <_dtoa_r+0x802>
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	301c      	adds	r0, #28
 800ebf4:	e772      	b.n	800eadc <_dtoa_r+0x7f4>
 800ebf6:	9b03      	ldr	r3, [sp, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	dc37      	bgt.n	800ec6c <_dtoa_r+0x984>
 800ebfc:	9b06      	ldr	r3, [sp, #24]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	dd34      	ble.n	800ec6c <_dtoa_r+0x984>
 800ec02:	9b03      	ldr	r3, [sp, #12]
 800ec04:	9302      	str	r3, [sp, #8]
 800ec06:	9b02      	ldr	r3, [sp, #8]
 800ec08:	b96b      	cbnz	r3, 800ec26 <_dtoa_r+0x93e>
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	2205      	movs	r2, #5
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 fd48 	bl	800f6a4 <__multadd>
 800ec14:	4601      	mov	r1, r0
 800ec16:	4606      	mov	r6, r0
 800ec18:	ee18 0a10 	vmov	r0, s16
 800ec1c:	f000 ffac 	bl	800fb78 <__mcmp>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	f73f adbb 	bgt.w	800e79c <_dtoa_r+0x4b4>
 800ec26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec28:	9d01      	ldr	r5, [sp, #4]
 800ec2a:	43db      	mvns	r3, r3
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	f04f 0800 	mov.w	r8, #0
 800ec32:	4631      	mov	r1, r6
 800ec34:	4620      	mov	r0, r4
 800ec36:	f000 fd13 	bl	800f660 <_Bfree>
 800ec3a:	2f00      	cmp	r7, #0
 800ec3c:	f43f aea4 	beq.w	800e988 <_dtoa_r+0x6a0>
 800ec40:	f1b8 0f00 	cmp.w	r8, #0
 800ec44:	d005      	beq.n	800ec52 <_dtoa_r+0x96a>
 800ec46:	45b8      	cmp	r8, r7
 800ec48:	d003      	beq.n	800ec52 <_dtoa_r+0x96a>
 800ec4a:	4641      	mov	r1, r8
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f000 fd07 	bl	800f660 <_Bfree>
 800ec52:	4639      	mov	r1, r7
 800ec54:	4620      	mov	r0, r4
 800ec56:	f000 fd03 	bl	800f660 <_Bfree>
 800ec5a:	e695      	b.n	800e988 <_dtoa_r+0x6a0>
 800ec5c:	2600      	movs	r6, #0
 800ec5e:	4637      	mov	r7, r6
 800ec60:	e7e1      	b.n	800ec26 <_dtoa_r+0x93e>
 800ec62:	9700      	str	r7, [sp, #0]
 800ec64:	4637      	mov	r7, r6
 800ec66:	e599      	b.n	800e79c <_dtoa_r+0x4b4>
 800ec68:	40240000 	.word	0x40240000
 800ec6c:	9b08      	ldr	r3, [sp, #32]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f000 80ca 	beq.w	800ee08 <_dtoa_r+0xb20>
 800ec74:	9b03      	ldr	r3, [sp, #12]
 800ec76:	9302      	str	r3, [sp, #8]
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	dd05      	ble.n	800ec88 <_dtoa_r+0x9a0>
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	462a      	mov	r2, r5
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 ff09 	bl	800fa98 <__lshift>
 800ec86:	4607      	mov	r7, r0
 800ec88:	f1b8 0f00 	cmp.w	r8, #0
 800ec8c:	d05b      	beq.n	800ed46 <_dtoa_r+0xa5e>
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	4620      	mov	r0, r4
 800ec92:	f000 fca5 	bl	800f5e0 <_Balloc>
 800ec96:	4605      	mov	r5, r0
 800ec98:	b928      	cbnz	r0, 800eca6 <_dtoa_r+0x9be>
 800ec9a:	4b87      	ldr	r3, [pc, #540]	; (800eeb8 <_dtoa_r+0xbd0>)
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eca2:	f7ff bb3b 	b.w	800e31c <_dtoa_r+0x34>
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	3202      	adds	r2, #2
 800ecaa:	0092      	lsls	r2, r2, #2
 800ecac:	f107 010c 	add.w	r1, r7, #12
 800ecb0:	300c      	adds	r0, #12
 800ecb2:	f7fd fec1 	bl	800ca38 <memcpy>
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f000 feec 	bl	800fa98 <__lshift>
 800ecc0:	9b01      	ldr	r3, [sp, #4]
 800ecc2:	f103 0901 	add.w	r9, r3, #1
 800ecc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ecca:	4413      	add	r3, r2
 800eccc:	9305      	str	r3, [sp, #20]
 800ecce:	f00a 0301 	and.w	r3, sl, #1
 800ecd2:	46b8      	mov	r8, r7
 800ecd4:	9304      	str	r3, [sp, #16]
 800ecd6:	4607      	mov	r7, r0
 800ecd8:	4631      	mov	r1, r6
 800ecda:	ee18 0a10 	vmov	r0, s16
 800ecde:	f7ff fa75 	bl	800e1cc <quorem>
 800ece2:	4641      	mov	r1, r8
 800ece4:	9002      	str	r0, [sp, #8]
 800ece6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecea:	ee18 0a10 	vmov	r0, s16
 800ecee:	f000 ff43 	bl	800fb78 <__mcmp>
 800ecf2:	463a      	mov	r2, r7
 800ecf4:	9003      	str	r0, [sp, #12]
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 ff59 	bl	800fbb0 <__mdiff>
 800ecfe:	68c2      	ldr	r2, [r0, #12]
 800ed00:	f109 3bff 	add.w	fp, r9, #4294967295
 800ed04:	4605      	mov	r5, r0
 800ed06:	bb02      	cbnz	r2, 800ed4a <_dtoa_r+0xa62>
 800ed08:	4601      	mov	r1, r0
 800ed0a:	ee18 0a10 	vmov	r0, s16
 800ed0e:	f000 ff33 	bl	800fb78 <__mcmp>
 800ed12:	4602      	mov	r2, r0
 800ed14:	4629      	mov	r1, r5
 800ed16:	4620      	mov	r0, r4
 800ed18:	9207      	str	r2, [sp, #28]
 800ed1a:	f000 fca1 	bl	800f660 <_Bfree>
 800ed1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ed22:	ea43 0102 	orr.w	r1, r3, r2
 800ed26:	9b04      	ldr	r3, [sp, #16]
 800ed28:	430b      	orrs	r3, r1
 800ed2a:	464d      	mov	r5, r9
 800ed2c:	d10f      	bne.n	800ed4e <_dtoa_r+0xa66>
 800ed2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed32:	d02a      	beq.n	800ed8a <_dtoa_r+0xaa2>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	dd02      	ble.n	800ed40 <_dtoa_r+0xa58>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed40:	f88b a000 	strb.w	sl, [fp]
 800ed44:	e775      	b.n	800ec32 <_dtoa_r+0x94a>
 800ed46:	4638      	mov	r0, r7
 800ed48:	e7ba      	b.n	800ecc0 <_dtoa_r+0x9d8>
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	e7e2      	b.n	800ed14 <_dtoa_r+0xa2c>
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	db04      	blt.n	800ed5e <_dtoa_r+0xa76>
 800ed54:	9906      	ldr	r1, [sp, #24]
 800ed56:	430b      	orrs	r3, r1
 800ed58:	9904      	ldr	r1, [sp, #16]
 800ed5a:	430b      	orrs	r3, r1
 800ed5c:	d122      	bne.n	800eda4 <_dtoa_r+0xabc>
 800ed5e:	2a00      	cmp	r2, #0
 800ed60:	ddee      	ble.n	800ed40 <_dtoa_r+0xa58>
 800ed62:	ee18 1a10 	vmov	r1, s16
 800ed66:	2201      	movs	r2, #1
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f000 fe95 	bl	800fa98 <__lshift>
 800ed6e:	4631      	mov	r1, r6
 800ed70:	ee08 0a10 	vmov	s16, r0
 800ed74:	f000 ff00 	bl	800fb78 <__mcmp>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	dc03      	bgt.n	800ed84 <_dtoa_r+0xa9c>
 800ed7c:	d1e0      	bne.n	800ed40 <_dtoa_r+0xa58>
 800ed7e:	f01a 0f01 	tst.w	sl, #1
 800ed82:	d0dd      	beq.n	800ed40 <_dtoa_r+0xa58>
 800ed84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed88:	d1d7      	bne.n	800ed3a <_dtoa_r+0xa52>
 800ed8a:	2339      	movs	r3, #57	; 0x39
 800ed8c:	f88b 3000 	strb.w	r3, [fp]
 800ed90:	462b      	mov	r3, r5
 800ed92:	461d      	mov	r5, r3
 800ed94:	3b01      	subs	r3, #1
 800ed96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed9a:	2a39      	cmp	r2, #57	; 0x39
 800ed9c:	d071      	beq.n	800ee82 <_dtoa_r+0xb9a>
 800ed9e:	3201      	adds	r2, #1
 800eda0:	701a      	strb	r2, [r3, #0]
 800eda2:	e746      	b.n	800ec32 <_dtoa_r+0x94a>
 800eda4:	2a00      	cmp	r2, #0
 800eda6:	dd07      	ble.n	800edb8 <_dtoa_r+0xad0>
 800eda8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800edac:	d0ed      	beq.n	800ed8a <_dtoa_r+0xaa2>
 800edae:	f10a 0301 	add.w	r3, sl, #1
 800edb2:	f88b 3000 	strb.w	r3, [fp]
 800edb6:	e73c      	b.n	800ec32 <_dtoa_r+0x94a>
 800edb8:	9b05      	ldr	r3, [sp, #20]
 800edba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800edbe:	4599      	cmp	r9, r3
 800edc0:	d047      	beq.n	800ee52 <_dtoa_r+0xb6a>
 800edc2:	ee18 1a10 	vmov	r1, s16
 800edc6:	2300      	movs	r3, #0
 800edc8:	220a      	movs	r2, #10
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fc6a 	bl	800f6a4 <__multadd>
 800edd0:	45b8      	cmp	r8, r7
 800edd2:	ee08 0a10 	vmov	s16, r0
 800edd6:	f04f 0300 	mov.w	r3, #0
 800edda:	f04f 020a 	mov.w	r2, #10
 800edde:	4641      	mov	r1, r8
 800ede0:	4620      	mov	r0, r4
 800ede2:	d106      	bne.n	800edf2 <_dtoa_r+0xb0a>
 800ede4:	f000 fc5e 	bl	800f6a4 <__multadd>
 800ede8:	4680      	mov	r8, r0
 800edea:	4607      	mov	r7, r0
 800edec:	f109 0901 	add.w	r9, r9, #1
 800edf0:	e772      	b.n	800ecd8 <_dtoa_r+0x9f0>
 800edf2:	f000 fc57 	bl	800f6a4 <__multadd>
 800edf6:	4639      	mov	r1, r7
 800edf8:	4680      	mov	r8, r0
 800edfa:	2300      	movs	r3, #0
 800edfc:	220a      	movs	r2, #10
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 fc50 	bl	800f6a4 <__multadd>
 800ee04:	4607      	mov	r7, r0
 800ee06:	e7f1      	b.n	800edec <_dtoa_r+0xb04>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	9302      	str	r3, [sp, #8]
 800ee0c:	9d01      	ldr	r5, [sp, #4]
 800ee0e:	ee18 0a10 	vmov	r0, s16
 800ee12:	4631      	mov	r1, r6
 800ee14:	f7ff f9da 	bl	800e1cc <quorem>
 800ee18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	f805 ab01 	strb.w	sl, [r5], #1
 800ee22:	1aea      	subs	r2, r5, r3
 800ee24:	9b02      	ldr	r3, [sp, #8]
 800ee26:	4293      	cmp	r3, r2
 800ee28:	dd09      	ble.n	800ee3e <_dtoa_r+0xb56>
 800ee2a:	ee18 1a10 	vmov	r1, s16
 800ee2e:	2300      	movs	r3, #0
 800ee30:	220a      	movs	r2, #10
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 fc36 	bl	800f6a4 <__multadd>
 800ee38:	ee08 0a10 	vmov	s16, r0
 800ee3c:	e7e7      	b.n	800ee0e <_dtoa_r+0xb26>
 800ee3e:	9b02      	ldr	r3, [sp, #8]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	bfc8      	it	gt
 800ee44:	461d      	movgt	r5, r3
 800ee46:	9b01      	ldr	r3, [sp, #4]
 800ee48:	bfd8      	it	le
 800ee4a:	2501      	movle	r5, #1
 800ee4c:	441d      	add	r5, r3
 800ee4e:	f04f 0800 	mov.w	r8, #0
 800ee52:	ee18 1a10 	vmov	r1, s16
 800ee56:	2201      	movs	r2, #1
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 fe1d 	bl	800fa98 <__lshift>
 800ee5e:	4631      	mov	r1, r6
 800ee60:	ee08 0a10 	vmov	s16, r0
 800ee64:	f000 fe88 	bl	800fb78 <__mcmp>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	dc91      	bgt.n	800ed90 <_dtoa_r+0xaa8>
 800ee6c:	d102      	bne.n	800ee74 <_dtoa_r+0xb8c>
 800ee6e:	f01a 0f01 	tst.w	sl, #1
 800ee72:	d18d      	bne.n	800ed90 <_dtoa_r+0xaa8>
 800ee74:	462b      	mov	r3, r5
 800ee76:	461d      	mov	r5, r3
 800ee78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee7c:	2a30      	cmp	r2, #48	; 0x30
 800ee7e:	d0fa      	beq.n	800ee76 <_dtoa_r+0xb8e>
 800ee80:	e6d7      	b.n	800ec32 <_dtoa_r+0x94a>
 800ee82:	9a01      	ldr	r2, [sp, #4]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d184      	bne.n	800ed92 <_dtoa_r+0xaaa>
 800ee88:	9b00      	ldr	r3, [sp, #0]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	2331      	movs	r3, #49	; 0x31
 800ee90:	7013      	strb	r3, [r2, #0]
 800ee92:	e6ce      	b.n	800ec32 <_dtoa_r+0x94a>
 800ee94:	4b09      	ldr	r3, [pc, #36]	; (800eebc <_dtoa_r+0xbd4>)
 800ee96:	f7ff ba95 	b.w	800e3c4 <_dtoa_r+0xdc>
 800ee9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f47f aa6e 	bne.w	800e37e <_dtoa_r+0x96>
 800eea2:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <_dtoa_r+0xbd8>)
 800eea4:	f7ff ba8e 	b.w	800e3c4 <_dtoa_r+0xdc>
 800eea8:	9b02      	ldr	r3, [sp, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dcae      	bgt.n	800ee0c <_dtoa_r+0xb24>
 800eeae:	9b06      	ldr	r3, [sp, #24]
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	f73f aea8 	bgt.w	800ec06 <_dtoa_r+0x91e>
 800eeb6:	e7a9      	b.n	800ee0c <_dtoa_r+0xb24>
 800eeb8:	080119df 	.word	0x080119df
 800eebc:	080118e8 	.word	0x080118e8
 800eec0:	08011960 	.word	0x08011960

0800eec4 <rshift>:
 800eec4:	6903      	ldr	r3, [r0, #16]
 800eec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eeca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eece:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eed2:	f100 0414 	add.w	r4, r0, #20
 800eed6:	dd45      	ble.n	800ef64 <rshift+0xa0>
 800eed8:	f011 011f 	ands.w	r1, r1, #31
 800eedc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eee4:	d10c      	bne.n	800ef00 <rshift+0x3c>
 800eee6:	f100 0710 	add.w	r7, r0, #16
 800eeea:	4629      	mov	r1, r5
 800eeec:	42b1      	cmp	r1, r6
 800eeee:	d334      	bcc.n	800ef5a <rshift+0x96>
 800eef0:	1a9b      	subs	r3, r3, r2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	1eea      	subs	r2, r5, #3
 800eef6:	4296      	cmp	r6, r2
 800eef8:	bf38      	it	cc
 800eefa:	2300      	movcc	r3, #0
 800eefc:	4423      	add	r3, r4
 800eefe:	e015      	b.n	800ef2c <rshift+0x68>
 800ef00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef04:	f1c1 0820 	rsb	r8, r1, #32
 800ef08:	40cf      	lsrs	r7, r1
 800ef0a:	f105 0e04 	add.w	lr, r5, #4
 800ef0e:	46a1      	mov	r9, r4
 800ef10:	4576      	cmp	r6, lr
 800ef12:	46f4      	mov	ip, lr
 800ef14:	d815      	bhi.n	800ef42 <rshift+0x7e>
 800ef16:	1a9a      	subs	r2, r3, r2
 800ef18:	0092      	lsls	r2, r2, #2
 800ef1a:	3a04      	subs	r2, #4
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	42ae      	cmp	r6, r5
 800ef20:	bf38      	it	cc
 800ef22:	2200      	movcc	r2, #0
 800ef24:	18a3      	adds	r3, r4, r2
 800ef26:	50a7      	str	r7, [r4, r2]
 800ef28:	b107      	cbz	r7, 800ef2c <rshift+0x68>
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	1b1a      	subs	r2, r3, r4
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef34:	bf08      	it	eq
 800ef36:	2300      	moveq	r3, #0
 800ef38:	6102      	str	r2, [r0, #16]
 800ef3a:	bf08      	it	eq
 800ef3c:	6143      	streq	r3, [r0, #20]
 800ef3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef42:	f8dc c000 	ldr.w	ip, [ip]
 800ef46:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef4a:	ea4c 0707 	orr.w	r7, ip, r7
 800ef4e:	f849 7b04 	str.w	r7, [r9], #4
 800ef52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef56:	40cf      	lsrs	r7, r1
 800ef58:	e7da      	b.n	800ef10 <rshift+0x4c>
 800ef5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef62:	e7c3      	b.n	800eeec <rshift+0x28>
 800ef64:	4623      	mov	r3, r4
 800ef66:	e7e1      	b.n	800ef2c <rshift+0x68>

0800ef68 <__hexdig_fun>:
 800ef68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef6c:	2b09      	cmp	r3, #9
 800ef6e:	d802      	bhi.n	800ef76 <__hexdig_fun+0xe>
 800ef70:	3820      	subs	r0, #32
 800ef72:	b2c0      	uxtb	r0, r0
 800ef74:	4770      	bx	lr
 800ef76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef7a:	2b05      	cmp	r3, #5
 800ef7c:	d801      	bhi.n	800ef82 <__hexdig_fun+0x1a>
 800ef7e:	3847      	subs	r0, #71	; 0x47
 800ef80:	e7f7      	b.n	800ef72 <__hexdig_fun+0xa>
 800ef82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef86:	2b05      	cmp	r3, #5
 800ef88:	d801      	bhi.n	800ef8e <__hexdig_fun+0x26>
 800ef8a:	3827      	subs	r0, #39	; 0x27
 800ef8c:	e7f1      	b.n	800ef72 <__hexdig_fun+0xa>
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4770      	bx	lr
	...

0800ef94 <__gethex>:
 800ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	ed2d 8b02 	vpush	{d8}
 800ef9c:	b089      	sub	sp, #36	; 0x24
 800ef9e:	ee08 0a10 	vmov	s16, r0
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	4bb4      	ldr	r3, [pc, #720]	; (800f278 <__gethex+0x2e4>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	4618      	mov	r0, r3
 800efac:	468b      	mov	fp, r1
 800efae:	4690      	mov	r8, r2
 800efb0:	f7f1 f90e 	bl	80001d0 <strlen>
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	f8db 2000 	ldr.w	r2, [fp]
 800efba:	4403      	add	r3, r0
 800efbc:	4682      	mov	sl, r0
 800efbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800efc2:	9305      	str	r3, [sp, #20]
 800efc4:	1c93      	adds	r3, r2, #2
 800efc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efce:	32fe      	adds	r2, #254	; 0xfe
 800efd0:	18d1      	adds	r1, r2, r3
 800efd2:	461f      	mov	r7, r3
 800efd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efd8:	9100      	str	r1, [sp, #0]
 800efda:	2830      	cmp	r0, #48	; 0x30
 800efdc:	d0f8      	beq.n	800efd0 <__gethex+0x3c>
 800efde:	f7ff ffc3 	bl	800ef68 <__hexdig_fun>
 800efe2:	4604      	mov	r4, r0
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d13a      	bne.n	800f05e <__gethex+0xca>
 800efe8:	9901      	ldr	r1, [sp, #4]
 800efea:	4652      	mov	r2, sl
 800efec:	4638      	mov	r0, r7
 800efee:	f7fe f9df 	bl	800d3b0 <strncmp>
 800eff2:	4605      	mov	r5, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d168      	bne.n	800f0ca <__gethex+0x136>
 800eff8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800effc:	eb07 060a 	add.w	r6, r7, sl
 800f000:	f7ff ffb2 	bl	800ef68 <__hexdig_fun>
 800f004:	2800      	cmp	r0, #0
 800f006:	d062      	beq.n	800f0ce <__gethex+0x13a>
 800f008:	4633      	mov	r3, r6
 800f00a:	7818      	ldrb	r0, [r3, #0]
 800f00c:	2830      	cmp	r0, #48	; 0x30
 800f00e:	461f      	mov	r7, r3
 800f010:	f103 0301 	add.w	r3, r3, #1
 800f014:	d0f9      	beq.n	800f00a <__gethex+0x76>
 800f016:	f7ff ffa7 	bl	800ef68 <__hexdig_fun>
 800f01a:	2301      	movs	r3, #1
 800f01c:	fab0 f480 	clz	r4, r0
 800f020:	0964      	lsrs	r4, r4, #5
 800f022:	4635      	mov	r5, r6
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	463a      	mov	r2, r7
 800f028:	4616      	mov	r6, r2
 800f02a:	3201      	adds	r2, #1
 800f02c:	7830      	ldrb	r0, [r6, #0]
 800f02e:	f7ff ff9b 	bl	800ef68 <__hexdig_fun>
 800f032:	2800      	cmp	r0, #0
 800f034:	d1f8      	bne.n	800f028 <__gethex+0x94>
 800f036:	9901      	ldr	r1, [sp, #4]
 800f038:	4652      	mov	r2, sl
 800f03a:	4630      	mov	r0, r6
 800f03c:	f7fe f9b8 	bl	800d3b0 <strncmp>
 800f040:	b980      	cbnz	r0, 800f064 <__gethex+0xd0>
 800f042:	b94d      	cbnz	r5, 800f058 <__gethex+0xc4>
 800f044:	eb06 050a 	add.w	r5, r6, sl
 800f048:	462a      	mov	r2, r5
 800f04a:	4616      	mov	r6, r2
 800f04c:	3201      	adds	r2, #1
 800f04e:	7830      	ldrb	r0, [r6, #0]
 800f050:	f7ff ff8a 	bl	800ef68 <__hexdig_fun>
 800f054:	2800      	cmp	r0, #0
 800f056:	d1f8      	bne.n	800f04a <__gethex+0xb6>
 800f058:	1bad      	subs	r5, r5, r6
 800f05a:	00ad      	lsls	r5, r5, #2
 800f05c:	e004      	b.n	800f068 <__gethex+0xd4>
 800f05e:	2400      	movs	r4, #0
 800f060:	4625      	mov	r5, r4
 800f062:	e7e0      	b.n	800f026 <__gethex+0x92>
 800f064:	2d00      	cmp	r5, #0
 800f066:	d1f7      	bne.n	800f058 <__gethex+0xc4>
 800f068:	7833      	ldrb	r3, [r6, #0]
 800f06a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f06e:	2b50      	cmp	r3, #80	; 0x50
 800f070:	d13b      	bne.n	800f0ea <__gethex+0x156>
 800f072:	7873      	ldrb	r3, [r6, #1]
 800f074:	2b2b      	cmp	r3, #43	; 0x2b
 800f076:	d02c      	beq.n	800f0d2 <__gethex+0x13e>
 800f078:	2b2d      	cmp	r3, #45	; 0x2d
 800f07a:	d02e      	beq.n	800f0da <__gethex+0x146>
 800f07c:	1c71      	adds	r1, r6, #1
 800f07e:	f04f 0900 	mov.w	r9, #0
 800f082:	7808      	ldrb	r0, [r1, #0]
 800f084:	f7ff ff70 	bl	800ef68 <__hexdig_fun>
 800f088:	1e43      	subs	r3, r0, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b18      	cmp	r3, #24
 800f08e:	d82c      	bhi.n	800f0ea <__gethex+0x156>
 800f090:	f1a0 0210 	sub.w	r2, r0, #16
 800f094:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f098:	f7ff ff66 	bl	800ef68 <__hexdig_fun>
 800f09c:	1e43      	subs	r3, r0, #1
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b18      	cmp	r3, #24
 800f0a2:	d91d      	bls.n	800f0e0 <__gethex+0x14c>
 800f0a4:	f1b9 0f00 	cmp.w	r9, #0
 800f0a8:	d000      	beq.n	800f0ac <__gethex+0x118>
 800f0aa:	4252      	negs	r2, r2
 800f0ac:	4415      	add	r5, r2
 800f0ae:	f8cb 1000 	str.w	r1, [fp]
 800f0b2:	b1e4      	cbz	r4, 800f0ee <__gethex+0x15a>
 800f0b4:	9b00      	ldr	r3, [sp, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bf14      	ite	ne
 800f0ba:	2700      	movne	r7, #0
 800f0bc:	2706      	moveq	r7, #6
 800f0be:	4638      	mov	r0, r7
 800f0c0:	b009      	add	sp, #36	; 0x24
 800f0c2:	ecbd 8b02 	vpop	{d8}
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	463e      	mov	r6, r7
 800f0cc:	4625      	mov	r5, r4
 800f0ce:	2401      	movs	r4, #1
 800f0d0:	e7ca      	b.n	800f068 <__gethex+0xd4>
 800f0d2:	f04f 0900 	mov.w	r9, #0
 800f0d6:	1cb1      	adds	r1, r6, #2
 800f0d8:	e7d3      	b.n	800f082 <__gethex+0xee>
 800f0da:	f04f 0901 	mov.w	r9, #1
 800f0de:	e7fa      	b.n	800f0d6 <__gethex+0x142>
 800f0e0:	230a      	movs	r3, #10
 800f0e2:	fb03 0202 	mla	r2, r3, r2, r0
 800f0e6:	3a10      	subs	r2, #16
 800f0e8:	e7d4      	b.n	800f094 <__gethex+0x100>
 800f0ea:	4631      	mov	r1, r6
 800f0ec:	e7df      	b.n	800f0ae <__gethex+0x11a>
 800f0ee:	1bf3      	subs	r3, r6, r7
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	2b07      	cmp	r3, #7
 800f0f6:	dc0b      	bgt.n	800f110 <__gethex+0x17c>
 800f0f8:	ee18 0a10 	vmov	r0, s16
 800f0fc:	f000 fa70 	bl	800f5e0 <_Balloc>
 800f100:	4604      	mov	r4, r0
 800f102:	b940      	cbnz	r0, 800f116 <__gethex+0x182>
 800f104:	4b5d      	ldr	r3, [pc, #372]	; (800f27c <__gethex+0x2e8>)
 800f106:	4602      	mov	r2, r0
 800f108:	21de      	movs	r1, #222	; 0xde
 800f10a:	485d      	ldr	r0, [pc, #372]	; (800f280 <__gethex+0x2ec>)
 800f10c:	f001 f9d8 	bl	80104c0 <__assert_func>
 800f110:	3101      	adds	r1, #1
 800f112:	105b      	asrs	r3, r3, #1
 800f114:	e7ee      	b.n	800f0f4 <__gethex+0x160>
 800f116:	f100 0914 	add.w	r9, r0, #20
 800f11a:	f04f 0b00 	mov.w	fp, #0
 800f11e:	f1ca 0301 	rsb	r3, sl, #1
 800f122:	f8cd 9008 	str.w	r9, [sp, #8]
 800f126:	f8cd b000 	str.w	fp, [sp]
 800f12a:	9306      	str	r3, [sp, #24]
 800f12c:	42b7      	cmp	r7, r6
 800f12e:	d340      	bcc.n	800f1b2 <__gethex+0x21e>
 800f130:	9802      	ldr	r0, [sp, #8]
 800f132:	9b00      	ldr	r3, [sp, #0]
 800f134:	f840 3b04 	str.w	r3, [r0], #4
 800f138:	eba0 0009 	sub.w	r0, r0, r9
 800f13c:	1080      	asrs	r0, r0, #2
 800f13e:	0146      	lsls	r6, r0, #5
 800f140:	6120      	str	r0, [r4, #16]
 800f142:	4618      	mov	r0, r3
 800f144:	f000 fb3e 	bl	800f7c4 <__hi0bits>
 800f148:	1a30      	subs	r0, r6, r0
 800f14a:	f8d8 6000 	ldr.w	r6, [r8]
 800f14e:	42b0      	cmp	r0, r6
 800f150:	dd63      	ble.n	800f21a <__gethex+0x286>
 800f152:	1b87      	subs	r7, r0, r6
 800f154:	4639      	mov	r1, r7
 800f156:	4620      	mov	r0, r4
 800f158:	f000 fee2 	bl	800ff20 <__any_on>
 800f15c:	4682      	mov	sl, r0
 800f15e:	b1a8      	cbz	r0, 800f18c <__gethex+0x1f8>
 800f160:	1e7b      	subs	r3, r7, #1
 800f162:	1159      	asrs	r1, r3, #5
 800f164:	f003 021f 	and.w	r2, r3, #31
 800f168:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f16c:	f04f 0a01 	mov.w	sl, #1
 800f170:	fa0a f202 	lsl.w	r2, sl, r2
 800f174:	420a      	tst	r2, r1
 800f176:	d009      	beq.n	800f18c <__gethex+0x1f8>
 800f178:	4553      	cmp	r3, sl
 800f17a:	dd05      	ble.n	800f188 <__gethex+0x1f4>
 800f17c:	1eb9      	subs	r1, r7, #2
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 fece 	bl	800ff20 <__any_on>
 800f184:	2800      	cmp	r0, #0
 800f186:	d145      	bne.n	800f214 <__gethex+0x280>
 800f188:	f04f 0a02 	mov.w	sl, #2
 800f18c:	4639      	mov	r1, r7
 800f18e:	4620      	mov	r0, r4
 800f190:	f7ff fe98 	bl	800eec4 <rshift>
 800f194:	443d      	add	r5, r7
 800f196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f19a:	42ab      	cmp	r3, r5
 800f19c:	da4c      	bge.n	800f238 <__gethex+0x2a4>
 800f19e:	ee18 0a10 	vmov	r0, s16
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	f000 fa5c 	bl	800f660 <_Bfree>
 800f1a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	27a3      	movs	r7, #163	; 0xa3
 800f1b0:	e785      	b.n	800f0be <__gethex+0x12a>
 800f1b2:	1e73      	subs	r3, r6, #1
 800f1b4:	9a05      	ldr	r2, [sp, #20]
 800f1b6:	9303      	str	r3, [sp, #12]
 800f1b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d019      	beq.n	800f1f4 <__gethex+0x260>
 800f1c0:	f1bb 0f20 	cmp.w	fp, #32
 800f1c4:	d107      	bne.n	800f1d6 <__gethex+0x242>
 800f1c6:	9b02      	ldr	r3, [sp, #8]
 800f1c8:	9a00      	ldr	r2, [sp, #0]
 800f1ca:	f843 2b04 	str.w	r2, [r3], #4
 800f1ce:	9302      	str	r3, [sp, #8]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	469b      	mov	fp, r3
 800f1d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1da:	f7ff fec5 	bl	800ef68 <__hexdig_fun>
 800f1de:	9b00      	ldr	r3, [sp, #0]
 800f1e0:	f000 000f 	and.w	r0, r0, #15
 800f1e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1e8:	4303      	orrs	r3, r0
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	f10b 0b04 	add.w	fp, fp, #4
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	e00d      	b.n	800f210 <__gethex+0x27c>
 800f1f4:	9b03      	ldr	r3, [sp, #12]
 800f1f6:	9a06      	ldr	r2, [sp, #24]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	42bb      	cmp	r3, r7
 800f1fc:	d3e0      	bcc.n	800f1c0 <__gethex+0x22c>
 800f1fe:	4618      	mov	r0, r3
 800f200:	9901      	ldr	r1, [sp, #4]
 800f202:	9307      	str	r3, [sp, #28]
 800f204:	4652      	mov	r2, sl
 800f206:	f7fe f8d3 	bl	800d3b0 <strncmp>
 800f20a:	9b07      	ldr	r3, [sp, #28]
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d1d7      	bne.n	800f1c0 <__gethex+0x22c>
 800f210:	461e      	mov	r6, r3
 800f212:	e78b      	b.n	800f12c <__gethex+0x198>
 800f214:	f04f 0a03 	mov.w	sl, #3
 800f218:	e7b8      	b.n	800f18c <__gethex+0x1f8>
 800f21a:	da0a      	bge.n	800f232 <__gethex+0x29e>
 800f21c:	1a37      	subs	r7, r6, r0
 800f21e:	4621      	mov	r1, r4
 800f220:	ee18 0a10 	vmov	r0, s16
 800f224:	463a      	mov	r2, r7
 800f226:	f000 fc37 	bl	800fa98 <__lshift>
 800f22a:	1bed      	subs	r5, r5, r7
 800f22c:	4604      	mov	r4, r0
 800f22e:	f100 0914 	add.w	r9, r0, #20
 800f232:	f04f 0a00 	mov.w	sl, #0
 800f236:	e7ae      	b.n	800f196 <__gethex+0x202>
 800f238:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f23c:	42a8      	cmp	r0, r5
 800f23e:	dd72      	ble.n	800f326 <__gethex+0x392>
 800f240:	1b45      	subs	r5, r0, r5
 800f242:	42ae      	cmp	r6, r5
 800f244:	dc36      	bgt.n	800f2b4 <__gethex+0x320>
 800f246:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d02a      	beq.n	800f2a4 <__gethex+0x310>
 800f24e:	2b03      	cmp	r3, #3
 800f250:	d02c      	beq.n	800f2ac <__gethex+0x318>
 800f252:	2b01      	cmp	r3, #1
 800f254:	d11c      	bne.n	800f290 <__gethex+0x2fc>
 800f256:	42ae      	cmp	r6, r5
 800f258:	d11a      	bne.n	800f290 <__gethex+0x2fc>
 800f25a:	2e01      	cmp	r6, #1
 800f25c:	d112      	bne.n	800f284 <__gethex+0x2f0>
 800f25e:	9a04      	ldr	r2, [sp, #16]
 800f260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f264:	6013      	str	r3, [r2, #0]
 800f266:	2301      	movs	r3, #1
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	f8c9 3000 	str.w	r3, [r9]
 800f26e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f270:	2762      	movs	r7, #98	; 0x62
 800f272:	601c      	str	r4, [r3, #0]
 800f274:	e723      	b.n	800f0be <__gethex+0x12a>
 800f276:	bf00      	nop
 800f278:	08011a58 	.word	0x08011a58
 800f27c:	080119df 	.word	0x080119df
 800f280:	080119f0 	.word	0x080119f0
 800f284:	1e71      	subs	r1, r6, #1
 800f286:	4620      	mov	r0, r4
 800f288:	f000 fe4a 	bl	800ff20 <__any_on>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d1e6      	bne.n	800f25e <__gethex+0x2ca>
 800f290:	ee18 0a10 	vmov	r0, s16
 800f294:	4621      	mov	r1, r4
 800f296:	f000 f9e3 	bl	800f660 <_Bfree>
 800f29a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f29c:	2300      	movs	r3, #0
 800f29e:	6013      	str	r3, [r2, #0]
 800f2a0:	2750      	movs	r7, #80	; 0x50
 800f2a2:	e70c      	b.n	800f0be <__gethex+0x12a>
 800f2a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1f2      	bne.n	800f290 <__gethex+0x2fc>
 800f2aa:	e7d8      	b.n	800f25e <__gethex+0x2ca>
 800f2ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1d5      	bne.n	800f25e <__gethex+0x2ca>
 800f2b2:	e7ed      	b.n	800f290 <__gethex+0x2fc>
 800f2b4:	1e6f      	subs	r7, r5, #1
 800f2b6:	f1ba 0f00 	cmp.w	sl, #0
 800f2ba:	d131      	bne.n	800f320 <__gethex+0x38c>
 800f2bc:	b127      	cbz	r7, 800f2c8 <__gethex+0x334>
 800f2be:	4639      	mov	r1, r7
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 fe2d 	bl	800ff20 <__any_on>
 800f2c6:	4682      	mov	sl, r0
 800f2c8:	117b      	asrs	r3, r7, #5
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f2d0:	f007 071f 	and.w	r7, r7, #31
 800f2d4:	fa01 f707 	lsl.w	r7, r1, r7
 800f2d8:	421f      	tst	r7, r3
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4620      	mov	r0, r4
 800f2de:	bf18      	it	ne
 800f2e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2e4:	1b76      	subs	r6, r6, r5
 800f2e6:	f7ff fded 	bl	800eec4 <rshift>
 800f2ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2ee:	2702      	movs	r7, #2
 800f2f0:	f1ba 0f00 	cmp.w	sl, #0
 800f2f4:	d048      	beq.n	800f388 <__gethex+0x3f4>
 800f2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d015      	beq.n	800f32a <__gethex+0x396>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d017      	beq.n	800f332 <__gethex+0x39e>
 800f302:	2b01      	cmp	r3, #1
 800f304:	d109      	bne.n	800f31a <__gethex+0x386>
 800f306:	f01a 0f02 	tst.w	sl, #2
 800f30a:	d006      	beq.n	800f31a <__gethex+0x386>
 800f30c:	f8d9 0000 	ldr.w	r0, [r9]
 800f310:	ea4a 0a00 	orr.w	sl, sl, r0
 800f314:	f01a 0f01 	tst.w	sl, #1
 800f318:	d10e      	bne.n	800f338 <__gethex+0x3a4>
 800f31a:	f047 0710 	orr.w	r7, r7, #16
 800f31e:	e033      	b.n	800f388 <__gethex+0x3f4>
 800f320:	f04f 0a01 	mov.w	sl, #1
 800f324:	e7d0      	b.n	800f2c8 <__gethex+0x334>
 800f326:	2701      	movs	r7, #1
 800f328:	e7e2      	b.n	800f2f0 <__gethex+0x35c>
 800f32a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f32c:	f1c3 0301 	rsb	r3, r3, #1
 800f330:	9315      	str	r3, [sp, #84]	; 0x54
 800f332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0f0      	beq.n	800f31a <__gethex+0x386>
 800f338:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f33c:	f104 0314 	add.w	r3, r4, #20
 800f340:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f344:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f348:	f04f 0c00 	mov.w	ip, #0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f352:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f356:	d01c      	beq.n	800f392 <__gethex+0x3fe>
 800f358:	3201      	adds	r2, #1
 800f35a:	6002      	str	r2, [r0, #0]
 800f35c:	2f02      	cmp	r7, #2
 800f35e:	f104 0314 	add.w	r3, r4, #20
 800f362:	d13f      	bne.n	800f3e4 <__gethex+0x450>
 800f364:	f8d8 2000 	ldr.w	r2, [r8]
 800f368:	3a01      	subs	r2, #1
 800f36a:	42b2      	cmp	r2, r6
 800f36c:	d10a      	bne.n	800f384 <__gethex+0x3f0>
 800f36e:	1171      	asrs	r1, r6, #5
 800f370:	2201      	movs	r2, #1
 800f372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f376:	f006 061f 	and.w	r6, r6, #31
 800f37a:	fa02 f606 	lsl.w	r6, r2, r6
 800f37e:	421e      	tst	r6, r3
 800f380:	bf18      	it	ne
 800f382:	4617      	movne	r7, r2
 800f384:	f047 0720 	orr.w	r7, r7, #32
 800f388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f38a:	601c      	str	r4, [r3, #0]
 800f38c:	9b04      	ldr	r3, [sp, #16]
 800f38e:	601d      	str	r5, [r3, #0]
 800f390:	e695      	b.n	800f0be <__gethex+0x12a>
 800f392:	4299      	cmp	r1, r3
 800f394:	f843 cc04 	str.w	ip, [r3, #-4]
 800f398:	d8d8      	bhi.n	800f34c <__gethex+0x3b8>
 800f39a:	68a3      	ldr	r3, [r4, #8]
 800f39c:	459b      	cmp	fp, r3
 800f39e:	db19      	blt.n	800f3d4 <__gethex+0x440>
 800f3a0:	6861      	ldr	r1, [r4, #4]
 800f3a2:	ee18 0a10 	vmov	r0, s16
 800f3a6:	3101      	adds	r1, #1
 800f3a8:	f000 f91a 	bl	800f5e0 <_Balloc>
 800f3ac:	4681      	mov	r9, r0
 800f3ae:	b918      	cbnz	r0, 800f3b8 <__gethex+0x424>
 800f3b0:	4b1a      	ldr	r3, [pc, #104]	; (800f41c <__gethex+0x488>)
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	2184      	movs	r1, #132	; 0x84
 800f3b6:	e6a8      	b.n	800f10a <__gethex+0x176>
 800f3b8:	6922      	ldr	r2, [r4, #16]
 800f3ba:	3202      	adds	r2, #2
 800f3bc:	f104 010c 	add.w	r1, r4, #12
 800f3c0:	0092      	lsls	r2, r2, #2
 800f3c2:	300c      	adds	r0, #12
 800f3c4:	f7fd fb38 	bl	800ca38 <memcpy>
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	ee18 0a10 	vmov	r0, s16
 800f3ce:	f000 f947 	bl	800f660 <_Bfree>
 800f3d2:	464c      	mov	r4, r9
 800f3d4:	6923      	ldr	r3, [r4, #16]
 800f3d6:	1c5a      	adds	r2, r3, #1
 800f3d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3dc:	6122      	str	r2, [r4, #16]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	615a      	str	r2, [r3, #20]
 800f3e2:	e7bb      	b.n	800f35c <__gethex+0x3c8>
 800f3e4:	6922      	ldr	r2, [r4, #16]
 800f3e6:	455a      	cmp	r2, fp
 800f3e8:	dd0b      	ble.n	800f402 <__gethex+0x46e>
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f7ff fd69 	bl	800eec4 <rshift>
 800f3f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3f6:	3501      	adds	r5, #1
 800f3f8:	42ab      	cmp	r3, r5
 800f3fa:	f6ff aed0 	blt.w	800f19e <__gethex+0x20a>
 800f3fe:	2701      	movs	r7, #1
 800f400:	e7c0      	b.n	800f384 <__gethex+0x3f0>
 800f402:	f016 061f 	ands.w	r6, r6, #31
 800f406:	d0fa      	beq.n	800f3fe <__gethex+0x46a>
 800f408:	4453      	add	r3, sl
 800f40a:	f1c6 0620 	rsb	r6, r6, #32
 800f40e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f412:	f000 f9d7 	bl	800f7c4 <__hi0bits>
 800f416:	42b0      	cmp	r0, r6
 800f418:	dbe7      	blt.n	800f3ea <__gethex+0x456>
 800f41a:	e7f0      	b.n	800f3fe <__gethex+0x46a>
 800f41c:	080119df 	.word	0x080119df

0800f420 <L_shift>:
 800f420:	f1c2 0208 	rsb	r2, r2, #8
 800f424:	0092      	lsls	r2, r2, #2
 800f426:	b570      	push	{r4, r5, r6, lr}
 800f428:	f1c2 0620 	rsb	r6, r2, #32
 800f42c:	6843      	ldr	r3, [r0, #4]
 800f42e:	6804      	ldr	r4, [r0, #0]
 800f430:	fa03 f506 	lsl.w	r5, r3, r6
 800f434:	432c      	orrs	r4, r5
 800f436:	40d3      	lsrs	r3, r2
 800f438:	6004      	str	r4, [r0, #0]
 800f43a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f43e:	4288      	cmp	r0, r1
 800f440:	d3f4      	bcc.n	800f42c <L_shift+0xc>
 800f442:	bd70      	pop	{r4, r5, r6, pc}

0800f444 <__match>:
 800f444:	b530      	push	{r4, r5, lr}
 800f446:	6803      	ldr	r3, [r0, #0]
 800f448:	3301      	adds	r3, #1
 800f44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f44e:	b914      	cbnz	r4, 800f456 <__match+0x12>
 800f450:	6003      	str	r3, [r0, #0]
 800f452:	2001      	movs	r0, #1
 800f454:	bd30      	pop	{r4, r5, pc}
 800f456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f45a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f45e:	2d19      	cmp	r5, #25
 800f460:	bf98      	it	ls
 800f462:	3220      	addls	r2, #32
 800f464:	42a2      	cmp	r2, r4
 800f466:	d0f0      	beq.n	800f44a <__match+0x6>
 800f468:	2000      	movs	r0, #0
 800f46a:	e7f3      	b.n	800f454 <__match+0x10>

0800f46c <__hexnan>:
 800f46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f470:	680b      	ldr	r3, [r1, #0]
 800f472:	115e      	asrs	r6, r3, #5
 800f474:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f478:	f013 031f 	ands.w	r3, r3, #31
 800f47c:	b087      	sub	sp, #28
 800f47e:	bf18      	it	ne
 800f480:	3604      	addne	r6, #4
 800f482:	2500      	movs	r5, #0
 800f484:	1f37      	subs	r7, r6, #4
 800f486:	4690      	mov	r8, r2
 800f488:	6802      	ldr	r2, [r0, #0]
 800f48a:	9301      	str	r3, [sp, #4]
 800f48c:	4682      	mov	sl, r0
 800f48e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f492:	46b9      	mov	r9, r7
 800f494:	463c      	mov	r4, r7
 800f496:	9502      	str	r5, [sp, #8]
 800f498:	46ab      	mov	fp, r5
 800f49a:	7851      	ldrb	r1, [r2, #1]
 800f49c:	1c53      	adds	r3, r2, #1
 800f49e:	9303      	str	r3, [sp, #12]
 800f4a0:	b341      	cbz	r1, 800f4f4 <__hexnan+0x88>
 800f4a2:	4608      	mov	r0, r1
 800f4a4:	9205      	str	r2, [sp, #20]
 800f4a6:	9104      	str	r1, [sp, #16]
 800f4a8:	f7ff fd5e 	bl	800ef68 <__hexdig_fun>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d14f      	bne.n	800f550 <__hexnan+0xe4>
 800f4b0:	9904      	ldr	r1, [sp, #16]
 800f4b2:	9a05      	ldr	r2, [sp, #20]
 800f4b4:	2920      	cmp	r1, #32
 800f4b6:	d818      	bhi.n	800f4ea <__hexnan+0x7e>
 800f4b8:	9b02      	ldr	r3, [sp, #8]
 800f4ba:	459b      	cmp	fp, r3
 800f4bc:	dd13      	ble.n	800f4e6 <__hexnan+0x7a>
 800f4be:	454c      	cmp	r4, r9
 800f4c0:	d206      	bcs.n	800f4d0 <__hexnan+0x64>
 800f4c2:	2d07      	cmp	r5, #7
 800f4c4:	dc04      	bgt.n	800f4d0 <__hexnan+0x64>
 800f4c6:	462a      	mov	r2, r5
 800f4c8:	4649      	mov	r1, r9
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f7ff ffa8 	bl	800f420 <L_shift>
 800f4d0:	4544      	cmp	r4, r8
 800f4d2:	d950      	bls.n	800f576 <__hexnan+0x10a>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	f1a4 0904 	sub.w	r9, r4, #4
 800f4da:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4de:	f8cd b008 	str.w	fp, [sp, #8]
 800f4e2:	464c      	mov	r4, r9
 800f4e4:	461d      	mov	r5, r3
 800f4e6:	9a03      	ldr	r2, [sp, #12]
 800f4e8:	e7d7      	b.n	800f49a <__hexnan+0x2e>
 800f4ea:	2929      	cmp	r1, #41	; 0x29
 800f4ec:	d156      	bne.n	800f59c <__hexnan+0x130>
 800f4ee:	3202      	adds	r2, #2
 800f4f0:	f8ca 2000 	str.w	r2, [sl]
 800f4f4:	f1bb 0f00 	cmp.w	fp, #0
 800f4f8:	d050      	beq.n	800f59c <__hexnan+0x130>
 800f4fa:	454c      	cmp	r4, r9
 800f4fc:	d206      	bcs.n	800f50c <__hexnan+0xa0>
 800f4fe:	2d07      	cmp	r5, #7
 800f500:	dc04      	bgt.n	800f50c <__hexnan+0xa0>
 800f502:	462a      	mov	r2, r5
 800f504:	4649      	mov	r1, r9
 800f506:	4620      	mov	r0, r4
 800f508:	f7ff ff8a 	bl	800f420 <L_shift>
 800f50c:	4544      	cmp	r4, r8
 800f50e:	d934      	bls.n	800f57a <__hexnan+0x10e>
 800f510:	f1a8 0204 	sub.w	r2, r8, #4
 800f514:	4623      	mov	r3, r4
 800f516:	f853 1b04 	ldr.w	r1, [r3], #4
 800f51a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f51e:	429f      	cmp	r7, r3
 800f520:	d2f9      	bcs.n	800f516 <__hexnan+0xaa>
 800f522:	1b3b      	subs	r3, r7, r4
 800f524:	f023 0303 	bic.w	r3, r3, #3
 800f528:	3304      	adds	r3, #4
 800f52a:	3401      	adds	r4, #1
 800f52c:	3e03      	subs	r6, #3
 800f52e:	42b4      	cmp	r4, r6
 800f530:	bf88      	it	hi
 800f532:	2304      	movhi	r3, #4
 800f534:	4443      	add	r3, r8
 800f536:	2200      	movs	r2, #0
 800f538:	f843 2b04 	str.w	r2, [r3], #4
 800f53c:	429f      	cmp	r7, r3
 800f53e:	d2fb      	bcs.n	800f538 <__hexnan+0xcc>
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	b91b      	cbnz	r3, 800f54c <__hexnan+0xe0>
 800f544:	4547      	cmp	r7, r8
 800f546:	d127      	bne.n	800f598 <__hexnan+0x12c>
 800f548:	2301      	movs	r3, #1
 800f54a:	603b      	str	r3, [r7, #0]
 800f54c:	2005      	movs	r0, #5
 800f54e:	e026      	b.n	800f59e <__hexnan+0x132>
 800f550:	3501      	adds	r5, #1
 800f552:	2d08      	cmp	r5, #8
 800f554:	f10b 0b01 	add.w	fp, fp, #1
 800f558:	dd06      	ble.n	800f568 <__hexnan+0xfc>
 800f55a:	4544      	cmp	r4, r8
 800f55c:	d9c3      	bls.n	800f4e6 <__hexnan+0x7a>
 800f55e:	2300      	movs	r3, #0
 800f560:	f844 3c04 	str.w	r3, [r4, #-4]
 800f564:	2501      	movs	r5, #1
 800f566:	3c04      	subs	r4, #4
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	f000 000f 	and.w	r0, r0, #15
 800f56e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f572:	6022      	str	r2, [r4, #0]
 800f574:	e7b7      	b.n	800f4e6 <__hexnan+0x7a>
 800f576:	2508      	movs	r5, #8
 800f578:	e7b5      	b.n	800f4e6 <__hexnan+0x7a>
 800f57a:	9b01      	ldr	r3, [sp, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d0df      	beq.n	800f540 <__hexnan+0xd4>
 800f580:	f04f 32ff 	mov.w	r2, #4294967295
 800f584:	f1c3 0320 	rsb	r3, r3, #32
 800f588:	fa22 f303 	lsr.w	r3, r2, r3
 800f58c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f590:	401a      	ands	r2, r3
 800f592:	f846 2c04 	str.w	r2, [r6, #-4]
 800f596:	e7d3      	b.n	800f540 <__hexnan+0xd4>
 800f598:	3f04      	subs	r7, #4
 800f59a:	e7d1      	b.n	800f540 <__hexnan+0xd4>
 800f59c:	2004      	movs	r0, #4
 800f59e:	b007      	add	sp, #28
 800f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5a4 <_localeconv_r>:
 800f5a4:	4800      	ldr	r0, [pc, #0]	; (800f5a8 <_localeconv_r+0x4>)
 800f5a6:	4770      	bx	lr
 800f5a8:	20000300 	.word	0x20000300

0800f5ac <malloc>:
 800f5ac:	4b02      	ldr	r3, [pc, #8]	; (800f5b8 <malloc+0xc>)
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	6818      	ldr	r0, [r3, #0]
 800f5b2:	f000 bd59 	b.w	8010068 <_malloc_r>
 800f5b6:	bf00      	nop
 800f5b8:	200001a8 	.word	0x200001a8

0800f5bc <__ascii_mbtowc>:
 800f5bc:	b082      	sub	sp, #8
 800f5be:	b901      	cbnz	r1, 800f5c2 <__ascii_mbtowc+0x6>
 800f5c0:	a901      	add	r1, sp, #4
 800f5c2:	b142      	cbz	r2, 800f5d6 <__ascii_mbtowc+0x1a>
 800f5c4:	b14b      	cbz	r3, 800f5da <__ascii_mbtowc+0x1e>
 800f5c6:	7813      	ldrb	r3, [r2, #0]
 800f5c8:	600b      	str	r3, [r1, #0]
 800f5ca:	7812      	ldrb	r2, [r2, #0]
 800f5cc:	1e10      	subs	r0, r2, #0
 800f5ce:	bf18      	it	ne
 800f5d0:	2001      	movne	r0, #1
 800f5d2:	b002      	add	sp, #8
 800f5d4:	4770      	bx	lr
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	e7fb      	b.n	800f5d2 <__ascii_mbtowc+0x16>
 800f5da:	f06f 0001 	mvn.w	r0, #1
 800f5de:	e7f8      	b.n	800f5d2 <__ascii_mbtowc+0x16>

0800f5e0 <_Balloc>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	460d      	mov	r5, r1
 800f5e8:	b976      	cbnz	r6, 800f608 <_Balloc+0x28>
 800f5ea:	2010      	movs	r0, #16
 800f5ec:	f7ff ffde 	bl	800f5ac <malloc>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	6260      	str	r0, [r4, #36]	; 0x24
 800f5f4:	b920      	cbnz	r0, 800f600 <_Balloc+0x20>
 800f5f6:	4b18      	ldr	r3, [pc, #96]	; (800f658 <_Balloc+0x78>)
 800f5f8:	4818      	ldr	r0, [pc, #96]	; (800f65c <_Balloc+0x7c>)
 800f5fa:	2166      	movs	r1, #102	; 0x66
 800f5fc:	f000 ff60 	bl	80104c0 <__assert_func>
 800f600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f604:	6006      	str	r6, [r0, #0]
 800f606:	60c6      	str	r6, [r0, #12]
 800f608:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f60a:	68f3      	ldr	r3, [r6, #12]
 800f60c:	b183      	cbz	r3, 800f630 <_Balloc+0x50>
 800f60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f616:	b9b8      	cbnz	r0, 800f648 <_Balloc+0x68>
 800f618:	2101      	movs	r1, #1
 800f61a:	fa01 f605 	lsl.w	r6, r1, r5
 800f61e:	1d72      	adds	r2, r6, #5
 800f620:	0092      	lsls	r2, r2, #2
 800f622:	4620      	mov	r0, r4
 800f624:	f000 fc9d 	bl	800ff62 <_calloc_r>
 800f628:	b160      	cbz	r0, 800f644 <_Balloc+0x64>
 800f62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f62e:	e00e      	b.n	800f64e <_Balloc+0x6e>
 800f630:	2221      	movs	r2, #33	; 0x21
 800f632:	2104      	movs	r1, #4
 800f634:	4620      	mov	r0, r4
 800f636:	f000 fc94 	bl	800ff62 <_calloc_r>
 800f63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f63c:	60f0      	str	r0, [r6, #12]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1e4      	bne.n	800f60e <_Balloc+0x2e>
 800f644:	2000      	movs	r0, #0
 800f646:	bd70      	pop	{r4, r5, r6, pc}
 800f648:	6802      	ldr	r2, [r0, #0]
 800f64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f64e:	2300      	movs	r3, #0
 800f650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f654:	e7f7      	b.n	800f646 <_Balloc+0x66>
 800f656:	bf00      	nop
 800f658:	0801196d 	.word	0x0801196d
 800f65c:	08011a6c 	.word	0x08011a6c

0800f660 <_Bfree>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f664:	4605      	mov	r5, r0
 800f666:	460c      	mov	r4, r1
 800f668:	b976      	cbnz	r6, 800f688 <_Bfree+0x28>
 800f66a:	2010      	movs	r0, #16
 800f66c:	f7ff ff9e 	bl	800f5ac <malloc>
 800f670:	4602      	mov	r2, r0
 800f672:	6268      	str	r0, [r5, #36]	; 0x24
 800f674:	b920      	cbnz	r0, 800f680 <_Bfree+0x20>
 800f676:	4b09      	ldr	r3, [pc, #36]	; (800f69c <_Bfree+0x3c>)
 800f678:	4809      	ldr	r0, [pc, #36]	; (800f6a0 <_Bfree+0x40>)
 800f67a:	218a      	movs	r1, #138	; 0x8a
 800f67c:	f000 ff20 	bl	80104c0 <__assert_func>
 800f680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f684:	6006      	str	r6, [r0, #0]
 800f686:	60c6      	str	r6, [r0, #12]
 800f688:	b13c      	cbz	r4, 800f69a <_Bfree+0x3a>
 800f68a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f68c:	6862      	ldr	r2, [r4, #4]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f694:	6021      	str	r1, [r4, #0]
 800f696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f69a:	bd70      	pop	{r4, r5, r6, pc}
 800f69c:	0801196d 	.word	0x0801196d
 800f6a0:	08011a6c 	.word	0x08011a6c

0800f6a4 <__multadd>:
 800f6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a8:	690d      	ldr	r5, [r1, #16]
 800f6aa:	4607      	mov	r7, r0
 800f6ac:	460c      	mov	r4, r1
 800f6ae:	461e      	mov	r6, r3
 800f6b0:	f101 0c14 	add.w	ip, r1, #20
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f6ba:	b299      	uxth	r1, r3
 800f6bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f6c0:	0c1e      	lsrs	r6, r3, #16
 800f6c2:	0c0b      	lsrs	r3, r1, #16
 800f6c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f6c8:	b289      	uxth	r1, r1
 800f6ca:	3001      	adds	r0, #1
 800f6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6d0:	4285      	cmp	r5, r0
 800f6d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6da:	dcec      	bgt.n	800f6b6 <__multadd+0x12>
 800f6dc:	b30e      	cbz	r6, 800f722 <__multadd+0x7e>
 800f6de:	68a3      	ldr	r3, [r4, #8]
 800f6e0:	42ab      	cmp	r3, r5
 800f6e2:	dc19      	bgt.n	800f718 <__multadd+0x74>
 800f6e4:	6861      	ldr	r1, [r4, #4]
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	3101      	adds	r1, #1
 800f6ea:	f7ff ff79 	bl	800f5e0 <_Balloc>
 800f6ee:	4680      	mov	r8, r0
 800f6f0:	b928      	cbnz	r0, 800f6fe <__multadd+0x5a>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	; (800f728 <__multadd+0x84>)
 800f6f6:	480d      	ldr	r0, [pc, #52]	; (800f72c <__multadd+0x88>)
 800f6f8:	21b5      	movs	r1, #181	; 0xb5
 800f6fa:	f000 fee1 	bl	80104c0 <__assert_func>
 800f6fe:	6922      	ldr	r2, [r4, #16]
 800f700:	3202      	adds	r2, #2
 800f702:	f104 010c 	add.w	r1, r4, #12
 800f706:	0092      	lsls	r2, r2, #2
 800f708:	300c      	adds	r0, #12
 800f70a:	f7fd f995 	bl	800ca38 <memcpy>
 800f70e:	4621      	mov	r1, r4
 800f710:	4638      	mov	r0, r7
 800f712:	f7ff ffa5 	bl	800f660 <_Bfree>
 800f716:	4644      	mov	r4, r8
 800f718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f71c:	3501      	adds	r5, #1
 800f71e:	615e      	str	r6, [r3, #20]
 800f720:	6125      	str	r5, [r4, #16]
 800f722:	4620      	mov	r0, r4
 800f724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f728:	080119df 	.word	0x080119df
 800f72c:	08011a6c 	.word	0x08011a6c

0800f730 <__s2b>:
 800f730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f734:	460c      	mov	r4, r1
 800f736:	4615      	mov	r5, r2
 800f738:	461f      	mov	r7, r3
 800f73a:	2209      	movs	r2, #9
 800f73c:	3308      	adds	r3, #8
 800f73e:	4606      	mov	r6, r0
 800f740:	fb93 f3f2 	sdiv	r3, r3, r2
 800f744:	2100      	movs	r1, #0
 800f746:	2201      	movs	r2, #1
 800f748:	429a      	cmp	r2, r3
 800f74a:	db09      	blt.n	800f760 <__s2b+0x30>
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff ff47 	bl	800f5e0 <_Balloc>
 800f752:	b940      	cbnz	r0, 800f766 <__s2b+0x36>
 800f754:	4602      	mov	r2, r0
 800f756:	4b19      	ldr	r3, [pc, #100]	; (800f7bc <__s2b+0x8c>)
 800f758:	4819      	ldr	r0, [pc, #100]	; (800f7c0 <__s2b+0x90>)
 800f75a:	21ce      	movs	r1, #206	; 0xce
 800f75c:	f000 feb0 	bl	80104c0 <__assert_func>
 800f760:	0052      	lsls	r2, r2, #1
 800f762:	3101      	adds	r1, #1
 800f764:	e7f0      	b.n	800f748 <__s2b+0x18>
 800f766:	9b08      	ldr	r3, [sp, #32]
 800f768:	6143      	str	r3, [r0, #20]
 800f76a:	2d09      	cmp	r5, #9
 800f76c:	f04f 0301 	mov.w	r3, #1
 800f770:	6103      	str	r3, [r0, #16]
 800f772:	dd16      	ble.n	800f7a2 <__s2b+0x72>
 800f774:	f104 0909 	add.w	r9, r4, #9
 800f778:	46c8      	mov	r8, r9
 800f77a:	442c      	add	r4, r5
 800f77c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f780:	4601      	mov	r1, r0
 800f782:	3b30      	subs	r3, #48	; 0x30
 800f784:	220a      	movs	r2, #10
 800f786:	4630      	mov	r0, r6
 800f788:	f7ff ff8c 	bl	800f6a4 <__multadd>
 800f78c:	45a0      	cmp	r8, r4
 800f78e:	d1f5      	bne.n	800f77c <__s2b+0x4c>
 800f790:	f1a5 0408 	sub.w	r4, r5, #8
 800f794:	444c      	add	r4, r9
 800f796:	1b2d      	subs	r5, r5, r4
 800f798:	1963      	adds	r3, r4, r5
 800f79a:	42bb      	cmp	r3, r7
 800f79c:	db04      	blt.n	800f7a8 <__s2b+0x78>
 800f79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a2:	340a      	adds	r4, #10
 800f7a4:	2509      	movs	r5, #9
 800f7a6:	e7f6      	b.n	800f796 <__s2b+0x66>
 800f7a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7ac:	4601      	mov	r1, r0
 800f7ae:	3b30      	subs	r3, #48	; 0x30
 800f7b0:	220a      	movs	r2, #10
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7ff ff76 	bl	800f6a4 <__multadd>
 800f7b8:	e7ee      	b.n	800f798 <__s2b+0x68>
 800f7ba:	bf00      	nop
 800f7bc:	080119df 	.word	0x080119df
 800f7c0:	08011a6c 	.word	0x08011a6c

0800f7c4 <__hi0bits>:
 800f7c4:	0c03      	lsrs	r3, r0, #16
 800f7c6:	041b      	lsls	r3, r3, #16
 800f7c8:	b9d3      	cbnz	r3, 800f800 <__hi0bits+0x3c>
 800f7ca:	0400      	lsls	r0, r0, #16
 800f7cc:	2310      	movs	r3, #16
 800f7ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7d2:	bf04      	itt	eq
 800f7d4:	0200      	lsleq	r0, r0, #8
 800f7d6:	3308      	addeq	r3, #8
 800f7d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7dc:	bf04      	itt	eq
 800f7de:	0100      	lsleq	r0, r0, #4
 800f7e0:	3304      	addeq	r3, #4
 800f7e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7e6:	bf04      	itt	eq
 800f7e8:	0080      	lsleq	r0, r0, #2
 800f7ea:	3302      	addeq	r3, #2
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	db05      	blt.n	800f7fc <__hi0bits+0x38>
 800f7f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7f4:	f103 0301 	add.w	r3, r3, #1
 800f7f8:	bf08      	it	eq
 800f7fa:	2320      	moveq	r3, #32
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	4770      	bx	lr
 800f800:	2300      	movs	r3, #0
 800f802:	e7e4      	b.n	800f7ce <__hi0bits+0xa>

0800f804 <__lo0bits>:
 800f804:	6803      	ldr	r3, [r0, #0]
 800f806:	f013 0207 	ands.w	r2, r3, #7
 800f80a:	4601      	mov	r1, r0
 800f80c:	d00b      	beq.n	800f826 <__lo0bits+0x22>
 800f80e:	07da      	lsls	r2, r3, #31
 800f810:	d423      	bmi.n	800f85a <__lo0bits+0x56>
 800f812:	0798      	lsls	r0, r3, #30
 800f814:	bf49      	itett	mi
 800f816:	085b      	lsrmi	r3, r3, #1
 800f818:	089b      	lsrpl	r3, r3, #2
 800f81a:	2001      	movmi	r0, #1
 800f81c:	600b      	strmi	r3, [r1, #0]
 800f81e:	bf5c      	itt	pl
 800f820:	600b      	strpl	r3, [r1, #0]
 800f822:	2002      	movpl	r0, #2
 800f824:	4770      	bx	lr
 800f826:	b298      	uxth	r0, r3
 800f828:	b9a8      	cbnz	r0, 800f856 <__lo0bits+0x52>
 800f82a:	0c1b      	lsrs	r3, r3, #16
 800f82c:	2010      	movs	r0, #16
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	b90a      	cbnz	r2, 800f836 <__lo0bits+0x32>
 800f832:	3008      	adds	r0, #8
 800f834:	0a1b      	lsrs	r3, r3, #8
 800f836:	071a      	lsls	r2, r3, #28
 800f838:	bf04      	itt	eq
 800f83a:	091b      	lsreq	r3, r3, #4
 800f83c:	3004      	addeq	r0, #4
 800f83e:	079a      	lsls	r2, r3, #30
 800f840:	bf04      	itt	eq
 800f842:	089b      	lsreq	r3, r3, #2
 800f844:	3002      	addeq	r0, #2
 800f846:	07da      	lsls	r2, r3, #31
 800f848:	d403      	bmi.n	800f852 <__lo0bits+0x4e>
 800f84a:	085b      	lsrs	r3, r3, #1
 800f84c:	f100 0001 	add.w	r0, r0, #1
 800f850:	d005      	beq.n	800f85e <__lo0bits+0x5a>
 800f852:	600b      	str	r3, [r1, #0]
 800f854:	4770      	bx	lr
 800f856:	4610      	mov	r0, r2
 800f858:	e7e9      	b.n	800f82e <__lo0bits+0x2a>
 800f85a:	2000      	movs	r0, #0
 800f85c:	4770      	bx	lr
 800f85e:	2020      	movs	r0, #32
 800f860:	4770      	bx	lr
	...

0800f864 <__i2b>:
 800f864:	b510      	push	{r4, lr}
 800f866:	460c      	mov	r4, r1
 800f868:	2101      	movs	r1, #1
 800f86a:	f7ff feb9 	bl	800f5e0 <_Balloc>
 800f86e:	4602      	mov	r2, r0
 800f870:	b928      	cbnz	r0, 800f87e <__i2b+0x1a>
 800f872:	4b05      	ldr	r3, [pc, #20]	; (800f888 <__i2b+0x24>)
 800f874:	4805      	ldr	r0, [pc, #20]	; (800f88c <__i2b+0x28>)
 800f876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f87a:	f000 fe21 	bl	80104c0 <__assert_func>
 800f87e:	2301      	movs	r3, #1
 800f880:	6144      	str	r4, [r0, #20]
 800f882:	6103      	str	r3, [r0, #16]
 800f884:	bd10      	pop	{r4, pc}
 800f886:	bf00      	nop
 800f888:	080119df 	.word	0x080119df
 800f88c:	08011a6c 	.word	0x08011a6c

0800f890 <__multiply>:
 800f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f894:	4691      	mov	r9, r2
 800f896:	690a      	ldr	r2, [r1, #16]
 800f898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	bfb8      	it	lt
 800f8a0:	460b      	movlt	r3, r1
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	bfbc      	itt	lt
 800f8a6:	464c      	movlt	r4, r9
 800f8a8:	4699      	movlt	r9, r3
 800f8aa:	6927      	ldr	r7, [r4, #16]
 800f8ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f8b0:	68a3      	ldr	r3, [r4, #8]
 800f8b2:	6861      	ldr	r1, [r4, #4]
 800f8b4:	eb07 060a 	add.w	r6, r7, sl
 800f8b8:	42b3      	cmp	r3, r6
 800f8ba:	b085      	sub	sp, #20
 800f8bc:	bfb8      	it	lt
 800f8be:	3101      	addlt	r1, #1
 800f8c0:	f7ff fe8e 	bl	800f5e0 <_Balloc>
 800f8c4:	b930      	cbnz	r0, 800f8d4 <__multiply+0x44>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	4b44      	ldr	r3, [pc, #272]	; (800f9dc <__multiply+0x14c>)
 800f8ca:	4845      	ldr	r0, [pc, #276]	; (800f9e0 <__multiply+0x150>)
 800f8cc:	f240 115d 	movw	r1, #349	; 0x15d
 800f8d0:	f000 fdf6 	bl	80104c0 <__assert_func>
 800f8d4:	f100 0514 	add.w	r5, r0, #20
 800f8d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8dc:	462b      	mov	r3, r5
 800f8de:	2200      	movs	r2, #0
 800f8e0:	4543      	cmp	r3, r8
 800f8e2:	d321      	bcc.n	800f928 <__multiply+0x98>
 800f8e4:	f104 0314 	add.w	r3, r4, #20
 800f8e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8ec:	f109 0314 	add.w	r3, r9, #20
 800f8f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8f4:	9202      	str	r2, [sp, #8]
 800f8f6:	1b3a      	subs	r2, r7, r4
 800f8f8:	3a15      	subs	r2, #21
 800f8fa:	f022 0203 	bic.w	r2, r2, #3
 800f8fe:	3204      	adds	r2, #4
 800f900:	f104 0115 	add.w	r1, r4, #21
 800f904:	428f      	cmp	r7, r1
 800f906:	bf38      	it	cc
 800f908:	2204      	movcc	r2, #4
 800f90a:	9201      	str	r2, [sp, #4]
 800f90c:	9a02      	ldr	r2, [sp, #8]
 800f90e:	9303      	str	r3, [sp, #12]
 800f910:	429a      	cmp	r2, r3
 800f912:	d80c      	bhi.n	800f92e <__multiply+0x9e>
 800f914:	2e00      	cmp	r6, #0
 800f916:	dd03      	ble.n	800f920 <__multiply+0x90>
 800f918:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d05a      	beq.n	800f9d6 <__multiply+0x146>
 800f920:	6106      	str	r6, [r0, #16]
 800f922:	b005      	add	sp, #20
 800f924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f928:	f843 2b04 	str.w	r2, [r3], #4
 800f92c:	e7d8      	b.n	800f8e0 <__multiply+0x50>
 800f92e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f932:	f1ba 0f00 	cmp.w	sl, #0
 800f936:	d024      	beq.n	800f982 <__multiply+0xf2>
 800f938:	f104 0e14 	add.w	lr, r4, #20
 800f93c:	46a9      	mov	r9, r5
 800f93e:	f04f 0c00 	mov.w	ip, #0
 800f942:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f946:	f8d9 1000 	ldr.w	r1, [r9]
 800f94a:	fa1f fb82 	uxth.w	fp, r2
 800f94e:	b289      	uxth	r1, r1
 800f950:	fb0a 110b 	mla	r1, sl, fp, r1
 800f954:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f958:	f8d9 2000 	ldr.w	r2, [r9]
 800f95c:	4461      	add	r1, ip
 800f95e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f962:	fb0a c20b 	mla	r2, sl, fp, ip
 800f966:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f96a:	b289      	uxth	r1, r1
 800f96c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f970:	4577      	cmp	r7, lr
 800f972:	f849 1b04 	str.w	r1, [r9], #4
 800f976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f97a:	d8e2      	bhi.n	800f942 <__multiply+0xb2>
 800f97c:	9a01      	ldr	r2, [sp, #4]
 800f97e:	f845 c002 	str.w	ip, [r5, r2]
 800f982:	9a03      	ldr	r2, [sp, #12]
 800f984:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f988:	3304      	adds	r3, #4
 800f98a:	f1b9 0f00 	cmp.w	r9, #0
 800f98e:	d020      	beq.n	800f9d2 <__multiply+0x142>
 800f990:	6829      	ldr	r1, [r5, #0]
 800f992:	f104 0c14 	add.w	ip, r4, #20
 800f996:	46ae      	mov	lr, r5
 800f998:	f04f 0a00 	mov.w	sl, #0
 800f99c:	f8bc b000 	ldrh.w	fp, [ip]
 800f9a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f9a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f9a8:	4492      	add	sl, r2
 800f9aa:	b289      	uxth	r1, r1
 800f9ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f9b0:	f84e 1b04 	str.w	r1, [lr], #4
 800f9b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9b8:	f8be 1000 	ldrh.w	r1, [lr]
 800f9bc:	0c12      	lsrs	r2, r2, #16
 800f9be:	fb09 1102 	mla	r1, r9, r2, r1
 800f9c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f9c6:	4567      	cmp	r7, ip
 800f9c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9cc:	d8e6      	bhi.n	800f99c <__multiply+0x10c>
 800f9ce:	9a01      	ldr	r2, [sp, #4]
 800f9d0:	50a9      	str	r1, [r5, r2]
 800f9d2:	3504      	adds	r5, #4
 800f9d4:	e79a      	b.n	800f90c <__multiply+0x7c>
 800f9d6:	3e01      	subs	r6, #1
 800f9d8:	e79c      	b.n	800f914 <__multiply+0x84>
 800f9da:	bf00      	nop
 800f9dc:	080119df 	.word	0x080119df
 800f9e0:	08011a6c 	.word	0x08011a6c

0800f9e4 <__pow5mult>:
 800f9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e8:	4615      	mov	r5, r2
 800f9ea:	f012 0203 	ands.w	r2, r2, #3
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460f      	mov	r7, r1
 800f9f2:	d007      	beq.n	800fa04 <__pow5mult+0x20>
 800f9f4:	4c25      	ldr	r4, [pc, #148]	; (800fa8c <__pow5mult+0xa8>)
 800f9f6:	3a01      	subs	r2, #1
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9fe:	f7ff fe51 	bl	800f6a4 <__multadd>
 800fa02:	4607      	mov	r7, r0
 800fa04:	10ad      	asrs	r5, r5, #2
 800fa06:	d03d      	beq.n	800fa84 <__pow5mult+0xa0>
 800fa08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa0a:	b97c      	cbnz	r4, 800fa2c <__pow5mult+0x48>
 800fa0c:	2010      	movs	r0, #16
 800fa0e:	f7ff fdcd 	bl	800f5ac <malloc>
 800fa12:	4602      	mov	r2, r0
 800fa14:	6270      	str	r0, [r6, #36]	; 0x24
 800fa16:	b928      	cbnz	r0, 800fa24 <__pow5mult+0x40>
 800fa18:	4b1d      	ldr	r3, [pc, #116]	; (800fa90 <__pow5mult+0xac>)
 800fa1a:	481e      	ldr	r0, [pc, #120]	; (800fa94 <__pow5mult+0xb0>)
 800fa1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa20:	f000 fd4e 	bl	80104c0 <__assert_func>
 800fa24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa28:	6004      	str	r4, [r0, #0]
 800fa2a:	60c4      	str	r4, [r0, #12]
 800fa2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa34:	b94c      	cbnz	r4, 800fa4a <__pow5mult+0x66>
 800fa36:	f240 2171 	movw	r1, #625	; 0x271
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f7ff ff12 	bl	800f864 <__i2b>
 800fa40:	2300      	movs	r3, #0
 800fa42:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa46:	4604      	mov	r4, r0
 800fa48:	6003      	str	r3, [r0, #0]
 800fa4a:	f04f 0900 	mov.w	r9, #0
 800fa4e:	07eb      	lsls	r3, r5, #31
 800fa50:	d50a      	bpl.n	800fa68 <__pow5mult+0x84>
 800fa52:	4639      	mov	r1, r7
 800fa54:	4622      	mov	r2, r4
 800fa56:	4630      	mov	r0, r6
 800fa58:	f7ff ff1a 	bl	800f890 <__multiply>
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	4680      	mov	r8, r0
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7ff fdfd 	bl	800f660 <_Bfree>
 800fa66:	4647      	mov	r7, r8
 800fa68:	106d      	asrs	r5, r5, #1
 800fa6a:	d00b      	beq.n	800fa84 <__pow5mult+0xa0>
 800fa6c:	6820      	ldr	r0, [r4, #0]
 800fa6e:	b938      	cbnz	r0, 800fa80 <__pow5mult+0x9c>
 800fa70:	4622      	mov	r2, r4
 800fa72:	4621      	mov	r1, r4
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7ff ff0b 	bl	800f890 <__multiply>
 800fa7a:	6020      	str	r0, [r4, #0]
 800fa7c:	f8c0 9000 	str.w	r9, [r0]
 800fa80:	4604      	mov	r4, r0
 800fa82:	e7e4      	b.n	800fa4e <__pow5mult+0x6a>
 800fa84:	4638      	mov	r0, r7
 800fa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa8a:	bf00      	nop
 800fa8c:	08011bb8 	.word	0x08011bb8
 800fa90:	0801196d 	.word	0x0801196d
 800fa94:	08011a6c 	.word	0x08011a6c

0800fa98 <__lshift>:
 800fa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	6849      	ldr	r1, [r1, #4]
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800faa6:	68a3      	ldr	r3, [r4, #8]
 800faa8:	4607      	mov	r7, r0
 800faaa:	4691      	mov	r9, r2
 800faac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fab0:	f108 0601 	add.w	r6, r8, #1
 800fab4:	42b3      	cmp	r3, r6
 800fab6:	db0b      	blt.n	800fad0 <__lshift+0x38>
 800fab8:	4638      	mov	r0, r7
 800faba:	f7ff fd91 	bl	800f5e0 <_Balloc>
 800fabe:	4605      	mov	r5, r0
 800fac0:	b948      	cbnz	r0, 800fad6 <__lshift+0x3e>
 800fac2:	4602      	mov	r2, r0
 800fac4:	4b2a      	ldr	r3, [pc, #168]	; (800fb70 <__lshift+0xd8>)
 800fac6:	482b      	ldr	r0, [pc, #172]	; (800fb74 <__lshift+0xdc>)
 800fac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800facc:	f000 fcf8 	bl	80104c0 <__assert_func>
 800fad0:	3101      	adds	r1, #1
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	e7ee      	b.n	800fab4 <__lshift+0x1c>
 800fad6:	2300      	movs	r3, #0
 800fad8:	f100 0114 	add.w	r1, r0, #20
 800fadc:	f100 0210 	add.w	r2, r0, #16
 800fae0:	4618      	mov	r0, r3
 800fae2:	4553      	cmp	r3, sl
 800fae4:	db37      	blt.n	800fb56 <__lshift+0xbe>
 800fae6:	6920      	ldr	r0, [r4, #16]
 800fae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800faec:	f104 0314 	add.w	r3, r4, #20
 800faf0:	f019 091f 	ands.w	r9, r9, #31
 800faf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800faf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fafc:	d02f      	beq.n	800fb5e <__lshift+0xc6>
 800fafe:	f1c9 0e20 	rsb	lr, r9, #32
 800fb02:	468a      	mov	sl, r1
 800fb04:	f04f 0c00 	mov.w	ip, #0
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	fa02 f209 	lsl.w	r2, r2, r9
 800fb0e:	ea42 020c 	orr.w	r2, r2, ip
 800fb12:	f84a 2b04 	str.w	r2, [sl], #4
 800fb16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb1a:	4298      	cmp	r0, r3
 800fb1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fb20:	d8f2      	bhi.n	800fb08 <__lshift+0x70>
 800fb22:	1b03      	subs	r3, r0, r4
 800fb24:	3b15      	subs	r3, #21
 800fb26:	f023 0303 	bic.w	r3, r3, #3
 800fb2a:	3304      	adds	r3, #4
 800fb2c:	f104 0215 	add.w	r2, r4, #21
 800fb30:	4290      	cmp	r0, r2
 800fb32:	bf38      	it	cc
 800fb34:	2304      	movcc	r3, #4
 800fb36:	f841 c003 	str.w	ip, [r1, r3]
 800fb3a:	f1bc 0f00 	cmp.w	ip, #0
 800fb3e:	d001      	beq.n	800fb44 <__lshift+0xac>
 800fb40:	f108 0602 	add.w	r6, r8, #2
 800fb44:	3e01      	subs	r6, #1
 800fb46:	4638      	mov	r0, r7
 800fb48:	612e      	str	r6, [r5, #16]
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	f7ff fd88 	bl	800f660 <_Bfree>
 800fb50:	4628      	mov	r0, r5
 800fb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb56:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	e7c1      	b.n	800fae2 <__lshift+0x4a>
 800fb5e:	3904      	subs	r1, #4
 800fb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb64:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb68:	4298      	cmp	r0, r3
 800fb6a:	d8f9      	bhi.n	800fb60 <__lshift+0xc8>
 800fb6c:	e7ea      	b.n	800fb44 <__lshift+0xac>
 800fb6e:	bf00      	nop
 800fb70:	080119df 	.word	0x080119df
 800fb74:	08011a6c 	.word	0x08011a6c

0800fb78 <__mcmp>:
 800fb78:	b530      	push	{r4, r5, lr}
 800fb7a:	6902      	ldr	r2, [r0, #16]
 800fb7c:	690c      	ldr	r4, [r1, #16]
 800fb7e:	1b12      	subs	r2, r2, r4
 800fb80:	d10e      	bne.n	800fba0 <__mcmp+0x28>
 800fb82:	f100 0314 	add.w	r3, r0, #20
 800fb86:	3114      	adds	r1, #20
 800fb88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb98:	42a5      	cmp	r5, r4
 800fb9a:	d003      	beq.n	800fba4 <__mcmp+0x2c>
 800fb9c:	d305      	bcc.n	800fbaa <__mcmp+0x32>
 800fb9e:	2201      	movs	r2, #1
 800fba0:	4610      	mov	r0, r2
 800fba2:	bd30      	pop	{r4, r5, pc}
 800fba4:	4283      	cmp	r3, r0
 800fba6:	d3f3      	bcc.n	800fb90 <__mcmp+0x18>
 800fba8:	e7fa      	b.n	800fba0 <__mcmp+0x28>
 800fbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fbae:	e7f7      	b.n	800fba0 <__mcmp+0x28>

0800fbb0 <__mdiff>:
 800fbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	460c      	mov	r4, r1
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4690      	mov	r8, r2
 800fbbe:	f7ff ffdb 	bl	800fb78 <__mcmp>
 800fbc2:	1e05      	subs	r5, r0, #0
 800fbc4:	d110      	bne.n	800fbe8 <__mdiff+0x38>
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7ff fd09 	bl	800f5e0 <_Balloc>
 800fbce:	b930      	cbnz	r0, 800fbde <__mdiff+0x2e>
 800fbd0:	4b3a      	ldr	r3, [pc, #232]	; (800fcbc <__mdiff+0x10c>)
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	f240 2132 	movw	r1, #562	; 0x232
 800fbd8:	4839      	ldr	r0, [pc, #228]	; (800fcc0 <__mdiff+0x110>)
 800fbda:	f000 fc71 	bl	80104c0 <__assert_func>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe8:	bfa4      	itt	ge
 800fbea:	4643      	movge	r3, r8
 800fbec:	46a0      	movge	r8, r4
 800fbee:	4630      	mov	r0, r6
 800fbf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fbf4:	bfa6      	itte	ge
 800fbf6:	461c      	movge	r4, r3
 800fbf8:	2500      	movge	r5, #0
 800fbfa:	2501      	movlt	r5, #1
 800fbfc:	f7ff fcf0 	bl	800f5e0 <_Balloc>
 800fc00:	b920      	cbnz	r0, 800fc0c <__mdiff+0x5c>
 800fc02:	4b2e      	ldr	r3, [pc, #184]	; (800fcbc <__mdiff+0x10c>)
 800fc04:	4602      	mov	r2, r0
 800fc06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc0a:	e7e5      	b.n	800fbd8 <__mdiff+0x28>
 800fc0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc10:	6926      	ldr	r6, [r4, #16]
 800fc12:	60c5      	str	r5, [r0, #12]
 800fc14:	f104 0914 	add.w	r9, r4, #20
 800fc18:	f108 0514 	add.w	r5, r8, #20
 800fc1c:	f100 0e14 	add.w	lr, r0, #20
 800fc20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc28:	f108 0210 	add.w	r2, r8, #16
 800fc2c:	46f2      	mov	sl, lr
 800fc2e:	2100      	movs	r1, #0
 800fc30:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc38:	fa1f f883 	uxth.w	r8, r3
 800fc3c:	fa11 f18b 	uxtah	r1, r1, fp
 800fc40:	0c1b      	lsrs	r3, r3, #16
 800fc42:	eba1 0808 	sub.w	r8, r1, r8
 800fc46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc4e:	fa1f f888 	uxth.w	r8, r8
 800fc52:	1419      	asrs	r1, r3, #16
 800fc54:	454e      	cmp	r6, r9
 800fc56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc5a:	f84a 3b04 	str.w	r3, [sl], #4
 800fc5e:	d8e7      	bhi.n	800fc30 <__mdiff+0x80>
 800fc60:	1b33      	subs	r3, r6, r4
 800fc62:	3b15      	subs	r3, #21
 800fc64:	f023 0303 	bic.w	r3, r3, #3
 800fc68:	3304      	adds	r3, #4
 800fc6a:	3415      	adds	r4, #21
 800fc6c:	42a6      	cmp	r6, r4
 800fc6e:	bf38      	it	cc
 800fc70:	2304      	movcc	r3, #4
 800fc72:	441d      	add	r5, r3
 800fc74:	4473      	add	r3, lr
 800fc76:	469e      	mov	lr, r3
 800fc78:	462e      	mov	r6, r5
 800fc7a:	4566      	cmp	r6, ip
 800fc7c:	d30e      	bcc.n	800fc9c <__mdiff+0xec>
 800fc7e:	f10c 0203 	add.w	r2, ip, #3
 800fc82:	1b52      	subs	r2, r2, r5
 800fc84:	f022 0203 	bic.w	r2, r2, #3
 800fc88:	3d03      	subs	r5, #3
 800fc8a:	45ac      	cmp	ip, r5
 800fc8c:	bf38      	it	cc
 800fc8e:	2200      	movcc	r2, #0
 800fc90:	441a      	add	r2, r3
 800fc92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fc96:	b17b      	cbz	r3, 800fcb8 <__mdiff+0x108>
 800fc98:	6107      	str	r7, [r0, #16]
 800fc9a:	e7a3      	b.n	800fbe4 <__mdiff+0x34>
 800fc9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fca0:	fa11 f288 	uxtah	r2, r1, r8
 800fca4:	1414      	asrs	r4, r2, #16
 800fca6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fcaa:	b292      	uxth	r2, r2
 800fcac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fcb0:	f84e 2b04 	str.w	r2, [lr], #4
 800fcb4:	1421      	asrs	r1, r4, #16
 800fcb6:	e7e0      	b.n	800fc7a <__mdiff+0xca>
 800fcb8:	3f01      	subs	r7, #1
 800fcba:	e7ea      	b.n	800fc92 <__mdiff+0xe2>
 800fcbc:	080119df 	.word	0x080119df
 800fcc0:	08011a6c 	.word	0x08011a6c

0800fcc4 <__ulp>:
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	ed8d 0b00 	vstr	d0, [sp]
 800fcca:	9b01      	ldr	r3, [sp, #4]
 800fccc:	4912      	ldr	r1, [pc, #72]	; (800fd18 <__ulp+0x54>)
 800fcce:	4019      	ands	r1, r3
 800fcd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	dd05      	ble.n	800fce4 <__ulp+0x20>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	ec43 2b10 	vmov	d0, r2, r3
 800fce0:	b002      	add	sp, #8
 800fce2:	4770      	bx	lr
 800fce4:	4249      	negs	r1, r1
 800fce6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fcea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fcee:	f04f 0200 	mov.w	r2, #0
 800fcf2:	f04f 0300 	mov.w	r3, #0
 800fcf6:	da04      	bge.n	800fd02 <__ulp+0x3e>
 800fcf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fcfc:	fa41 f300 	asr.w	r3, r1, r0
 800fd00:	e7ec      	b.n	800fcdc <__ulp+0x18>
 800fd02:	f1a0 0114 	sub.w	r1, r0, #20
 800fd06:	291e      	cmp	r1, #30
 800fd08:	bfda      	itte	le
 800fd0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd12:	2101      	movgt	r1, #1
 800fd14:	460a      	mov	r2, r1
 800fd16:	e7e1      	b.n	800fcdc <__ulp+0x18>
 800fd18:	7ff00000 	.word	0x7ff00000

0800fd1c <__b2d>:
 800fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd1e:	6905      	ldr	r5, [r0, #16]
 800fd20:	f100 0714 	add.w	r7, r0, #20
 800fd24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd28:	1f2e      	subs	r6, r5, #4
 800fd2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f7ff fd48 	bl	800f7c4 <__hi0bits>
 800fd34:	f1c0 0320 	rsb	r3, r0, #32
 800fd38:	280a      	cmp	r0, #10
 800fd3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fdb8 <__b2d+0x9c>
 800fd3e:	600b      	str	r3, [r1, #0]
 800fd40:	dc14      	bgt.n	800fd6c <__b2d+0x50>
 800fd42:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd46:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd4a:	42b7      	cmp	r7, r6
 800fd4c:	ea41 030c 	orr.w	r3, r1, ip
 800fd50:	bf34      	ite	cc
 800fd52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd56:	2100      	movcs	r1, #0
 800fd58:	3015      	adds	r0, #21
 800fd5a:	fa04 f000 	lsl.w	r0, r4, r0
 800fd5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd62:	ea40 0201 	orr.w	r2, r0, r1
 800fd66:	ec43 2b10 	vmov	d0, r2, r3
 800fd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd6c:	42b7      	cmp	r7, r6
 800fd6e:	bf3a      	itte	cc
 800fd70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd74:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd78:	2100      	movcs	r1, #0
 800fd7a:	380b      	subs	r0, #11
 800fd7c:	d017      	beq.n	800fdae <__b2d+0x92>
 800fd7e:	f1c0 0c20 	rsb	ip, r0, #32
 800fd82:	fa04 f500 	lsl.w	r5, r4, r0
 800fd86:	42be      	cmp	r6, r7
 800fd88:	fa21 f40c 	lsr.w	r4, r1, ip
 800fd8c:	ea45 0504 	orr.w	r5, r5, r4
 800fd90:	bf8c      	ite	hi
 800fd92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fd96:	2400      	movls	r4, #0
 800fd98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fd9c:	fa01 f000 	lsl.w	r0, r1, r0
 800fda0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fda4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fda8:	ea40 0204 	orr.w	r2, r0, r4
 800fdac:	e7db      	b.n	800fd66 <__b2d+0x4a>
 800fdae:	ea44 030c 	orr.w	r3, r4, ip
 800fdb2:	460a      	mov	r2, r1
 800fdb4:	e7d7      	b.n	800fd66 <__b2d+0x4a>
 800fdb6:	bf00      	nop
 800fdb8:	3ff00000 	.word	0x3ff00000

0800fdbc <__d2b>:
 800fdbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdc0:	4689      	mov	r9, r1
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	ec57 6b10 	vmov	r6, r7, d0
 800fdc8:	4690      	mov	r8, r2
 800fdca:	f7ff fc09 	bl	800f5e0 <_Balloc>
 800fdce:	4604      	mov	r4, r0
 800fdd0:	b930      	cbnz	r0, 800fde0 <__d2b+0x24>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	4b25      	ldr	r3, [pc, #148]	; (800fe6c <__d2b+0xb0>)
 800fdd6:	4826      	ldr	r0, [pc, #152]	; (800fe70 <__d2b+0xb4>)
 800fdd8:	f240 310a 	movw	r1, #778	; 0x30a
 800fddc:	f000 fb70 	bl	80104c0 <__assert_func>
 800fde0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fde4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fde8:	bb35      	cbnz	r5, 800fe38 <__d2b+0x7c>
 800fdea:	2e00      	cmp	r6, #0
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	d028      	beq.n	800fe42 <__d2b+0x86>
 800fdf0:	4668      	mov	r0, sp
 800fdf2:	9600      	str	r6, [sp, #0]
 800fdf4:	f7ff fd06 	bl	800f804 <__lo0bits>
 800fdf8:	9900      	ldr	r1, [sp, #0]
 800fdfa:	b300      	cbz	r0, 800fe3e <__d2b+0x82>
 800fdfc:	9a01      	ldr	r2, [sp, #4]
 800fdfe:	f1c0 0320 	rsb	r3, r0, #32
 800fe02:	fa02 f303 	lsl.w	r3, r2, r3
 800fe06:	430b      	orrs	r3, r1
 800fe08:	40c2      	lsrs	r2, r0
 800fe0a:	6163      	str	r3, [r4, #20]
 800fe0c:	9201      	str	r2, [sp, #4]
 800fe0e:	9b01      	ldr	r3, [sp, #4]
 800fe10:	61a3      	str	r3, [r4, #24]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	bf14      	ite	ne
 800fe16:	2202      	movne	r2, #2
 800fe18:	2201      	moveq	r2, #1
 800fe1a:	6122      	str	r2, [r4, #16]
 800fe1c:	b1d5      	cbz	r5, 800fe54 <__d2b+0x98>
 800fe1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe22:	4405      	add	r5, r0
 800fe24:	f8c9 5000 	str.w	r5, [r9]
 800fe28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe2c:	f8c8 0000 	str.w	r0, [r8]
 800fe30:	4620      	mov	r0, r4
 800fe32:	b003      	add	sp, #12
 800fe34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe3c:	e7d5      	b.n	800fdea <__d2b+0x2e>
 800fe3e:	6161      	str	r1, [r4, #20]
 800fe40:	e7e5      	b.n	800fe0e <__d2b+0x52>
 800fe42:	a801      	add	r0, sp, #4
 800fe44:	f7ff fcde 	bl	800f804 <__lo0bits>
 800fe48:	9b01      	ldr	r3, [sp, #4]
 800fe4a:	6163      	str	r3, [r4, #20]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	6122      	str	r2, [r4, #16]
 800fe50:	3020      	adds	r0, #32
 800fe52:	e7e3      	b.n	800fe1c <__d2b+0x60>
 800fe54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe5c:	f8c9 0000 	str.w	r0, [r9]
 800fe60:	6918      	ldr	r0, [r3, #16]
 800fe62:	f7ff fcaf 	bl	800f7c4 <__hi0bits>
 800fe66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe6a:	e7df      	b.n	800fe2c <__d2b+0x70>
 800fe6c:	080119df 	.word	0x080119df
 800fe70:	08011a6c 	.word	0x08011a6c

0800fe74 <__ratio>:
 800fe74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe78:	4688      	mov	r8, r1
 800fe7a:	4669      	mov	r1, sp
 800fe7c:	4681      	mov	r9, r0
 800fe7e:	f7ff ff4d 	bl	800fd1c <__b2d>
 800fe82:	a901      	add	r1, sp, #4
 800fe84:	4640      	mov	r0, r8
 800fe86:	ec55 4b10 	vmov	r4, r5, d0
 800fe8a:	f7ff ff47 	bl	800fd1c <__b2d>
 800fe8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe96:	eba3 0c02 	sub.w	ip, r3, r2
 800fe9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe9e:	1a9b      	subs	r3, r3, r2
 800fea0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fea4:	ec51 0b10 	vmov	r0, r1, d0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	bfd6      	itet	le
 800feac:	460a      	movle	r2, r1
 800feae:	462a      	movgt	r2, r5
 800feb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800feb4:	468b      	mov	fp, r1
 800feb6:	462f      	mov	r7, r5
 800feb8:	bfd4      	ite	le
 800feba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800febe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fec2:	4620      	mov	r0, r4
 800fec4:	ee10 2a10 	vmov	r2, s0
 800fec8:	465b      	mov	r3, fp
 800feca:	4639      	mov	r1, r7
 800fecc:	f7f0 fcbe 	bl	800084c <__aeabi_ddiv>
 800fed0:	ec41 0b10 	vmov	d0, r0, r1
 800fed4:	b003      	add	sp, #12
 800fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800feda <__copybits>:
 800feda:	3901      	subs	r1, #1
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	1149      	asrs	r1, r1, #5
 800fee0:	6914      	ldr	r4, [r2, #16]
 800fee2:	3101      	adds	r1, #1
 800fee4:	f102 0314 	add.w	r3, r2, #20
 800fee8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800feec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fef0:	1f05      	subs	r5, r0, #4
 800fef2:	42a3      	cmp	r3, r4
 800fef4:	d30c      	bcc.n	800ff10 <__copybits+0x36>
 800fef6:	1aa3      	subs	r3, r4, r2
 800fef8:	3b11      	subs	r3, #17
 800fefa:	f023 0303 	bic.w	r3, r3, #3
 800fefe:	3211      	adds	r2, #17
 800ff00:	42a2      	cmp	r2, r4
 800ff02:	bf88      	it	hi
 800ff04:	2300      	movhi	r3, #0
 800ff06:	4418      	add	r0, r3
 800ff08:	2300      	movs	r3, #0
 800ff0a:	4288      	cmp	r0, r1
 800ff0c:	d305      	bcc.n	800ff1a <__copybits+0x40>
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff14:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff18:	e7eb      	b.n	800fef2 <__copybits+0x18>
 800ff1a:	f840 3b04 	str.w	r3, [r0], #4
 800ff1e:	e7f4      	b.n	800ff0a <__copybits+0x30>

0800ff20 <__any_on>:
 800ff20:	f100 0214 	add.w	r2, r0, #20
 800ff24:	6900      	ldr	r0, [r0, #16]
 800ff26:	114b      	asrs	r3, r1, #5
 800ff28:	4298      	cmp	r0, r3
 800ff2a:	b510      	push	{r4, lr}
 800ff2c:	db11      	blt.n	800ff52 <__any_on+0x32>
 800ff2e:	dd0a      	ble.n	800ff46 <__any_on+0x26>
 800ff30:	f011 011f 	ands.w	r1, r1, #31
 800ff34:	d007      	beq.n	800ff46 <__any_on+0x26>
 800ff36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff3a:	fa24 f001 	lsr.w	r0, r4, r1
 800ff3e:	fa00 f101 	lsl.w	r1, r0, r1
 800ff42:	428c      	cmp	r4, r1
 800ff44:	d10b      	bne.n	800ff5e <__any_on+0x3e>
 800ff46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d803      	bhi.n	800ff56 <__any_on+0x36>
 800ff4e:	2000      	movs	r0, #0
 800ff50:	bd10      	pop	{r4, pc}
 800ff52:	4603      	mov	r3, r0
 800ff54:	e7f7      	b.n	800ff46 <__any_on+0x26>
 800ff56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff5a:	2900      	cmp	r1, #0
 800ff5c:	d0f5      	beq.n	800ff4a <__any_on+0x2a>
 800ff5e:	2001      	movs	r0, #1
 800ff60:	e7f6      	b.n	800ff50 <__any_on+0x30>

0800ff62 <_calloc_r>:
 800ff62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff64:	fba1 2402 	umull	r2, r4, r1, r2
 800ff68:	b94c      	cbnz	r4, 800ff7e <_calloc_r+0x1c>
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	9201      	str	r2, [sp, #4]
 800ff6e:	f000 f87b 	bl	8010068 <_malloc_r>
 800ff72:	9a01      	ldr	r2, [sp, #4]
 800ff74:	4605      	mov	r5, r0
 800ff76:	b930      	cbnz	r0, 800ff86 <_calloc_r+0x24>
 800ff78:	4628      	mov	r0, r5
 800ff7a:	b003      	add	sp, #12
 800ff7c:	bd30      	pop	{r4, r5, pc}
 800ff7e:	220c      	movs	r2, #12
 800ff80:	6002      	str	r2, [r0, #0]
 800ff82:	2500      	movs	r5, #0
 800ff84:	e7f8      	b.n	800ff78 <_calloc_r+0x16>
 800ff86:	4621      	mov	r1, r4
 800ff88:	f7fc fd64 	bl	800ca54 <memset>
 800ff8c:	e7f4      	b.n	800ff78 <_calloc_r+0x16>
	...

0800ff90 <_free_r>:
 800ff90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff92:	2900      	cmp	r1, #0
 800ff94:	d044      	beq.n	8010020 <_free_r+0x90>
 800ff96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff9a:	9001      	str	r0, [sp, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f1a1 0404 	sub.w	r4, r1, #4
 800ffa2:	bfb8      	it	lt
 800ffa4:	18e4      	addlt	r4, r4, r3
 800ffa6:	f000 fad5 	bl	8010554 <__malloc_lock>
 800ffaa:	4a1e      	ldr	r2, [pc, #120]	; (8010024 <_free_r+0x94>)
 800ffac:	9801      	ldr	r0, [sp, #4]
 800ffae:	6813      	ldr	r3, [r2, #0]
 800ffb0:	b933      	cbnz	r3, 800ffc0 <_free_r+0x30>
 800ffb2:	6063      	str	r3, [r4, #4]
 800ffb4:	6014      	str	r4, [r2, #0]
 800ffb6:	b003      	add	sp, #12
 800ffb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffbc:	f000 bad0 	b.w	8010560 <__malloc_unlock>
 800ffc0:	42a3      	cmp	r3, r4
 800ffc2:	d908      	bls.n	800ffd6 <_free_r+0x46>
 800ffc4:	6825      	ldr	r5, [r4, #0]
 800ffc6:	1961      	adds	r1, r4, r5
 800ffc8:	428b      	cmp	r3, r1
 800ffca:	bf01      	itttt	eq
 800ffcc:	6819      	ldreq	r1, [r3, #0]
 800ffce:	685b      	ldreq	r3, [r3, #4]
 800ffd0:	1949      	addeq	r1, r1, r5
 800ffd2:	6021      	streq	r1, [r4, #0]
 800ffd4:	e7ed      	b.n	800ffb2 <_free_r+0x22>
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	b10b      	cbz	r3, 800ffe0 <_free_r+0x50>
 800ffdc:	42a3      	cmp	r3, r4
 800ffde:	d9fa      	bls.n	800ffd6 <_free_r+0x46>
 800ffe0:	6811      	ldr	r1, [r2, #0]
 800ffe2:	1855      	adds	r5, r2, r1
 800ffe4:	42a5      	cmp	r5, r4
 800ffe6:	d10b      	bne.n	8010000 <_free_r+0x70>
 800ffe8:	6824      	ldr	r4, [r4, #0]
 800ffea:	4421      	add	r1, r4
 800ffec:	1854      	adds	r4, r2, r1
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	6011      	str	r1, [r2, #0]
 800fff2:	d1e0      	bne.n	800ffb6 <_free_r+0x26>
 800fff4:	681c      	ldr	r4, [r3, #0]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	6053      	str	r3, [r2, #4]
 800fffa:	4421      	add	r1, r4
 800fffc:	6011      	str	r1, [r2, #0]
 800fffe:	e7da      	b.n	800ffb6 <_free_r+0x26>
 8010000:	d902      	bls.n	8010008 <_free_r+0x78>
 8010002:	230c      	movs	r3, #12
 8010004:	6003      	str	r3, [r0, #0]
 8010006:	e7d6      	b.n	800ffb6 <_free_r+0x26>
 8010008:	6825      	ldr	r5, [r4, #0]
 801000a:	1961      	adds	r1, r4, r5
 801000c:	428b      	cmp	r3, r1
 801000e:	bf04      	itt	eq
 8010010:	6819      	ldreq	r1, [r3, #0]
 8010012:	685b      	ldreq	r3, [r3, #4]
 8010014:	6063      	str	r3, [r4, #4]
 8010016:	bf04      	itt	eq
 8010018:	1949      	addeq	r1, r1, r5
 801001a:	6021      	streq	r1, [r4, #0]
 801001c:	6054      	str	r4, [r2, #4]
 801001e:	e7ca      	b.n	800ffb6 <_free_r+0x26>
 8010020:	b003      	add	sp, #12
 8010022:	bd30      	pop	{r4, r5, pc}
 8010024:	2000160c 	.word	0x2000160c

08010028 <sbrk_aligned>:
 8010028:	b570      	push	{r4, r5, r6, lr}
 801002a:	4e0e      	ldr	r6, [pc, #56]	; (8010064 <sbrk_aligned+0x3c>)
 801002c:	460c      	mov	r4, r1
 801002e:	6831      	ldr	r1, [r6, #0]
 8010030:	4605      	mov	r5, r0
 8010032:	b911      	cbnz	r1, 801003a <sbrk_aligned+0x12>
 8010034:	f000 fa20 	bl	8010478 <_sbrk_r>
 8010038:	6030      	str	r0, [r6, #0]
 801003a:	4621      	mov	r1, r4
 801003c:	4628      	mov	r0, r5
 801003e:	f000 fa1b 	bl	8010478 <_sbrk_r>
 8010042:	1c43      	adds	r3, r0, #1
 8010044:	d00a      	beq.n	801005c <sbrk_aligned+0x34>
 8010046:	1cc4      	adds	r4, r0, #3
 8010048:	f024 0403 	bic.w	r4, r4, #3
 801004c:	42a0      	cmp	r0, r4
 801004e:	d007      	beq.n	8010060 <sbrk_aligned+0x38>
 8010050:	1a21      	subs	r1, r4, r0
 8010052:	4628      	mov	r0, r5
 8010054:	f000 fa10 	bl	8010478 <_sbrk_r>
 8010058:	3001      	adds	r0, #1
 801005a:	d101      	bne.n	8010060 <sbrk_aligned+0x38>
 801005c:	f04f 34ff 	mov.w	r4, #4294967295
 8010060:	4620      	mov	r0, r4
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	20001610 	.word	0x20001610

08010068 <_malloc_r>:
 8010068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006c:	1ccd      	adds	r5, r1, #3
 801006e:	f025 0503 	bic.w	r5, r5, #3
 8010072:	3508      	adds	r5, #8
 8010074:	2d0c      	cmp	r5, #12
 8010076:	bf38      	it	cc
 8010078:	250c      	movcc	r5, #12
 801007a:	2d00      	cmp	r5, #0
 801007c:	4607      	mov	r7, r0
 801007e:	db01      	blt.n	8010084 <_malloc_r+0x1c>
 8010080:	42a9      	cmp	r1, r5
 8010082:	d905      	bls.n	8010090 <_malloc_r+0x28>
 8010084:	230c      	movs	r3, #12
 8010086:	603b      	str	r3, [r7, #0]
 8010088:	2600      	movs	r6, #0
 801008a:	4630      	mov	r0, r6
 801008c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010090:	4e2e      	ldr	r6, [pc, #184]	; (801014c <_malloc_r+0xe4>)
 8010092:	f000 fa5f 	bl	8010554 <__malloc_lock>
 8010096:	6833      	ldr	r3, [r6, #0]
 8010098:	461c      	mov	r4, r3
 801009a:	bb34      	cbnz	r4, 80100ea <_malloc_r+0x82>
 801009c:	4629      	mov	r1, r5
 801009e:	4638      	mov	r0, r7
 80100a0:	f7ff ffc2 	bl	8010028 <sbrk_aligned>
 80100a4:	1c43      	adds	r3, r0, #1
 80100a6:	4604      	mov	r4, r0
 80100a8:	d14d      	bne.n	8010146 <_malloc_r+0xde>
 80100aa:	6834      	ldr	r4, [r6, #0]
 80100ac:	4626      	mov	r6, r4
 80100ae:	2e00      	cmp	r6, #0
 80100b0:	d140      	bne.n	8010134 <_malloc_r+0xcc>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	4631      	mov	r1, r6
 80100b6:	4638      	mov	r0, r7
 80100b8:	eb04 0803 	add.w	r8, r4, r3
 80100bc:	f000 f9dc 	bl	8010478 <_sbrk_r>
 80100c0:	4580      	cmp	r8, r0
 80100c2:	d13a      	bne.n	801013a <_malloc_r+0xd2>
 80100c4:	6821      	ldr	r1, [r4, #0]
 80100c6:	3503      	adds	r5, #3
 80100c8:	1a6d      	subs	r5, r5, r1
 80100ca:	f025 0503 	bic.w	r5, r5, #3
 80100ce:	3508      	adds	r5, #8
 80100d0:	2d0c      	cmp	r5, #12
 80100d2:	bf38      	it	cc
 80100d4:	250c      	movcc	r5, #12
 80100d6:	4629      	mov	r1, r5
 80100d8:	4638      	mov	r0, r7
 80100da:	f7ff ffa5 	bl	8010028 <sbrk_aligned>
 80100de:	3001      	adds	r0, #1
 80100e0:	d02b      	beq.n	801013a <_malloc_r+0xd2>
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	442b      	add	r3, r5
 80100e6:	6023      	str	r3, [r4, #0]
 80100e8:	e00e      	b.n	8010108 <_malloc_r+0xa0>
 80100ea:	6822      	ldr	r2, [r4, #0]
 80100ec:	1b52      	subs	r2, r2, r5
 80100ee:	d41e      	bmi.n	801012e <_malloc_r+0xc6>
 80100f0:	2a0b      	cmp	r2, #11
 80100f2:	d916      	bls.n	8010122 <_malloc_r+0xba>
 80100f4:	1961      	adds	r1, r4, r5
 80100f6:	42a3      	cmp	r3, r4
 80100f8:	6025      	str	r5, [r4, #0]
 80100fa:	bf18      	it	ne
 80100fc:	6059      	strne	r1, [r3, #4]
 80100fe:	6863      	ldr	r3, [r4, #4]
 8010100:	bf08      	it	eq
 8010102:	6031      	streq	r1, [r6, #0]
 8010104:	5162      	str	r2, [r4, r5]
 8010106:	604b      	str	r3, [r1, #4]
 8010108:	4638      	mov	r0, r7
 801010a:	f104 060b 	add.w	r6, r4, #11
 801010e:	f000 fa27 	bl	8010560 <__malloc_unlock>
 8010112:	f026 0607 	bic.w	r6, r6, #7
 8010116:	1d23      	adds	r3, r4, #4
 8010118:	1af2      	subs	r2, r6, r3
 801011a:	d0b6      	beq.n	801008a <_malloc_r+0x22>
 801011c:	1b9b      	subs	r3, r3, r6
 801011e:	50a3      	str	r3, [r4, r2]
 8010120:	e7b3      	b.n	801008a <_malloc_r+0x22>
 8010122:	6862      	ldr	r2, [r4, #4]
 8010124:	42a3      	cmp	r3, r4
 8010126:	bf0c      	ite	eq
 8010128:	6032      	streq	r2, [r6, #0]
 801012a:	605a      	strne	r2, [r3, #4]
 801012c:	e7ec      	b.n	8010108 <_malloc_r+0xa0>
 801012e:	4623      	mov	r3, r4
 8010130:	6864      	ldr	r4, [r4, #4]
 8010132:	e7b2      	b.n	801009a <_malloc_r+0x32>
 8010134:	4634      	mov	r4, r6
 8010136:	6876      	ldr	r6, [r6, #4]
 8010138:	e7b9      	b.n	80100ae <_malloc_r+0x46>
 801013a:	230c      	movs	r3, #12
 801013c:	603b      	str	r3, [r7, #0]
 801013e:	4638      	mov	r0, r7
 8010140:	f000 fa0e 	bl	8010560 <__malloc_unlock>
 8010144:	e7a1      	b.n	801008a <_malloc_r+0x22>
 8010146:	6025      	str	r5, [r4, #0]
 8010148:	e7de      	b.n	8010108 <_malloc_r+0xa0>
 801014a:	bf00      	nop
 801014c:	2000160c 	.word	0x2000160c

08010150 <_realloc_r>:
 8010150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010154:	4680      	mov	r8, r0
 8010156:	4614      	mov	r4, r2
 8010158:	460e      	mov	r6, r1
 801015a:	b921      	cbnz	r1, 8010166 <_realloc_r+0x16>
 801015c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010160:	4611      	mov	r1, r2
 8010162:	f7ff bf81 	b.w	8010068 <_malloc_r>
 8010166:	b92a      	cbnz	r2, 8010174 <_realloc_r+0x24>
 8010168:	f7ff ff12 	bl	800ff90 <_free_r>
 801016c:	4625      	mov	r5, r4
 801016e:	4628      	mov	r0, r5
 8010170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010174:	f000 f9fa 	bl	801056c <_malloc_usable_size_r>
 8010178:	4284      	cmp	r4, r0
 801017a:	4607      	mov	r7, r0
 801017c:	d802      	bhi.n	8010184 <_realloc_r+0x34>
 801017e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010182:	d812      	bhi.n	80101aa <_realloc_r+0x5a>
 8010184:	4621      	mov	r1, r4
 8010186:	4640      	mov	r0, r8
 8010188:	f7ff ff6e 	bl	8010068 <_malloc_r>
 801018c:	4605      	mov	r5, r0
 801018e:	2800      	cmp	r0, #0
 8010190:	d0ed      	beq.n	801016e <_realloc_r+0x1e>
 8010192:	42bc      	cmp	r4, r7
 8010194:	4622      	mov	r2, r4
 8010196:	4631      	mov	r1, r6
 8010198:	bf28      	it	cs
 801019a:	463a      	movcs	r2, r7
 801019c:	f7fc fc4c 	bl	800ca38 <memcpy>
 80101a0:	4631      	mov	r1, r6
 80101a2:	4640      	mov	r0, r8
 80101a4:	f7ff fef4 	bl	800ff90 <_free_r>
 80101a8:	e7e1      	b.n	801016e <_realloc_r+0x1e>
 80101aa:	4635      	mov	r5, r6
 80101ac:	e7df      	b.n	801016e <_realloc_r+0x1e>

080101ae <__ssputs_r>:
 80101ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b2:	688e      	ldr	r6, [r1, #8]
 80101b4:	429e      	cmp	r6, r3
 80101b6:	4682      	mov	sl, r0
 80101b8:	460c      	mov	r4, r1
 80101ba:	4690      	mov	r8, r2
 80101bc:	461f      	mov	r7, r3
 80101be:	d838      	bhi.n	8010232 <__ssputs_r+0x84>
 80101c0:	898a      	ldrh	r2, [r1, #12]
 80101c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101c6:	d032      	beq.n	801022e <__ssputs_r+0x80>
 80101c8:	6825      	ldr	r5, [r4, #0]
 80101ca:	6909      	ldr	r1, [r1, #16]
 80101cc:	eba5 0901 	sub.w	r9, r5, r1
 80101d0:	6965      	ldr	r5, [r4, #20]
 80101d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101da:	3301      	adds	r3, #1
 80101dc:	444b      	add	r3, r9
 80101de:	106d      	asrs	r5, r5, #1
 80101e0:	429d      	cmp	r5, r3
 80101e2:	bf38      	it	cc
 80101e4:	461d      	movcc	r5, r3
 80101e6:	0553      	lsls	r3, r2, #21
 80101e8:	d531      	bpl.n	801024e <__ssputs_r+0xa0>
 80101ea:	4629      	mov	r1, r5
 80101ec:	f7ff ff3c 	bl	8010068 <_malloc_r>
 80101f0:	4606      	mov	r6, r0
 80101f2:	b950      	cbnz	r0, 801020a <__ssputs_r+0x5c>
 80101f4:	230c      	movs	r3, #12
 80101f6:	f8ca 3000 	str.w	r3, [sl]
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	f04f 30ff 	mov.w	r0, #4294967295
 8010206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020a:	6921      	ldr	r1, [r4, #16]
 801020c:	464a      	mov	r2, r9
 801020e:	f7fc fc13 	bl	800ca38 <memcpy>
 8010212:	89a3      	ldrh	r3, [r4, #12]
 8010214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801021c:	81a3      	strh	r3, [r4, #12]
 801021e:	6126      	str	r6, [r4, #16]
 8010220:	6165      	str	r5, [r4, #20]
 8010222:	444e      	add	r6, r9
 8010224:	eba5 0509 	sub.w	r5, r5, r9
 8010228:	6026      	str	r6, [r4, #0]
 801022a:	60a5      	str	r5, [r4, #8]
 801022c:	463e      	mov	r6, r7
 801022e:	42be      	cmp	r6, r7
 8010230:	d900      	bls.n	8010234 <__ssputs_r+0x86>
 8010232:	463e      	mov	r6, r7
 8010234:	6820      	ldr	r0, [r4, #0]
 8010236:	4632      	mov	r2, r6
 8010238:	4641      	mov	r1, r8
 801023a:	f000 f971 	bl	8010520 <memmove>
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	1b9b      	subs	r3, r3, r6
 8010242:	60a3      	str	r3, [r4, #8]
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	4433      	add	r3, r6
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	2000      	movs	r0, #0
 801024c:	e7db      	b.n	8010206 <__ssputs_r+0x58>
 801024e:	462a      	mov	r2, r5
 8010250:	f7ff ff7e 	bl	8010150 <_realloc_r>
 8010254:	4606      	mov	r6, r0
 8010256:	2800      	cmp	r0, #0
 8010258:	d1e1      	bne.n	801021e <__ssputs_r+0x70>
 801025a:	6921      	ldr	r1, [r4, #16]
 801025c:	4650      	mov	r0, sl
 801025e:	f7ff fe97 	bl	800ff90 <_free_r>
 8010262:	e7c7      	b.n	80101f4 <__ssputs_r+0x46>

08010264 <_svfiprintf_r>:
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	4698      	mov	r8, r3
 801026a:	898b      	ldrh	r3, [r1, #12]
 801026c:	061b      	lsls	r3, r3, #24
 801026e:	b09d      	sub	sp, #116	; 0x74
 8010270:	4607      	mov	r7, r0
 8010272:	460d      	mov	r5, r1
 8010274:	4614      	mov	r4, r2
 8010276:	d50e      	bpl.n	8010296 <_svfiprintf_r+0x32>
 8010278:	690b      	ldr	r3, [r1, #16]
 801027a:	b963      	cbnz	r3, 8010296 <_svfiprintf_r+0x32>
 801027c:	2140      	movs	r1, #64	; 0x40
 801027e:	f7ff fef3 	bl	8010068 <_malloc_r>
 8010282:	6028      	str	r0, [r5, #0]
 8010284:	6128      	str	r0, [r5, #16]
 8010286:	b920      	cbnz	r0, 8010292 <_svfiprintf_r+0x2e>
 8010288:	230c      	movs	r3, #12
 801028a:	603b      	str	r3, [r7, #0]
 801028c:	f04f 30ff 	mov.w	r0, #4294967295
 8010290:	e0d1      	b.n	8010436 <_svfiprintf_r+0x1d2>
 8010292:	2340      	movs	r3, #64	; 0x40
 8010294:	616b      	str	r3, [r5, #20]
 8010296:	2300      	movs	r3, #0
 8010298:	9309      	str	r3, [sp, #36]	; 0x24
 801029a:	2320      	movs	r3, #32
 801029c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80102a4:	2330      	movs	r3, #48	; 0x30
 80102a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010450 <_svfiprintf_r+0x1ec>
 80102aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102ae:	f04f 0901 	mov.w	r9, #1
 80102b2:	4623      	mov	r3, r4
 80102b4:	469a      	mov	sl, r3
 80102b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ba:	b10a      	cbz	r2, 80102c0 <_svfiprintf_r+0x5c>
 80102bc:	2a25      	cmp	r2, #37	; 0x25
 80102be:	d1f9      	bne.n	80102b4 <_svfiprintf_r+0x50>
 80102c0:	ebba 0b04 	subs.w	fp, sl, r4
 80102c4:	d00b      	beq.n	80102de <_svfiprintf_r+0x7a>
 80102c6:	465b      	mov	r3, fp
 80102c8:	4622      	mov	r2, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	4638      	mov	r0, r7
 80102ce:	f7ff ff6e 	bl	80101ae <__ssputs_r>
 80102d2:	3001      	adds	r0, #1
 80102d4:	f000 80aa 	beq.w	801042c <_svfiprintf_r+0x1c8>
 80102d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102da:	445a      	add	r2, fp
 80102dc:	9209      	str	r2, [sp, #36]	; 0x24
 80102de:	f89a 3000 	ldrb.w	r3, [sl]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 80a2 	beq.w	801042c <_svfiprintf_r+0x1c8>
 80102e8:	2300      	movs	r3, #0
 80102ea:	f04f 32ff 	mov.w	r2, #4294967295
 80102ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102f2:	f10a 0a01 	add.w	sl, sl, #1
 80102f6:	9304      	str	r3, [sp, #16]
 80102f8:	9307      	str	r3, [sp, #28]
 80102fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102fe:	931a      	str	r3, [sp, #104]	; 0x68
 8010300:	4654      	mov	r4, sl
 8010302:	2205      	movs	r2, #5
 8010304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010308:	4851      	ldr	r0, [pc, #324]	; (8010450 <_svfiprintf_r+0x1ec>)
 801030a:	f7ef ff69 	bl	80001e0 <memchr>
 801030e:	9a04      	ldr	r2, [sp, #16]
 8010310:	b9d8      	cbnz	r0, 801034a <_svfiprintf_r+0xe6>
 8010312:	06d0      	lsls	r0, r2, #27
 8010314:	bf44      	itt	mi
 8010316:	2320      	movmi	r3, #32
 8010318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801031c:	0711      	lsls	r1, r2, #28
 801031e:	bf44      	itt	mi
 8010320:	232b      	movmi	r3, #43	; 0x2b
 8010322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010326:	f89a 3000 	ldrb.w	r3, [sl]
 801032a:	2b2a      	cmp	r3, #42	; 0x2a
 801032c:	d015      	beq.n	801035a <_svfiprintf_r+0xf6>
 801032e:	9a07      	ldr	r2, [sp, #28]
 8010330:	4654      	mov	r4, sl
 8010332:	2000      	movs	r0, #0
 8010334:	f04f 0c0a 	mov.w	ip, #10
 8010338:	4621      	mov	r1, r4
 801033a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801033e:	3b30      	subs	r3, #48	; 0x30
 8010340:	2b09      	cmp	r3, #9
 8010342:	d94e      	bls.n	80103e2 <_svfiprintf_r+0x17e>
 8010344:	b1b0      	cbz	r0, 8010374 <_svfiprintf_r+0x110>
 8010346:	9207      	str	r2, [sp, #28]
 8010348:	e014      	b.n	8010374 <_svfiprintf_r+0x110>
 801034a:	eba0 0308 	sub.w	r3, r0, r8
 801034e:	fa09 f303 	lsl.w	r3, r9, r3
 8010352:	4313      	orrs	r3, r2
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	46a2      	mov	sl, r4
 8010358:	e7d2      	b.n	8010300 <_svfiprintf_r+0x9c>
 801035a:	9b03      	ldr	r3, [sp, #12]
 801035c:	1d19      	adds	r1, r3, #4
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	9103      	str	r1, [sp, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	bfbb      	ittet	lt
 8010366:	425b      	neglt	r3, r3
 8010368:	f042 0202 	orrlt.w	r2, r2, #2
 801036c:	9307      	strge	r3, [sp, #28]
 801036e:	9307      	strlt	r3, [sp, #28]
 8010370:	bfb8      	it	lt
 8010372:	9204      	strlt	r2, [sp, #16]
 8010374:	7823      	ldrb	r3, [r4, #0]
 8010376:	2b2e      	cmp	r3, #46	; 0x2e
 8010378:	d10c      	bne.n	8010394 <_svfiprintf_r+0x130>
 801037a:	7863      	ldrb	r3, [r4, #1]
 801037c:	2b2a      	cmp	r3, #42	; 0x2a
 801037e:	d135      	bne.n	80103ec <_svfiprintf_r+0x188>
 8010380:	9b03      	ldr	r3, [sp, #12]
 8010382:	1d1a      	adds	r2, r3, #4
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	9203      	str	r2, [sp, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	bfb8      	it	lt
 801038c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010390:	3402      	adds	r4, #2
 8010392:	9305      	str	r3, [sp, #20]
 8010394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010460 <_svfiprintf_r+0x1fc>
 8010398:	7821      	ldrb	r1, [r4, #0]
 801039a:	2203      	movs	r2, #3
 801039c:	4650      	mov	r0, sl
 801039e:	f7ef ff1f 	bl	80001e0 <memchr>
 80103a2:	b140      	cbz	r0, 80103b6 <_svfiprintf_r+0x152>
 80103a4:	2340      	movs	r3, #64	; 0x40
 80103a6:	eba0 000a 	sub.w	r0, r0, sl
 80103aa:	fa03 f000 	lsl.w	r0, r3, r0
 80103ae:	9b04      	ldr	r3, [sp, #16]
 80103b0:	4303      	orrs	r3, r0
 80103b2:	3401      	adds	r4, #1
 80103b4:	9304      	str	r3, [sp, #16]
 80103b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ba:	4826      	ldr	r0, [pc, #152]	; (8010454 <_svfiprintf_r+0x1f0>)
 80103bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103c0:	2206      	movs	r2, #6
 80103c2:	f7ef ff0d 	bl	80001e0 <memchr>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d038      	beq.n	801043c <_svfiprintf_r+0x1d8>
 80103ca:	4b23      	ldr	r3, [pc, #140]	; (8010458 <_svfiprintf_r+0x1f4>)
 80103cc:	bb1b      	cbnz	r3, 8010416 <_svfiprintf_r+0x1b2>
 80103ce:	9b03      	ldr	r3, [sp, #12]
 80103d0:	3307      	adds	r3, #7
 80103d2:	f023 0307 	bic.w	r3, r3, #7
 80103d6:	3308      	adds	r3, #8
 80103d8:	9303      	str	r3, [sp, #12]
 80103da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103dc:	4433      	add	r3, r6
 80103de:	9309      	str	r3, [sp, #36]	; 0x24
 80103e0:	e767      	b.n	80102b2 <_svfiprintf_r+0x4e>
 80103e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80103e6:	460c      	mov	r4, r1
 80103e8:	2001      	movs	r0, #1
 80103ea:	e7a5      	b.n	8010338 <_svfiprintf_r+0xd4>
 80103ec:	2300      	movs	r3, #0
 80103ee:	3401      	adds	r4, #1
 80103f0:	9305      	str	r3, [sp, #20]
 80103f2:	4619      	mov	r1, r3
 80103f4:	f04f 0c0a 	mov.w	ip, #10
 80103f8:	4620      	mov	r0, r4
 80103fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103fe:	3a30      	subs	r2, #48	; 0x30
 8010400:	2a09      	cmp	r2, #9
 8010402:	d903      	bls.n	801040c <_svfiprintf_r+0x1a8>
 8010404:	2b00      	cmp	r3, #0
 8010406:	d0c5      	beq.n	8010394 <_svfiprintf_r+0x130>
 8010408:	9105      	str	r1, [sp, #20]
 801040a:	e7c3      	b.n	8010394 <_svfiprintf_r+0x130>
 801040c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010410:	4604      	mov	r4, r0
 8010412:	2301      	movs	r3, #1
 8010414:	e7f0      	b.n	80103f8 <_svfiprintf_r+0x194>
 8010416:	ab03      	add	r3, sp, #12
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	462a      	mov	r2, r5
 801041c:	4b0f      	ldr	r3, [pc, #60]	; (801045c <_svfiprintf_r+0x1f8>)
 801041e:	a904      	add	r1, sp, #16
 8010420:	4638      	mov	r0, r7
 8010422:	f7fc fbbf 	bl	800cba4 <_printf_float>
 8010426:	1c42      	adds	r2, r0, #1
 8010428:	4606      	mov	r6, r0
 801042a:	d1d6      	bne.n	80103da <_svfiprintf_r+0x176>
 801042c:	89ab      	ldrh	r3, [r5, #12]
 801042e:	065b      	lsls	r3, r3, #25
 8010430:	f53f af2c 	bmi.w	801028c <_svfiprintf_r+0x28>
 8010434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010436:	b01d      	add	sp, #116	; 0x74
 8010438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043c:	ab03      	add	r3, sp, #12
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	462a      	mov	r2, r5
 8010442:	4b06      	ldr	r3, [pc, #24]	; (801045c <_svfiprintf_r+0x1f8>)
 8010444:	a904      	add	r1, sp, #16
 8010446:	4638      	mov	r0, r7
 8010448:	f7fc fe50 	bl	800d0ec <_printf_i>
 801044c:	e7eb      	b.n	8010426 <_svfiprintf_r+0x1c2>
 801044e:	bf00      	nop
 8010450:	08011bc4 	.word	0x08011bc4
 8010454:	08011bce 	.word	0x08011bce
 8010458:	0800cba5 	.word	0x0800cba5
 801045c:	080101af 	.word	0x080101af
 8010460:	08011bca 	.word	0x08011bca
 8010464:	00000000 	.word	0x00000000

08010468 <nan>:
 8010468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010470 <nan+0x8>
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	00000000 	.word	0x00000000
 8010474:	7ff80000 	.word	0x7ff80000

08010478 <_sbrk_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4d06      	ldr	r5, [pc, #24]	; (8010494 <_sbrk_r+0x1c>)
 801047c:	2300      	movs	r3, #0
 801047e:	4604      	mov	r4, r0
 8010480:	4608      	mov	r0, r1
 8010482:	602b      	str	r3, [r5, #0]
 8010484:	f7f2 ffd2 	bl	800342c <_sbrk>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d102      	bne.n	8010492 <_sbrk_r+0x1a>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	b103      	cbz	r3, 8010492 <_sbrk_r+0x1a>
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	20001614 	.word	0x20001614

08010498 <nanf>:
 8010498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80104a0 <nanf+0x8>
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	7fc00000 	.word	0x7fc00000

080104a4 <__ascii_wctomb>:
 80104a4:	b149      	cbz	r1, 80104ba <__ascii_wctomb+0x16>
 80104a6:	2aff      	cmp	r2, #255	; 0xff
 80104a8:	bf85      	ittet	hi
 80104aa:	238a      	movhi	r3, #138	; 0x8a
 80104ac:	6003      	strhi	r3, [r0, #0]
 80104ae:	700a      	strbls	r2, [r1, #0]
 80104b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80104b4:	bf98      	it	ls
 80104b6:	2001      	movls	r0, #1
 80104b8:	4770      	bx	lr
 80104ba:	4608      	mov	r0, r1
 80104bc:	4770      	bx	lr
	...

080104c0 <__assert_func>:
 80104c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104c2:	4614      	mov	r4, r2
 80104c4:	461a      	mov	r2, r3
 80104c6:	4b09      	ldr	r3, [pc, #36]	; (80104ec <__assert_func+0x2c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4605      	mov	r5, r0
 80104cc:	68d8      	ldr	r0, [r3, #12]
 80104ce:	b14c      	cbz	r4, 80104e4 <__assert_func+0x24>
 80104d0:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <__assert_func+0x30>)
 80104d2:	9100      	str	r1, [sp, #0]
 80104d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104d8:	4906      	ldr	r1, [pc, #24]	; (80104f4 <__assert_func+0x34>)
 80104da:	462b      	mov	r3, r5
 80104dc:	f000 f80e 	bl	80104fc <fiprintf>
 80104e0:	f000 fa66 	bl	80109b0 <abort>
 80104e4:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <__assert_func+0x38>)
 80104e6:	461c      	mov	r4, r3
 80104e8:	e7f3      	b.n	80104d2 <__assert_func+0x12>
 80104ea:	bf00      	nop
 80104ec:	200001a8 	.word	0x200001a8
 80104f0:	08011bd5 	.word	0x08011bd5
 80104f4:	08011be2 	.word	0x08011be2
 80104f8:	08011c10 	.word	0x08011c10

080104fc <fiprintf>:
 80104fc:	b40e      	push	{r1, r2, r3}
 80104fe:	b503      	push	{r0, r1, lr}
 8010500:	4601      	mov	r1, r0
 8010502:	ab03      	add	r3, sp, #12
 8010504:	4805      	ldr	r0, [pc, #20]	; (801051c <fiprintf+0x20>)
 8010506:	f853 2b04 	ldr.w	r2, [r3], #4
 801050a:	6800      	ldr	r0, [r0, #0]
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	f000 f85f 	bl	80105d0 <_vfiprintf_r>
 8010512:	b002      	add	sp, #8
 8010514:	f85d eb04 	ldr.w	lr, [sp], #4
 8010518:	b003      	add	sp, #12
 801051a:	4770      	bx	lr
 801051c:	200001a8 	.word	0x200001a8

08010520 <memmove>:
 8010520:	4288      	cmp	r0, r1
 8010522:	b510      	push	{r4, lr}
 8010524:	eb01 0402 	add.w	r4, r1, r2
 8010528:	d902      	bls.n	8010530 <memmove+0x10>
 801052a:	4284      	cmp	r4, r0
 801052c:	4623      	mov	r3, r4
 801052e:	d807      	bhi.n	8010540 <memmove+0x20>
 8010530:	1e43      	subs	r3, r0, #1
 8010532:	42a1      	cmp	r1, r4
 8010534:	d008      	beq.n	8010548 <memmove+0x28>
 8010536:	f811 2b01 	ldrb.w	r2, [r1], #1
 801053a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801053e:	e7f8      	b.n	8010532 <memmove+0x12>
 8010540:	4402      	add	r2, r0
 8010542:	4601      	mov	r1, r0
 8010544:	428a      	cmp	r2, r1
 8010546:	d100      	bne.n	801054a <memmove+0x2a>
 8010548:	bd10      	pop	{r4, pc}
 801054a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801054e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010552:	e7f7      	b.n	8010544 <memmove+0x24>

08010554 <__malloc_lock>:
 8010554:	4801      	ldr	r0, [pc, #4]	; (801055c <__malloc_lock+0x8>)
 8010556:	f000 bbeb 	b.w	8010d30 <__retarget_lock_acquire_recursive>
 801055a:	bf00      	nop
 801055c:	20001618 	.word	0x20001618

08010560 <__malloc_unlock>:
 8010560:	4801      	ldr	r0, [pc, #4]	; (8010568 <__malloc_unlock+0x8>)
 8010562:	f000 bbe6 	b.w	8010d32 <__retarget_lock_release_recursive>
 8010566:	bf00      	nop
 8010568:	20001618 	.word	0x20001618

0801056c <_malloc_usable_size_r>:
 801056c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010570:	1f18      	subs	r0, r3, #4
 8010572:	2b00      	cmp	r3, #0
 8010574:	bfbc      	itt	lt
 8010576:	580b      	ldrlt	r3, [r1, r0]
 8010578:	18c0      	addlt	r0, r0, r3
 801057a:	4770      	bx	lr

0801057c <__sfputc_r>:
 801057c:	6893      	ldr	r3, [r2, #8]
 801057e:	3b01      	subs	r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	b410      	push	{r4}
 8010584:	6093      	str	r3, [r2, #8]
 8010586:	da08      	bge.n	801059a <__sfputc_r+0x1e>
 8010588:	6994      	ldr	r4, [r2, #24]
 801058a:	42a3      	cmp	r3, r4
 801058c:	db01      	blt.n	8010592 <__sfputc_r+0x16>
 801058e:	290a      	cmp	r1, #10
 8010590:	d103      	bne.n	801059a <__sfputc_r+0x1e>
 8010592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010596:	f000 b94b 	b.w	8010830 <__swbuf_r>
 801059a:	6813      	ldr	r3, [r2, #0]
 801059c:	1c58      	adds	r0, r3, #1
 801059e:	6010      	str	r0, [r2, #0]
 80105a0:	7019      	strb	r1, [r3, #0]
 80105a2:	4608      	mov	r0, r1
 80105a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <__sfputs_r>:
 80105aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ac:	4606      	mov	r6, r0
 80105ae:	460f      	mov	r7, r1
 80105b0:	4614      	mov	r4, r2
 80105b2:	18d5      	adds	r5, r2, r3
 80105b4:	42ac      	cmp	r4, r5
 80105b6:	d101      	bne.n	80105bc <__sfputs_r+0x12>
 80105b8:	2000      	movs	r0, #0
 80105ba:	e007      	b.n	80105cc <__sfputs_r+0x22>
 80105bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c0:	463a      	mov	r2, r7
 80105c2:	4630      	mov	r0, r6
 80105c4:	f7ff ffda 	bl	801057c <__sfputc_r>
 80105c8:	1c43      	adds	r3, r0, #1
 80105ca:	d1f3      	bne.n	80105b4 <__sfputs_r+0xa>
 80105cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105d0 <_vfiprintf_r>:
 80105d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d4:	460d      	mov	r5, r1
 80105d6:	b09d      	sub	sp, #116	; 0x74
 80105d8:	4614      	mov	r4, r2
 80105da:	4698      	mov	r8, r3
 80105dc:	4606      	mov	r6, r0
 80105de:	b118      	cbz	r0, 80105e8 <_vfiprintf_r+0x18>
 80105e0:	6983      	ldr	r3, [r0, #24]
 80105e2:	b90b      	cbnz	r3, 80105e8 <_vfiprintf_r+0x18>
 80105e4:	f000 fb06 	bl	8010bf4 <__sinit>
 80105e8:	4b89      	ldr	r3, [pc, #548]	; (8010810 <_vfiprintf_r+0x240>)
 80105ea:	429d      	cmp	r5, r3
 80105ec:	d11b      	bne.n	8010626 <_vfiprintf_r+0x56>
 80105ee:	6875      	ldr	r5, [r6, #4]
 80105f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105f2:	07d9      	lsls	r1, r3, #31
 80105f4:	d405      	bmi.n	8010602 <_vfiprintf_r+0x32>
 80105f6:	89ab      	ldrh	r3, [r5, #12]
 80105f8:	059a      	lsls	r2, r3, #22
 80105fa:	d402      	bmi.n	8010602 <_vfiprintf_r+0x32>
 80105fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105fe:	f000 fb97 	bl	8010d30 <__retarget_lock_acquire_recursive>
 8010602:	89ab      	ldrh	r3, [r5, #12]
 8010604:	071b      	lsls	r3, r3, #28
 8010606:	d501      	bpl.n	801060c <_vfiprintf_r+0x3c>
 8010608:	692b      	ldr	r3, [r5, #16]
 801060a:	b9eb      	cbnz	r3, 8010648 <_vfiprintf_r+0x78>
 801060c:	4629      	mov	r1, r5
 801060e:	4630      	mov	r0, r6
 8010610:	f000 f960 	bl	80108d4 <__swsetup_r>
 8010614:	b1c0      	cbz	r0, 8010648 <_vfiprintf_r+0x78>
 8010616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010618:	07dc      	lsls	r4, r3, #31
 801061a:	d50e      	bpl.n	801063a <_vfiprintf_r+0x6a>
 801061c:	f04f 30ff 	mov.w	r0, #4294967295
 8010620:	b01d      	add	sp, #116	; 0x74
 8010622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010626:	4b7b      	ldr	r3, [pc, #492]	; (8010814 <_vfiprintf_r+0x244>)
 8010628:	429d      	cmp	r5, r3
 801062a:	d101      	bne.n	8010630 <_vfiprintf_r+0x60>
 801062c:	68b5      	ldr	r5, [r6, #8]
 801062e:	e7df      	b.n	80105f0 <_vfiprintf_r+0x20>
 8010630:	4b79      	ldr	r3, [pc, #484]	; (8010818 <_vfiprintf_r+0x248>)
 8010632:	429d      	cmp	r5, r3
 8010634:	bf08      	it	eq
 8010636:	68f5      	ldreq	r5, [r6, #12]
 8010638:	e7da      	b.n	80105f0 <_vfiprintf_r+0x20>
 801063a:	89ab      	ldrh	r3, [r5, #12]
 801063c:	0598      	lsls	r0, r3, #22
 801063e:	d4ed      	bmi.n	801061c <_vfiprintf_r+0x4c>
 8010640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010642:	f000 fb76 	bl	8010d32 <__retarget_lock_release_recursive>
 8010646:	e7e9      	b.n	801061c <_vfiprintf_r+0x4c>
 8010648:	2300      	movs	r3, #0
 801064a:	9309      	str	r3, [sp, #36]	; 0x24
 801064c:	2320      	movs	r3, #32
 801064e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010652:	f8cd 800c 	str.w	r8, [sp, #12]
 8010656:	2330      	movs	r3, #48	; 0x30
 8010658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801081c <_vfiprintf_r+0x24c>
 801065c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010660:	f04f 0901 	mov.w	r9, #1
 8010664:	4623      	mov	r3, r4
 8010666:	469a      	mov	sl, r3
 8010668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801066c:	b10a      	cbz	r2, 8010672 <_vfiprintf_r+0xa2>
 801066e:	2a25      	cmp	r2, #37	; 0x25
 8010670:	d1f9      	bne.n	8010666 <_vfiprintf_r+0x96>
 8010672:	ebba 0b04 	subs.w	fp, sl, r4
 8010676:	d00b      	beq.n	8010690 <_vfiprintf_r+0xc0>
 8010678:	465b      	mov	r3, fp
 801067a:	4622      	mov	r2, r4
 801067c:	4629      	mov	r1, r5
 801067e:	4630      	mov	r0, r6
 8010680:	f7ff ff93 	bl	80105aa <__sfputs_r>
 8010684:	3001      	adds	r0, #1
 8010686:	f000 80aa 	beq.w	80107de <_vfiprintf_r+0x20e>
 801068a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801068c:	445a      	add	r2, fp
 801068e:	9209      	str	r2, [sp, #36]	; 0x24
 8010690:	f89a 3000 	ldrb.w	r3, [sl]
 8010694:	2b00      	cmp	r3, #0
 8010696:	f000 80a2 	beq.w	80107de <_vfiprintf_r+0x20e>
 801069a:	2300      	movs	r3, #0
 801069c:	f04f 32ff 	mov.w	r2, #4294967295
 80106a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106a4:	f10a 0a01 	add.w	sl, sl, #1
 80106a8:	9304      	str	r3, [sp, #16]
 80106aa:	9307      	str	r3, [sp, #28]
 80106ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106b0:	931a      	str	r3, [sp, #104]	; 0x68
 80106b2:	4654      	mov	r4, sl
 80106b4:	2205      	movs	r2, #5
 80106b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ba:	4858      	ldr	r0, [pc, #352]	; (801081c <_vfiprintf_r+0x24c>)
 80106bc:	f7ef fd90 	bl	80001e0 <memchr>
 80106c0:	9a04      	ldr	r2, [sp, #16]
 80106c2:	b9d8      	cbnz	r0, 80106fc <_vfiprintf_r+0x12c>
 80106c4:	06d1      	lsls	r1, r2, #27
 80106c6:	bf44      	itt	mi
 80106c8:	2320      	movmi	r3, #32
 80106ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106ce:	0713      	lsls	r3, r2, #28
 80106d0:	bf44      	itt	mi
 80106d2:	232b      	movmi	r3, #43	; 0x2b
 80106d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106d8:	f89a 3000 	ldrb.w	r3, [sl]
 80106dc:	2b2a      	cmp	r3, #42	; 0x2a
 80106de:	d015      	beq.n	801070c <_vfiprintf_r+0x13c>
 80106e0:	9a07      	ldr	r2, [sp, #28]
 80106e2:	4654      	mov	r4, sl
 80106e4:	2000      	movs	r0, #0
 80106e6:	f04f 0c0a 	mov.w	ip, #10
 80106ea:	4621      	mov	r1, r4
 80106ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106f0:	3b30      	subs	r3, #48	; 0x30
 80106f2:	2b09      	cmp	r3, #9
 80106f4:	d94e      	bls.n	8010794 <_vfiprintf_r+0x1c4>
 80106f6:	b1b0      	cbz	r0, 8010726 <_vfiprintf_r+0x156>
 80106f8:	9207      	str	r2, [sp, #28]
 80106fa:	e014      	b.n	8010726 <_vfiprintf_r+0x156>
 80106fc:	eba0 0308 	sub.w	r3, r0, r8
 8010700:	fa09 f303 	lsl.w	r3, r9, r3
 8010704:	4313      	orrs	r3, r2
 8010706:	9304      	str	r3, [sp, #16]
 8010708:	46a2      	mov	sl, r4
 801070a:	e7d2      	b.n	80106b2 <_vfiprintf_r+0xe2>
 801070c:	9b03      	ldr	r3, [sp, #12]
 801070e:	1d19      	adds	r1, r3, #4
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	9103      	str	r1, [sp, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	bfbb      	ittet	lt
 8010718:	425b      	neglt	r3, r3
 801071a:	f042 0202 	orrlt.w	r2, r2, #2
 801071e:	9307      	strge	r3, [sp, #28]
 8010720:	9307      	strlt	r3, [sp, #28]
 8010722:	bfb8      	it	lt
 8010724:	9204      	strlt	r2, [sp, #16]
 8010726:	7823      	ldrb	r3, [r4, #0]
 8010728:	2b2e      	cmp	r3, #46	; 0x2e
 801072a:	d10c      	bne.n	8010746 <_vfiprintf_r+0x176>
 801072c:	7863      	ldrb	r3, [r4, #1]
 801072e:	2b2a      	cmp	r3, #42	; 0x2a
 8010730:	d135      	bne.n	801079e <_vfiprintf_r+0x1ce>
 8010732:	9b03      	ldr	r3, [sp, #12]
 8010734:	1d1a      	adds	r2, r3, #4
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	9203      	str	r2, [sp, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	bfb8      	it	lt
 801073e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010742:	3402      	adds	r4, #2
 8010744:	9305      	str	r3, [sp, #20]
 8010746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801082c <_vfiprintf_r+0x25c>
 801074a:	7821      	ldrb	r1, [r4, #0]
 801074c:	2203      	movs	r2, #3
 801074e:	4650      	mov	r0, sl
 8010750:	f7ef fd46 	bl	80001e0 <memchr>
 8010754:	b140      	cbz	r0, 8010768 <_vfiprintf_r+0x198>
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	eba0 000a 	sub.w	r0, r0, sl
 801075c:	fa03 f000 	lsl.w	r0, r3, r0
 8010760:	9b04      	ldr	r3, [sp, #16]
 8010762:	4303      	orrs	r3, r0
 8010764:	3401      	adds	r4, #1
 8010766:	9304      	str	r3, [sp, #16]
 8010768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801076c:	482c      	ldr	r0, [pc, #176]	; (8010820 <_vfiprintf_r+0x250>)
 801076e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010772:	2206      	movs	r2, #6
 8010774:	f7ef fd34 	bl	80001e0 <memchr>
 8010778:	2800      	cmp	r0, #0
 801077a:	d03f      	beq.n	80107fc <_vfiprintf_r+0x22c>
 801077c:	4b29      	ldr	r3, [pc, #164]	; (8010824 <_vfiprintf_r+0x254>)
 801077e:	bb1b      	cbnz	r3, 80107c8 <_vfiprintf_r+0x1f8>
 8010780:	9b03      	ldr	r3, [sp, #12]
 8010782:	3307      	adds	r3, #7
 8010784:	f023 0307 	bic.w	r3, r3, #7
 8010788:	3308      	adds	r3, #8
 801078a:	9303      	str	r3, [sp, #12]
 801078c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801078e:	443b      	add	r3, r7
 8010790:	9309      	str	r3, [sp, #36]	; 0x24
 8010792:	e767      	b.n	8010664 <_vfiprintf_r+0x94>
 8010794:	fb0c 3202 	mla	r2, ip, r2, r3
 8010798:	460c      	mov	r4, r1
 801079a:	2001      	movs	r0, #1
 801079c:	e7a5      	b.n	80106ea <_vfiprintf_r+0x11a>
 801079e:	2300      	movs	r3, #0
 80107a0:	3401      	adds	r4, #1
 80107a2:	9305      	str	r3, [sp, #20]
 80107a4:	4619      	mov	r1, r3
 80107a6:	f04f 0c0a 	mov.w	ip, #10
 80107aa:	4620      	mov	r0, r4
 80107ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107b0:	3a30      	subs	r2, #48	; 0x30
 80107b2:	2a09      	cmp	r2, #9
 80107b4:	d903      	bls.n	80107be <_vfiprintf_r+0x1ee>
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0c5      	beq.n	8010746 <_vfiprintf_r+0x176>
 80107ba:	9105      	str	r1, [sp, #20]
 80107bc:	e7c3      	b.n	8010746 <_vfiprintf_r+0x176>
 80107be:	fb0c 2101 	mla	r1, ip, r1, r2
 80107c2:	4604      	mov	r4, r0
 80107c4:	2301      	movs	r3, #1
 80107c6:	e7f0      	b.n	80107aa <_vfiprintf_r+0x1da>
 80107c8:	ab03      	add	r3, sp, #12
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	462a      	mov	r2, r5
 80107ce:	4b16      	ldr	r3, [pc, #88]	; (8010828 <_vfiprintf_r+0x258>)
 80107d0:	a904      	add	r1, sp, #16
 80107d2:	4630      	mov	r0, r6
 80107d4:	f7fc f9e6 	bl	800cba4 <_printf_float>
 80107d8:	4607      	mov	r7, r0
 80107da:	1c78      	adds	r0, r7, #1
 80107dc:	d1d6      	bne.n	801078c <_vfiprintf_r+0x1bc>
 80107de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107e0:	07d9      	lsls	r1, r3, #31
 80107e2:	d405      	bmi.n	80107f0 <_vfiprintf_r+0x220>
 80107e4:	89ab      	ldrh	r3, [r5, #12]
 80107e6:	059a      	lsls	r2, r3, #22
 80107e8:	d402      	bmi.n	80107f0 <_vfiprintf_r+0x220>
 80107ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107ec:	f000 faa1 	bl	8010d32 <__retarget_lock_release_recursive>
 80107f0:	89ab      	ldrh	r3, [r5, #12]
 80107f2:	065b      	lsls	r3, r3, #25
 80107f4:	f53f af12 	bmi.w	801061c <_vfiprintf_r+0x4c>
 80107f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107fa:	e711      	b.n	8010620 <_vfiprintf_r+0x50>
 80107fc:	ab03      	add	r3, sp, #12
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	462a      	mov	r2, r5
 8010802:	4b09      	ldr	r3, [pc, #36]	; (8010828 <_vfiprintf_r+0x258>)
 8010804:	a904      	add	r1, sp, #16
 8010806:	4630      	mov	r0, r6
 8010808:	f7fc fc70 	bl	800d0ec <_printf_i>
 801080c:	e7e4      	b.n	80107d8 <_vfiprintf_r+0x208>
 801080e:	bf00      	nop
 8010810:	08011c34 	.word	0x08011c34
 8010814:	08011c54 	.word	0x08011c54
 8010818:	08011c14 	.word	0x08011c14
 801081c:	08011bc4 	.word	0x08011bc4
 8010820:	08011bce 	.word	0x08011bce
 8010824:	0800cba5 	.word	0x0800cba5
 8010828:	080105ab 	.word	0x080105ab
 801082c:	08011bca 	.word	0x08011bca

08010830 <__swbuf_r>:
 8010830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010832:	460e      	mov	r6, r1
 8010834:	4614      	mov	r4, r2
 8010836:	4605      	mov	r5, r0
 8010838:	b118      	cbz	r0, 8010842 <__swbuf_r+0x12>
 801083a:	6983      	ldr	r3, [r0, #24]
 801083c:	b90b      	cbnz	r3, 8010842 <__swbuf_r+0x12>
 801083e:	f000 f9d9 	bl	8010bf4 <__sinit>
 8010842:	4b21      	ldr	r3, [pc, #132]	; (80108c8 <__swbuf_r+0x98>)
 8010844:	429c      	cmp	r4, r3
 8010846:	d12b      	bne.n	80108a0 <__swbuf_r+0x70>
 8010848:	686c      	ldr	r4, [r5, #4]
 801084a:	69a3      	ldr	r3, [r4, #24]
 801084c:	60a3      	str	r3, [r4, #8]
 801084e:	89a3      	ldrh	r3, [r4, #12]
 8010850:	071a      	lsls	r2, r3, #28
 8010852:	d52f      	bpl.n	80108b4 <__swbuf_r+0x84>
 8010854:	6923      	ldr	r3, [r4, #16]
 8010856:	b36b      	cbz	r3, 80108b4 <__swbuf_r+0x84>
 8010858:	6923      	ldr	r3, [r4, #16]
 801085a:	6820      	ldr	r0, [r4, #0]
 801085c:	1ac0      	subs	r0, r0, r3
 801085e:	6963      	ldr	r3, [r4, #20]
 8010860:	b2f6      	uxtb	r6, r6
 8010862:	4283      	cmp	r3, r0
 8010864:	4637      	mov	r7, r6
 8010866:	dc04      	bgt.n	8010872 <__swbuf_r+0x42>
 8010868:	4621      	mov	r1, r4
 801086a:	4628      	mov	r0, r5
 801086c:	f000 f92e 	bl	8010acc <_fflush_r>
 8010870:	bb30      	cbnz	r0, 80108c0 <__swbuf_r+0x90>
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	3b01      	subs	r3, #1
 8010876:	60a3      	str	r3, [r4, #8]
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	6022      	str	r2, [r4, #0]
 801087e:	701e      	strb	r6, [r3, #0]
 8010880:	6963      	ldr	r3, [r4, #20]
 8010882:	3001      	adds	r0, #1
 8010884:	4283      	cmp	r3, r0
 8010886:	d004      	beq.n	8010892 <__swbuf_r+0x62>
 8010888:	89a3      	ldrh	r3, [r4, #12]
 801088a:	07db      	lsls	r3, r3, #31
 801088c:	d506      	bpl.n	801089c <__swbuf_r+0x6c>
 801088e:	2e0a      	cmp	r6, #10
 8010890:	d104      	bne.n	801089c <__swbuf_r+0x6c>
 8010892:	4621      	mov	r1, r4
 8010894:	4628      	mov	r0, r5
 8010896:	f000 f919 	bl	8010acc <_fflush_r>
 801089a:	b988      	cbnz	r0, 80108c0 <__swbuf_r+0x90>
 801089c:	4638      	mov	r0, r7
 801089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108a0:	4b0a      	ldr	r3, [pc, #40]	; (80108cc <__swbuf_r+0x9c>)
 80108a2:	429c      	cmp	r4, r3
 80108a4:	d101      	bne.n	80108aa <__swbuf_r+0x7a>
 80108a6:	68ac      	ldr	r4, [r5, #8]
 80108a8:	e7cf      	b.n	801084a <__swbuf_r+0x1a>
 80108aa:	4b09      	ldr	r3, [pc, #36]	; (80108d0 <__swbuf_r+0xa0>)
 80108ac:	429c      	cmp	r4, r3
 80108ae:	bf08      	it	eq
 80108b0:	68ec      	ldreq	r4, [r5, #12]
 80108b2:	e7ca      	b.n	801084a <__swbuf_r+0x1a>
 80108b4:	4621      	mov	r1, r4
 80108b6:	4628      	mov	r0, r5
 80108b8:	f000 f80c 	bl	80108d4 <__swsetup_r>
 80108bc:	2800      	cmp	r0, #0
 80108be:	d0cb      	beq.n	8010858 <__swbuf_r+0x28>
 80108c0:	f04f 37ff 	mov.w	r7, #4294967295
 80108c4:	e7ea      	b.n	801089c <__swbuf_r+0x6c>
 80108c6:	bf00      	nop
 80108c8:	08011c34 	.word	0x08011c34
 80108cc:	08011c54 	.word	0x08011c54
 80108d0:	08011c14 	.word	0x08011c14

080108d4 <__swsetup_r>:
 80108d4:	4b32      	ldr	r3, [pc, #200]	; (80109a0 <__swsetup_r+0xcc>)
 80108d6:	b570      	push	{r4, r5, r6, lr}
 80108d8:	681d      	ldr	r5, [r3, #0]
 80108da:	4606      	mov	r6, r0
 80108dc:	460c      	mov	r4, r1
 80108de:	b125      	cbz	r5, 80108ea <__swsetup_r+0x16>
 80108e0:	69ab      	ldr	r3, [r5, #24]
 80108e2:	b913      	cbnz	r3, 80108ea <__swsetup_r+0x16>
 80108e4:	4628      	mov	r0, r5
 80108e6:	f000 f985 	bl	8010bf4 <__sinit>
 80108ea:	4b2e      	ldr	r3, [pc, #184]	; (80109a4 <__swsetup_r+0xd0>)
 80108ec:	429c      	cmp	r4, r3
 80108ee:	d10f      	bne.n	8010910 <__swsetup_r+0x3c>
 80108f0:	686c      	ldr	r4, [r5, #4]
 80108f2:	89a3      	ldrh	r3, [r4, #12]
 80108f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108f8:	0719      	lsls	r1, r3, #28
 80108fa:	d42c      	bmi.n	8010956 <__swsetup_r+0x82>
 80108fc:	06dd      	lsls	r5, r3, #27
 80108fe:	d411      	bmi.n	8010924 <__swsetup_r+0x50>
 8010900:	2309      	movs	r3, #9
 8010902:	6033      	str	r3, [r6, #0]
 8010904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010908:	81a3      	strh	r3, [r4, #12]
 801090a:	f04f 30ff 	mov.w	r0, #4294967295
 801090e:	e03e      	b.n	801098e <__swsetup_r+0xba>
 8010910:	4b25      	ldr	r3, [pc, #148]	; (80109a8 <__swsetup_r+0xd4>)
 8010912:	429c      	cmp	r4, r3
 8010914:	d101      	bne.n	801091a <__swsetup_r+0x46>
 8010916:	68ac      	ldr	r4, [r5, #8]
 8010918:	e7eb      	b.n	80108f2 <__swsetup_r+0x1e>
 801091a:	4b24      	ldr	r3, [pc, #144]	; (80109ac <__swsetup_r+0xd8>)
 801091c:	429c      	cmp	r4, r3
 801091e:	bf08      	it	eq
 8010920:	68ec      	ldreq	r4, [r5, #12]
 8010922:	e7e6      	b.n	80108f2 <__swsetup_r+0x1e>
 8010924:	0758      	lsls	r0, r3, #29
 8010926:	d512      	bpl.n	801094e <__swsetup_r+0x7a>
 8010928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801092a:	b141      	cbz	r1, 801093e <__swsetup_r+0x6a>
 801092c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010930:	4299      	cmp	r1, r3
 8010932:	d002      	beq.n	801093a <__swsetup_r+0x66>
 8010934:	4630      	mov	r0, r6
 8010936:	f7ff fb2b 	bl	800ff90 <_free_r>
 801093a:	2300      	movs	r3, #0
 801093c:	6363      	str	r3, [r4, #52]	; 0x34
 801093e:	89a3      	ldrh	r3, [r4, #12]
 8010940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010944:	81a3      	strh	r3, [r4, #12]
 8010946:	2300      	movs	r3, #0
 8010948:	6063      	str	r3, [r4, #4]
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	89a3      	ldrh	r3, [r4, #12]
 8010950:	f043 0308 	orr.w	r3, r3, #8
 8010954:	81a3      	strh	r3, [r4, #12]
 8010956:	6923      	ldr	r3, [r4, #16]
 8010958:	b94b      	cbnz	r3, 801096e <__swsetup_r+0x9a>
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010964:	d003      	beq.n	801096e <__swsetup_r+0x9a>
 8010966:	4621      	mov	r1, r4
 8010968:	4630      	mov	r0, r6
 801096a:	f000 fa09 	bl	8010d80 <__smakebuf_r>
 801096e:	89a0      	ldrh	r0, [r4, #12]
 8010970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010974:	f010 0301 	ands.w	r3, r0, #1
 8010978:	d00a      	beq.n	8010990 <__swsetup_r+0xbc>
 801097a:	2300      	movs	r3, #0
 801097c:	60a3      	str	r3, [r4, #8]
 801097e:	6963      	ldr	r3, [r4, #20]
 8010980:	425b      	negs	r3, r3
 8010982:	61a3      	str	r3, [r4, #24]
 8010984:	6923      	ldr	r3, [r4, #16]
 8010986:	b943      	cbnz	r3, 801099a <__swsetup_r+0xc6>
 8010988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801098c:	d1ba      	bne.n	8010904 <__swsetup_r+0x30>
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	0781      	lsls	r1, r0, #30
 8010992:	bf58      	it	pl
 8010994:	6963      	ldrpl	r3, [r4, #20]
 8010996:	60a3      	str	r3, [r4, #8]
 8010998:	e7f4      	b.n	8010984 <__swsetup_r+0xb0>
 801099a:	2000      	movs	r0, #0
 801099c:	e7f7      	b.n	801098e <__swsetup_r+0xba>
 801099e:	bf00      	nop
 80109a0:	200001a8 	.word	0x200001a8
 80109a4:	08011c34 	.word	0x08011c34
 80109a8:	08011c54 	.word	0x08011c54
 80109ac:	08011c14 	.word	0x08011c14

080109b0 <abort>:
 80109b0:	b508      	push	{r3, lr}
 80109b2:	2006      	movs	r0, #6
 80109b4:	f000 fa4c 	bl	8010e50 <raise>
 80109b8:	2001      	movs	r0, #1
 80109ba:	f7f2 fcbf 	bl	800333c <_exit>
	...

080109c0 <__sflush_r>:
 80109c0:	898a      	ldrh	r2, [r1, #12]
 80109c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c6:	4605      	mov	r5, r0
 80109c8:	0710      	lsls	r0, r2, #28
 80109ca:	460c      	mov	r4, r1
 80109cc:	d458      	bmi.n	8010a80 <__sflush_r+0xc0>
 80109ce:	684b      	ldr	r3, [r1, #4]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	dc05      	bgt.n	80109e0 <__sflush_r+0x20>
 80109d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	dc02      	bgt.n	80109e0 <__sflush_r+0x20>
 80109da:	2000      	movs	r0, #0
 80109dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109e2:	2e00      	cmp	r6, #0
 80109e4:	d0f9      	beq.n	80109da <__sflush_r+0x1a>
 80109e6:	2300      	movs	r3, #0
 80109e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109ec:	682f      	ldr	r7, [r5, #0]
 80109ee:	602b      	str	r3, [r5, #0]
 80109f0:	d032      	beq.n	8010a58 <__sflush_r+0x98>
 80109f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	075a      	lsls	r2, r3, #29
 80109f8:	d505      	bpl.n	8010a06 <__sflush_r+0x46>
 80109fa:	6863      	ldr	r3, [r4, #4]
 80109fc:	1ac0      	subs	r0, r0, r3
 80109fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a00:	b10b      	cbz	r3, 8010a06 <__sflush_r+0x46>
 8010a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a04:	1ac0      	subs	r0, r0, r3
 8010a06:	2300      	movs	r3, #0
 8010a08:	4602      	mov	r2, r0
 8010a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a0c:	6a21      	ldr	r1, [r4, #32]
 8010a0e:	4628      	mov	r0, r5
 8010a10:	47b0      	blx	r6
 8010a12:	1c43      	adds	r3, r0, #1
 8010a14:	89a3      	ldrh	r3, [r4, #12]
 8010a16:	d106      	bne.n	8010a26 <__sflush_r+0x66>
 8010a18:	6829      	ldr	r1, [r5, #0]
 8010a1a:	291d      	cmp	r1, #29
 8010a1c:	d82c      	bhi.n	8010a78 <__sflush_r+0xb8>
 8010a1e:	4a2a      	ldr	r2, [pc, #168]	; (8010ac8 <__sflush_r+0x108>)
 8010a20:	40ca      	lsrs	r2, r1
 8010a22:	07d6      	lsls	r6, r2, #31
 8010a24:	d528      	bpl.n	8010a78 <__sflush_r+0xb8>
 8010a26:	2200      	movs	r2, #0
 8010a28:	6062      	str	r2, [r4, #4]
 8010a2a:	04d9      	lsls	r1, r3, #19
 8010a2c:	6922      	ldr	r2, [r4, #16]
 8010a2e:	6022      	str	r2, [r4, #0]
 8010a30:	d504      	bpl.n	8010a3c <__sflush_r+0x7c>
 8010a32:	1c42      	adds	r2, r0, #1
 8010a34:	d101      	bne.n	8010a3a <__sflush_r+0x7a>
 8010a36:	682b      	ldr	r3, [r5, #0]
 8010a38:	b903      	cbnz	r3, 8010a3c <__sflush_r+0x7c>
 8010a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8010a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a3e:	602f      	str	r7, [r5, #0]
 8010a40:	2900      	cmp	r1, #0
 8010a42:	d0ca      	beq.n	80109da <__sflush_r+0x1a>
 8010a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a48:	4299      	cmp	r1, r3
 8010a4a:	d002      	beq.n	8010a52 <__sflush_r+0x92>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7ff fa9f 	bl	800ff90 <_free_r>
 8010a52:	2000      	movs	r0, #0
 8010a54:	6360      	str	r0, [r4, #52]	; 0x34
 8010a56:	e7c1      	b.n	80109dc <__sflush_r+0x1c>
 8010a58:	6a21      	ldr	r1, [r4, #32]
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	47b0      	blx	r6
 8010a60:	1c41      	adds	r1, r0, #1
 8010a62:	d1c7      	bne.n	80109f4 <__sflush_r+0x34>
 8010a64:	682b      	ldr	r3, [r5, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0c4      	beq.n	80109f4 <__sflush_r+0x34>
 8010a6a:	2b1d      	cmp	r3, #29
 8010a6c:	d001      	beq.n	8010a72 <__sflush_r+0xb2>
 8010a6e:	2b16      	cmp	r3, #22
 8010a70:	d101      	bne.n	8010a76 <__sflush_r+0xb6>
 8010a72:	602f      	str	r7, [r5, #0]
 8010a74:	e7b1      	b.n	80109da <__sflush_r+0x1a>
 8010a76:	89a3      	ldrh	r3, [r4, #12]
 8010a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a7c:	81a3      	strh	r3, [r4, #12]
 8010a7e:	e7ad      	b.n	80109dc <__sflush_r+0x1c>
 8010a80:	690f      	ldr	r7, [r1, #16]
 8010a82:	2f00      	cmp	r7, #0
 8010a84:	d0a9      	beq.n	80109da <__sflush_r+0x1a>
 8010a86:	0793      	lsls	r3, r2, #30
 8010a88:	680e      	ldr	r6, [r1, #0]
 8010a8a:	bf08      	it	eq
 8010a8c:	694b      	ldreq	r3, [r1, #20]
 8010a8e:	600f      	str	r7, [r1, #0]
 8010a90:	bf18      	it	ne
 8010a92:	2300      	movne	r3, #0
 8010a94:	eba6 0807 	sub.w	r8, r6, r7
 8010a98:	608b      	str	r3, [r1, #8]
 8010a9a:	f1b8 0f00 	cmp.w	r8, #0
 8010a9e:	dd9c      	ble.n	80109da <__sflush_r+0x1a>
 8010aa0:	6a21      	ldr	r1, [r4, #32]
 8010aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010aa4:	4643      	mov	r3, r8
 8010aa6:	463a      	mov	r2, r7
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	47b0      	blx	r6
 8010aac:	2800      	cmp	r0, #0
 8010aae:	dc06      	bgt.n	8010abe <__sflush_r+0xfe>
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ab6:	81a3      	strh	r3, [r4, #12]
 8010ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8010abc:	e78e      	b.n	80109dc <__sflush_r+0x1c>
 8010abe:	4407      	add	r7, r0
 8010ac0:	eba8 0800 	sub.w	r8, r8, r0
 8010ac4:	e7e9      	b.n	8010a9a <__sflush_r+0xda>
 8010ac6:	bf00      	nop
 8010ac8:	20400001 	.word	0x20400001

08010acc <_fflush_r>:
 8010acc:	b538      	push	{r3, r4, r5, lr}
 8010ace:	690b      	ldr	r3, [r1, #16]
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	b913      	cbnz	r3, 8010adc <_fflush_r+0x10>
 8010ad6:	2500      	movs	r5, #0
 8010ad8:	4628      	mov	r0, r5
 8010ada:	bd38      	pop	{r3, r4, r5, pc}
 8010adc:	b118      	cbz	r0, 8010ae6 <_fflush_r+0x1a>
 8010ade:	6983      	ldr	r3, [r0, #24]
 8010ae0:	b90b      	cbnz	r3, 8010ae6 <_fflush_r+0x1a>
 8010ae2:	f000 f887 	bl	8010bf4 <__sinit>
 8010ae6:	4b14      	ldr	r3, [pc, #80]	; (8010b38 <_fflush_r+0x6c>)
 8010ae8:	429c      	cmp	r4, r3
 8010aea:	d11b      	bne.n	8010b24 <_fflush_r+0x58>
 8010aec:	686c      	ldr	r4, [r5, #4]
 8010aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d0ef      	beq.n	8010ad6 <_fflush_r+0xa>
 8010af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010af8:	07d0      	lsls	r0, r2, #31
 8010afa:	d404      	bmi.n	8010b06 <_fflush_r+0x3a>
 8010afc:	0599      	lsls	r1, r3, #22
 8010afe:	d402      	bmi.n	8010b06 <_fflush_r+0x3a>
 8010b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b02:	f000 f915 	bl	8010d30 <__retarget_lock_acquire_recursive>
 8010b06:	4628      	mov	r0, r5
 8010b08:	4621      	mov	r1, r4
 8010b0a:	f7ff ff59 	bl	80109c0 <__sflush_r>
 8010b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b10:	07da      	lsls	r2, r3, #31
 8010b12:	4605      	mov	r5, r0
 8010b14:	d4e0      	bmi.n	8010ad8 <_fflush_r+0xc>
 8010b16:	89a3      	ldrh	r3, [r4, #12]
 8010b18:	059b      	lsls	r3, r3, #22
 8010b1a:	d4dd      	bmi.n	8010ad8 <_fflush_r+0xc>
 8010b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b1e:	f000 f908 	bl	8010d32 <__retarget_lock_release_recursive>
 8010b22:	e7d9      	b.n	8010ad8 <_fflush_r+0xc>
 8010b24:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <_fflush_r+0x70>)
 8010b26:	429c      	cmp	r4, r3
 8010b28:	d101      	bne.n	8010b2e <_fflush_r+0x62>
 8010b2a:	68ac      	ldr	r4, [r5, #8]
 8010b2c:	e7df      	b.n	8010aee <_fflush_r+0x22>
 8010b2e:	4b04      	ldr	r3, [pc, #16]	; (8010b40 <_fflush_r+0x74>)
 8010b30:	429c      	cmp	r4, r3
 8010b32:	bf08      	it	eq
 8010b34:	68ec      	ldreq	r4, [r5, #12]
 8010b36:	e7da      	b.n	8010aee <_fflush_r+0x22>
 8010b38:	08011c34 	.word	0x08011c34
 8010b3c:	08011c54 	.word	0x08011c54
 8010b40:	08011c14 	.word	0x08011c14

08010b44 <std>:
 8010b44:	2300      	movs	r3, #0
 8010b46:	b510      	push	{r4, lr}
 8010b48:	4604      	mov	r4, r0
 8010b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b52:	6083      	str	r3, [r0, #8]
 8010b54:	8181      	strh	r1, [r0, #12]
 8010b56:	6643      	str	r3, [r0, #100]	; 0x64
 8010b58:	81c2      	strh	r2, [r0, #14]
 8010b5a:	6183      	str	r3, [r0, #24]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	2208      	movs	r2, #8
 8010b60:	305c      	adds	r0, #92	; 0x5c
 8010b62:	f7fb ff77 	bl	800ca54 <memset>
 8010b66:	4b05      	ldr	r3, [pc, #20]	; (8010b7c <std+0x38>)
 8010b68:	6263      	str	r3, [r4, #36]	; 0x24
 8010b6a:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <std+0x3c>)
 8010b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b6e:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <std+0x40>)
 8010b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <std+0x44>)
 8010b74:	6224      	str	r4, [r4, #32]
 8010b76:	6323      	str	r3, [r4, #48]	; 0x30
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	bf00      	nop
 8010b7c:	08010e89 	.word	0x08010e89
 8010b80:	08010eab 	.word	0x08010eab
 8010b84:	08010ee3 	.word	0x08010ee3
 8010b88:	08010f07 	.word	0x08010f07

08010b8c <_cleanup_r>:
 8010b8c:	4901      	ldr	r1, [pc, #4]	; (8010b94 <_cleanup_r+0x8>)
 8010b8e:	f000 b8af 	b.w	8010cf0 <_fwalk_reent>
 8010b92:	bf00      	nop
 8010b94:	08010acd 	.word	0x08010acd

08010b98 <__sfmoreglue>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	2268      	movs	r2, #104	; 0x68
 8010b9c:	1e4d      	subs	r5, r1, #1
 8010b9e:	4355      	muls	r5, r2
 8010ba0:	460e      	mov	r6, r1
 8010ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010ba6:	f7ff fa5f 	bl	8010068 <_malloc_r>
 8010baa:	4604      	mov	r4, r0
 8010bac:	b140      	cbz	r0, 8010bc0 <__sfmoreglue+0x28>
 8010bae:	2100      	movs	r1, #0
 8010bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8010bb4:	300c      	adds	r0, #12
 8010bb6:	60a0      	str	r0, [r4, #8]
 8010bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010bbc:	f7fb ff4a 	bl	800ca54 <memset>
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}

08010bc4 <__sfp_lock_acquire>:
 8010bc4:	4801      	ldr	r0, [pc, #4]	; (8010bcc <__sfp_lock_acquire+0x8>)
 8010bc6:	f000 b8b3 	b.w	8010d30 <__retarget_lock_acquire_recursive>
 8010bca:	bf00      	nop
 8010bcc:	20001619 	.word	0x20001619

08010bd0 <__sfp_lock_release>:
 8010bd0:	4801      	ldr	r0, [pc, #4]	; (8010bd8 <__sfp_lock_release+0x8>)
 8010bd2:	f000 b8ae 	b.w	8010d32 <__retarget_lock_release_recursive>
 8010bd6:	bf00      	nop
 8010bd8:	20001619 	.word	0x20001619

08010bdc <__sinit_lock_acquire>:
 8010bdc:	4801      	ldr	r0, [pc, #4]	; (8010be4 <__sinit_lock_acquire+0x8>)
 8010bde:	f000 b8a7 	b.w	8010d30 <__retarget_lock_acquire_recursive>
 8010be2:	bf00      	nop
 8010be4:	2000161a 	.word	0x2000161a

08010be8 <__sinit_lock_release>:
 8010be8:	4801      	ldr	r0, [pc, #4]	; (8010bf0 <__sinit_lock_release+0x8>)
 8010bea:	f000 b8a2 	b.w	8010d32 <__retarget_lock_release_recursive>
 8010bee:	bf00      	nop
 8010bf0:	2000161a 	.word	0x2000161a

08010bf4 <__sinit>:
 8010bf4:	b510      	push	{r4, lr}
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	f7ff fff0 	bl	8010bdc <__sinit_lock_acquire>
 8010bfc:	69a3      	ldr	r3, [r4, #24]
 8010bfe:	b11b      	cbz	r3, 8010c08 <__sinit+0x14>
 8010c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c04:	f7ff bff0 	b.w	8010be8 <__sinit_lock_release>
 8010c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8010c0e:	4b13      	ldr	r3, [pc, #76]	; (8010c5c <__sinit+0x68>)
 8010c10:	4a13      	ldr	r2, [pc, #76]	; (8010c60 <__sinit+0x6c>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c16:	42a3      	cmp	r3, r4
 8010c18:	bf04      	itt	eq
 8010c1a:	2301      	moveq	r3, #1
 8010c1c:	61a3      	streq	r3, [r4, #24]
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f000 f820 	bl	8010c64 <__sfp>
 8010c24:	6060      	str	r0, [r4, #4]
 8010c26:	4620      	mov	r0, r4
 8010c28:	f000 f81c 	bl	8010c64 <__sfp>
 8010c2c:	60a0      	str	r0, [r4, #8]
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 f818 	bl	8010c64 <__sfp>
 8010c34:	2200      	movs	r2, #0
 8010c36:	60e0      	str	r0, [r4, #12]
 8010c38:	2104      	movs	r1, #4
 8010c3a:	6860      	ldr	r0, [r4, #4]
 8010c3c:	f7ff ff82 	bl	8010b44 <std>
 8010c40:	68a0      	ldr	r0, [r4, #8]
 8010c42:	2201      	movs	r2, #1
 8010c44:	2109      	movs	r1, #9
 8010c46:	f7ff ff7d 	bl	8010b44 <std>
 8010c4a:	68e0      	ldr	r0, [r4, #12]
 8010c4c:	2202      	movs	r2, #2
 8010c4e:	2112      	movs	r1, #18
 8010c50:	f7ff ff78 	bl	8010b44 <std>
 8010c54:	2301      	movs	r3, #1
 8010c56:	61a3      	str	r3, [r4, #24]
 8010c58:	e7d2      	b.n	8010c00 <__sinit+0xc>
 8010c5a:	bf00      	nop
 8010c5c:	080118d4 	.word	0x080118d4
 8010c60:	08010b8d 	.word	0x08010b8d

08010c64 <__sfp>:
 8010c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c66:	4607      	mov	r7, r0
 8010c68:	f7ff ffac 	bl	8010bc4 <__sfp_lock_acquire>
 8010c6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ce8 <__sfp+0x84>)
 8010c6e:	681e      	ldr	r6, [r3, #0]
 8010c70:	69b3      	ldr	r3, [r6, #24]
 8010c72:	b913      	cbnz	r3, 8010c7a <__sfp+0x16>
 8010c74:	4630      	mov	r0, r6
 8010c76:	f7ff ffbd 	bl	8010bf4 <__sinit>
 8010c7a:	3648      	adds	r6, #72	; 0x48
 8010c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c80:	3b01      	subs	r3, #1
 8010c82:	d503      	bpl.n	8010c8c <__sfp+0x28>
 8010c84:	6833      	ldr	r3, [r6, #0]
 8010c86:	b30b      	cbz	r3, 8010ccc <__sfp+0x68>
 8010c88:	6836      	ldr	r6, [r6, #0]
 8010c8a:	e7f7      	b.n	8010c7c <__sfp+0x18>
 8010c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c90:	b9d5      	cbnz	r5, 8010cc8 <__sfp+0x64>
 8010c92:	4b16      	ldr	r3, [pc, #88]	; (8010cec <__sfp+0x88>)
 8010c94:	60e3      	str	r3, [r4, #12]
 8010c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8010c9c:	f000 f847 	bl	8010d2e <__retarget_lock_init_recursive>
 8010ca0:	f7ff ff96 	bl	8010bd0 <__sfp_lock_release>
 8010ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cac:	6025      	str	r5, [r4, #0]
 8010cae:	61a5      	str	r5, [r4, #24]
 8010cb0:	2208      	movs	r2, #8
 8010cb2:	4629      	mov	r1, r5
 8010cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010cb8:	f7fb fecc 	bl	800ca54 <memset>
 8010cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc8:	3468      	adds	r4, #104	; 0x68
 8010cca:	e7d9      	b.n	8010c80 <__sfp+0x1c>
 8010ccc:	2104      	movs	r1, #4
 8010cce:	4638      	mov	r0, r7
 8010cd0:	f7ff ff62 	bl	8010b98 <__sfmoreglue>
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	6030      	str	r0, [r6, #0]
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d1d5      	bne.n	8010c88 <__sfp+0x24>
 8010cdc:	f7ff ff78 	bl	8010bd0 <__sfp_lock_release>
 8010ce0:	230c      	movs	r3, #12
 8010ce2:	603b      	str	r3, [r7, #0]
 8010ce4:	e7ee      	b.n	8010cc4 <__sfp+0x60>
 8010ce6:	bf00      	nop
 8010ce8:	080118d4 	.word	0x080118d4
 8010cec:	ffff0001 	.word	0xffff0001

08010cf0 <_fwalk_reent>:
 8010cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	4688      	mov	r8, r1
 8010cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010cfc:	2700      	movs	r7, #0
 8010cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d02:	f1b9 0901 	subs.w	r9, r9, #1
 8010d06:	d505      	bpl.n	8010d14 <_fwalk_reent+0x24>
 8010d08:	6824      	ldr	r4, [r4, #0]
 8010d0a:	2c00      	cmp	r4, #0
 8010d0c:	d1f7      	bne.n	8010cfe <_fwalk_reent+0xe>
 8010d0e:	4638      	mov	r0, r7
 8010d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d14:	89ab      	ldrh	r3, [r5, #12]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d907      	bls.n	8010d2a <_fwalk_reent+0x3a>
 8010d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	d003      	beq.n	8010d2a <_fwalk_reent+0x3a>
 8010d22:	4629      	mov	r1, r5
 8010d24:	4630      	mov	r0, r6
 8010d26:	47c0      	blx	r8
 8010d28:	4307      	orrs	r7, r0
 8010d2a:	3568      	adds	r5, #104	; 0x68
 8010d2c:	e7e9      	b.n	8010d02 <_fwalk_reent+0x12>

08010d2e <__retarget_lock_init_recursive>:
 8010d2e:	4770      	bx	lr

08010d30 <__retarget_lock_acquire_recursive>:
 8010d30:	4770      	bx	lr

08010d32 <__retarget_lock_release_recursive>:
 8010d32:	4770      	bx	lr

08010d34 <__swhatbuf_r>:
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	460e      	mov	r6, r1
 8010d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d3c:	2900      	cmp	r1, #0
 8010d3e:	b096      	sub	sp, #88	; 0x58
 8010d40:	4614      	mov	r4, r2
 8010d42:	461d      	mov	r5, r3
 8010d44:	da08      	bge.n	8010d58 <__swhatbuf_r+0x24>
 8010d46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	602a      	str	r2, [r5, #0]
 8010d4e:	061a      	lsls	r2, r3, #24
 8010d50:	d410      	bmi.n	8010d74 <__swhatbuf_r+0x40>
 8010d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d56:	e00e      	b.n	8010d76 <__swhatbuf_r+0x42>
 8010d58:	466a      	mov	r2, sp
 8010d5a:	f000 f8fb 	bl	8010f54 <_fstat_r>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	dbf1      	blt.n	8010d46 <__swhatbuf_r+0x12>
 8010d62:	9a01      	ldr	r2, [sp, #4]
 8010d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d6c:	425a      	negs	r2, r3
 8010d6e:	415a      	adcs	r2, r3
 8010d70:	602a      	str	r2, [r5, #0]
 8010d72:	e7ee      	b.n	8010d52 <__swhatbuf_r+0x1e>
 8010d74:	2340      	movs	r3, #64	; 0x40
 8010d76:	2000      	movs	r0, #0
 8010d78:	6023      	str	r3, [r4, #0]
 8010d7a:	b016      	add	sp, #88	; 0x58
 8010d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d80 <__smakebuf_r>:
 8010d80:	898b      	ldrh	r3, [r1, #12]
 8010d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d84:	079d      	lsls	r5, r3, #30
 8010d86:	4606      	mov	r6, r0
 8010d88:	460c      	mov	r4, r1
 8010d8a:	d507      	bpl.n	8010d9c <__smakebuf_r+0x1c>
 8010d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	6123      	str	r3, [r4, #16]
 8010d94:	2301      	movs	r3, #1
 8010d96:	6163      	str	r3, [r4, #20]
 8010d98:	b002      	add	sp, #8
 8010d9a:	bd70      	pop	{r4, r5, r6, pc}
 8010d9c:	ab01      	add	r3, sp, #4
 8010d9e:	466a      	mov	r2, sp
 8010da0:	f7ff ffc8 	bl	8010d34 <__swhatbuf_r>
 8010da4:	9900      	ldr	r1, [sp, #0]
 8010da6:	4605      	mov	r5, r0
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff f95d 	bl	8010068 <_malloc_r>
 8010dae:	b948      	cbnz	r0, 8010dc4 <__smakebuf_r+0x44>
 8010db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010db4:	059a      	lsls	r2, r3, #22
 8010db6:	d4ef      	bmi.n	8010d98 <__smakebuf_r+0x18>
 8010db8:	f023 0303 	bic.w	r3, r3, #3
 8010dbc:	f043 0302 	orr.w	r3, r3, #2
 8010dc0:	81a3      	strh	r3, [r4, #12]
 8010dc2:	e7e3      	b.n	8010d8c <__smakebuf_r+0xc>
 8010dc4:	4b0d      	ldr	r3, [pc, #52]	; (8010dfc <__smakebuf_r+0x7c>)
 8010dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	6020      	str	r0, [r4, #0]
 8010dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd0:	81a3      	strh	r3, [r4, #12]
 8010dd2:	9b00      	ldr	r3, [sp, #0]
 8010dd4:	6163      	str	r3, [r4, #20]
 8010dd6:	9b01      	ldr	r3, [sp, #4]
 8010dd8:	6120      	str	r0, [r4, #16]
 8010dda:	b15b      	cbz	r3, 8010df4 <__smakebuf_r+0x74>
 8010ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010de0:	4630      	mov	r0, r6
 8010de2:	f000 f8c9 	bl	8010f78 <_isatty_r>
 8010de6:	b128      	cbz	r0, 8010df4 <__smakebuf_r+0x74>
 8010de8:	89a3      	ldrh	r3, [r4, #12]
 8010dea:	f023 0303 	bic.w	r3, r3, #3
 8010dee:	f043 0301 	orr.w	r3, r3, #1
 8010df2:	81a3      	strh	r3, [r4, #12]
 8010df4:	89a0      	ldrh	r0, [r4, #12]
 8010df6:	4305      	orrs	r5, r0
 8010df8:	81a5      	strh	r5, [r4, #12]
 8010dfa:	e7cd      	b.n	8010d98 <__smakebuf_r+0x18>
 8010dfc:	08010b8d 	.word	0x08010b8d

08010e00 <_raise_r>:
 8010e00:	291f      	cmp	r1, #31
 8010e02:	b538      	push	{r3, r4, r5, lr}
 8010e04:	4604      	mov	r4, r0
 8010e06:	460d      	mov	r5, r1
 8010e08:	d904      	bls.n	8010e14 <_raise_r+0x14>
 8010e0a:	2316      	movs	r3, #22
 8010e0c:	6003      	str	r3, [r0, #0]
 8010e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e12:	bd38      	pop	{r3, r4, r5, pc}
 8010e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e16:	b112      	cbz	r2, 8010e1e <_raise_r+0x1e>
 8010e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e1c:	b94b      	cbnz	r3, 8010e32 <_raise_r+0x32>
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f000 f830 	bl	8010e84 <_getpid_r>
 8010e24:	462a      	mov	r2, r5
 8010e26:	4601      	mov	r1, r0
 8010e28:	4620      	mov	r0, r4
 8010e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e2e:	f000 b817 	b.w	8010e60 <_kill_r>
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d00a      	beq.n	8010e4c <_raise_r+0x4c>
 8010e36:	1c59      	adds	r1, r3, #1
 8010e38:	d103      	bne.n	8010e42 <_raise_r+0x42>
 8010e3a:	2316      	movs	r3, #22
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	2001      	movs	r0, #1
 8010e40:	e7e7      	b.n	8010e12 <_raise_r+0x12>
 8010e42:	2400      	movs	r4, #0
 8010e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e48:	4628      	mov	r0, r5
 8010e4a:	4798      	blx	r3
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	e7e0      	b.n	8010e12 <_raise_r+0x12>

08010e50 <raise>:
 8010e50:	4b02      	ldr	r3, [pc, #8]	; (8010e5c <raise+0xc>)
 8010e52:	4601      	mov	r1, r0
 8010e54:	6818      	ldr	r0, [r3, #0]
 8010e56:	f7ff bfd3 	b.w	8010e00 <_raise_r>
 8010e5a:	bf00      	nop
 8010e5c:	200001a8 	.word	0x200001a8

08010e60 <_kill_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	4d07      	ldr	r5, [pc, #28]	; (8010e80 <_kill_r+0x20>)
 8010e64:	2300      	movs	r3, #0
 8010e66:	4604      	mov	r4, r0
 8010e68:	4608      	mov	r0, r1
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	602b      	str	r3, [r5, #0]
 8010e6e:	f7f2 fa55 	bl	800331c <_kill>
 8010e72:	1c43      	adds	r3, r0, #1
 8010e74:	d102      	bne.n	8010e7c <_kill_r+0x1c>
 8010e76:	682b      	ldr	r3, [r5, #0]
 8010e78:	b103      	cbz	r3, 8010e7c <_kill_r+0x1c>
 8010e7a:	6023      	str	r3, [r4, #0]
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	bf00      	nop
 8010e80:	20001614 	.word	0x20001614

08010e84 <_getpid_r>:
 8010e84:	f7f2 ba42 	b.w	800330c <_getpid>

08010e88 <__sread>:
 8010e88:	b510      	push	{r4, lr}
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e90:	f000 f894 	bl	8010fbc <_read_r>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	bfab      	itete	ge
 8010e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e9c:	181b      	addge	r3, r3, r0
 8010e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ea2:	bfac      	ite	ge
 8010ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ea6:	81a3      	strhlt	r3, [r4, #12]
 8010ea8:	bd10      	pop	{r4, pc}

08010eaa <__swrite>:
 8010eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eae:	461f      	mov	r7, r3
 8010eb0:	898b      	ldrh	r3, [r1, #12]
 8010eb2:	05db      	lsls	r3, r3, #23
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	4616      	mov	r6, r2
 8010eba:	d505      	bpl.n	8010ec8 <__swrite+0x1e>
 8010ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec0:	2302      	movs	r3, #2
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f000 f868 	bl	8010f98 <_lseek_r>
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ed2:	81a3      	strh	r3, [r4, #12]
 8010ed4:	4632      	mov	r2, r6
 8010ed6:	463b      	mov	r3, r7
 8010ed8:	4628      	mov	r0, r5
 8010eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ede:	f000 b817 	b.w	8010f10 <_write_r>

08010ee2 <__sseek>:
 8010ee2:	b510      	push	{r4, lr}
 8010ee4:	460c      	mov	r4, r1
 8010ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eea:	f000 f855 	bl	8010f98 <_lseek_r>
 8010eee:	1c43      	adds	r3, r0, #1
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	bf15      	itete	ne
 8010ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010efe:	81a3      	strheq	r3, [r4, #12]
 8010f00:	bf18      	it	ne
 8010f02:	81a3      	strhne	r3, [r4, #12]
 8010f04:	bd10      	pop	{r4, pc}

08010f06 <__sclose>:
 8010f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f0a:	f000 b813 	b.w	8010f34 <_close_r>
	...

08010f10 <_write_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d07      	ldr	r5, [pc, #28]	; (8010f30 <_write_r+0x20>)
 8010f14:	4604      	mov	r4, r0
 8010f16:	4608      	mov	r0, r1
 8010f18:	4611      	mov	r1, r2
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	602a      	str	r2, [r5, #0]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	f7f2 fa33 	bl	800338a <_write>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d102      	bne.n	8010f2e <_write_r+0x1e>
 8010f28:	682b      	ldr	r3, [r5, #0]
 8010f2a:	b103      	cbz	r3, 8010f2e <_write_r+0x1e>
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	20001614 	.word	0x20001614

08010f34 <_close_r>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	4d06      	ldr	r5, [pc, #24]	; (8010f50 <_close_r+0x1c>)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	4608      	mov	r0, r1
 8010f3e:	602b      	str	r3, [r5, #0]
 8010f40:	f7f2 fa3f 	bl	80033c2 <_close>
 8010f44:	1c43      	adds	r3, r0, #1
 8010f46:	d102      	bne.n	8010f4e <_close_r+0x1a>
 8010f48:	682b      	ldr	r3, [r5, #0]
 8010f4a:	b103      	cbz	r3, 8010f4e <_close_r+0x1a>
 8010f4c:	6023      	str	r3, [r4, #0]
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	20001614 	.word	0x20001614

08010f54 <_fstat_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4d07      	ldr	r5, [pc, #28]	; (8010f74 <_fstat_r+0x20>)
 8010f58:	2300      	movs	r3, #0
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	4608      	mov	r0, r1
 8010f5e:	4611      	mov	r1, r2
 8010f60:	602b      	str	r3, [r5, #0]
 8010f62:	f7f2 fa3a 	bl	80033da <_fstat>
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	d102      	bne.n	8010f70 <_fstat_r+0x1c>
 8010f6a:	682b      	ldr	r3, [r5, #0]
 8010f6c:	b103      	cbz	r3, 8010f70 <_fstat_r+0x1c>
 8010f6e:	6023      	str	r3, [r4, #0]
 8010f70:	bd38      	pop	{r3, r4, r5, pc}
 8010f72:	bf00      	nop
 8010f74:	20001614 	.word	0x20001614

08010f78 <_isatty_r>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	4d06      	ldr	r5, [pc, #24]	; (8010f94 <_isatty_r+0x1c>)
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4608      	mov	r0, r1
 8010f82:	602b      	str	r3, [r5, #0]
 8010f84:	f7f2 fa39 	bl	80033fa <_isatty>
 8010f88:	1c43      	adds	r3, r0, #1
 8010f8a:	d102      	bne.n	8010f92 <_isatty_r+0x1a>
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	b103      	cbz	r3, 8010f92 <_isatty_r+0x1a>
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	20001614 	.word	0x20001614

08010f98 <_lseek_r>:
 8010f98:	b538      	push	{r3, r4, r5, lr}
 8010f9a:	4d07      	ldr	r5, [pc, #28]	; (8010fb8 <_lseek_r+0x20>)
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	4608      	mov	r0, r1
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	602a      	str	r2, [r5, #0]
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	f7f2 fa32 	bl	8003410 <_lseek>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_lseek_r+0x1e>
 8010fb0:	682b      	ldr	r3, [r5, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_lseek_r+0x1e>
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	20001614 	.word	0x20001614

08010fbc <_read_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4d07      	ldr	r5, [pc, #28]	; (8010fdc <_read_r+0x20>)
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	4608      	mov	r0, r1
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	602a      	str	r2, [r5, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	f7f2 f9c0 	bl	8003350 <_read>
 8010fd0:	1c43      	adds	r3, r0, #1
 8010fd2:	d102      	bne.n	8010fda <_read_r+0x1e>
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	b103      	cbz	r3, 8010fda <_read_r+0x1e>
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	20001614 	.word	0x20001614

08010fe0 <roundf>:
 8010fe0:	ee10 0a10 	vmov	r0, s0
 8010fe4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010fe8:	3a7f      	subs	r2, #127	; 0x7f
 8010fea:	2a16      	cmp	r2, #22
 8010fec:	dc15      	bgt.n	801101a <roundf+0x3a>
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	da08      	bge.n	8011004 <roundf+0x24>
 8010ff2:	3201      	adds	r2, #1
 8010ff4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010ff8:	d101      	bne.n	8010ffe <roundf+0x1e>
 8010ffa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010ffe:	ee00 3a10 	vmov	s0, r3
 8011002:	4770      	bx	lr
 8011004:	4907      	ldr	r1, [pc, #28]	; (8011024 <roundf+0x44>)
 8011006:	4111      	asrs	r1, r2
 8011008:	4208      	tst	r0, r1
 801100a:	d0fa      	beq.n	8011002 <roundf+0x22>
 801100c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011010:	4113      	asrs	r3, r2
 8011012:	4403      	add	r3, r0
 8011014:	ea23 0301 	bic.w	r3, r3, r1
 8011018:	e7f1      	b.n	8010ffe <roundf+0x1e>
 801101a:	2a80      	cmp	r2, #128	; 0x80
 801101c:	d1f1      	bne.n	8011002 <roundf+0x22>
 801101e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011022:	4770      	bx	lr
 8011024:	007fffff 	.word	0x007fffff

08011028 <_init>:
 8011028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102a:	bf00      	nop
 801102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102e:	bc08      	pop	{r3}
 8011030:	469e      	mov	lr, r3
 8011032:	4770      	bx	lr

08011034 <_fini>:
 8011034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011036:	bf00      	nop
 8011038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103a:	bc08      	pop	{r3}
 801103c:	469e      	mov	lr, r3
 801103e:	4770      	bx	lr
