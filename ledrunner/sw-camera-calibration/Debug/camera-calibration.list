
camera-calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009208  08009208  00019208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d8  080096d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e0  080096e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080096e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  080098c4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080098c4  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e876  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  0002ea7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000317f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015520  00000000  00000000  000323b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8bb  00000000  00000000  000478d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ab6  00000000  00000000  00056193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  000d6c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091ec 	.word	0x080091ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080091ec 	.word	0x080091ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f827 	bl	8001490 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f819 	bl	8001490 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f80f 	bl	8001490 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff9f 	bl	80013c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff95 	bl	80013c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 febe 	bl	80022e4 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 feb9 	bl	80022e4 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	000d      	movs	r5, r1
 80006e6:	0004      	movs	r4, r0
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	001f      	movs	r7, r3
 80006ec:	0011      	movs	r1, r2
 80006ee:	0328      	lsls	r0, r5, #12
 80006f0:	0f62      	lsrs	r2, r4, #29
 80006f2:	0a40      	lsrs	r0, r0, #9
 80006f4:	4310      	orrs	r0, r2
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	0d52      	lsrs	r2, r2, #21
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	4691      	mov	r9, r2
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0ffa      	lsrs	r2, r7, #31
 8000704:	0f4f      	lsrs	r7, r1, #29
 8000706:	006e      	lsls	r6, r5, #1
 8000708:	4327      	orrs	r7, r4
 800070a:	4692      	mov	sl, r2
 800070c:	46b8      	mov	r8, r7
 800070e:	0d76      	lsrs	r6, r6, #21
 8000710:	0fed      	lsrs	r5, r5, #31
 8000712:	00c9      	lsls	r1, r1, #3
 8000714:	4295      	cmp	r5, r2
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e099      	b.n	800084e <__aeabi_dadd+0x172>
 800071a:	464c      	mov	r4, r9
 800071c:	1b34      	subs	r4, r6, r4
 800071e:	46a4      	mov	ip, r4
 8000720:	2c00      	cmp	r4, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e07c      	b.n	8000820 <__aeabi_dadd+0x144>
 8000726:	464a      	mov	r2, r9
 8000728:	2a00      	cmp	r2, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b8      	b.n	80008a0 <__aeabi_dadd+0x1c4>
 800072e:	4ac5      	ldr	r2, [pc, #788]	; (8000a44 <__aeabi_dadd+0x368>)
 8000730:	4296      	cmp	r6, r2
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x5a>
 8000734:	e11c      	b.n	8000970 <__aeabi_dadd+0x294>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	003c      	movs	r4, r7
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4314      	orrs	r4, r2
 800073e:	46a0      	mov	r8, r4
 8000740:	4662      	mov	r2, ip
 8000742:	2a38      	cmp	r2, #56	; 0x38
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x6c>
 8000746:	e161      	b.n	8000a0c <__aeabi_dadd+0x330>
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x72>
 800074c:	e1cc      	b.n	8000ae8 <__aeabi_dadd+0x40c>
 800074e:	4664      	mov	r4, ip
 8000750:	2220      	movs	r2, #32
 8000752:	1b12      	subs	r2, r2, r4
 8000754:	4644      	mov	r4, r8
 8000756:	4094      	lsls	r4, r2
 8000758:	000f      	movs	r7, r1
 800075a:	46a1      	mov	r9, r4
 800075c:	4664      	mov	r4, ip
 800075e:	4091      	lsls	r1, r2
 8000760:	40e7      	lsrs	r7, r4
 8000762:	464c      	mov	r4, r9
 8000764:	1e4a      	subs	r2, r1, #1
 8000766:	4191      	sbcs	r1, r2
 8000768:	433c      	orrs	r4, r7
 800076a:	4642      	mov	r2, r8
 800076c:	4321      	orrs	r1, r4
 800076e:	4664      	mov	r4, ip
 8000770:	40e2      	lsrs	r2, r4
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	1a5c      	subs	r4, r3, r1
 8000776:	42a3      	cmp	r3, r4
 8000778:	419b      	sbcs	r3, r3
 800077a:	425f      	negs	r7, r3
 800077c:	1bc7      	subs	r7, r0, r7
 800077e:	023b      	lsls	r3, r7, #8
 8000780:	d400      	bmi.n	8000784 <__aeabi_dadd+0xa8>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000784:	027f      	lsls	r7, r7, #9
 8000786:	0a7f      	lsrs	r7, r7, #9
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0xb2>
 800078c:	e0ff      	b.n	800098e <__aeabi_dadd+0x2b2>
 800078e:	0038      	movs	r0, r7
 8000790:	f001 fd8a 	bl	80022a8 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	3908      	subs	r1, #8
 8000798:	2320      	movs	r3, #32
 800079a:	0022      	movs	r2, r4
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	408f      	lsls	r7, r1
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4317      	orrs	r7, r2
 80007a6:	42b1      	cmp	r1, r6
 80007a8:	da00      	bge.n	80007ac <__aeabi_dadd+0xd0>
 80007aa:	e0ff      	b.n	80009ac <__aeabi_dadd+0x2d0>
 80007ac:	1b89      	subs	r1, r1, r6
 80007ae:	1c4b      	adds	r3, r1, #1
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xda>
 80007b4:	e0a8      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b6:	2220      	movs	r2, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	0020      	movs	r0, r4
 80007be:	4094      	lsls	r4, r2
 80007c0:	4091      	lsls	r1, r2
 80007c2:	40d8      	lsrs	r0, r3
 80007c4:	1e62      	subs	r2, r4, #1
 80007c6:	4194      	sbcs	r4, r2
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2600      	movs	r6, #0
 80007cc:	4301      	orrs	r1, r0
 80007ce:	430c      	orrs	r4, r1
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	193f      	adds	r7, r7, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	023b      	lsls	r3, r7, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e09e      	b.n	800092c <__aeabi_dadd+0x250>
 80007ee:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <__aeabi_dadd+0x368>)
 80007f0:	3601      	adds	r6, #1
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0b7      	b.n	8000968 <__aeabi_dadd+0x28c>
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4017      	ands	r7, r2
 80007fe:	077b      	lsls	r3, r7, #29
 8000800:	0571      	lsls	r1, r6, #21
 8000802:	027f      	lsls	r7, r7, #9
 8000804:	4323      	orrs	r3, r4
 8000806:	0b3f      	lsrs	r7, r7, #12
 8000808:	0d4a      	lsrs	r2, r1, #21
 800080a:	0512      	lsls	r2, r2, #20
 800080c:	433a      	orrs	r2, r7
 800080e:	07ed      	lsls	r5, r5, #31
 8000810:	432a      	orrs	r2, r5
 8000812:	0018      	movs	r0, r3
 8000814:	0011      	movs	r1, r2
 8000816:	bce0      	pop	{r5, r6, r7}
 8000818:	46ba      	mov	sl, r7
 800081a:	46b1      	mov	r9, r6
 800081c:	46a8      	mov	r8, r5
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2c00      	cmp	r4, #0
 8000822:	d04b      	beq.n	80008bc <__aeabi_dadd+0x1e0>
 8000824:	464c      	mov	r4, r9
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	46a4      	mov	ip, r4
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_dadd+0x154>
 800082e:	e123      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000830:	0004      	movs	r4, r0
 8000832:	431c      	orrs	r4, r3
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x15c>
 8000836:	e1af      	b.n	8000b98 <__aeabi_dadd+0x4bc>
 8000838:	4662      	mov	r2, ip
 800083a:	1e54      	subs	r4, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x166>
 8000840:	e215      	b.n	8000c6e <__aeabi_dadd+0x592>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x368>)
 8000844:	45ac      	cmp	ip, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x16e>
 8000848:	e1c8      	b.n	8000bdc <__aeabi_dadd+0x500>
 800084a:	46a4      	mov	ip, r4
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3aa>
 800084e:	464a      	mov	r2, r9
 8000850:	1ab2      	subs	r2, r6, r2
 8000852:	4694      	mov	ip, r2
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x17e>
 8000858:	e0ac      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 800085a:	464a      	mov	r2, r9
 800085c:	2a00      	cmp	r2, #0
 800085e:	d043      	beq.n	80008e8 <__aeabi_dadd+0x20c>
 8000860:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <__aeabi_dadd+0x368>)
 8000862:	4296      	cmp	r6, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x18c>
 8000866:	e1af      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	003c      	movs	r4, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4314      	orrs	r4, r2
 8000870:	46a0      	mov	r8, r4
 8000872:	4662      	mov	r2, ip
 8000874:	2a38      	cmp	r2, #56	; 0x38
 8000876:	dc67      	bgt.n	8000948 <__aeabi_dadd+0x26c>
 8000878:	2a1f      	cmp	r2, #31
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x1a2>
 800087c:	e15f      	b.n	8000b3e <__aeabi_dadd+0x462>
 800087e:	4647      	mov	r7, r8
 8000880:	3a20      	subs	r2, #32
 8000882:	40d7      	lsrs	r7, r2
 8000884:	4662      	mov	r2, ip
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 800088a:	4664      	mov	r4, ip
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	1b12      	subs	r2, r2, r4
 8000890:	4644      	mov	r4, r8
 8000892:	4094      	lsls	r4, r2
 8000894:	4321      	orrs	r1, r4
 8000896:	1e4a      	subs	r2, r1, #1
 8000898:	4191      	sbcs	r1, r2
 800089a:	000c      	movs	r4, r1
 800089c:	433c      	orrs	r4, r7
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x274>
 80008a0:	003a      	movs	r2, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1cc>
 80008a6:	e105      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008a8:	0022      	movs	r2, r4
 80008aa:	3a01      	subs	r2, #1
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1d6>
 80008b0:	e182      	b.n	8000bb8 <__aeabi_dadd+0x4dc>
 80008b2:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x368>)
 80008b4:	45a4      	cmp	ip, r4
 80008b6:	d05b      	beq.n	8000970 <__aeabi_dadd+0x294>
 80008b8:	4694      	mov	ip, r2
 80008ba:	e741      	b.n	8000740 <__aeabi_dadd+0x64>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x370>)
 80008be:	1c77      	adds	r7, r6, #1
 80008c0:	4227      	tst	r7, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ea>
 80008c4:	e0c4      	b.n	8000a50 <__aeabi_dadd+0x374>
 80008c6:	0004      	movs	r4, r0
 80008c8:	431c      	orrs	r4, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f4>
 80008ce:	e169      	b.n	8000ba4 <__aeabi_dadd+0x4c8>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fa>
 80008d4:	e1bf      	b.n	8000c56 <__aeabi_dadd+0x57a>
 80008d6:	4644      	mov	r4, r8
 80008d8:	430c      	orrs	r4, r1
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x202>
 80008dc:	e1d0      	b.n	8000c80 <__aeabi_dadd+0x5a4>
 80008de:	0742      	lsls	r2, r0, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x260>
 80008e8:	003a      	movs	r2, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x214>
 80008ee:	e170      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c51      	ldr	r4, [pc, #324]	; (8000a44 <__aeabi_dadd+0x368>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e161      	b.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000904:	4694      	mov	ip, r2
 8000906:	e7b4      	b.n	8000872 <__aeabi_dadd+0x196>
 8000908:	003a      	movs	r2, r7
 800090a:	391f      	subs	r1, #31
 800090c:	40ca      	lsrs	r2, r1
 800090e:	0011      	movs	r1, r2
 8000910:	2b20      	cmp	r3, #32
 8000912:	d003      	beq.n	800091c <__aeabi_dadd+0x240>
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	409f      	lsls	r7, r3
 800091a:	433c      	orrs	r4, r7
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	2700      	movs	r7, #0
 8000922:	2600      	movs	r6, #0
 8000924:	430c      	orrs	r4, r1
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e753      	b.n	80007d4 <__aeabi_dadd+0xf8>
 800092c:	46b4      	mov	ip, r6
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	077b      	lsls	r3, r7, #29
 8000932:	4323      	orrs	r3, r4
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x368>)
 8000938:	4594      	cmp	ip, r2
 800093a:	d01d      	beq.n	8000978 <__aeabi_dadd+0x29c>
 800093c:	4662      	mov	r2, ip
 800093e:	0307      	lsls	r7, r0, #12
 8000940:	0552      	lsls	r2, r2, #21
 8000942:	0b3f      	lsrs	r7, r7, #12
 8000944:	0d52      	lsrs	r2, r2, #21
 8000946:	e760      	b.n	800080a <__aeabi_dadd+0x12e>
 8000948:	4644      	mov	r4, r8
 800094a:	430c      	orrs	r4, r1
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	419b      	sbcs	r3, r3
 8000956:	425f      	negs	r7, r3
 8000958:	183f      	adds	r7, r7, r0
 800095a:	023b      	lsls	r3, r7, #8
 800095c:	d5e3      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <__aeabi_dadd+0x368>)
 8000960:	3601      	adds	r6, #1
 8000962:	429e      	cmp	r6, r3
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x28c>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_dadd+0x3f8>
 8000968:	0032      	movs	r2, r6
 800096a:	2700      	movs	r7, #0
 800096c:	2300      	movs	r3, #0
 800096e:	e74c      	b.n	800080a <__aeabi_dadd+0x12e>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	001a      	movs	r2, r3
 800097a:	4302      	orrs	r2, r0
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2a4>
 800097e:	e1e1      	b.n	8000d44 <__aeabi_dadd+0x668>
 8000980:	2780      	movs	r7, #128	; 0x80
 8000982:	033f      	lsls	r7, r7, #12
 8000984:	4307      	orrs	r7, r0
 8000986:	033f      	lsls	r7, r7, #12
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <__aeabi_dadd+0x368>)
 800098a:	0b3f      	lsrs	r7, r7, #12
 800098c:	e73d      	b.n	800080a <__aeabi_dadd+0x12e>
 800098e:	0020      	movs	r0, r4
 8000990:	f001 fc8a 	bl	80022a8 <__clzsi2>
 8000994:	0001      	movs	r1, r0
 8000996:	3118      	adds	r1, #24
 8000998:	291f      	cmp	r1, #31
 800099a:	dc00      	bgt.n	800099e <__aeabi_dadd+0x2c2>
 800099c:	e6fc      	b.n	8000798 <__aeabi_dadd+0xbc>
 800099e:	3808      	subs	r0, #8
 80009a0:	4084      	lsls	r4, r0
 80009a2:	0027      	movs	r7, r4
 80009a4:	2400      	movs	r4, #0
 80009a6:	42b1      	cmp	r1, r6
 80009a8:	db00      	blt.n	80009ac <__aeabi_dadd+0x2d0>
 80009aa:	e6ff      	b.n	80007ac <__aeabi_dadd+0xd0>
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009ae:	1a76      	subs	r6, r6, r1
 80009b0:	4017      	ands	r7, r2
 80009b2:	e70d      	b.n	80007d0 <__aeabi_dadd+0xf4>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d02f      	beq.n	8000a18 <__aeabi_dadd+0x33c>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1b92      	subs	r2, r2, r6
 80009bc:	4694      	mov	ip, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x2e8>
 80009c2:	e0ad      	b.n	8000b20 <__aeabi_dadd+0x444>
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <__aeabi_dadd+0x368>)
 80009c6:	4591      	cmp	r9, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x2f0>
 80009ca:	e10f      	b.n	8000bec <__aeabi_dadd+0x510>
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	4310      	orrs	r0, r2
 80009d2:	4662      	mov	r2, ip
 80009d4:	2a38      	cmp	r2, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x2fe>
 80009d8:	e10f      	b.n	8000bfa <__aeabi_dadd+0x51e>
 80009da:	2a1f      	cmp	r2, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x304>
 80009de:	e180      	b.n	8000ce2 <__aeabi_dadd+0x606>
 80009e0:	4664      	mov	r4, ip
 80009e2:	2220      	movs	r2, #32
 80009e4:	001e      	movs	r6, r3
 80009e6:	1b12      	subs	r2, r2, r4
 80009e8:	4667      	mov	r7, ip
 80009ea:	0004      	movs	r4, r0
 80009ec:	4093      	lsls	r3, r2
 80009ee:	4094      	lsls	r4, r2
 80009f0:	40fe      	lsrs	r6, r7
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	40f8      	lsrs	r0, r7
 80009f8:	4334      	orrs	r4, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4480      	add	r8, r0
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	428c      	cmp	r4, r1
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	427f      	negs	r7, r7
 8000a06:	464e      	mov	r6, r9
 8000a08:	4447      	add	r7, r8
 8000a0a:	e7a6      	b.n	800095a <__aeabi_dadd+0x27e>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	0011      	movs	r1, r2
 8000a12:	1e4a      	subs	r2, r1, #1
 8000a14:	4191      	sbcs	r1, r2
 8000a16:	e6ad      	b.n	8000774 <__aeabi_dadd+0x98>
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__aeabi_dadd+0x370>)
 8000a1a:	1c72      	adds	r2, r6, #1
 8000a1c:	4222      	tst	r2, r4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a1      	b.n	8000b66 <__aeabi_dadd+0x48a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e0fa      	b.n	8000c22 <__aeabi_dadd+0x546>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x356>
 8000a30:	e145      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000a32:	003a      	movs	r2, r7
 8000a34:	430a      	orrs	r2, r1
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x35e>
 8000a38:	e146      	b.n	8000cc8 <__aeabi_dadd+0x5ec>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e77b      	b.n	800093c <__aeabi_dadd+0x260>
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4647      	mov	r7, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1bc2      	subs	r2, r0, r7
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	41bf      	sbcs	r7, r7
 8000a5a:	427f      	negs	r7, r7
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	464a      	mov	r2, r9
 8000a62:	1abf      	subs	r7, r7, r2
 8000a64:	023a      	lsls	r2, r7, #8
 8000a66:	d500      	bpl.n	8000a6a <__aeabi_dadd+0x38e>
 8000a68:	e08d      	b.n	8000b86 <__aeabi_dadd+0x4aa>
 8000a6a:	0023      	movs	r3, r4
 8000a6c:	433b      	orrs	r3, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x396>
 8000a70:	e68a      	b.n	8000788 <__aeabi_dadd+0xac>
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	e761      	b.n	800093c <__aeabi_dadd+0x260>
 8000a78:	4cb4      	ldr	r4, [pc, #720]	; (8000d4c <__aeabi_dadd+0x670>)
 8000a7a:	45a1      	cmp	r9, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e0ad      	b.n	8000bdc <__aeabi_dadd+0x500>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	0424      	lsls	r4, r4, #16
 8000a84:	4320      	orrs	r0, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c38      	cmp	r4, #56	; 0x38
 8000a8a:	dc3d      	bgt.n	8000b08 <__aeabi_dadd+0x42c>
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	2c1f      	cmp	r4, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x3b8>
 8000a92:	e0b7      	b.n	8000c04 <__aeabi_dadd+0x528>
 8000a94:	2520      	movs	r5, #32
 8000a96:	001e      	movs	r6, r3
 8000a98:	1b2d      	subs	r5, r5, r4
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	40ab      	lsls	r3, r5
 8000a9e:	40ac      	lsls	r4, r5
 8000aa0:	40d6      	lsrs	r6, r2
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1e5d      	subs	r5, r3, #1
 8000aa8:	41ab      	sbcs	r3, r5
 8000aaa:	4334      	orrs	r4, r6
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	e02c      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000ab4:	0742      	lsls	r2, r0, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	e73b      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000abe:	185c      	adds	r4, r3, r1
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4440      	add	r0, r8
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	18c7      	adds	r7, r0, r3
 8000aca:	2601      	movs	r6, #1
 8000acc:	023b      	lsls	r3, r7, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3f6>
 8000ad0:	e729      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4a9e      	ldr	r2, [pc, #632]	; (8000d50 <__aeabi_dadd+0x674>)
 8000ad6:	0863      	lsrs	r3, r4, #1
 8000ad8:	4017      	ands	r7, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4014      	ands	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07fb      	lsls	r3, r7, #31
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	087f      	lsrs	r7, r7, #1
 8000ae6:	e673      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ae8:	4644      	mov	r4, r8
 8000aea:	3a20      	subs	r2, #32
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a20      	cmp	r2, #32
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x424>
 8000af4:	4667      	mov	r7, ip
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	1bd2      	subs	r2, r2, r7
 8000afa:	4647      	mov	r7, r8
 8000afc:	4097      	lsls	r7, r2
 8000afe:	4339      	orrs	r1, r7
 8000b00:	1e4a      	subs	r2, r1, #1
 8000b02:	4191      	sbcs	r1, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	e635      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	1acc      	subs	r4, r1, r3
 8000b10:	42a1      	cmp	r1, r4
 8000b12:	41bf      	sbcs	r7, r7
 8000b14:	4643      	mov	r3, r8
 8000b16:	427f      	negs	r7, r7
 8000b18:	4655      	mov	r5, sl
 8000b1a:	464e      	mov	r6, r9
 8000b1c:	1bdf      	subs	r7, r3, r7
 8000b1e:	e62e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000b20:	0002      	movs	r2, r0
 8000b22:	431a      	orrs	r2, r3
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x44c>
 8000b26:	e0bd      	b.n	8000ca4 <__aeabi_dadd+0x5c8>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	4664      	mov	r4, ip
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x458>
 8000b32:	e0e5      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000b34:	4c85      	ldr	r4, [pc, #532]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d058      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	e749      	b.n	80009d2 <__aeabi_dadd+0x2f6>
 8000b3e:	4664      	mov	r4, ip
 8000b40:	2220      	movs	r2, #32
 8000b42:	1b12      	subs	r2, r2, r4
 8000b44:	4644      	mov	r4, r8
 8000b46:	4094      	lsls	r4, r2
 8000b48:	000f      	movs	r7, r1
 8000b4a:	46a1      	mov	r9, r4
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	40e7      	lsrs	r7, r4
 8000b52:	464c      	mov	r4, r9
 8000b54:	1e4a      	subs	r2, r1, #1
 8000b56:	4191      	sbcs	r1, r2
 8000b58:	433c      	orrs	r4, r7
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	40ca      	lsrs	r2, r1
 8000b62:	1880      	adds	r0, r0, r2
 8000b64:	e6f4      	b.n	8000950 <__aeabi_dadd+0x274>
 8000b66:	4c79      	ldr	r4, [pc, #484]	; (8000d4c <__aeabi_dadd+0x670>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x492>
 8000b6c:	e6fd      	b.n	800096a <__aeabi_dadd+0x28e>
 8000b6e:	1859      	adds	r1, r3, r1
 8000b70:	4299      	cmp	r1, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4440      	add	r0, r8
 8000b76:	425f      	negs	r7, r3
 8000b78:	19c7      	adds	r7, r0, r7
 8000b7a:	07fc      	lsls	r4, r7, #31
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0016      	movs	r6, r2
 8000b80:	430c      	orrs	r4, r1
 8000b82:	087f      	lsrs	r7, r7, #1
 8000b84:	e6cf      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b86:	1acc      	subs	r4, r1, r3
 8000b88:	42a1      	cmp	r1, r4
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	427f      	negs	r7, r7
 8000b90:	1a18      	subs	r0, r3, r0
 8000b92:	4655      	mov	r5, sl
 8000b94:	1bc7      	subs	r7, r0, r7
 8000b96:	e5f7      	b.n	8000788 <__aeabi_dadd+0xac>
 8000b98:	08c9      	lsrs	r1, r1, #3
 8000b9a:	077b      	lsls	r3, r7, #29
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	e6c8      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x4ce>
 8000ba8:	e081      	b.n	8000cae <__aeabi_dadd+0x5d2>
 8000baa:	4643      	mov	r3, r8
 8000bac:	430b      	orrs	r3, r1
 8000bae:	d115      	bne.n	8000bdc <__aeabi_dadd+0x500>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	0300      	lsls	r0, r0, #12
 8000bb6:	e6e3      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bb8:	1a5c      	subs	r4, r3, r1
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	1bc7      	subs	r7, r0, r7
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	e5da      	b.n	800077e <__aeabi_dadd+0xa2>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	e6d2      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bd2:	0742      	lsls	r2, r0, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	e6ac      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000bdc:	4643      	mov	r3, r8
 8000bde:	4642      	mov	r2, r8
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	075b      	lsls	r3, r3, #29
 8000be4:	4655      	mov	r5, sl
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08d0      	lsrs	r0, r2, #3
 8000bea:	e6c5      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bec:	4643      	mov	r3, r8
 8000bee:	4642      	mov	r2, r8
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	08d0      	lsrs	r0, r2, #3
 8000bf8:	e6be      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	e6fc      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c04:	0002      	movs	r2, r0
 8000c06:	3c20      	subs	r4, #32
 8000c08:	40e2      	lsrs	r2, r4
 8000c0a:	0014      	movs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d003      	beq.n	8000c1a <__aeabi_dadd+0x53e>
 8000c12:	2540      	movs	r5, #64	; 0x40
 8000c14:	1aad      	subs	r5, r5, r2
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	1e58      	subs	r0, r3, #1
 8000c1c:	4183      	sbcs	r3, r0
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	e775      	b.n	8000b0e <__aeabi_dadd+0x432>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d0e2      	beq.n	8000bec <__aeabi_dadd+0x510>
 8000c26:	003a      	movs	r2, r7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	d0cd      	beq.n	8000bc8 <__aeabi_dadd+0x4ec>
 8000c2c:	0742      	lsls	r2, r0, #29
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	0312      	lsls	r2, r2, #12
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dadd+0x56e>
 8000c3c:	08fc      	lsrs	r4, r7, #3
 8000c3e:	4214      	tst	r4, r2
 8000c40:	d103      	bne.n	8000c4a <__aeabi_dadd+0x56e>
 8000c42:	0020      	movs	r0, r4
 8000c44:	08cb      	lsrs	r3, r1, #3
 8000c46:	077a      	lsls	r2, r7, #29
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	0f5a      	lsrs	r2, r3, #29
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	e690      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000c56:	4643      	mov	r3, r8
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x582>
 8000c5c:	e709      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	4642      	mov	r2, r8
 8000c62:	08c9      	lsrs	r1, r1, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4655      	mov	r5, sl
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	08d0      	lsrs	r0, r2, #3
 8000c6c:	e666      	b.n	800093c <__aeabi_dadd+0x260>
 8000c6e:	1acc      	subs	r4, r1, r3
 8000c70:	42a1      	cmp	r1, r4
 8000c72:	4189      	sbcs	r1, r1
 8000c74:	1a3f      	subs	r7, r7, r0
 8000c76:	4249      	negs	r1, r1
 8000c78:	4655      	mov	r5, sl
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	1a7f      	subs	r7, r7, r1
 8000c7e:	e57e      	b.n	800077e <__aeabi_dadd+0xa2>
 8000c80:	4642      	mov	r2, r8
 8000c82:	1a5c      	subs	r4, r3, r1
 8000c84:	1a87      	subs	r7, r0, r2
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	1abf      	subs	r7, r7, r2
 8000c8e:	023a      	lsls	r2, r7, #8
 8000c90:	d53d      	bpl.n	8000d0e <__aeabi_dadd+0x632>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	4643      	mov	r3, r8
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	1a1f      	subs	r7, r3, r0
 8000c9e:	4655      	mov	r5, sl
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e595      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	08f8      	lsrs	r0, r7, #3
 8000cac:	e643      	b.n	8000936 <__aeabi_dadd+0x25a>
 8000cae:	4644      	mov	r4, r8
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	d130      	bne.n	8000d18 <__aeabi_dadd+0x63c>
 8000cb6:	0742      	lsls	r2, r0, #29
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	e65c      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000cbe:	077b      	lsls	r3, r7, #29
 8000cc0:	08c9      	lsrs	r1, r1, #3
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	08f8      	lsrs	r0, r7, #3
 8000cc6:	e639      	b.n	800093c <__aeabi_dadd+0x260>
 8000cc8:	185c      	adds	r4, r3, r1
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	419b      	sbcs	r3, r3
 8000cce:	4440      	add	r0, r8
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	18c7      	adds	r7, r0, r3
 8000cd4:	023b      	lsls	r3, r7, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x5fe>
 8000cd8:	e625      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <__aeabi_dadd+0x674>)
 8000cdc:	2601      	movs	r6, #1
 8000cde:	401f      	ands	r7, r3
 8000ce0:	e621      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	3a20      	subs	r2, #32
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a20      	cmp	r2, #32
 8000cec:	d004      	beq.n	8000cf8 <__aeabi_dadd+0x61c>
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4090      	lsls	r0, r2
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4193      	sbcs	r3, r2
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	e67e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d00:	185c      	adds	r4, r3, r1
 8000d02:	428c      	cmp	r4, r1
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4440      	add	r0, r8
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1847      	adds	r7, r0, r1
 8000d0c:	e6dd      	b.n	8000aca <__aeabi_dadd+0x3ee>
 8000d0e:	0023      	movs	r3, r4
 8000d10:	433b      	orrs	r3, r7
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e6ad      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000d16:	e606      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d18:	0744      	lsls	r4, r0, #29
 8000d1a:	4323      	orrs	r3, r4
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	08c0      	lsrs	r0, r0, #3
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4220      	tst	r0, r4
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x65c>
 8000d26:	4642      	mov	r2, r8
 8000d28:	08d6      	lsrs	r6, r2, #3
 8000d2a:	4226      	tst	r6, r4
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x65c>
 8000d2e:	4655      	mov	r5, sl
 8000d30:	0030      	movs	r0, r6
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	0751      	lsls	r1, r2, #29
 8000d36:	430b      	orrs	r3, r1
 8000d38:	0f5a      	lsrs	r2, r3, #29
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	0752      	lsls	r2, r2, #29
 8000d40:	4313      	orrs	r3, r2
 8000d42:	e619      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x670>)
 8000d48:	001f      	movs	r7, r3
 8000d4a:	e55e      	b.n	800080a <__aeabi_dadd+0x12e>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x26>
 8000d78:	e156      	b.n	8001028 <__aeabi_ddiv+0x2d4>
 8000d7a:	4bd4      	ldr	r3, [pc, #848]	; (80010cc <__aeabi_ddiv+0x378>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x2e>
 8000d80:	e172      	b.n	8001068 <__aeabi_ddiv+0x314>
 8000d82:	0f6b      	lsrs	r3, r5, #29
 8000d84:	00e4      	lsls	r4, r4, #3
 8000d86:	431c      	orrs	r4, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000d92:	00ed      	lsls	r5, r5, #3
 8000d94:	469b      	mov	fp, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4699      	mov	r9, r3
 8000d9a:	4483      	add	fp, r0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	033c      	lsls	r4, r7, #12
 8000da0:	007b      	lsls	r3, r7, #1
 8000da2:	4650      	mov	r0, sl
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	0fff      	lsrs	r7, r7, #31
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x5c>
 8000dae:	e11f      	b.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000db0:	4ac6      	ldr	r2, [pc, #792]	; (80010cc <__aeabi_ddiv+0x378>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x64>
 8000db6:	e162      	b.n	800107e <__aeabi_ddiv+0x32a>
 8000db8:	49c5      	ldr	r1, [pc, #788]	; (80010d0 <__aeabi_ddiv+0x37c>)
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	00e4      	lsls	r4, r4, #3
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4463      	add	r3, ip
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	469b      	mov	fp, r3
 8000dd0:	00c2      	lsls	r2, r0, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	407b      	eors	r3, r7
 8000dd8:	469a      	mov	sl, r3
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d827      	bhi.n	8000e30 <__aeabi_ddiv+0xdc>
 8000de0:	49bc      	ldr	r1, [pc, #752]	; (80010d4 <__aeabi_ddiv+0x380>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	46b2      	mov	sl, r6
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xca>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xa2>
 8000df4:	e28e      	b.n	8001314 <__aeabi_ddiv+0x5c0>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xa8>
 8000dfa:	e0d9      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2400      	movs	r4, #0
 8000e00:	2500      	movs	r5, #0
 8000e02:	4652      	mov	r2, sl
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07d2      	lsls	r2, r2, #31
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b005      	add	sp, #20
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <__aeabi_ddiv+0x378>)
 8000e24:	e7ed      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000e26:	46ba      	mov	sl, r7
 8000e28:	46a0      	mov	r8, r4
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	9000      	str	r0, [sp, #0]
 8000e2e:	e7dc      	b.n	8000dea <__aeabi_ddiv+0x96>
 8000e30:	4544      	cmp	r4, r8
 8000e32:	d200      	bcs.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1c7      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe6>
 8000e38:	e1c2      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	469c      	mov	ip, r3
 8000e40:	002e      	movs	r6, r5
 8000e42:	4640      	mov	r0, r8
 8000e44:	2500      	movs	r5, #0
 8000e46:	44e3      	add	fp, ip
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	0e14      	lsrs	r4, r2, #24
 8000e4c:	431c      	orrs	r4, r3
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	4699      	mov	r9, r3
 8000e52:	0423      	lsls	r3, r4, #16
 8000e54:	0c1f      	lsrs	r7, r3, #16
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	4649      	mov	r1, r9
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <__aeabi_uidivmod>
 8000e62:	0002      	movs	r2, r0
 8000e64:	437a      	muls	r2, r7
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	0c31      	lsrs	r1, r6, #16
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d907      	bls.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	1909      	adds	r1, r1, r4
 8000e7a:	44e0      	add	r8, ip
 8000e7c:	428c      	cmp	r4, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x12e>
 8000e80:	e207      	b.n	8001292 <__aeabi_ddiv+0x53e>
 8000e82:	1a88      	subs	r0, r1, r2
 8000e84:	4649      	mov	r1, r9
 8000e86:	f7ff f9e1 	bl	800024c <__aeabi_uidivmod>
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	4666      	mov	r6, ip
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	0c09      	lsrs	r1, r1, #16
 8000e96:	4342      	muls	r2, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4331      	orrs	r1, r6
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d904      	bls.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d800      	bhi.n	8000eaa <__aeabi_ddiv+0x156>
 8000ea8:	e1ed      	b.n	8001286 <__aeabi_ddiv+0x532>
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	4642      	mov	r2, r8
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	040e      	lsls	r6, r1, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	0c36      	lsrs	r6, r6, #16
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4373      	muls	r3, r6
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	437e      	muls	r6, r7
 8000ed0:	9103      	str	r1, [sp, #12]
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	437a      	muls	r2, r7
 8000ed6:	0c1f      	lsrs	r7, r3, #16
 8000ed8:	46bc      	mov	ip, r7
 8000eda:	1876      	adds	r6, r6, r1
 8000edc:	4466      	add	r6, ip
 8000ede:	42b1      	cmp	r1, r6
 8000ee0:	d903      	bls.n	8000eea <__aeabi_ddiv+0x196>
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	468c      	mov	ip, r1
 8000ee8:	4462      	add	r2, ip
 8000eea:	0c31      	lsrs	r1, r6, #16
 8000eec:	188a      	adds	r2, r1, r2
 8000eee:	0431      	lsls	r1, r6, #16
 8000ef0:	041e      	lsls	r6, r3, #16
 8000ef2:	0c36      	lsrs	r6, r6, #16
 8000ef4:	198e      	adds	r6, r1, r6
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d302      	bcc.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000efa:	d112      	bne.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000efc:	42b5      	cmp	r5, r6
 8000efe:	d210      	bcs.n	8000f22 <__aeabi_ddiv+0x1ce>
 8000f00:	4643      	mov	r3, r8
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	9b00      	ldr	r3, [sp, #0]
 8000f06:	469c      	mov	ip, r3
 8000f08:	4465      	add	r5, ip
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	425b      	negs	r3, r3
 8000f12:	191b      	adds	r3, r3, r4
 8000f14:	18c0      	adds	r0, r0, r3
 8000f16:	4284      	cmp	r4, r0
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x1c8>
 8000f1a:	e1a0      	b.n	800125e <__aeabi_ddiv+0x50a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000f1e:	e19b      	b.n	8001258 <__aeabi_ddiv+0x504>
 8000f20:	4688      	mov	r8, r1
 8000f22:	1bae      	subs	r6, r5, r6
 8000f24:	42b5      	cmp	r5, r6
 8000f26:	41ad      	sbcs	r5, r5
 8000f28:	1a80      	subs	r0, r0, r2
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x1e0>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_ddiv+0x58c>
 8000f34:	4649      	mov	r1, r9
 8000f36:	f7ff f989 	bl	800024c <__aeabi_uidivmod>
 8000f3a:	9a01      	ldr	r2, [sp, #4]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4342      	muls	r2, r0
 8000f40:	0c31      	lsrs	r1, r6, #16
 8000f42:	0005      	movs	r5, r0
 8000f44:	4319      	orrs	r1, r3
 8000f46:	428a      	cmp	r2, r1
 8000f48:	d900      	bls.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000f4a:	e16c      	b.n	8001226 <__aeabi_ddiv+0x4d2>
 8000f4c:	1a88      	subs	r0, r1, r2
 8000f4e:	4649      	mov	r1, r9
 8000f50:	f7ff f97c 	bl	800024c <__aeabi_uidivmod>
 8000f54:	9a01      	ldr	r2, [sp, #4]
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4342      	muls	r2, r0
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	0c36      	lsrs	r6, r6, #16
 8000f5e:	0003      	movs	r3, r0
 8000f60:	430e      	orrs	r6, r1
 8000f62:	42b2      	cmp	r2, r6
 8000f64:	d900      	bls.n	8000f68 <__aeabi_ddiv+0x214>
 8000f66:	e153      	b.n	8001210 <__aeabi_ddiv+0x4bc>
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	1ab6      	subs	r6, r6, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	042d      	lsls	r5, r5, #16
 8000f70:	431d      	orrs	r5, r3
 8000f72:	9f02      	ldr	r7, [sp, #8]
 8000f74:	042b      	lsls	r3, r5, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	435a      	muls	r2, r3
 8000f7a:	437b      	muls	r3, r7
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0c29      	lsrs	r1, r5, #16
 8000f80:	4348      	muls	r0, r1
 8000f82:	0c13      	lsrs	r3, r2, #16
 8000f84:	4484      	add	ip, r0
 8000f86:	4463      	add	r3, ip
 8000f88:	4379      	muls	r1, r7
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d903      	bls.n	8000f96 <__aeabi_ddiv+0x242>
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	0240      	lsls	r0, r0, #9
 8000f92:	4684      	mov	ip, r0
 8000f94:	4461      	add	r1, ip
 8000f96:	0c18      	lsrs	r0, r3, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c12      	lsrs	r2, r2, #16
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	428e      	cmp	r6, r1
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x254>
 8000fa6:	e0ff      	b.n	80011a8 <__aeabi_ddiv+0x454>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e0fa      	b.n	80011a2 <__aeabi_ddiv+0x44e>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <__aeabi_ddiv+0x384>)
 8000fb2:	445a      	add	r2, fp
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_ddiv+0x266>
 8000fb8:	e0aa      	b.n	8001110 <__aeabi_ddiv+0x3bc>
 8000fba:	076b      	lsls	r3, r5, #29
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0x26c>
 8000fbe:	e13d      	b.n	800123c <__aeabi_ddiv+0x4e8>
 8000fc0:	08ed      	lsrs	r5, r5, #3
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	d506      	bpl.n	8000fd6 <__aeabi_ddiv+0x282>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <__aeabi_ddiv+0x388>)
 8000fcc:	401a      	ands	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	445a      	add	r2, fp
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <__aeabi_ddiv+0x38c>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd00      	ble.n	8000fde <__aeabi_ddiv+0x28a>
 8000fdc:	e71f      	b.n	8000e1e <__aeabi_ddiv+0xca>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	431d      	orrs	r5, r3
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	025c      	lsls	r4, r3, #9
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	0d53      	lsrs	r3, r2, #21
 8000fee:	e708      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4322      	orrs	r2, r4
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_ddiv+0x2a4>
 8000ff6:	e07b      	b.n	80010f0 <__aeabi_ddiv+0x39c>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x2aa>
 8000ffc:	e0fa      	b.n	80011f4 <__aeabi_ddiv+0x4a0>
 8000ffe:	0020      	movs	r0, r4
 8001000:	f001 f952 	bl	80022a8 <__clzsi2>
 8001004:	0002      	movs	r2, r0
 8001006:	3a0b      	subs	r2, #11
 8001008:	231d      	movs	r3, #29
 800100a:	0001      	movs	r1, r0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4652      	mov	r2, sl
 8001010:	3908      	subs	r1, #8
 8001012:	40da      	lsrs	r2, r3
 8001014:	408c      	lsls	r4, r1
 8001016:	4314      	orrs	r4, r2
 8001018:	4652      	mov	r2, sl
 800101a:	408a      	lsls	r2, r1
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <__aeabi_ddiv+0x390>)
 800101e:	4458      	add	r0, fp
 8001020:	469b      	mov	fp, r3
 8001022:	4483      	add	fp, r0
 8001024:	2000      	movs	r0, #0
 8001026:	e6d5      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001028:	464b      	mov	r3, r9
 800102a:	4323      	orrs	r3, r4
 800102c:	4698      	mov	r8, r3
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x366>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x2e2>
 8001034:	e0ce      	b.n	80011d4 <__aeabi_ddiv+0x480>
 8001036:	0020      	movs	r0, r4
 8001038:	f001 f936 	bl	80022a8 <__clzsi2>
 800103c:	0001      	movs	r1, r0
 800103e:	0002      	movs	r2, r0
 8001040:	390b      	subs	r1, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4649      	mov	r1, r9
 8001048:	0010      	movs	r0, r2
 800104a:	40d9      	lsrs	r1, r3
 800104c:	3808      	subs	r0, #8
 800104e:	4084      	lsls	r4, r0
 8001050:	000b      	movs	r3, r1
 8001052:	464d      	mov	r5, r9
 8001054:	4323      	orrs	r3, r4
 8001056:	4698      	mov	r8, r3
 8001058:	4085      	lsls	r5, r0
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <__aeabi_ddiv+0x394>)
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	e69a      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 8001068:	464b      	mov	r3, r9
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d11d      	bne.n	80010ac <__aeabi_ddiv+0x358>
 8001070:	2308      	movs	r3, #8
 8001072:	4699      	mov	r9, r3
 8001074:	3b06      	subs	r3, #6
 8001076:	2500      	movs	r5, #0
 8001078:	4683      	mov	fp, r0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e68f      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 800107e:	4652      	mov	r2, sl
 8001080:	4322      	orrs	r2, r4
 8001082:	d109      	bne.n	8001098 <__aeabi_ddiv+0x344>
 8001084:	2302      	movs	r3, #2
 8001086:	4649      	mov	r1, r9
 8001088:	4319      	orrs	r1, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <__aeabi_ddiv+0x398>)
 800108c:	4689      	mov	r9, r1
 800108e:	469c      	mov	ip, r3
 8001090:	2400      	movs	r4, #0
 8001092:	2002      	movs	r0, #2
 8001094:	44e3      	add	fp, ip
 8001096:	e69d      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 8001098:	2303      	movs	r3, #3
 800109a:	464a      	mov	r2, r9
 800109c:	431a      	orrs	r2, r3
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <__aeabi_ddiv+0x398>)
 80010a0:	4691      	mov	r9, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	4652      	mov	r2, sl
 80010a6:	2003      	movs	r0, #3
 80010a8:	44e3      	add	fp, ip
 80010aa:	e693      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010ac:	230c      	movs	r3, #12
 80010ae:	4699      	mov	r9, r3
 80010b0:	3b09      	subs	r3, #9
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4683      	mov	fp, r0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e671      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4699      	mov	r9, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	469b      	mov	fp, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	e669      	b.n	8000d9e <__aeabi_ddiv+0x4a>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff
 80010d0:	fffffc01 	.word	0xfffffc01
 80010d4:	08009210 	.word	0x08009210
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	feffffff 	.word	0xfeffffff
 80010e0:	000007fe 	.word	0x000007fe
 80010e4:	000003f3 	.word	0x000003f3
 80010e8:	fffffc0d 	.word	0xfffffc0d
 80010ec:	fffff801 	.word	0xfffff801
 80010f0:	4649      	mov	r1, r9
 80010f2:	2301      	movs	r3, #1
 80010f4:	4319      	orrs	r1, r3
 80010f6:	4689      	mov	r9, r1
 80010f8:	2400      	movs	r4, #0
 80010fa:	2001      	movs	r0, #1
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	469a      	mov	sl, r3
 8001104:	2500      	movs	r5, #0
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	e67a      	b.n	8000e02 <__aeabi_ddiv+0xae>
 800110c:	2501      	movs	r5, #1
 800110e:	426d      	negs	r5, r5
 8001110:	2301      	movs	r3, #1
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	2b38      	cmp	r3, #56	; 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_ddiv+0x3c6>
 8001118:	e670      	b.n	8000dfc <__aeabi_ddiv+0xa8>
 800111a:	2b1f      	cmp	r3, #31
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e0bf      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 8001120:	211f      	movs	r1, #31
 8001122:	4249      	negs	r1, r1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4641      	mov	r1, r8
 8001128:	40d1      	lsrs	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	2b20      	cmp	r3, #32
 800112e:	d004      	beq.n	800113a <__aeabi_ddiv+0x3e6>
 8001130:	4641      	mov	r1, r8
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <__aeabi_ddiv+0x5e0>)
 8001134:	445b      	add	r3, fp
 8001136:	4099      	lsls	r1, r3
 8001138:	430d      	orrs	r5, r1
 800113a:	1e6b      	subs	r3, r5, #1
 800113c:	419d      	sbcs	r5, r3
 800113e:	2307      	movs	r3, #7
 8001140:	432a      	orrs	r2, r5
 8001142:	001d      	movs	r5, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4015      	ands	r5, r2
 8001148:	4213      	tst	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x3fa>
 800114c:	e0d4      	b.n	80012f8 <__aeabi_ddiv+0x5a4>
 800114e:	210f      	movs	r1, #15
 8001150:	2300      	movs	r3, #0
 8001152:	4011      	ands	r1, r2
 8001154:	2904      	cmp	r1, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x406>
 8001158:	e0cb      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800115a:	1d11      	adds	r1, r2, #4
 800115c:	4291      	cmp	r1, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4252      	negs	r2, r2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	000a      	movs	r2, r1
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	d400      	bmi.n	800116c <__aeabi_ddiv+0x418>
 800116a:	e0c2      	b.n	80012f2 <__aeabi_ddiv+0x59e>
 800116c:	2301      	movs	r3, #1
 800116e:	2400      	movs	r4, #0
 8001170:	2500      	movs	r5, #0
 8001172:	e646      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x43c>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x43c>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e638      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <__aeabi_ddiv+0x5dc>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e62f      	b.n	8000e02 <__aeabi_ddiv+0xae>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x454>
 80011a6:	e703      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80011a8:	19a6      	adds	r6, r4, r6
 80011aa:	1e68      	subs	r0, r5, #1
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d200      	bcs.n	80011b2 <__aeabi_ddiv+0x45e>
 80011b0:	e08d      	b.n	80012ce <__aeabi_ddiv+0x57a>
 80011b2:	428e      	cmp	r6, r1
 80011b4:	d200      	bcs.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e0a3      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x468>
 80011ba:	e0b3      	b.n	8001324 <__aeabi_ddiv+0x5d0>
 80011bc:	0005      	movs	r5, r0
 80011be:	e6f5      	b.n	8000fac <__aeabi_ddiv+0x258>
 80011c0:	42aa      	cmp	r2, r5
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e639      	b.n	8000e3a <__aeabi_ddiv+0xe6>
 80011c6:	4643      	mov	r3, r8
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	0858      	lsrs	r0, r3, #1
 80011cc:	086b      	lsrs	r3, r5, #1
 80011ce:	431e      	orrs	r6, r3
 80011d0:	07ed      	lsls	r5, r5, #31
 80011d2:	e639      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 80011d4:	4648      	mov	r0, r9
 80011d6:	f001 f867 	bl	80022a8 <__clzsi2>
 80011da:	0001      	movs	r1, r0
 80011dc:	0002      	movs	r2, r0
 80011de:	3115      	adds	r1, #21
 80011e0:	3220      	adds	r2, #32
 80011e2:	291c      	cmp	r1, #28
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_ddiv+0x494>
 80011e6:	e72c      	b.n	8001042 <__aeabi_ddiv+0x2ee>
 80011e8:	464b      	mov	r3, r9
 80011ea:	3808      	subs	r0, #8
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2500      	movs	r5, #0
 80011f0:	4698      	mov	r8, r3
 80011f2:	e732      	b.n	800105a <__aeabi_ddiv+0x306>
 80011f4:	f001 f858 	bl	80022a8 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	3215      	adds	r2, #21
 80011fe:	3020      	adds	r0, #32
 8001200:	2a1c      	cmp	r2, #28
 8001202:	dc00      	bgt.n	8001206 <__aeabi_ddiv+0x4b2>
 8001204:	e700      	b.n	8001008 <__aeabi_ddiv+0x2b4>
 8001206:	4654      	mov	r4, sl
 8001208:	3b08      	subs	r3, #8
 800120a:	2200      	movs	r2, #0
 800120c:	409c      	lsls	r4, r3
 800120e:	e705      	b.n	800101c <__aeabi_ddiv+0x2c8>
 8001210:	1936      	adds	r6, r6, r4
 8001212:	3b01      	subs	r3, #1
 8001214:	42b4      	cmp	r4, r6
 8001216:	d900      	bls.n	800121a <__aeabi_ddiv+0x4c6>
 8001218:	e6a6      	b.n	8000f68 <__aeabi_ddiv+0x214>
 800121a:	42b2      	cmp	r2, r6
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x4cc>
 800121e:	e6a3      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001220:	1e83      	subs	r3, r0, #2
 8001222:	1936      	adds	r6, r6, r4
 8001224:	e6a0      	b.n	8000f68 <__aeabi_ddiv+0x214>
 8001226:	1909      	adds	r1, r1, r4
 8001228:	3d01      	subs	r5, #1
 800122a:	428c      	cmp	r4, r1
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e68d      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001230:	428a      	cmp	r2, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x4e2>
 8001234:	e68a      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8001236:	1e85      	subs	r5, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e687      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 800123c:	230f      	movs	r3, #15
 800123e:	402b      	ands	r3, r5
 8001240:	2b04      	cmp	r3, #4
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x4f2>
 8001244:	e6bc      	b.n	8000fc0 <__aeabi_ddiv+0x26c>
 8001246:	2305      	movs	r3, #5
 8001248:	425b      	negs	r3, r3
 800124a:	42ab      	cmp	r3, r5
 800124c:	419b      	sbcs	r3, r3
 800124e:	3504      	adds	r5, #4
 8001250:	425b      	negs	r3, r3
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	4498      	add	r8, r3
 8001256:	e6b4      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 8001258:	42af      	cmp	r7, r5
 800125a:	d900      	bls.n	800125e <__aeabi_ddiv+0x50a>
 800125c:	e660      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800125e:	4282      	cmp	r2, r0
 8001260:	d804      	bhi.n	800126c <__aeabi_ddiv+0x518>
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x512>
 8001264:	e65c      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8001266:	42ae      	cmp	r6, r5
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x518>
 800126a:	e659      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 800126c:	2302      	movs	r3, #2
 800126e:	425b      	negs	r3, r3
 8001270:	469c      	mov	ip, r3
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	44e0      	add	r8, ip
 8001276:	469c      	mov	ip, r3
 8001278:	4465      	add	r5, ip
 800127a:	429d      	cmp	r5, r3
 800127c:	419b      	sbcs	r3, r3
 800127e:	425b      	negs	r3, r3
 8001280:	191b      	adds	r3, r3, r4
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	e64d      	b.n	8000f22 <__aeabi_ddiv+0x1ce>
 8001286:	428a      	cmp	r2, r1
 8001288:	d800      	bhi.n	800128c <__aeabi_ddiv+0x538>
 800128a:	e60e      	b.n	8000eaa <__aeabi_ddiv+0x156>
 800128c:	1e83      	subs	r3, r0, #2
 800128e:	1909      	adds	r1, r1, r4
 8001290:	e60b      	b.n	8000eaa <__aeabi_ddiv+0x156>
 8001292:	428a      	cmp	r2, r1
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x544>
 8001296:	e5f4      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4698      	mov	r8, r3
 800129c:	1909      	adds	r1, r1, r4
 800129e:	e5f0      	b.n	8000e82 <__aeabi_ddiv+0x12e>
 80012a0:	4925      	ldr	r1, [pc, #148]	; (8001338 <__aeabi_ddiv+0x5e4>)
 80012a2:	0028      	movs	r0, r5
 80012a4:	4459      	add	r1, fp
 80012a6:	408d      	lsls	r5, r1
 80012a8:	4642      	mov	r2, r8
 80012aa:	408a      	lsls	r2, r1
 80012ac:	1e69      	subs	r1, r5, #1
 80012ae:	418d      	sbcs	r5, r1
 80012b0:	4641      	mov	r1, r8
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	40d9      	lsrs	r1, r3
 80012b6:	4302      	orrs	r2, r0
 80012b8:	432a      	orrs	r2, r5
 80012ba:	000b      	movs	r3, r1
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x56e>
 80012c0:	e751      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0x578>
 80012ca:	e746      	b.n	800115a <__aeabi_ddiv+0x406>
 80012cc:	e74b      	b.n	8001166 <__aeabi_ddiv+0x412>
 80012ce:	0005      	movs	r5, r0
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d000      	beq.n	80012d6 <__aeabi_ddiv+0x582>
 80012d4:	e66a      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012d6:	9a00      	ldr	r2, [sp, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d000      	beq.n	80012de <__aeabi_ddiv+0x58a>
 80012dc:	e666      	b.n	8000fac <__aeabi_ddiv+0x258>
 80012de:	e667      	b.n	8000fb0 <__aeabi_ddiv+0x25c>
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <__aeabi_ddiv+0x5e8>)
 80012e2:	445a      	add	r2, fp
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_ddiv+0x596>
 80012e8:	e710      	b.n	800110c <__aeabi_ddiv+0x3b8>
 80012ea:	2301      	movs	r3, #1
 80012ec:	2500      	movs	r5, #0
 80012ee:	4498      	add	r8, r3
 80012f0:	e667      	b.n	8000fc2 <__aeabi_ddiv+0x26e>
 80012f2:	075d      	lsls	r5, r3, #29
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0b1c      	lsrs	r4, r3, #12
 80012f8:	08d2      	lsrs	r2, r2, #3
 80012fa:	2300      	movs	r3, #0
 80012fc:	4315      	orrs	r5, r2
 80012fe:	e580      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001300:	9800      	ldr	r0, [sp, #0]
 8001302:	3d02      	subs	r5, #2
 8001304:	0042      	lsls	r2, r0, #1
 8001306:	4282      	cmp	r2, r0
 8001308:	41bf      	sbcs	r7, r7
 800130a:	427f      	negs	r7, r7
 800130c:	193c      	adds	r4, r7, r4
 800130e:	1936      	adds	r6, r6, r4
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	e7dd      	b.n	80012d0 <__aeabi_ddiv+0x57c>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	4643      	mov	r3, r8
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	431c      	orrs	r4, r3
 800131c:	0324      	lsls	r4, r4, #12
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__aeabi_ddiv+0x5dc>)
 8001320:	0b24      	lsrs	r4, r4, #12
 8001322:	e56e      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001324:	9a00      	ldr	r2, [sp, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ea      	bcc.n	8001300 <__aeabi_ddiv+0x5ac>
 800132a:	0005      	movs	r5, r0
 800132c:	e7d3      	b.n	80012d6 <__aeabi_ddiv+0x582>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	464e      	mov	r6, r9
 8001344:	4645      	mov	r5, r8
 8001346:	46de      	mov	lr, fp
 8001348:	4657      	mov	r7, sl
 800134a:	4690      	mov	r8, r2
 800134c:	b5e0      	push	{r5, r6, r7, lr}
 800134e:	0017      	movs	r7, r2
 8001350:	031a      	lsls	r2, r3, #12
 8001352:	0b12      	lsrs	r2, r2, #12
 8001354:	0005      	movs	r5, r0
 8001356:	4684      	mov	ip, r0
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <__eqdf2+0x80>)
 800135a:	030e      	lsls	r6, r1, #12
 800135c:	004c      	lsls	r4, r1, #1
 800135e:	4691      	mov	r9, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	469b      	mov	fp, r3
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d64      	lsrs	r4, r4, #21
 800136a:	0fc9      	lsrs	r1, r1, #31
 800136c:	0d52      	lsrs	r2, r2, #21
 800136e:	4284      	cmp	r4, r0
 8001370:	d019      	beq.n	80013a6 <__eqdf2+0x66>
 8001372:	4282      	cmp	r2, r0
 8001374:	d010      	beq.n	8001398 <__eqdf2+0x58>
 8001376:	2001      	movs	r0, #1
 8001378:	4294      	cmp	r4, r2
 800137a:	d10e      	bne.n	800139a <__eqdf2+0x5a>
 800137c:	454e      	cmp	r6, r9
 800137e:	d10c      	bne.n	800139a <__eqdf2+0x5a>
 8001380:	2001      	movs	r0, #1
 8001382:	45c4      	cmp	ip, r8
 8001384:	d109      	bne.n	800139a <__eqdf2+0x5a>
 8001386:	4559      	cmp	r1, fp
 8001388:	d017      	beq.n	80013ba <__eqdf2+0x7a>
 800138a:	2c00      	cmp	r4, #0
 800138c:	d105      	bne.n	800139a <__eqdf2+0x5a>
 800138e:	0030      	movs	r0, r6
 8001390:	4328      	orrs	r0, r5
 8001392:	1e43      	subs	r3, r0, #1
 8001394:	4198      	sbcs	r0, r3
 8001396:	e000      	b.n	800139a <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	0033      	movs	r3, r6
 80013a8:	2001      	movs	r0, #1
 80013aa:	432b      	orrs	r3, r5
 80013ac:	d1f5      	bne.n	800139a <__eqdf2+0x5a>
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d1f3      	bne.n	800139a <__eqdf2+0x5a>
 80013b2:	464b      	mov	r3, r9
 80013b4:	433b      	orrs	r3, r7
 80013b6:	d1f0      	bne.n	800139a <__eqdf2+0x5a>
 80013b8:	e7e2      	b.n	8001380 <__eqdf2+0x40>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7ed      	b.n	800139a <__eqdf2+0x5a>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__gedf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4647      	mov	r7, r8
 80013c8:	46ce      	mov	lr, r9
 80013ca:	0004      	movs	r4, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	0016      	movs	r6, r2
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	0b1b      	lsrs	r3, r3, #12
 80013d4:	4d2d      	ldr	r5, [pc, #180]	; (800148c <__gedf2+0xc8>)
 80013d6:	004a      	lsls	r2, r1, #1
 80013d8:	4699      	mov	r9, r3
 80013da:	b580      	push	{r7, lr}
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	030f      	lsls	r7, r1, #12
 80013e0:	46a4      	mov	ip, r4
 80013e2:	46b0      	mov	r8, r6
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d52      	lsrs	r2, r2, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fc0      	lsrs	r0, r0, #31
 80013ee:	42aa      	cmp	r2, r5
 80013f0:	d021      	beq.n	8001436 <__gedf2+0x72>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d013      	beq.n	800141e <__gedf2+0x5a>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d122      	bne.n	8001440 <__gedf2+0x7c>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <__gedf2+0x42>
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d022      	beq.n	800144c <__gedf2+0x88>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d010      	beq.n	800142c <__gedf2+0x68>
 800140a:	4281      	cmp	r1, r0
 800140c:	d022      	beq.n	8001454 <__gedf2+0x90>
 800140e:	2002      	movs	r0, #2
 8001410:	3901      	subs	r1, #1
 8001412:	4008      	ands	r0, r1
 8001414:	3801      	subs	r0, #1
 8001416:	bcc0      	pop	{r6, r7}
 8001418:	46b9      	mov	r9, r7
 800141a:	46b0      	mov	r8, r6
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	464d      	mov	r5, r9
 8001420:	432e      	orrs	r6, r5
 8001422:	d129      	bne.n	8001478 <__gedf2+0xb4>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f0      	bne.n	800140a <__gedf2+0x46>
 8001428:	433c      	orrs	r4, r7
 800142a:	d1ee      	bne.n	800140a <__gedf2+0x46>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f2      	bne.n	8001416 <__gedf2+0x52>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ef      	b.n	8001416 <__gedf2+0x52>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d11d      	bne.n	8001478 <__gedf2+0xb4>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0ee      	beq.n	800141e <__gedf2+0x5a>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e2      	bne.n	800140a <__gedf2+0x46>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1df      	bne.n	800140a <__gedf2+0x46>
 800144a:	e7e0      	b.n	800140e <__gedf2+0x4a>
 800144c:	2000      	movs	r0, #0
 800144e:	2c00      	cmp	r4, #0
 8001450:	d0e1      	beq.n	8001416 <__gedf2+0x52>
 8001452:	e7dc      	b.n	800140e <__gedf2+0x4a>
 8001454:	429a      	cmp	r2, r3
 8001456:	dc0a      	bgt.n	800146e <__gedf2+0xaa>
 8001458:	dbe8      	blt.n	800142c <__gedf2+0x68>
 800145a:	454f      	cmp	r7, r9
 800145c:	d8d7      	bhi.n	800140e <__gedf2+0x4a>
 800145e:	d00e      	beq.n	800147e <__gedf2+0xba>
 8001460:	2000      	movs	r0, #0
 8001462:	454f      	cmp	r7, r9
 8001464:	d2d7      	bcs.n	8001416 <__gedf2+0x52>
 8001466:	2900      	cmp	r1, #0
 8001468:	d0e2      	beq.n	8001430 <__gedf2+0x6c>
 800146a:	0008      	movs	r0, r1
 800146c:	e7d3      	b.n	8001416 <__gedf2+0x52>
 800146e:	4243      	negs	r3, r0
 8001470:	4158      	adcs	r0, r3
 8001472:	0040      	lsls	r0, r0, #1
 8001474:	3801      	subs	r0, #1
 8001476:	e7ce      	b.n	8001416 <__gedf2+0x52>
 8001478:	2002      	movs	r0, #2
 800147a:	4240      	negs	r0, r0
 800147c:	e7cb      	b.n	8001416 <__gedf2+0x52>
 800147e:	45c4      	cmp	ip, r8
 8001480:	d8c5      	bhi.n	800140e <__gedf2+0x4a>
 8001482:	2000      	movs	r0, #0
 8001484:	45c4      	cmp	ip, r8
 8001486:	d2c6      	bcs.n	8001416 <__gedf2+0x52>
 8001488:	e7ed      	b.n	8001466 <__gedf2+0xa2>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff

08001490 <__ledf2>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	4647      	mov	r7, r8
 8001494:	46ce      	mov	lr, r9
 8001496:	0004      	movs	r4, r0
 8001498:	0018      	movs	r0, r3
 800149a:	0016      	movs	r6, r2
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	0b1b      	lsrs	r3, r3, #12
 80014a0:	4d2c      	ldr	r5, [pc, #176]	; (8001554 <__ledf2+0xc4>)
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4699      	mov	r9, r3
 80014a6:	b580      	push	{r7, lr}
 80014a8:	0043      	lsls	r3, r0, #1
 80014aa:	030f      	lsls	r7, r1, #12
 80014ac:	46a4      	mov	ip, r4
 80014ae:	46b0      	mov	r8, r6
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d52      	lsrs	r2, r2, #21
 80014b4:	0fc9      	lsrs	r1, r1, #31
 80014b6:	0d5b      	lsrs	r3, r3, #21
 80014b8:	0fc0      	lsrs	r0, r0, #31
 80014ba:	42aa      	cmp	r2, r5
 80014bc:	d00d      	beq.n	80014da <__ledf2+0x4a>
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d010      	beq.n	80014e4 <__ledf2+0x54>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d127      	bne.n	8001516 <__ledf2+0x86>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x60>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10e      	bne.n	80014f0 <__ledf2+0x60>
 80014d2:	2000      	movs	r0, #0
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d015      	beq.n	8001504 <__ledf2+0x74>
 80014d8:	e00e      	b.n	80014f8 <__ledf2+0x68>
 80014da:	003d      	movs	r5, r7
 80014dc:	4325      	orrs	r5, r4
 80014de:	d110      	bne.n	8001502 <__ledf2+0x72>
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d118      	bne.n	8001516 <__ledf2+0x86>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10b      	bne.n	8001502 <__ledf2+0x72>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <__ledf2+0x64>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d00b      	beq.n	800150c <__ledf2+0x7c>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d014      	beq.n	8001522 <__ledf2+0x92>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x74>
 8001502:	2002      	movs	r0, #2
 8001504:	bcc0      	pop	{r6, r7}
 8001506:	46b9      	mov	r9, r7
 8001508:	46b0      	mov	r8, r6
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f9      	bne.n	8001504 <__ledf2+0x74>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f6      	b.n	8001504 <__ledf2+0x74>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <__ledf2+0x64>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e9      	bne.n	80014f4 <__ledf2+0x64>
 8001520:	e7ea      	b.n	80014f8 <__ledf2+0x68>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd04      	ble.n	8001530 <__ledf2+0xa0>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7e9      	b.n	8001504 <__ledf2+0x74>
 8001530:	429a      	cmp	r2, r3
 8001532:	dbeb      	blt.n	800150c <__ledf2+0x7c>
 8001534:	454f      	cmp	r7, r9
 8001536:	d8df      	bhi.n	80014f8 <__ledf2+0x68>
 8001538:	d006      	beq.n	8001548 <__ledf2+0xb8>
 800153a:	2000      	movs	r0, #0
 800153c:	454f      	cmp	r7, r9
 800153e:	d2e1      	bcs.n	8001504 <__ledf2+0x74>
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e5      	beq.n	8001510 <__ledf2+0x80>
 8001544:	0008      	movs	r0, r1
 8001546:	e7dd      	b.n	8001504 <__ledf2+0x74>
 8001548:	45c4      	cmp	ip, r8
 800154a:	d8d5      	bhi.n	80014f8 <__ledf2+0x68>
 800154c:	2000      	movs	r0, #0
 800154e:	45c4      	cmp	ip, r8
 8001550:	d2d8      	bcs.n	8001504 <__ledf2+0x74>
 8001552:	e7f5      	b.n	8001540 <__ledf2+0xb0>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__aeabi_dmul>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	4698      	mov	r8, r3
 8001566:	030c      	lsls	r4, r1, #12
 8001568:	004b      	lsls	r3, r1, #1
 800156a:	0006      	movs	r6, r0
 800156c:	4692      	mov	sl, r2
 800156e:	b087      	sub	sp, #28
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fcf      	lsrs	r7, r1, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x24>
 800157a:	e15c      	b.n	8001836 <__aeabi_dmul+0x2de>
 800157c:	4ad9      	ldr	r2, [pc, #868]	; (80018e4 <__aeabi_dmul+0x38c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x2c>
 8001582:	e175      	b.n	8001870 <__aeabi_dmul+0x318>
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00e4      	lsls	r4, r4, #3
 8001588:	4314      	orrs	r4, r2
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	4314      	orrs	r4, r2
 8001590:	4ad5      	ldr	r2, [pc, #852]	; (80018e8 <__aeabi_dmul+0x390>)
 8001592:	00c5      	lsls	r5, r0, #3
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	4699      	mov	r9, r3
 800159e:	469b      	mov	fp, r3
 80015a0:	4643      	mov	r3, r8
 80015a2:	4642      	mov	r2, r8
 80015a4:	031e      	lsls	r6, r3, #12
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4650      	mov	r0, sl
 80015ac:	4690      	mov	r8, r2
 80015ae:	0b36      	lsrs	r6, r6, #12
 80015b0:	0d5b      	lsrs	r3, r3, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x5e>
 80015b4:	e120      	b.n	80017f8 <__aeabi_dmul+0x2a0>
 80015b6:	4acb      	ldr	r2, [pc, #812]	; (80018e4 <__aeabi_dmul+0x38c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x66>
 80015bc:	e162      	b.n	8001884 <__aeabi_dmul+0x32c>
 80015be:	49ca      	ldr	r1, [pc, #808]	; (80018e8 <__aeabi_dmul+0x390>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d826      	bhi.n	800163e <__aeabi_dmul+0xe6>
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <__aeabi_dmul+0x394>)
 80015f2:	0089      	lsls	r1, r1, #2
 80015f4:	5859      	ldr	r1, [r3, r1]
 80015f6:	468f      	mov	pc, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	0034      	movs	r4, r6
 80015fe:	0015      	movs	r5, r2
 8001600:	4683      	mov	fp, r0
 8001602:	465b      	mov	r3, fp
 8001604:	2b02      	cmp	r3, #2
 8001606:	d016      	beq.n	8001636 <__aeabi_dmul+0xde>
 8001608:	2b03      	cmp	r3, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0xb6>
 800160c:	e203      	b.n	8001a16 <__aeabi_dmul+0x4be>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <__aeabi_dmul+0xbc>
 8001612:	e0cd      	b.n	80017b0 <__aeabi_dmul+0x258>
 8001614:	2200      	movs	r2, #0
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4322      	orrs	r2, r4
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	431a      	orrs	r2, r3
 8001624:	0028      	movs	r0, r5
 8001626:	0011      	movs	r1, r2
 8001628:	b007      	add	sp, #28
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	46bb      	mov	fp, r7
 800162e:	46b2      	mov	sl, r6
 8001630:	46a9      	mov	r9, r5
 8001632:	46a0      	mov	r8, r4
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	2400      	movs	r4, #0
 8001638:	2500      	movs	r5, #0
 800163a:	4aaa      	ldr	r2, [pc, #680]	; (80018e4 <__aeabi_dmul+0x38c>)
 800163c:	e7ed      	b.n	800161a <__aeabi_dmul+0xc2>
 800163e:	0c28      	lsrs	r0, r5, #16
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	0c2d      	lsrs	r5, r5, #16
 8001644:	002b      	movs	r3, r5
 8001646:	0c11      	lsrs	r1, r2, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	4353      	muls	r3, r2
 800164e:	4698      	mov	r8, r3
 8001650:	0013      	movs	r3, r2
 8001652:	002f      	movs	r7, r5
 8001654:	4343      	muls	r3, r0
 8001656:	4699      	mov	r9, r3
 8001658:	434f      	muls	r7, r1
 800165a:	444f      	add	r7, r9
 800165c:	46bb      	mov	fp, r7
 800165e:	4647      	mov	r7, r8
 8001660:	000b      	movs	r3, r1
 8001662:	0c3f      	lsrs	r7, r7, #16
 8001664:	46ba      	mov	sl, r7
 8001666:	4343      	muls	r3, r0
 8001668:	44da      	add	sl, fp
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	45d1      	cmp	r9, sl
 800166e:	d904      	bls.n	800167a <__aeabi_dmul+0x122>
 8001670:	2780      	movs	r7, #128	; 0x80
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	46b9      	mov	r9, r7
 8001676:	444b      	add	r3, r9
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	4653      	mov	r3, sl
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	469b      	mov	fp, r3
 8001680:	4653      	mov	r3, sl
 8001682:	041f      	lsls	r7, r3, #16
 8001684:	4643      	mov	r3, r8
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	4698      	mov	r8, r3
 800168c:	003b      	movs	r3, r7
 800168e:	4443      	add	r3, r8
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	0c33      	lsrs	r3, r6, #16
 8001694:	0436      	lsls	r6, r6, #16
 8001696:	0c36      	lsrs	r6, r6, #16
 8001698:	4698      	mov	r8, r3
 800169a:	0033      	movs	r3, r6
 800169c:	4343      	muls	r3, r0
 800169e:	4699      	mov	r9, r3
 80016a0:	4643      	mov	r3, r8
 80016a2:	4343      	muls	r3, r0
 80016a4:	002f      	movs	r7, r5
 80016a6:	469a      	mov	sl, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4377      	muls	r7, r6
 80016ac:	435d      	muls	r5, r3
 80016ae:	0c38      	lsrs	r0, r7, #16
 80016b0:	444d      	add	r5, r9
 80016b2:	1945      	adds	r5, r0, r5
 80016b4:	45a9      	cmp	r9, r5
 80016b6:	d903      	bls.n	80016c0 <__aeabi_dmul+0x168>
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4699      	mov	r9, r3
 80016be:	44ca      	add	sl, r9
 80016c0:	043f      	lsls	r7, r7, #16
 80016c2:	0c28      	lsrs	r0, r5, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	042d      	lsls	r5, r5, #16
 80016c8:	19ed      	adds	r5, r5, r7
 80016ca:	0c27      	lsrs	r7, r4, #16
 80016cc:	0424      	lsls	r4, r4, #16
 80016ce:	0c24      	lsrs	r4, r4, #16
 80016d0:	0003      	movs	r3, r0
 80016d2:	0020      	movs	r0, r4
 80016d4:	4350      	muls	r0, r2
 80016d6:	437a      	muls	r2, r7
 80016d8:	4691      	mov	r9, r2
 80016da:	003a      	movs	r2, r7
 80016dc:	4453      	add	r3, sl
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	0c03      	lsrs	r3, r0, #16
 80016e2:	469a      	mov	sl, r3
 80016e4:	434a      	muls	r2, r1
 80016e6:	4361      	muls	r1, r4
 80016e8:	4449      	add	r1, r9
 80016ea:	4451      	add	r1, sl
 80016ec:	44ab      	add	fp, r5
 80016ee:	4589      	cmp	r9, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x1a2>
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4699      	mov	r9, r3
 80016f8:	444a      	add	r2, r9
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c0b      	lsrs	r3, r1, #16
 80016fe:	0c00      	lsrs	r0, r0, #16
 8001700:	0409      	lsls	r1, r1, #16
 8001702:	1809      	adds	r1, r1, r0
 8001704:	0020      	movs	r0, r4
 8001706:	4699      	mov	r9, r3
 8001708:	4643      	mov	r3, r8
 800170a:	4370      	muls	r0, r6
 800170c:	435c      	muls	r4, r3
 800170e:	437e      	muls	r6, r7
 8001710:	435f      	muls	r7, r3
 8001712:	0c03      	lsrs	r3, r0, #16
 8001714:	4698      	mov	r8, r3
 8001716:	19a4      	adds	r4, r4, r6
 8001718:	4444      	add	r4, r8
 800171a:	444a      	add	r2, r9
 800171c:	9703      	str	r7, [sp, #12]
 800171e:	42a6      	cmp	r6, r4
 8001720:	d904      	bls.n	800172c <__aeabi_dmul+0x1d4>
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4698      	mov	r8, r3
 8001728:	4447      	add	r7, r8
 800172a:	9703      	str	r7, [sp, #12]
 800172c:	0423      	lsls	r3, r4, #16
 800172e:	9e02      	ldr	r6, [sp, #8]
 8001730:	469a      	mov	sl, r3
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	445e      	add	r6, fp
 8001736:	4698      	mov	r8, r3
 8001738:	42ae      	cmp	r6, r5
 800173a:	41ad      	sbcs	r5, r5
 800173c:	1876      	adds	r6, r6, r1
 800173e:	428e      	cmp	r6, r1
 8001740:	4189      	sbcs	r1, r1
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4450      	add	r0, sl
 8001748:	4440      	add	r0, r8
 800174a:	426d      	negs	r5, r5
 800174c:	1947      	adds	r7, r0, r5
 800174e:	46b8      	mov	r8, r7
 8001750:	4693      	mov	fp, r2
 8001752:	4249      	negs	r1, r1
 8001754:	4689      	mov	r9, r1
 8001756:	44c3      	add	fp, r8
 8001758:	44d9      	add	r9, fp
 800175a:	4298      	cmp	r0, r3
 800175c:	4180      	sbcs	r0, r0
 800175e:	45a8      	cmp	r8, r5
 8001760:	41ad      	sbcs	r5, r5
 8001762:	4593      	cmp	fp, r2
 8001764:	4192      	sbcs	r2, r2
 8001766:	4589      	cmp	r9, r1
 8001768:	4189      	sbcs	r1, r1
 800176a:	426d      	negs	r5, r5
 800176c:	4240      	negs	r0, r0
 800176e:	4328      	orrs	r0, r5
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	4252      	negs	r2, r2
 8001774:	4249      	negs	r1, r1
 8001776:	430a      	orrs	r2, r1
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1900      	adds	r0, r0, r4
 800177c:	1880      	adds	r0, r0, r2
 800177e:	18c7      	adds	r7, r0, r3
 8001780:	464b      	mov	r3, r9
 8001782:	0ddc      	lsrs	r4, r3, #23
 8001784:	9b04      	ldr	r3, [sp, #16]
 8001786:	0275      	lsls	r5, r6, #9
 8001788:	431d      	orrs	r5, r3
 800178a:	1e6a      	subs	r2, r5, #1
 800178c:	4195      	sbcs	r5, r2
 800178e:	464b      	mov	r3, r9
 8001790:	0df6      	lsrs	r6, r6, #23
 8001792:	027f      	lsls	r7, r7, #9
 8001794:	4335      	orrs	r5, r6
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	433c      	orrs	r4, r7
 800179a:	4315      	orrs	r5, r2
 800179c:	01fb      	lsls	r3, r7, #7
 800179e:	d400      	bmi.n	80017a2 <__aeabi_dmul+0x24a>
 80017a0:	e11c      	b.n	80019dc <__aeabi_dmul+0x484>
 80017a2:	2101      	movs	r1, #1
 80017a4:	086a      	lsrs	r2, r5, #1
 80017a6:	400d      	ands	r5, r1
 80017a8:	4315      	orrs	r5, r2
 80017aa:	07e2      	lsls	r2, r4, #31
 80017ac:	4315      	orrs	r5, r2
 80017ae:	0864      	lsrs	r4, r4, #1
 80017b0:	494f      	ldr	r1, [pc, #316]	; (80018f0 <__aeabi_dmul+0x398>)
 80017b2:	4461      	add	r1, ip
 80017b4:	2900      	cmp	r1, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x262>
 80017b8:	e0b0      	b.n	800191c <__aeabi_dmul+0x3c4>
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017be:	220f      	movs	r2, #15
 80017c0:	402a      	ands	r2, r5
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x27a>
 80017c6:	1d2a      	adds	r2, r5, #4
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	41ad      	sbcs	r5, r5
 80017cc:	426d      	negs	r5, r5
 80017ce:	1964      	adds	r4, r4, r5
 80017d0:	0015      	movs	r5, r2
 80017d2:	01e3      	lsls	r3, r4, #7
 80017d4:	d504      	bpl.n	80017e0 <__aeabi_dmul+0x288>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <__aeabi_dmul+0x39c>)
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4014      	ands	r4, r2
 80017de:	4461      	add	r1, ip
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <__aeabi_dmul+0x3a0>)
 80017e2:	4291      	cmp	r1, r2
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dmul+0x290>
 80017e6:	e726      	b.n	8001636 <__aeabi_dmul+0xde>
 80017e8:	0762      	lsls	r2, r4, #29
 80017ea:	08ed      	lsrs	r5, r5, #3
 80017ec:	0264      	lsls	r4, r4, #9
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	4315      	orrs	r5, r2
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d4a      	lsrs	r2, r1, #21
 80017f6:	e710      	b.n	800161a <__aeabi_dmul+0xc2>
 80017f8:	4652      	mov	r2, sl
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x2a8>
 80017fe:	e07f      	b.n	8001900 <__aeabi_dmul+0x3a8>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dmul+0x2ae>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dmul+0x468>
 8001806:	0030      	movs	r0, r6
 8001808:	f000 fd4e 	bl	80022a8 <__clzsi2>
 800180c:	0002      	movs	r2, r0
 800180e:	3a0b      	subs	r2, #11
 8001810:	231d      	movs	r3, #29
 8001812:	0001      	movs	r1, r0
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4652      	mov	r2, sl
 8001818:	3908      	subs	r1, #8
 800181a:	40da      	lsrs	r2, r3
 800181c:	408e      	lsls	r6, r1
 800181e:	4316      	orrs	r6, r2
 8001820:	4652      	mov	r2, sl
 8001822:	408a      	lsls	r2, r1
 8001824:	9b00      	ldr	r3, [sp, #0]
 8001826:	4935      	ldr	r1, [pc, #212]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001828:	1a18      	subs	r0, r3, r0
 800182a:	0003      	movs	r3, r0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	2000      	movs	r0, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	e6d3      	b.n	80015de <__aeabi_dmul+0x86>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d04a      	beq.n	80018d2 <__aeabi_dmul+0x37a>
 800183c:	2c00      	cmp	r4, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2ea>
 8001840:	e0b0      	b.n	80019a4 <__aeabi_dmul+0x44c>
 8001842:	0020      	movs	r0, r4
 8001844:	f000 fd30 	bl	80022a8 <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	0002      	movs	r2, r0
 800184c:	390b      	subs	r1, #11
 800184e:	231d      	movs	r3, #29
 8001850:	0010      	movs	r0, r2
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	0031      	movs	r1, r6
 8001856:	0035      	movs	r5, r6
 8001858:	3808      	subs	r0, #8
 800185a:	4084      	lsls	r4, r0
 800185c:	40d9      	lsrs	r1, r3
 800185e:	4085      	lsls	r5, r0
 8001860:	430c      	orrs	r4, r1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <__aeabi_dmul+0x3a4>)
 8001864:	1a83      	subs	r3, r0, r2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	469b      	mov	fp, r3
 800186e:	e697      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001870:	0005      	movs	r5, r0
 8001872:	4325      	orrs	r5, r4
 8001874:	d126      	bne.n	80018c4 <__aeabi_dmul+0x36c>
 8001876:	2208      	movs	r2, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2400      	movs	r4, #0
 800187e:	4691      	mov	r9, r2
 8001880:	469b      	mov	fp, r3
 8001882:	e68d      	b.n	80015a0 <__aeabi_dmul+0x48>
 8001884:	4652      	mov	r2, sl
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4332      	orrs	r2, r6
 800188a:	d110      	bne.n	80018ae <__aeabi_dmul+0x356>
 800188c:	4915      	ldr	r1, [pc, #84]	; (80018e4 <__aeabi_dmul+0x38c>)
 800188e:	2600      	movs	r6, #0
 8001890:	468c      	mov	ip, r1
 8001892:	4463      	add	r3, ip
 8001894:	4649      	mov	r1, r9
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	4319      	orrs	r1, r3
 800189c:	4689      	mov	r9, r1
 800189e:	2002      	movs	r0, #2
 80018a0:	e69d      	b.n	80015de <__aeabi_dmul+0x86>
 80018a2:	465b      	mov	r3, fp
 80018a4:	9701      	str	r7, [sp, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x354>
 80018aa:	e6ad      	b.n	8001608 <__aeabi_dmul+0xb0>
 80018ac:	e6c3      	b.n	8001636 <__aeabi_dmul+0xde>
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <__aeabi_dmul+0x38c>)
 80018b0:	2003      	movs	r0, #3
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	464a      	mov	r2, r9
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2303      	movs	r3, #3
 80018bc:	431a      	orrs	r2, r3
 80018be:	4691      	mov	r9, r2
 80018c0:	4652      	mov	r2, sl
 80018c2:	e68c      	b.n	80015de <__aeabi_dmul+0x86>
 80018c4:	220c      	movs	r2, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2303      	movs	r3, #3
 80018ca:	0005      	movs	r5, r0
 80018cc:	4691      	mov	r9, r2
 80018ce:	469b      	mov	fp, r3
 80018d0:	e666      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018d2:	2304      	movs	r3, #4
 80018d4:	4699      	mov	r9, r3
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	2400      	movs	r4, #0
 80018de:	469b      	mov	fp, r3
 80018e0:	e65e      	b.n	80015a0 <__aeabi_dmul+0x48>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	fffffc01 	.word	0xfffffc01
 80018ec:	08009250 	.word	0x08009250
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	4649      	mov	r1, r9
 8001902:	2301      	movs	r3, #1
 8001904:	4319      	orrs	r1, r3
 8001906:	4689      	mov	r9, r1
 8001908:	2600      	movs	r6, #0
 800190a:	2001      	movs	r0, #1
 800190c:	e667      	b.n	80015de <__aeabi_dmul+0x86>
 800190e:	2300      	movs	r3, #0
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2500      	movs	r5, #0
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	e67e      	b.n	800161a <__aeabi_dmul+0xc2>
 800191c:	2001      	movs	r0, #1
 800191e:	1a40      	subs	r0, r0, r1
 8001920:	2838      	cmp	r0, #56	; 0x38
 8001922:	dd00      	ble.n	8001926 <__aeabi_dmul+0x3ce>
 8001924:	e676      	b.n	8001614 <__aeabi_dmul+0xbc>
 8001926:	281f      	cmp	r0, #31
 8001928:	dd5b      	ble.n	80019e2 <__aeabi_dmul+0x48a>
 800192a:	221f      	movs	r2, #31
 800192c:	0023      	movs	r3, r4
 800192e:	4252      	negs	r2, r2
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	40cb      	lsrs	r3, r1
 8001934:	0019      	movs	r1, r3
 8001936:	2820      	cmp	r0, #32
 8001938:	d003      	beq.n	8001942 <__aeabi_dmul+0x3ea>
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <__aeabi_dmul+0x4d0>)
 800193c:	4462      	add	r2, ip
 800193e:	4094      	lsls	r4, r2
 8001940:	4325      	orrs	r5, r4
 8001942:	1e6a      	subs	r2, r5, #1
 8001944:	4195      	sbcs	r5, r2
 8001946:	002a      	movs	r2, r5
 8001948:	430a      	orrs	r2, r1
 800194a:	2107      	movs	r1, #7
 800194c:	000d      	movs	r5, r1
 800194e:	2400      	movs	r4, #0
 8001950:	4015      	ands	r5, r2
 8001952:	4211      	tst	r1, r2
 8001954:	d05b      	beq.n	8001a0e <__aeabi_dmul+0x4b6>
 8001956:	210f      	movs	r1, #15
 8001958:	2400      	movs	r4, #0
 800195a:	4011      	ands	r1, r2
 800195c:	2904      	cmp	r1, #4
 800195e:	d053      	beq.n	8001a08 <__aeabi_dmul+0x4b0>
 8001960:	1d11      	adds	r1, r2, #4
 8001962:	4291      	cmp	r1, r2
 8001964:	4192      	sbcs	r2, r2
 8001966:	4252      	negs	r2, r2
 8001968:	18a4      	adds	r4, r4, r2
 800196a:	000a      	movs	r2, r1
 800196c:	0223      	lsls	r3, r4, #8
 800196e:	d54b      	bpl.n	8001a08 <__aeabi_dmul+0x4b0>
 8001970:	2201      	movs	r2, #1
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	e650      	b.n	800161a <__aeabi_dmul+0xc2>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	421c      	tst	r4, r3
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x43c>
 8001980:	421e      	tst	r6, r3
 8001982:	d107      	bne.n	8001994 <__aeabi_dmul+0x43c>
 8001984:	4333      	orrs	r3, r6
 8001986:	031c      	lsls	r4, r3, #12
 8001988:	4643      	mov	r3, r8
 800198a:	0015      	movs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	e642      	b.n	800161a <__aeabi_dmul+0xc2>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0312      	lsls	r2, r2, #12
 8001998:	4314      	orrs	r4, r2
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <__aeabi_dmul+0x4cc>)
 800199e:	0b24      	lsrs	r4, r4, #12
 80019a0:	9701      	str	r7, [sp, #4]
 80019a2:	e63a      	b.n	800161a <__aeabi_dmul+0xc2>
 80019a4:	f000 fc80 	bl	80022a8 <__clzsi2>
 80019a8:	0001      	movs	r1, r0
 80019aa:	0002      	movs	r2, r0
 80019ac:	3115      	adds	r1, #21
 80019ae:	3220      	adds	r2, #32
 80019b0:	291c      	cmp	r1, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x45e>
 80019b4:	e74b      	b.n	800184e <__aeabi_dmul+0x2f6>
 80019b6:	0034      	movs	r4, r6
 80019b8:	3808      	subs	r0, #8
 80019ba:	2500      	movs	r5, #0
 80019bc:	4084      	lsls	r4, r0
 80019be:	e750      	b.n	8001862 <__aeabi_dmul+0x30a>
 80019c0:	f000 fc72 	bl	80022a8 <__clzsi2>
 80019c4:	0003      	movs	r3, r0
 80019c6:	001a      	movs	r2, r3
 80019c8:	3215      	adds	r2, #21
 80019ca:	3020      	adds	r0, #32
 80019cc:	2a1c      	cmp	r2, #28
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dmul+0x47a>
 80019d0:	e71e      	b.n	8001810 <__aeabi_dmul+0x2b8>
 80019d2:	4656      	mov	r6, sl
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	409e      	lsls	r6, r3
 80019da:	e723      	b.n	8001824 <__aeabi_dmul+0x2cc>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	469c      	mov	ip, r3
 80019e0:	e6e6      	b.n	80017b0 <__aeabi_dmul+0x258>
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <__aeabi_dmul+0x4d4>)
 80019e4:	0022      	movs	r2, r4
 80019e6:	4461      	add	r1, ip
 80019e8:	002e      	movs	r6, r5
 80019ea:	408d      	lsls	r5, r1
 80019ec:	408a      	lsls	r2, r1
 80019ee:	40c6      	lsrs	r6, r0
 80019f0:	1e69      	subs	r1, r5, #1
 80019f2:	418d      	sbcs	r5, r1
 80019f4:	4332      	orrs	r2, r6
 80019f6:	432a      	orrs	r2, r5
 80019f8:	40c4      	lsrs	r4, r0
 80019fa:	0753      	lsls	r3, r2, #29
 80019fc:	d0b6      	beq.n	800196c <__aeabi_dmul+0x414>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d1ac      	bne.n	8001960 <__aeabi_dmul+0x408>
 8001a06:	e7b1      	b.n	800196c <__aeabi_dmul+0x414>
 8001a08:	0765      	lsls	r5, r4, #29
 8001a0a:	0264      	lsls	r4, r4, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	4315      	orrs	r5, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	e601      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	e5fa      	b.n	800161a <__aeabi_dmul+0xc2>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	0000043e 	.word	0x0000043e
 8001a2c:	0000041e 	.word	0x0000041e

08001a30 <__aeabi_dsub>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	0017      	movs	r7, r2
 8001a40:	004a      	lsls	r2, r1, #1
 8001a42:	030b      	lsls	r3, r1, #12
 8001a44:	0d52      	lsrs	r2, r2, #21
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	4690      	mov	r8, r2
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0fcd      	lsrs	r5, r1, #31
 8001a50:	4ccd      	ldr	r4, [pc, #820]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a52:	0331      	lsls	r1, r6, #12
 8001a54:	00c3      	lsls	r3, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	0070      	lsls	r0, r6, #1
 8001a5a:	0f7a      	lsrs	r2, r7, #29
 8001a5c:	0a49      	lsrs	r1, r1, #9
 8001a5e:	00ff      	lsls	r7, r7, #3
 8001a60:	469a      	mov	sl, r3
 8001a62:	46b9      	mov	r9, r7
 8001a64:	0d40      	lsrs	r0, r0, #21
 8001a66:	0ff6      	lsrs	r6, r6, #31
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x40>
 8001a6e:	e0b1      	b.n	8001bd4 <__aeabi_dsub+0x1a4>
 8001a70:	2201      	movs	r2, #1
 8001a72:	4056      	eors	r6, r2
 8001a74:	46b3      	mov	fp, r6
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x4c>
 8001a7a:	e088      	b.n	8001b8e <__aeabi_dsub+0x15e>
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x56>
 8001a84:	e0ae      	b.n	8001be4 <__aeabi_dsub+0x1b4>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x5c>
 8001a8a:	e0c1      	b.n	8001c10 <__aeabi_dsub+0x1e0>
 8001a8c:	48be      	ldr	r0, [pc, #760]	; (8001d88 <__aeabi_dsub+0x358>)
 8001a8e:	4580      	cmp	r8, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x64>
 8001a92:	e151      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001a94:	2080      	movs	r0, #128	; 0x80
 8001a96:	0400      	lsls	r0, r0, #16
 8001a98:	4301      	orrs	r1, r0
 8001a9a:	2a38      	cmp	r2, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x70>
 8001a9e:	e17b      	b.n	8001d98 <__aeabi_dsub+0x368>
 8001aa0:	2a1f      	cmp	r2, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x76>
 8001aa4:	e1ee      	b.n	8001e84 <__aeabi_dsub+0x454>
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	1a80      	subs	r0, r0, r2
 8001aac:	000c      	movs	r4, r1
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	4087      	lsls	r7, r0
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	4084      	lsls	r4, r0
 8001ab8:	1a52      	subs	r2, r2, r1
 8001aba:	1e78      	subs	r0, r7, #1
 8001abc:	4187      	sbcs	r7, r0
 8001abe:	4694      	mov	ip, r2
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4327      	orrs	r7, r4
 8001ac4:	1bdc      	subs	r4, r3, r7
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	419b      	sbcs	r3, r3
 8001aca:	4662      	mov	r2, ip
 8001acc:	425b      	negs	r3, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0xaa>
 8001ad8:	e118      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001ada:	464b      	mov	r3, r9
 8001adc:	0258      	lsls	r0, r3, #9
 8001ade:	0a43      	lsrs	r3, r0, #9
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0xba>
 8001ae8:	e137      	b.n	8001d5a <__aeabi_dsub+0x32a>
 8001aea:	4648      	mov	r0, r9
 8001aec:	f000 fbdc 	bl	80022a8 <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	3908      	subs	r1, #8
 8001af4:	2320      	movs	r3, #32
 8001af6:	0022      	movs	r2, r4
 8001af8:	4648      	mov	r0, r9
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4088      	lsls	r0, r1
 8001b00:	408c      	lsls	r4, r1
 8001b02:	4643      	mov	r3, r8
 8001b04:	4310      	orrs	r0, r2
 8001b06:	4588      	cmp	r8, r1
 8001b08:	dd00      	ble.n	8001b0c <__aeabi_dsub+0xdc>
 8001b0a:	e136      	b.n	8001d7a <__aeabi_dsub+0x34a>
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	1c4b      	adds	r3, r1, #1
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe6>
 8001b14:	e0ea      	b.n	8001cec <__aeabi_dsub+0x2bc>
 8001b16:	2220      	movs	r2, #32
 8001b18:	0026      	movs	r6, r4
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4094      	lsls	r4, r2
 8001b20:	40de      	lsrs	r6, r3
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4091      	lsls	r1, r2
 8001b28:	1e62      	subs	r2, r4, #1
 8001b2a:	4194      	sbcs	r4, r2
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4331      	orrs	r1, r6
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x11c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a1      	add	r9, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x124>
 8001b52:	e0de      	b.n	8001d12 <__aeabi_dsub+0x2e2>
 8001b54:	4641      	mov	r1, r8
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x358>)
 8001b58:	3101      	adds	r1, #1
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x130>
 8001b5e:	e0e7      	b.n	8001d30 <__aeabi_dsub+0x300>
 8001b60:	464b      	mov	r3, r9
 8001b62:	488a      	ldr	r0, [pc, #552]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	0240      	lsls	r0, r0, #9
 8001b70:	4323      	orrs	r3, r4
 8001b72:	0d4a      	lsrs	r2, r1, #21
 8001b74:	0b04      	lsrs	r4, r0, #12
 8001b76:	0512      	lsls	r2, r2, #20
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	432a      	orrs	r2, r5
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0011      	movs	r1, r2
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4642      	mov	r2, r8
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	dd52      	ble.n	8001c3c <__aeabi_dsub+0x20c>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x16c>
 8001b9a:	e09c      	b.n	8001cd6 <__aeabi_dsub+0x2a6>
 8001b9c:	45a0      	cmp	r8, r4
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x172>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001ba2:	2080      	movs	r0, #128	; 0x80
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	4301      	orrs	r1, r0
 8001ba8:	2a38      	cmp	r2, #56	; 0x38
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0x17e>
 8001bac:	e149      	b.n	8001e42 <__aeabi_dsub+0x412>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x184>
 8001bb2:	e197      	b.n	8001ee4 <__aeabi_dsub+0x4b4>
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	3820      	subs	r0, #32
 8001bba:	40c6      	lsrs	r6, r0
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_dsub+0x19a>
 8001bc0:	2040      	movs	r0, #64	; 0x40
 8001bc2:	1a82      	subs	r2, r0, r2
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	430f      	orrs	r7, r1
 8001bc8:	46b9      	mov	r9, r7
 8001bca:	464c      	mov	r4, r9
 8001bcc:	1e62      	subs	r2, r4, #1
 8001bce:	4194      	sbcs	r4, r2
 8001bd0:	4334      	orrs	r4, r6
 8001bd2:	e13a      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	433a      	orrs	r2, r7
 8001bd8:	d028      	beq.n	8001c2c <__aeabi_dsub+0x1fc>
 8001bda:	46b3      	mov	fp, r6
 8001bdc:	42b5      	cmp	r5, r6
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <__aeabi_dsub+0x360>)
 8001be2:	4442      	add	r2, r8
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d05d      	beq.n	8001ca4 <__aeabi_dsub+0x274>
 8001be8:	4642      	mov	r2, r8
 8001bea:	4644      	mov	r4, r8
 8001bec:	1a82      	subs	r2, r0, r2
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x1c4>
 8001bf2:	e0f5      	b.n	8001de0 <__aeabi_dsub+0x3b0>
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x1cc>
 8001bfa:	e19c      	b.n	8001f36 <__aeabi_dsub+0x506>
 8001bfc:	1e55      	subs	r5, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d4>
 8001c02:	e1fb      	b.n	8001ffc <__aeabi_dsub+0x5cc>
 8001c04:	4c60      	ldr	r4, [pc, #384]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1dc>
 8001c0a:	e1bd      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001c0c:	002a      	movs	r2, r5
 8001c0e:	e0f0      	b.n	8001df2 <__aeabi_dsub+0x3c2>
 8001c10:	0008      	movs	r0, r1
 8001c12:	4338      	orrs	r0, r7
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e8>
 8001c16:	e0c3      	b.n	8001da0 <__aeabi_dsub+0x370>
 8001c18:	1e50      	subs	r0, r2, #1
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1f0>
 8001c1e:	e1a8      	b.n	8001f72 <__aeabi_dsub+0x542>
 8001c20:	4c59      	ldr	r4, [pc, #356]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f8>
 8001c26:	e087      	b.n	8001d38 <__aeabi_dsub+0x308>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	e736      	b.n	8001a9a <__aeabi_dsub+0x6a>
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4056      	eors	r6, r2
 8001c30:	46b3      	mov	fp, r6
 8001c32:	42b5      	cmp	r5, r6
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x208>
 8001c36:	e721      	b.n	8001a7c <__aeabi_dsub+0x4c>
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <__aeabi_dsub+0x360>)
 8001c3a:	4442      	add	r2, r8
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x212>
 8001c40:	e0b5      	b.n	8001dae <__aeabi_dsub+0x37e>
 8001c42:	4642      	mov	r2, r8
 8001c44:	4644      	mov	r4, r8
 8001c46:	1a82      	subs	r2, r0, r2
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x21e>
 8001c4c:	e138      	b.n	8001ec0 <__aeabi_dsub+0x490>
 8001c4e:	4e4e      	ldr	r6, [pc, #312]	; (8001d88 <__aeabi_dsub+0x358>)
 8001c50:	42b0      	cmp	r0, r6
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x226>
 8001c54:	e1de      	b.n	8002014 <__aeabi_dsub+0x5e4>
 8001c56:	2680      	movs	r6, #128	; 0x80
 8001c58:	4664      	mov	r4, ip
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	46a4      	mov	ip, r4
 8001c60:	2a38      	cmp	r2, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x236>
 8001c64:	e196      	b.n	8001f94 <__aeabi_dsub+0x564>
 8001c66:	2a1f      	cmp	r2, #31
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x23c>
 8001c6a:	e224      	b.n	80020b6 <__aeabi_dsub+0x686>
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	1ab4      	subs	r4, r6, r2
 8001c70:	46a2      	mov	sl, r4
 8001c72:	4664      	mov	r4, ip
 8001c74:	4656      	mov	r6, sl
 8001c76:	40b4      	lsls	r4, r6
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	40d4      	lsrs	r4, r2
 8001c80:	4326      	orrs	r6, r4
 8001c82:	0034      	movs	r4, r6
 8001c84:	4656      	mov	r6, sl
 8001c86:	40b3      	lsls	r3, r6
 8001c88:	1e5e      	subs	r6, r3, #1
 8001c8a:	41b3      	sbcs	r3, r6
 8001c8c:	431c      	orrs	r4, r3
 8001c8e:	4663      	mov	r3, ip
 8001c90:	40d3      	lsrs	r3, r2
 8001c92:	18c9      	adds	r1, r1, r3
 8001c94:	19e4      	adds	r4, r4, r7
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	41bf      	sbcs	r7, r7
 8001c9a:	427f      	negs	r7, r7
 8001c9c:	46b9      	mov	r9, r7
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	4489      	add	r9, r1
 8001ca2:	e0d8      	b.n	8001e56 <__aeabi_dsub+0x426>
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4c3b      	ldr	r4, [pc, #236]	; (8001d94 <__aeabi_dsub+0x364>)
 8001ca8:	3001      	adds	r0, #1
 8001caa:	4220      	tst	r0, r4
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x280>
 8001cae:	e0b4      	b.n	8001e1a <__aeabi_dsub+0x3ea>
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x288>
 8001cb6:	e144      	b.n	8001f42 <__aeabi_dsub+0x512>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4318      	orrs	r0, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x290>
 8001cbe:	e190      	b.n	8001fe2 <__aeabi_dsub+0x5b2>
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	4338      	orrs	r0, r7
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x298>
 8001cc6:	e1aa      	b.n	800201e <__aeabi_dsub+0x5ee>
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	0749      	lsls	r1, r1, #29
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e027      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4338      	orrs	r0, r7
 8001cda:	d061      	beq.n	8001da0 <__aeabi_dsub+0x370>
 8001cdc:	1e50      	subs	r0, r2, #1
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x2b4>
 8001ce2:	e139      	b.n	8001f58 <__aeabi_dsub+0x528>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d027      	beq.n	8001d38 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e75d      	b.n	8001ba8 <__aeabi_dsub+0x178>
 8001cec:	0002      	movs	r2, r0
 8001cee:	391f      	subs	r1, #31
 8001cf0:	40ca      	lsrs	r2, r1
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d003      	beq.n	8001d00 <__aeabi_dsub+0x2d0>
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4098      	lsls	r0, r3
 8001cfe:	4304      	orrs	r4, r0
 8001d00:	1e63      	subs	r3, r4, #1
 8001d02:	419c      	sbcs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	4699      	mov	r9, r3
 8001d08:	4698      	mov	r8, r3
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	0763      	lsls	r3, r4, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x2e2>
 8001d10:	e712      	b.n	8001b38 <__aeabi_dsub+0x108>
 8001d12:	464b      	mov	r3, r9
 8001d14:	464a      	mov	r2, r9
 8001d16:	08e4      	lsrs	r4, r4, #3
 8001d18:	075b      	lsls	r3, r3, #29
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	08d4      	lsrs	r4, r2, #3
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4919      	ldr	r1, [pc, #100]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d00e      	beq.n	8001d44 <__aeabi_dsub+0x314>
 8001d26:	0324      	lsls	r4, r4, #12
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	0d52      	lsrs	r2, r2, #21
 8001d2e:	e722      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d30:	000a      	movs	r2, r1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2300      	movs	r3, #0
 8001d36:	e71e      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	4662      	mov	r2, ip
 8001d42:	08d4      	lsrs	r4, r2, #3
 8001d44:	001a      	movs	r2, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x31c>
 8001d4a:	e1fc      	b.n	8002146 <__aeabi_dsub+0x716>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <__aeabi_dsub+0x358>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e70d      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 faa4 	bl	80022a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3118      	adds	r1, #24
 8001d64:	291f      	cmp	r1, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x33a>
 8001d68:	e6c4      	b.n	8001af4 <__aeabi_dsub+0xc4>
 8001d6a:	3808      	subs	r0, #8
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	4643      	mov	r3, r8
 8001d70:	0020      	movs	r0, r4
 8001d72:	2400      	movs	r4, #0
 8001d74:	4588      	cmp	r8, r1
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_dsub+0x34a>
 8001d78:	e6c8      	b.n	8001b0c <__aeabi_dsub+0xdc>
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__aeabi_dsub+0x35c>)
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4010      	ands	r0, r2
 8001d80:	4698      	mov	r8, r3
 8001d82:	4681      	mov	r9, r0
 8001d84:	e6d6      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	430f      	orrs	r7, r1
 8001d9a:	1e7a      	subs	r2, r7, #1
 8001d9c:	4197      	sbcs	r7, r2
 8001d9e:	e691      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001da0:	4661      	mov	r1, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0749      	lsls	r1, r1, #29
 8001da6:	430b      	orrs	r3, r1
 8001da8:	4661      	mov	r1, ip
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e7b8      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001dae:	4640      	mov	r0, r8
 8001db0:	4cd3      	ldr	r4, [pc, #844]	; (8002100 <__aeabi_dsub+0x6d0>)
 8001db2:	3001      	adds	r0, #1
 8001db4:	4220      	tst	r0, r4
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x38a>
 8001db8:	e0a2      	b.n	8001f00 <__aeabi_dsub+0x4d0>
 8001dba:	4640      	mov	r0, r8
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x392>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x596>
 8001dc2:	4660      	mov	r0, ip
 8001dc4:	4318      	orrs	r0, r3
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x39a>
 8001dc8:	e15e      	b.n	8002088 <__aeabi_dsub+0x658>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	4338      	orrs	r0, r7
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3a2>
 8001dd0:	e15f      	b.n	8002092 <__aeabi_dsub+0x662>
 8001dd2:	4661      	mov	r1, ip
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	0749      	lsls	r1, r1, #29
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4661      	mov	r1, ip
 8001ddc:	08cc      	lsrs	r4, r1, #3
 8001dde:	e7a2      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001de0:	4dc8      	ldr	r5, [pc, #800]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x3b8>
 8001de6:	e0cf      	b.n	8001f88 <__aeabi_dsub+0x558>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	4664      	mov	r4, ip
 8001dec:	042d      	lsls	r5, r5, #16
 8001dee:	432c      	orrs	r4, r5
 8001df0:	46a4      	mov	ip, r4
 8001df2:	2a38      	cmp	r2, #56	; 0x38
 8001df4:	dc56      	bgt.n	8001ea4 <__aeabi_dsub+0x474>
 8001df6:	2a1f      	cmp	r2, #31
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x3cc>
 8001dfa:	e0d1      	b.n	8001fa0 <__aeabi_dsub+0x570>
 8001dfc:	2520      	movs	r5, #32
 8001dfe:	001e      	movs	r6, r3
 8001e00:	1aad      	subs	r5, r5, r2
 8001e02:	4664      	mov	r4, ip
 8001e04:	40ab      	lsls	r3, r5
 8001e06:	40ac      	lsls	r4, r5
 8001e08:	40d6      	lsrs	r6, r2
 8001e0a:	1e5d      	subs	r5, r3, #1
 8001e0c:	41ab      	sbcs	r3, r5
 8001e0e:	4334      	orrs	r4, r6
 8001e10:	4323      	orrs	r3, r4
 8001e12:	4664      	mov	r4, ip
 8001e14:	40d4      	lsrs	r4, r2
 8001e16:	1b09      	subs	r1, r1, r4
 8001e18:	e049      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1bdc      	subs	r4, r3, r7
 8001e1e:	1a46      	subs	r6, r0, r1
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	4681      	mov	r9, r0
 8001e28:	0030      	movs	r0, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	4681      	mov	r9, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	d476      	bmi.n	8001f22 <__aeabi_dsub+0x4f2>
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x40c>
 8001e3a:	e652      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e771      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001e42:	4339      	orrs	r1, r7
 8001e44:	000c      	movs	r4, r1
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	4194      	sbcs	r4, r2
 8001e4a:	18e4      	adds	r4, r4, r3
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	425b      	negs	r3, r3
 8001e52:	4463      	add	r3, ip
 8001e54:	4699      	mov	r9, r3
 8001e56:	464b      	mov	r3, r9
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x42e>
 8001e5c:	e756      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	469c      	mov	ip, r3
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001e64:	44e0      	add	r8, ip
 8001e66:	4598      	cmp	r8, r3
 8001e68:	d038      	beq.n	8001edc <__aeabi_dsub+0x4ac>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	48a6      	ldr	r0, [pc, #664]	; (8002108 <__aeabi_dsub+0x6d8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4003      	ands	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	0863      	lsrs	r3, r4, #1
 8001e76:	4014      	ands	r4, r2
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	07c3      	lsls	r3, r0, #31
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	0843      	lsrs	r3, r0, #1
 8001e80:	4699      	mov	r9, r3
 8001e82:	e657      	b.n	8001b34 <__aeabi_dsub+0x104>
 8001e84:	0010      	movs	r0, r2
 8001e86:	000e      	movs	r6, r1
 8001e88:	3820      	subs	r0, #32
 8001e8a:	40c6      	lsrs	r6, r0
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_dsub+0x46a>
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	1a82      	subs	r2, r0, r2
 8001e94:	4091      	lsls	r1, r2
 8001e96:	430f      	orrs	r7, r1
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	1e7a      	subs	r2, r7, #1
 8001e9e:	4197      	sbcs	r7, r2
 8001ea0:	4337      	orrs	r7, r6
 8001ea2:	e60f      	b.n	8001ac4 <__aeabi_dsub+0x94>
 8001ea4:	4662      	mov	r2, ip
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	1afc      	subs	r4, r7, r3
 8001eb0:	42a7      	cmp	r7, r4
 8001eb2:	41bf      	sbcs	r7, r7
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1bcb      	subs	r3, r1, r7
 8001eb8:	4699      	mov	r9, r3
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	e608      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001ec0:	4666      	mov	r6, ip
 8001ec2:	431e      	orrs	r6, r3
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x498>
 8001ec6:	e0be      	b.n	8002046 <__aeabi_dsub+0x616>
 8001ec8:	1e56      	subs	r6, r2, #1
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x4a0>
 8001ece:	e109      	b.n	80020e4 <__aeabi_dsub+0x6b4>
 8001ed0:	4c8c      	ldr	r4, [pc, #560]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x4a8>
 8001ed6:	e119      	b.n	800210c <__aeabi_dsub+0x6dc>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	e6c1      	b.n	8001c60 <__aeabi_dsub+0x230>
 8001edc:	4642      	mov	r2, r8
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e648      	b.n	8001b76 <__aeabi_dsub+0x146>
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	1a80      	subs	r0, r0, r2
 8001eea:	003e      	movs	r6, r7
 8001eec:	4087      	lsls	r7, r0
 8001eee:	4084      	lsls	r4, r0
 8001ef0:	40d6      	lsrs	r6, r2
 8001ef2:	1e78      	subs	r0, r7, #1
 8001ef4:	4187      	sbcs	r7, r0
 8001ef6:	40d1      	lsrs	r1, r2
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	433c      	orrs	r4, r7
 8001efc:	448c      	add	ip, r1
 8001efe:	e7a4      	b.n	8001e4a <__aeabi_dsub+0x41a>
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <__aeabi_dsub+0x6d4>)
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x4d8>
 8001f06:	e0e9      	b.n	80020dc <__aeabi_dsub+0x6ac>
 8001f08:	19df      	adds	r7, r3, r7
 8001f0a:	429f      	cmp	r7, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	4461      	add	r1, ip
 8001f10:	425b      	negs	r3, r3
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	07cc      	lsls	r4, r1, #31
 8001f16:	087f      	lsrs	r7, r7, #1
 8001f18:	084b      	lsrs	r3, r1, #1
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	e6f4      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f22:	1afc      	subs	r4, r7, r3
 8001f24:	42a7      	cmp	r7, r4
 8001f26:	41bf      	sbcs	r7, r7
 8001f28:	4663      	mov	r3, ip
 8001f2a:	427f      	negs	r7, r7
 8001f2c:	1ac9      	subs	r1, r1, r3
 8001f2e:	1bcb      	subs	r3, r1, r7
 8001f30:	4699      	mov	r9, r3
 8001f32:	465d      	mov	r5, fp
 8001f34:	e5d5      	b.n	8001ae2 <__aeabi_dsub+0xb2>
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e6ee      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8001f42:	4662      	mov	r2, ip
 8001f44:	431a      	orrs	r2, r3
 8001f46:	d000      	beq.n	8001f4a <__aeabi_dsub+0x51a>
 8001f48:	e082      	b.n	8002050 <__aeabi_dsub+0x620>
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d11b      	bne.n	8001f88 <__aeabi_dsub+0x558>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	2500      	movs	r5, #0
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	e6f9      	b.n	8001d4c <__aeabi_dsub+0x31c>
 8001f58:	19dc      	adds	r4, r3, r7
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	419b      	sbcs	r3, r3
 8001f5e:	4461      	add	r1, ip
 8001f60:	4689      	mov	r9, r1
 8001f62:	425b      	negs	r3, r3
 8001f64:	4499      	add	r9, r3
 8001f66:	464b      	mov	r3, r9
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	d444      	bmi.n	8001ff6 <__aeabi_dsub+0x5c6>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4698      	mov	r8, r3
 8001f70:	e6cc      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 8001f72:	1bdc      	subs	r4, r3, r7
 8001f74:	4662      	mov	r2, ip
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	1a51      	subs	r1, r2, r1
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	4699      	mov	r9, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	4698      	mov	r8, r3
 8001f86:	e5a4      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	465d      	mov	r5, fp
 8001f8e:	433b      	orrs	r3, r7
 8001f90:	08cc      	lsrs	r4, r1, #3
 8001f92:	e6d7      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001f94:	4662      	mov	r2, ip
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0014      	movs	r4, r2
 8001f9a:	1e63      	subs	r3, r4, #1
 8001f9c:	419c      	sbcs	r4, r3
 8001f9e:	e679      	b.n	8001c94 <__aeabi_dsub+0x264>
 8001fa0:	0015      	movs	r5, r2
 8001fa2:	4664      	mov	r4, ip
 8001fa4:	3d20      	subs	r5, #32
 8001fa6:	40ec      	lsrs	r4, r5
 8001fa8:	46a0      	mov	r8, r4
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d005      	beq.n	8001fba <__aeabi_dsub+0x58a>
 8001fae:	2540      	movs	r5, #64	; 0x40
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1aaa      	subs	r2, r5, r2
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	469a      	mov	sl, r3
 8001fba:	4654      	mov	r4, sl
 8001fbc:	1e63      	subs	r3, r4, #1
 8001fbe:	419c      	sbcs	r4, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	e773      	b.n	8001eae <__aeabi_dsub+0x47e>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	d023      	beq.n	8002014 <__aeabi_dsub+0x5e4>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x5a4>
 8001fd2:	e0a0      	b.n	8002116 <__aeabi_dsub+0x6e6>
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	e6b0      	b.n	8001d44 <__aeabi_dsub+0x314>
 8001fe2:	000b      	movs	r3, r1
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x5ba>
 8001fe8:	e728      	b.n	8001e3c <__aeabi_dsub+0x40c>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	465d      	mov	r5, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	08cc      	lsrs	r4, r1, #3
 8001ff4:	e697      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	e736      	b.n	8001e6a <__aeabi_dsub+0x43a>
 8001ffc:	1afc      	subs	r4, r7, r3
 8001ffe:	42a7      	cmp	r7, r4
 8002000:	41bf      	sbcs	r7, r7
 8002002:	4663      	mov	r3, ip
 8002004:	427f      	negs	r7, r7
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	1bcb      	subs	r3, r1, r7
 800200a:	4699      	mov	r9, r3
 800200c:	2301      	movs	r3, #1
 800200e:	465d      	mov	r5, fp
 8002010:	4698      	mov	r8, r3
 8002012:	e55e      	b.n	8001ad2 <__aeabi_dsub+0xa2>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	433b      	orrs	r3, r7
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e692      	b.n	8001d44 <__aeabi_dsub+0x314>
 800201e:	1bdc      	subs	r4, r3, r7
 8002020:	4660      	mov	r0, ip
 8002022:	42a3      	cmp	r3, r4
 8002024:	41b6      	sbcs	r6, r6
 8002026:	1a40      	subs	r0, r0, r1
 8002028:	4276      	negs	r6, r6
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4681      	mov	r9, r0
 800202e:	0200      	lsls	r0, r0, #8
 8002030:	d560      	bpl.n	80020f4 <__aeabi_dsub+0x6c4>
 8002032:	1afc      	subs	r4, r7, r3
 8002034:	42a7      	cmp	r7, r4
 8002036:	41bf      	sbcs	r7, r7
 8002038:	4663      	mov	r3, ip
 800203a:	427f      	negs	r7, r7
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1bcb      	subs	r3, r1, r7
 8002040:	4699      	mov	r9, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e576      	b.n	8001b34 <__aeabi_dsub+0x104>
 8002046:	08ff      	lsrs	r7, r7, #3
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	433b      	orrs	r3, r7
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e667      	b.n	8001d20 <__aeabi_dsub+0x2f0>
 8002050:	000a      	movs	r2, r1
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	433a      	orrs	r2, r7
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x62a>
 8002058:	e66f      	b.n	8001d3a <__aeabi_dsub+0x30a>
 800205a:	4662      	mov	r2, ip
 800205c:	0752      	lsls	r2, r2, #29
 800205e:	4313      	orrs	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	08d4      	lsrs	r4, r2, #3
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4214      	tst	r4, r2
 800206a:	d007      	beq.n	800207c <__aeabi_dsub+0x64c>
 800206c:	08c8      	lsrs	r0, r1, #3
 800206e:	4210      	tst	r0, r2
 8002070:	d104      	bne.n	800207c <__aeabi_dsub+0x64c>
 8002072:	465d      	mov	r5, fp
 8002074:	0004      	movs	r4, r0
 8002076:	08fb      	lsrs	r3, r7, #3
 8002078:	0749      	lsls	r1, r1, #29
 800207a:	430b      	orrs	r3, r1
 800207c:	0f5a      	lsrs	r2, r3, #29
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	4313      	orrs	r3, r2
 8002086:	e65d      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	08ff      	lsrs	r7, r7, #3
 800208c:	433b      	orrs	r3, r7
 800208e:	08cc      	lsrs	r4, r1, #3
 8002090:	e649      	b.n	8001d26 <__aeabi_dsub+0x2f6>
 8002092:	19dc      	adds	r4, r3, r7
 8002094:	429c      	cmp	r4, r3
 8002096:	419b      	sbcs	r3, r3
 8002098:	4461      	add	r1, ip
 800209a:	4689      	mov	r9, r1
 800209c:	425b      	negs	r3, r3
 800209e:	4499      	add	r9, r3
 80020a0:	464b      	mov	r3, r9
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	d400      	bmi.n	80020a8 <__aeabi_dsub+0x678>
 80020a6:	e631      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020a8:	464a      	mov	r2, r9
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <__aeabi_dsub+0x6d8>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4691      	mov	r9, r2
 80020b2:	4698      	mov	r8, r3
 80020b4:	e62a      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020b6:	0016      	movs	r6, r2
 80020b8:	4664      	mov	r4, ip
 80020ba:	3e20      	subs	r6, #32
 80020bc:	40f4      	lsrs	r4, r6
 80020be:	46a0      	mov	r8, r4
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x6a0>
 80020c4:	2640      	movs	r6, #64	; 0x40
 80020c6:	4664      	mov	r4, ip
 80020c8:	1ab2      	subs	r2, r6, r2
 80020ca:	4094      	lsls	r4, r2
 80020cc:	4323      	orrs	r3, r4
 80020ce:	469a      	mov	sl, r3
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4643      	mov	r3, r8
 80020d8:	431c      	orrs	r4, r3
 80020da:	e5db      	b.n	8001c94 <__aeabi_dsub+0x264>
 80020dc:	0002      	movs	r2, r0
 80020de:	2400      	movs	r4, #0
 80020e0:	2300      	movs	r3, #0
 80020e2:	e548      	b.n	8001b76 <__aeabi_dsub+0x146>
 80020e4:	19dc      	adds	r4, r3, r7
 80020e6:	42bc      	cmp	r4, r7
 80020e8:	41bf      	sbcs	r7, r7
 80020ea:	4461      	add	r1, ip
 80020ec:	4689      	mov	r9, r1
 80020ee:	427f      	negs	r7, r7
 80020f0:	44b9      	add	r9, r7
 80020f2:	e738      	b.n	8001f66 <__aeabi_dsub+0x536>
 80020f4:	464b      	mov	r3, r9
 80020f6:	4323      	orrs	r3, r4
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x6cc>
 80020fa:	e69f      	b.n	8001e3c <__aeabi_dsub+0x40c>
 80020fc:	e606      	b.n	8001d0c <__aeabi_dsub+0x2dc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	433b      	orrs	r3, r7
 8002112:	08cc      	lsrs	r4, r1, #3
 8002114:	e616      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002116:	4662      	mov	r2, ip
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	4313      	orrs	r3, r2
 800211e:	4662      	mov	r2, ip
 8002120:	08d4      	lsrs	r4, r2, #3
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0312      	lsls	r2, r2, #12
 8002126:	4214      	tst	r4, r2
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x70a>
 800212a:	08c8      	lsrs	r0, r1, #3
 800212c:	4210      	tst	r0, r2
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x70a>
 8002130:	465d      	mov	r5, fp
 8002132:	0004      	movs	r4, r0
 8002134:	08fb      	lsrs	r3, r7, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	430b      	orrs	r3, r1
 800213a:	0f5a      	lsrs	r2, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	4313      	orrs	r3, r2
 8002144:	e5fe      	b.n	8001d44 <__aeabi_dsub+0x314>
 8002146:	2300      	movs	r3, #0
 8002148:	4a01      	ldr	r2, [pc, #4]	; (8002150 <__aeabi_dsub+0x720>)
 800214a:	001c      	movs	r4, r3
 800214c:	e513      	b.n	8001b76 <__aeabi_dsub+0x146>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__aeabi_dcmpun>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	0005      	movs	r5, r0
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <__aeabi_dcmpun+0x38>)
 800215a:	031c      	lsls	r4, r3, #12
 800215c:	0016      	movs	r6, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	030a      	lsls	r2, r1, #12
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	0b12      	lsrs	r2, r2, #12
 8002166:	0d49      	lsrs	r1, r1, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	4281      	cmp	r1, r0
 800216e:	d008      	beq.n	8002182 <__aeabi_dcmpun+0x2e>
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <__aeabi_dcmpun+0x38>)
 8002172:	2000      	movs	r0, #0
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002178:	0020      	movs	r0, r4
 800217a:	4330      	orrs	r0, r6
 800217c:	1e43      	subs	r3, r0, #1
 800217e:	4198      	sbcs	r0, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2001      	movs	r0, #1
 8002184:	432a      	orrs	r2, r5
 8002186:	d1fb      	bne.n	8002180 <__aeabi_dcmpun+0x2c>
 8002188:	e7f2      	b.n	8002170 <__aeabi_dcmpun+0x1c>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__aeabi_d2iz>:
 8002190:	000a      	movs	r2, r1
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	4c13      	ldr	r4, [pc, #76]	; (80021e4 <__aeabi_d2iz+0x54>)
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	0309      	lsls	r1, r1, #12
 800219a:	0005      	movs	r5, r0
 800219c:	0b09      	lsrs	r1, r1, #12
 800219e:	2000      	movs	r0, #0
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	0fd2      	lsrs	r2, r2, #31
 80021a4:	42a3      	cmp	r3, r4
 80021a6:	dd04      	ble.n	80021b2 <__aeabi_d2iz+0x22>
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <__aeabi_d2iz+0x58>)
 80021aa:	4283      	cmp	r3, r0
 80021ac:	dd02      	ble.n	80021b4 <__aeabi_d2iz+0x24>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <__aeabi_d2iz+0x5c>)
 80021b0:	18d0      	adds	r0, r2, r3
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	0340      	lsls	r0, r0, #13
 80021b8:	4301      	orrs	r1, r0
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <__aeabi_d2iz+0x60>)
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	281f      	cmp	r0, #31
 80021c0:	dd08      	ble.n	80021d4 <__aeabi_d2iz+0x44>
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <__aeabi_d2iz+0x64>)
 80021c4:	1ac3      	subs	r3, r0, r3
 80021c6:	40d9      	lsrs	r1, r3
 80021c8:	000b      	movs	r3, r1
 80021ca:	4258      	negs	r0, r3
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1f0      	bne.n	80021b2 <__aeabi_d2iz+0x22>
 80021d0:	0018      	movs	r0, r3
 80021d2:	e7ee      	b.n	80021b2 <__aeabi_d2iz+0x22>
 80021d4:	4c08      	ldr	r4, [pc, #32]	; (80021f8 <__aeabi_d2iz+0x68>)
 80021d6:	40c5      	lsrs	r5, r0
 80021d8:	46a4      	mov	ip, r4
 80021da:	4463      	add	r3, ip
 80021dc:	4099      	lsls	r1, r3
 80021de:	000b      	movs	r3, r1
 80021e0:	432b      	orrs	r3, r5
 80021e2:	e7f2      	b.n	80021ca <__aeabi_d2iz+0x3a>
 80021e4:	000003fe 	.word	0x000003fe
 80021e8:	0000041d 	.word	0x0000041d
 80021ec:	7fffffff 	.word	0x7fffffff
 80021f0:	00000433 	.word	0x00000433
 80021f4:	00000413 	.word	0x00000413
 80021f8:	fffffbed 	.word	0xfffffbed

080021fc <__aeabi_i2d>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2800      	cmp	r0, #0
 8002200:	d016      	beq.n	8002230 <__aeabi_i2d+0x34>
 8002202:	17c3      	asrs	r3, r0, #31
 8002204:	18c5      	adds	r5, r0, r3
 8002206:	405d      	eors	r5, r3
 8002208:	0fc4      	lsrs	r4, r0, #31
 800220a:	0028      	movs	r0, r5
 800220c:	f000 f84c 	bl	80022a8 <__clzsi2>
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <__aeabi_i2d+0x5c>)
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	280a      	cmp	r0, #10
 8002216:	dc16      	bgt.n	8002246 <__aeabi_i2d+0x4a>
 8002218:	0003      	movs	r3, r0
 800221a:	002e      	movs	r6, r5
 800221c:	3315      	adds	r3, #21
 800221e:	409e      	lsls	r6, r3
 8002220:	230b      	movs	r3, #11
 8002222:	1a18      	subs	r0, r3, r0
 8002224:	40c5      	lsrs	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	0b2d      	lsrs	r5, r5, #12
 800222c:	0d53      	lsrs	r3, r2, #21
 800222e:	e003      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002230:	2400      	movs	r4, #0
 8002232:	2300      	movs	r3, #0
 8002234:	2500      	movs	r5, #0
 8002236:	2600      	movs	r6, #0
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	432b      	orrs	r3, r5
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0030      	movs	r0, r6
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	380b      	subs	r0, #11
 8002248:	4085      	lsls	r5, r0
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	032d      	lsls	r5, r5, #12
 800224e:	2600      	movs	r6, #0
 8002250:	0b2d      	lsrs	r5, r5, #12
 8002252:	0d53      	lsrs	r3, r2, #21
 8002254:	e7f0      	b.n	8002238 <__aeabi_i2d+0x3c>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0000041e 	.word	0x0000041e

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d010      	beq.n	8002284 <__aeabi_ui2d+0x28>
 8002262:	f000 f821 	bl	80022a8 <__clzsi2>
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <__aeabi_ui2d+0x48>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	280a      	cmp	r0, #10
 800226c:	dc11      	bgt.n	8002292 <__aeabi_ui2d+0x36>
 800226e:	220b      	movs	r2, #11
 8002270:	0021      	movs	r1, r4
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d1      	lsrs	r1, r2
 8002276:	3015      	adds	r0, #21
 8002278:	030a      	lsls	r2, r1, #12
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4084      	lsls	r4, r0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e001      	b.n	8002288 <__aeabi_ui2d+0x2c>
 8002284:	2300      	movs	r3, #0
 8002286:	2200      	movs	r2, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	4313      	orrs	r3, r2
 800228c:	0020      	movs	r0, r4
 800228e:	0019      	movs	r1, r3
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0022      	movs	r2, r4
 8002294:	380b      	subs	r0, #11
 8002296:	4082      	lsls	r2, r0
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	2400      	movs	r4, #0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e7f1      	b.n	8002288 <__aeabi_ui2d+0x2c>
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__clzsi2>:
 80022a8:	211c      	movs	r1, #28
 80022aa:	2301      	movs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0xe>
 80022b2:	0c00      	lsrs	r0, r0, #16
 80022b4:	3910      	subs	r1, #16
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	4298      	cmp	r0, r3
 80022ba:	d301      	bcc.n	80022c0 <__clzsi2+0x18>
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	3908      	subs	r1, #8
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d301      	bcc.n	80022ca <__clzsi2+0x22>
 80022c6:	0900      	lsrs	r0, r0, #4
 80022c8:	3904      	subs	r1, #4
 80022ca:	a202      	add	r2, pc, #8	; (adr r2, 80022d4 <__clzsi2+0x2c>)
 80022cc:	5c10      	ldrb	r0, [r2, r0]
 80022ce:	1840      	adds	r0, r0, r1
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	02020304 	.word	0x02020304
 80022d8:	01010101 	.word	0x01010101
	...

080022e4 <__clzdi2>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2900      	cmp	r1, #0
 80022e8:	d103      	bne.n	80022f2 <__clzdi2+0xe>
 80022ea:	f7ff ffdd 	bl	80022a8 <__clzsi2>
 80022ee:	3020      	adds	r0, #32
 80022f0:	e002      	b.n	80022f8 <__clzdi2+0x14>
 80022f2:	0008      	movs	r0, r1
 80022f4:	f7ff ffd8 	bl	80022a8 <__clzsi2>
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)

080022fc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002304:	2301      	movs	r3, #1
 8002306:	425b      	negs	r3, r3
 8002308:	1d39      	adds	r1, r7, #4
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <__io_putchar+0x20>)
 800230c:	2201      	movs	r2, #1
 800230e:	f002 fded 	bl	8004eec <HAL_UART_Transmit>
  return ch;
 8002312:	687b      	ldr	r3, [r7, #4]
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000025c 	.word	0x2000025c

08002320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	4c45      	ldr	r4, [pc, #276]	; (8002438 <main+0x118>)
 8002324:	44a5      	add	sp, r4
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002328:	f000 fca2 	bl	8002c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232c:	f000 f89c 	bl	8002468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002330:	f000 f9ba 	bl	80026a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002334:	f000 f988 	bl	8002648 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002338:	f000 f908 	bl	800254c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR1 = 0;
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	05db      	lsls	r3, r3, #23
 8002340:	2200      	movs	r2, #0
 8002342:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <main+0x11c>)
 8002346:	2100      	movs	r1, #0
 8002348:	0018      	movs	r0, r3
 800234a:	f002 f845 	bl	80043d8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, UART2_RxBuffer, 1); 	// somehow is required to start HAL_UART_RxCpltCallback
 800234e:	493c      	ldr	r1, [pc, #240]	; (8002440 <main+0x120>)
 8002350:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <main+0x124>)
 8002352:	2201      	movs	r2, #1
 8002354:	0018      	movs	r0, r3
 8002356:	f002 fe69 	bl	800502c <HAL_UART_Receive_IT>

  char in[1024] = {0};
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <main+0x128>)
 800235c:	2283      	movs	r2, #131	; 0x83
 800235e:	00d2      	lsls	r2, r2, #3
 8002360:	189b      	adds	r3, r3, r2
 8002362:	19db      	adds	r3, r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	3304      	adds	r3, #4
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	2100      	movs	r1, #0
 8002370:	0018      	movs	r0, r3
 8002372:	f004 f99e 	bl	80066b2 <memset>
  uint16_t in_pos = 0;
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <main+0x12c>)
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2200      	movs	r2, #0
 800237c:	801a      	strh	r2, [r3, #0]

  /* tlc enters normal mode on startup by default */
  HAL_GPIO_WritePin(TLC5926_LE_GPIO_Port, TLC5926_LE_Pin, GPIO_PIN_SET); /* high LE = transfer to latch */
 800237e:	23a0      	movs	r3, #160	; 0xa0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	2201      	movs	r2, #1
 8002384:	2110      	movs	r1, #16
 8002386:	0018      	movs	r0, r3
 8002388:	f000 ffbe 	bl	8003308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET); /* low OE = drive LEDs */
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <main+0x130>)
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	0018      	movs	r0, r3
 8002394:	f000 ffb8 	bl	8003308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, GPIO_PIN_SET);
 8002398:	23a0      	movs	r3, #160	; 0xa0
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	2201      	movs	r2, #1
 800239e:	2102      	movs	r1, #2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 ffb1 	bl	8003308 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // TIM2->ARR = auto reload register
  // TIM2->PSC = prescaler
  //int base_MHZ_reciproc = 16667; // 1000; = 1kHz
  TIM2->PSC = 40; //(32)*base_MHZ_reciproc - 1; // 31(+1) => 1MHz counter
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	05db      	lsls	r3, r3, #23
 80023aa:	2228      	movs	r2, #40	; 0x28
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 813; //20;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <main+0x134>)
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c
  int state = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	2282      	movs	r2, #130	; 0x82
 80023ba:	00d2      	lsls	r2, r2, #3
 80023bc:	18ba      	adds	r2, r7, r2
 80023be:	6013      	str	r3, [r2, #0]
  int led = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	4a25      	ldr	r2, [pc, #148]	; (8002458 <main+0x138>)
 80023c4:	18ba      	adds	r2, r7, r2
 80023c6:	6013      	str	r3, [r2, #0]
  int latch = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	2281      	movs	r2, #129	; 0x81
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	18ba      	adds	r2, r7, r2
 80023d0:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <main+0x11c>)
 80023d4:	0018      	movs	r0, r3
 80023d6:	f001 ff6b 	bl	80042b0 <HAL_TIM_Base_Start_IT>

  while (1)
  {

	  if(UART2_RxBufferPos) {
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <main+0x13c>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0fb      	beq.n	80023da <main+0xba>
		  size_t len = in_pos + UART2_RxBufferPos < 1024 ? UART2_RxBufferPos : 1024 - 1 - in_pos;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <main+0x12c>)
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <main+0x13c>)
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	189a      	adds	r2, r3, r2
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	da02      	bge.n	80023fc <main+0xdc>
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <main+0x13c>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	e004      	b.n	8002406 <main+0xe6>
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <main+0x12c>)
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	4a17      	ldr	r2, [pc, #92]	; (8002460 <main+0x140>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	4917      	ldr	r1, [pc, #92]	; (8002464 <main+0x144>)
 8002408:	187a      	adds	r2, r7, r1
 800240a:	6013      	str	r3, [r2, #0]
		  memcpy(in+in_pos, UART2_RxBuffer, len);
 800240c:	4c0f      	ldr	r4, [pc, #60]	; (800244c <main+0x12c>)
 800240e:	193b      	adds	r3, r7, r4
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	1d3a      	adds	r2, r7, #4
 8002414:	18d3      	adds	r3, r2, r3
 8002416:	187a      	adds	r2, r7, r1
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4909      	ldr	r1, [pc, #36]	; (8002440 <main+0x120>)
 800241c:	0018      	movs	r0, r3
 800241e:	f004 f93f 	bl	80066a0 <memcpy>
		  in_pos += UART2_RxBufferPos;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <main+0x13c>)
 8002424:	8819      	ldrh	r1, [r3, #0]
 8002426:	193b      	adds	r3, r7, r4
 8002428:	193a      	adds	r2, r7, r4
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	188a      	adds	r2, r1, r2
 800242e:	801a      	strh	r2, [r3, #0]
		  UART2_RxBufferPos = 0;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <main+0x13c>)
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]
	  if(UART2_RxBufferPos) {
 8002436:	e7d0      	b.n	80023da <main+0xba>
 8002438:	fffffbe4 	.word	0xfffffbe4
 800243c:	2000021c 	.word	0x2000021c
 8002440:	200001f8 	.word	0x200001f8
 8002444:	2000025c 	.word	0x2000025c
 8002448:	fffffbec 	.word	0xfffffbec
 800244c:	00000416 	.word	0x00000416
 8002450:	50000400 	.word	0x50000400
 8002454:	0000032d 	.word	0x0000032d
 8002458:	0000040c 	.word	0x0000040c
 800245c:	20000218 	.word	0x20000218
 8002460:	000003ff 	.word	0x000003ff
 8002464:	00000404 	.word	0x00000404

08002468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b09d      	sub	sp, #116	; 0x74
 800246c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246e:	2438      	movs	r4, #56	; 0x38
 8002470:	193b      	adds	r3, r7, r4
 8002472:	0018      	movs	r0, r3
 8002474:	2338      	movs	r3, #56	; 0x38
 8002476:	001a      	movs	r2, r3
 8002478:	2100      	movs	r1, #0
 800247a:	f004 f91a 	bl	80066b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800247e:	2324      	movs	r3, #36	; 0x24
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	0018      	movs	r0, r3
 8002484:	2314      	movs	r3, #20
 8002486:	001a      	movs	r2, r3
 8002488:	2100      	movs	r1, #0
 800248a:	f004 f912 	bl	80066b2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248e:	003b      	movs	r3, r7
 8002490:	0018      	movs	r0, r3
 8002492:	2324      	movs	r3, #36	; 0x24
 8002494:	001a      	movs	r2, r3
 8002496:	2100      	movs	r1, #0
 8002498:	f004 f90b 	bl	80066b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <SystemClock_Config+0xdc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <SystemClock_Config+0xe0>)
 80024a2:	401a      	ands	r2, r3
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <SystemClock_Config+0xdc>)
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	0109      	lsls	r1, r1, #4
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ae:	0021      	movs	r1, r4
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2201      	movs	r2, #1
 80024ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2210      	movs	r2, #16
 80024c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2202      	movs	r2, #2
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	2200      	movs	r2, #0
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	02d2      	lsls	r2, r2, #11
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	03d2      	lsls	r2, r2, #15
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 ff2f 	bl	8003344 <HAL_RCC_OscConfig>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <SystemClock_Config+0x86>
  {
    Error_Handler();
 80024ea:	f000 f9bb 	bl	8002864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ee:	2124      	movs	r1, #36	; 0x24
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	220f      	movs	r2, #15
 80024f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2203      	movs	r2, #3
 80024fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2101      	movs	r1, #1
 8002512:	0018      	movs	r0, r3
 8002514:	f001 fada 	bl	8003acc <HAL_RCC_ClockConfig>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800251c:	f000 f9a2 	bl	8002864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002520:	003b      	movs	r3, r7
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002526:	003b      	movs	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252c:	003b      	movs	r3, r7
 800252e:	0018      	movs	r0, r3
 8002530:	f001 fcf0 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002538:	f000 f994 	bl	8002864 <Error_Handler>
  }
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b01d      	add	sp, #116	; 0x74
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	40007000 	.word	0x40007000
 8002548:	ffffe7ff 	.word	0xffffe7ff

0800254c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	2318      	movs	r3, #24
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	0018      	movs	r0, r3
 8002558:	2310      	movs	r3, #16
 800255a:	001a      	movs	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f004 f8a8 	bl	80066b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	2310      	movs	r3, #16
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	0018      	movs	r0, r3
 8002568:	2308      	movs	r3, #8
 800256a:	001a      	movs	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f004 f8a0 	bl	80066b2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002572:	003b      	movs	r3, r7
 8002574:	0018      	movs	r0, r3
 8002576:	2310      	movs	r3, #16
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f004 f899 	bl	80066b2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <MX_TIM2_Init+0xf8>)
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	05d2      	lsls	r2, r2, #23
 8002586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <MX_TIM2_Init+0xf8>)
 800258a:	221f      	movs	r2, #31
 800258c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <MX_TIM2_Init+0xf8>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <MX_TIM2_Init+0xf8>)
 8002596:	22fa      	movs	r2, #250	; 0xfa
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MX_TIM2_Init+0xf8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <MX_TIM2_Init+0xf8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <MX_TIM2_Init+0xf8>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f001 fe40 	bl	8004230 <HAL_TIM_Base_Init>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80025b4:	f000 f956 	bl	8002864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b8:	2118      	movs	r1, #24
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0152      	lsls	r2, r2, #5
 80025c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c2:	187a      	adds	r2, r7, r1
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_TIM2_Init+0xf8>)
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f002 f8d1 	bl	8004770 <HAL_TIM_ConfigClockSource>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80025d2:	f000 f947 	bl	8002864 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_TIM2_Init+0xf8>)
 80025d8:	0018      	movs	r0, r3
 80025da:	f001 feb5 	bl	8004348 <HAL_TIM_OC_Init>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80025e2:	f000 f93f 	bl	8002864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e6:	2110      	movs	r1, #16
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2200      	movs	r2, #0
 80025f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f4:	187a      	adds	r2, r7, r1
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_TIM2_Init+0xf8>)
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f002 fbca 	bl	8004d94 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002604:	f000 f92e 	bl	8002864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002608:	003b      	movs	r3, r7
 800260a:	2230      	movs	r2, #48	; 0x30
 800260c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800260e:	003b      	movs	r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002614:	003b      	movs	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261a:	003b      	movs	r3, r7
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002620:	0039      	movs	r1, r7
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_TIM2_Init+0xf8>)
 8002624:	2200      	movs	r2, #0
 8002626:	0018      	movs	r0, r3
 8002628:	f002 f84a 	bl	80046c0 <HAL_TIM_OC_ConfigChannel>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002630:	f000 f918 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <MX_TIM2_Init+0xf8>)
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f94c 	bl	80028d4 <HAL_TIM_MspPostInit>

}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b00a      	add	sp, #40	; 0x28
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000021c 	.word	0x2000021c

08002648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_USART2_UART_Init+0x5c>)
 8002650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002654:	22e1      	movs	r2, #225	; 0xe1
 8002656:	0252      	lsls	r2, r2, #9
 8002658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <MX_USART2_UART_Init+0x58>)
 800268c:	0018      	movs	r0, r3
 800268e:	f002 fbd9 	bl	8004e44 <HAL_UART_Init>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002696:	f000 f8e5 	bl	8002864 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  //huart2.

  /* USER CODE END USART2_Init 2 */

}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000025c 	.word	0x2000025c
 80026a4:	40004400 	.word	0x40004400

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08b      	sub	sp, #44	; 0x2c
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	2414      	movs	r4, #20
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2314      	movs	r3, #20
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f003 fffa 	bl	80066b2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026c4:	2104      	movs	r1, #4
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	2204      	movs	r2, #4
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	430a      	orrs	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026f4:	2101      	movs	r1, #1
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <MX_GPIO_Init+0x108>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <MX_GPIO_Init+0x108>)
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <MX_GPIO_Init+0x108>)
 800270c:	2102      	movs	r1, #2
 800270e:	430a      	orrs	r2, r1
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <MX_GPIO_Init+0x108>)
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5926_SDI_Pin|TLC5926_LE_Pin, GPIO_PIN_RESET);
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	2200      	movs	r2, #0
 8002724:	2112      	movs	r1, #18
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fdee 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLC5926_OE_GPIO_Port, TLC5926_OE_Pin, GPIO_PIN_RESET);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <MX_GPIO_Init+0x10c>)
 800272e:	2200      	movs	r2, #0
 8002730:	2101      	movs	r1, #1
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fde8 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	0192      	lsls	r2, r2, #6
 800273e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002740:	193b      	adds	r3, r7, r4
 8002742:	2284      	movs	r2, #132	; 0x84
 8002744:	0392      	lsls	r2, r2, #14
 8002746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	193b      	adds	r3, r7, r4
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800274e:	193b      	adds	r3, r7, r4
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <MX_GPIO_Init+0x110>)
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f000 fc61 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : TLC5926_SDI_Pin TLC5926_LE_Pin */
  GPIO_InitStruct.Pin = TLC5926_SDI_Pin|TLC5926_LE_Pin;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	2212      	movs	r2, #18
 800275e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	193b      	adds	r3, r7, r4
 8002762:	2201      	movs	r2, #1
 8002764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	193b      	adds	r3, r7, r4
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	193b      	adds	r3, r7, r4
 800276e:	2203      	movs	r2, #3
 8002770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	193a      	adds	r2, r7, r4
 8002774:	23a0      	movs	r3, #160	; 0xa0
 8002776:	05db      	lsls	r3, r3, #23
 8002778:	0011      	movs	r1, r2
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fc4e 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : TLC5926_OE_Pin */
  GPIO_InitStruct.Pin = TLC5926_OE_Pin;
 8002780:	0021      	movs	r1, r4
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2211      	movs	r2, #17
 800278c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2203      	movs	r2, #3
 8002798:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TLC5926_OE_GPIO_Port, &GPIO_InitStruct);
 800279a:	187b      	adds	r3, r7, r1
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <MX_GPIO_Init+0x10c>)
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f000 fc3b 	bl	800301c <HAL_GPIO_Init>

}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b00b      	add	sp, #44	; 0x2c
 80027ac:	bd90      	pop	{r4, r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	40021000 	.word	0x40021000
 80027b4:	50000400 	.word	0x50000400
 80027b8:	50000800 	.word	0x50000800

080027bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_UART_Receive_IT(&huart2, &c, 1);
 80027c4:	240f      	movs	r4, #15
 80027c6:	1939      	adds	r1, r7, r4
 80027c8:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_UART_RxCpltCallback+0x94>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	0018      	movs	r0, r3
 80027ce:	f002 fc2d 	bl	800502c <HAL_UART_Receive_IT>

	if(UART2_RxBufferPos < UART2_RXBUFFER_SIZE) {
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_UART_RxCpltCallback+0x98>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	2b1f      	cmp	r3, #31
 80027d8:	d835      	bhi.n	8002846 <HAL_UART_RxCpltCallback+0x8a>
		HAL_UART_Transmit(&huart2, &c, 1, 10);
 80027da:	1939      	adds	r1, r7, r4
 80027dc:	481c      	ldr	r0, [pc, #112]	; (8002850 <HAL_UART_RxCpltCallback+0x94>)
 80027de:	230a      	movs	r3, #10
 80027e0:	2201      	movs	r2, #1
 80027e2:	f002 fb83 	bl	8004eec <HAL_UART_Transmit>
		UART2_RxBuffer[UART2_RxBufferPos++] = c;
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_UART_RxCpltCallback+0x98>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	b291      	uxth	r1, r2
 80027ee:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_UART_RxCpltCallback+0x98>)
 80027f0:	8011      	strh	r1, [r2, #0]
 80027f2:	001a      	movs	r2, r3
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	7819      	ldrb	r1, [r3, #0]
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_UART_RxCpltCallback+0x9c>)
 80027fa:	5499      	strb	r1, [r3, r2]
		switch(c) {
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b0d      	cmp	r3, #13
 8002802:	d004      	beq.n	800280e <HAL_UART_RxCpltCallback+0x52>
 8002804:	dc20      	bgt.n	8002848 <HAL_UART_RxCpltCallback+0x8c>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d00f      	beq.n	800282a <HAL_UART_RxCpltCallback+0x6e>
 800280a:	2b0a      	cmp	r3, #10
 800280c:	d11c      	bne.n	8002848 <HAL_UART_RxCpltCallback+0x8c>
		case '\r': case '\n': {
			uint8_t response[] = "\r\n";
 800280e:	200c      	movs	r0, #12
 8002810:	183b      	adds	r3, r7, r0
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_UART_RxCpltCallback+0xa0>)
 8002814:	8811      	ldrh	r1, [r2, #0]
 8002816:	8019      	strh	r1, [r3, #0]
 8002818:	7892      	ldrb	r2, [r2, #2]
 800281a:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart2, response, sizeof(response), 10);
 800281c:	1839      	adds	r1, r7, r0
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <HAL_UART_RxCpltCallback+0x94>)
 8002820:	230a      	movs	r3, #10
 8002822:	2203      	movs	r2, #3
 8002824:	f002 fb62 	bl	8004eec <HAL_UART_Transmit>
		} break;
 8002828:	e00e      	b.n	8002848 <HAL_UART_RxCpltCallback+0x8c>
		case 8: { // backspace
			uint8_t response[] = " \b";
 800282a:	2008      	movs	r0, #8
 800282c:	183b      	adds	r3, r7, r0
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 8002830:	8811      	ldrh	r1, [r2, #0]
 8002832:	8019      	strh	r1, [r3, #0]
 8002834:	7892      	ldrb	r2, [r2, #2]
 8002836:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart2, response, sizeof(response), 10);
 8002838:	1839      	adds	r1, r7, r0
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_UART_RxCpltCallback+0x94>)
 800283c:	230a      	movs	r3, #10
 800283e:	2203      	movs	r2, #3
 8002840:	f002 fb54 	bl	8004eec <HAL_UART_Transmit>
		} break;
 8002844:	e000      	b.n	8002848 <HAL_UART_RxCpltCallback+0x8c>
		}
	}
 8002846:	46c0      	nop			; (mov r8, r8)
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b005      	add	sp, #20
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	2000025c 	.word	0x2000025c
 8002854:	20000218 	.word	0x20000218
 8002858:	200001f8 	.word	0x200001f8
 800285c:	08009208 	.word	0x08009208
 8002860:	0800920c 	.word	0x0800920c

08002864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800286c:	e7fe      	b.n	800286c <Error_Handler+0x8>
	...

08002870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_MspInit+0x24>)
 8002876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_MspInit+0x24>)
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_MspInit+0x24>)
 8002882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_MspInit+0x24>)
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	0549      	lsls	r1, r1, #21
 800288a:	430a      	orrs	r2, r1
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	05db      	lsls	r3, r3, #23
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d10d      	bne.n	80028c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_TIM_Base_MspInit+0x38>)
 80028ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_TIM_Base_MspInit+0x38>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	430a      	orrs	r2, r1
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	200f      	movs	r0, #15
 80028be:	f000 faf3 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c2:	200f      	movs	r0, #15
 80028c4:	f000 fb05 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	240c      	movs	r4, #12
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	0018      	movs	r0, r3
 80028e2:	2314      	movs	r3, #20
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f003 fee3 	bl	80066b2 <memset>
  if(htim->Instance==TIM2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d122      	bne.n	800293e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_TIM_MspPostInit+0x74>)
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_TIM_MspPostInit+0x74>)
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_TIM_MspPostInit+0x74>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TLC5926_CLK_Pin;
 8002910:	0021      	movs	r1, r4
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2202      	movs	r2, #2
 800291c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2203      	movs	r2, #3
 8002928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2202      	movs	r2, #2
 800292e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TLC5926_CLK_GPIO_Port, &GPIO_InitStruct);
 8002930:	187a      	adds	r2, r7, r1
 8002932:	23a0      	movs	r3, #160	; 0xa0
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f000 fb6f 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b009      	add	sp, #36	; 0x24
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	240c      	movs	r4, #12
 8002956:	193b      	adds	r3, r7, r4
 8002958:	0018      	movs	r0, r3
 800295a:	2314      	movs	r3, #20
 800295c:	001a      	movs	r2, r3
 800295e:	2100      	movs	r1, #0
 8002960:	f003 fea7 	bl	80066b2 <memset>
  if(huart->Instance==USART2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_UART_MspInit+0x90>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d131      	bne.n	80029d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_UART_MspInit+0x94>)
 8002970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_UART_MspInit+0x94>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0289      	lsls	r1, r1, #10
 8002978:	430a      	orrs	r2, r1
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_UART_MspInit+0x94>)
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0x94>)
 8002982:	2101      	movs	r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_UART_MspInit+0x94>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2201      	movs	r2, #1
 800298e:	4013      	ands	r3, r2
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002994:	0021      	movs	r1, r4
 8002996:	187b      	adds	r3, r7, r1
 8002998:	220c      	movs	r2, #12
 800299a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2202      	movs	r2, #2
 80029a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2203      	movs	r2, #3
 80029ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2204      	movs	r2, #4
 80029b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	187a      	adds	r2, r7, r1
 80029b6:	23a0      	movs	r3, #160	; 0xa0
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	0011      	movs	r1, r2
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fb2d 	bl	800301c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	201c      	movs	r0, #28
 80029c8:	f000 fa6e 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029cc:	201c      	movs	r0, #28
 80029ce:	f000 fa80 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b009      	add	sp, #36	; 0x24
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40021000 	.word	0x40021000

080029e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler+0x4>

080029ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f986 	bl	8002d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <TIM2_IRQHandler+0x60>)
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 fd67 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_TogglePin(TLC5926_CLK_GPIO_Port, TLC5926_CLK_Pin);
	int pwm = -1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	425b      	negs	r3, r3
 8002a26:	607b      	str	r3, [r7, #4]
	if(pwm < 0) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da1e      	bge.n	8002a6c <TIM2_IRQHandler+0x58>
		if(led_index < 2) {
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <TIM2_IRQHandler+0x64>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	dc07      	bgt.n	8002a46 <TIM2_IRQHandler+0x32>
			HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, 1);
 8002a36:	23a0      	movs	r3, #160	; 0xa0
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fc62 	bl	8003308 <HAL_GPIO_WritePin>
 8002a44:	e006      	b.n	8002a54 <TIM2_IRQHandler+0x40>
		} else {
			HAL_GPIO_WritePin(TLC5926_SDI_GPIO_Port, TLC5926_SDI_Pin, 0);
 8002a46:	23a0      	movs	r3, #160	; 0xa0
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fc5a 	bl	8003308 <HAL_GPIO_WritePin>
		}
		++led_index;
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <TIM2_IRQHandler+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <TIM2_IRQHandler+0x64>)
 8002a5c:	601a      	str	r2, [r3, #0]
		if(led_index >= 2*LED_MAX) {
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <TIM2_IRQHandler+0x64>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	dd02      	ble.n	8002a6c <TIM2_IRQHandler+0x58>
			led_index = 0;
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <TIM2_IRQHandler+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
	} else {

	}

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000021c 	.word	0x2000021c
 8002a78:	200002e4 	.word	0x200002e4

08002a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <USART2_IRQHandler+0x14>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f002 fb30 	bl	80050e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	2000025c 	.word	0x2000025c

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_kill>:

int _kill(int pid, int sig)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aaa:	f003 fdbf 	bl	800662c <__errno>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	2216      	movs	r2, #22
 8002ab2:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	425b      	negs	r3, r3
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_exit>:

void _exit (int status)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ac8:	2301      	movs	r3, #1
 8002aca:	425a      	negs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0011      	movs	r1, r2
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff ffe5 	bl	8002aa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x16>

08002ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00a      	b.n	8002b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aea:	e000      	b.n	8002aee <_read+0x16>
 8002aec:	bf00      	nop
 8002aee:	0001      	movs	r1, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf0      	blt.n	8002aea <_read+0x12>
	}

return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b006      	add	sp, #24
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e009      	b.n	8002b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fbe5 	bl	80022fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf1      	blt.n	8002b24 <_write+0x12>
	}
	return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b006      	add	sp, #24
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_close>:

int _close(int file)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	return -1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	425b      	negs	r3, r3
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	0192      	lsls	r2, r2, #6
 8002b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_isatty>:

int _isatty(int file)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	return 1;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <_sbrk+0x5c>)
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <_sbrk+0x60>)
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <_sbrk+0x64>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <_sbrk+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	18d3      	adds	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d207      	bcs.n	8002be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd4:	f003 fd2a 	bl	800662c <__errno>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	220c      	movs	r2, #12
 8002bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	425b      	negs	r3, r3
 8002be2:	e009      	b.n	8002bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	18d2      	adds	r2, r2, r3
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <_sbrk+0x64>)
 8002bf4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20002000 	.word	0x20002000
 8002c04:	00000400 	.word	0x00000400
 8002c08:	200002e8 	.word	0x200002e8
 8002c0c:	20000300 	.word	0x20000300

08002c10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   r0, =_estack
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c20:	f7ff fff6 	bl	8002c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c26:	490d      	ldr	r1, [pc, #52]	; (8002c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <LoopForever+0xe>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c2c:	e002      	b.n	8002c34 <LoopCopyDataInit>

08002c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c32:	3304      	adds	r3, #4

08002c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c38:	d3f9      	bcc.n	8002c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c3c:	4c0a      	ldr	r4, [pc, #40]	; (8002c68 <LoopForever+0x16>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c40:	e001      	b.n	8002c46 <LoopFillZerobss>

08002c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c44:	3204      	adds	r2, #4

08002c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c48:	d3fb      	bcc.n	8002c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c4a:	f003 fd05 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c4e:	f7ff fb67 	bl	8002320 <main>

08002c52 <LoopForever>:

LoopForever:
    b LoopForever
 8002c52:	e7fe      	b.n	8002c52 <LoopForever>
;  ldr   r0, =_estack
 8002c54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c60:	080096e8 	.word	0x080096e8
  ldr r2, =_sbss
 8002c64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c68:	20000300 	.word	0x20000300

08002c6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC1_COMP_IRQHandler>
	...

08002c70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_Init+0x3c>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_Init+0x3c>)
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 f811 	bl	8002cb0 <HAL_InitTick>
 8002c8e:	1e03      	subs	r3, r0, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e001      	b.n	8002c9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c9a:	f7ff fde9 	bl	8002870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <HAL_InitTick+0x5c>)
 8002cba:	681c      	ldr	r4, [r3, #0]
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_InitTick+0x60>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	23fa      	movs	r3, #250	; 0xfa
 8002cc4:	0098      	lsls	r0, r3, #2
 8002cc6:	f7fd fa3b 	bl	8000140 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0020      	movs	r0, r4
 8002cd0:	f7fd fa36 	bl	8000140 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f90b 	bl	8002ef2 <HAL_SYSTICK_Config>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e00f      	b.n	8002d04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d80b      	bhi.n	8002d02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	2301      	movs	r3, #1
 8002cee:	425b      	negs	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f8d8 	bl	8002ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_InitTick+0x64>)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b003      	add	sp, #12
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000008 	.word	0x20000008
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_IncTick+0x1c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	001a      	movs	r2, r3
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_IncTick+0x20>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	18d2      	adds	r2, r2, r3
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_IncTick+0x20>)
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	20000008 	.word	0x20000008
 8002d38:	200002ec 	.word	0x200002ec

08002d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_GetTick+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	200002ec 	.word	0x200002ec

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	0002      	movs	r2, r0
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b7f      	cmp	r3, #127	; 0x7f
 8002d62:	d809      	bhi.n	8002d78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	001a      	movs	r2, r3
 8002d6a:	231f      	movs	r3, #31
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_EnableIRQ+0x30>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	4091      	lsls	r1, r2
 8002d74:	000a      	movs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
  }
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b7f      	cmp	r3, #127	; 0x7f
 8002d98:	d828      	bhi.n	8002dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <__NVIC_SetPriority+0xd4>)
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	33c0      	adds	r3, #192	; 0xc0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	589b      	ldr	r3, [r3, r2]
 8002daa:	1dfa      	adds	r2, r7, #7
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	0011      	movs	r1, r2
 8002db0:	2203      	movs	r2, #3
 8002db2:	400a      	ands	r2, r1
 8002db4:	00d2      	lsls	r2, r2, #3
 8002db6:	21ff      	movs	r1, #255	; 0xff
 8002db8:	4091      	lsls	r1, r2
 8002dba:	000a      	movs	r2, r1
 8002dbc:	43d2      	mvns	r2, r2
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	401a      	ands	r2, r3
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	4003      	ands	r3, r0
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd8:	481f      	ldr	r0, [pc, #124]	; (8002e58 <__NVIC_SetPriority+0xd4>)
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	430a      	orrs	r2, r1
 8002de4:	33c0      	adds	r3, #192	; 0xc0
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dea:	e031      	b.n	8002e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <__NVIC_SetPriority+0xd8>)
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	0019      	movs	r1, r3
 8002df4:	230f      	movs	r3, #15
 8002df6:	400b      	ands	r3, r1
 8002df8:	3b08      	subs	r3, #8
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3306      	adds	r3, #6
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	3304      	adds	r3, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1dfa      	adds	r2, r7, #7
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	400a      	ands	r2, r1
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	21ff      	movs	r1, #255	; 0xff
 8002e14:	4091      	lsls	r1, r2
 8002e16:	000a      	movs	r2, r1
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	401a      	ands	r2, r3
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	4003      	ands	r3, r0
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	4809      	ldr	r0, [pc, #36]	; (8002e5c <__NVIC_SetPriority+0xd8>)
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	001c      	movs	r4, r3
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	4023      	ands	r3, r4
 8002e40:	3b08      	subs	r3, #8
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	430a      	orrs	r2, r1
 8002e46:	3306      	adds	r3, #6
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18c3      	adds	r3, r0, r3
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b003      	add	sp, #12
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	045b      	lsls	r3, r3, #17
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d301      	bcc.n	8002e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e74:	2301      	movs	r3, #1
 8002e76:	e010      	b.n	8002e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <SysTick_Config+0x44>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e80:	2301      	movs	r3, #1
 8002e82:	425b      	negs	r3, r3
 8002e84:	2103      	movs	r1, #3
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff ff7c 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x44>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x44>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	1c02      	adds	r2, r0, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	0002      	movs	r2, r0
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff ff33 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff ffaf 	bl	8002e60 <SysTick_Config>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2225      	movs	r2, #37	; 0x25
 8002f20:	5c9b      	ldrb	r3, [r3, r2]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2224      	movs	r2, #36	; 0x24
 8002f32:	2100      	movs	r1, #0
 8002f34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e024      	b.n	8002f84 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	210e      	movs	r1, #14
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	438a      	bics	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	221c      	movs	r2, #28
 8002f60:	401a      	ands	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2101      	movs	r1, #1
 8002f68:	4091      	lsls	r1, r2
 8002f6a:	000a      	movs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2225      	movs	r2, #37	; 0x25
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

    return status;
 8002f7e:	230f      	movs	r3, #15
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	210f      	movs	r1, #15
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2225      	movs	r2, #37	; 0x25
 8002fa0:	5c9b      	ldrb	r3, [r3, r2]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d006      	beq.n	8002fb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e02a      	b.n	800300c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	210e      	movs	r1, #14
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	221c      	movs	r2, #28
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4091      	lsls	r1, r2
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2225      	movs	r2, #37	; 0x25
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2224      	movs	r2, #36	; 0x24
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	0010      	movs	r0, r2
 800300a:	4798      	blx	r3
    }
  }
  return status;
 800300c:	230f      	movs	r3, #15
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003032:	e14f      	b.n	80032d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4091      	lsls	r1, r2
 800303e:	000a      	movs	r2, r1
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <HAL_GPIO_Init+0x30>
 800304a:	e140      	b.n	80032ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	4013      	ands	r3, r2
 8003054:	2b01      	cmp	r3, #1
 8003056:	d005      	beq.n	8003064 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003060:	2b02      	cmp	r3, #2
 8003062:	d130      	bne.n	80030c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	409a      	lsls	r2, r3
 8003072:	0013      	movs	r3, r2
 8003074:	43da      	mvns	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309a:	2201      	movs	r2, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
 80030a0:	0013      	movs	r3, r2
 80030a2:	43da      	mvns	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	2201      	movs	r2, #1
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d017      	beq.n	8003102 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	409a      	lsls	r2, r3
 80030e0:	0013      	movs	r3, r2
 80030e2:	43da      	mvns	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	0013      	movs	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	4013      	ands	r3, r2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d123      	bne.n	8003156 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	58d3      	ldr	r3, [r2, r3]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2207      	movs	r2, #7
 8003120:	4013      	ands	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	409a      	lsls	r2, r3
 8003128:	0013      	movs	r3, r2
 800312a:	43da      	mvns	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2107      	movs	r1, #7
 800313a:	400b      	ands	r3, r1
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	409a      	lsls	r2, r3
 8003140:	0013      	movs	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	409a      	lsls	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	43da      	mvns	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	401a      	ands	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	23c0      	movs	r3, #192	; 0xc0
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_GPIO_Init+0x17c>
 8003196:	e09a      	b.n	80032ce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003198:	4b54      	ldr	r3, [pc, #336]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_GPIO_Init+0x2d0>)
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a4:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_GPIO_Init+0x2d4>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	589b      	ldr	r3, [r3, r2]
 80031b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4013      	ands	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	220f      	movs	r2, #15
 80031bc:	409a      	lsls	r2, r3
 80031be:	0013      	movs	r3, r2
 80031c0:	43da      	mvns	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	23a0      	movs	r3, #160	; 0xa0
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x1ea>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_GPIO_Init+0x2d8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x1e6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <HAL_GPIO_Init+0x2dc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x1e2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a45      	ldr	r2, [pc, #276]	; (80032fc <HAL_GPIO_Init+0x2e0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x1de>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a44      	ldr	r2, [pc, #272]	; (8003300 <HAL_GPIO_Init+0x2e4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x1da>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e008      	b.n	8003208 <HAL_GPIO_Init+0x1ec>
 80031f6:	2306      	movs	r3, #6
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x1ec>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e004      	b.n	8003208 <HAL_GPIO_Init+0x1ec>
 80031fe:	2302      	movs	r3, #2
 8003200:	e002      	b.n	8003208 <HAL_GPIO_Init+0x1ec>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x1ec>
 8003206:	2300      	movs	r3, #0
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	2103      	movs	r1, #3
 800320c:	400a      	ands	r2, r1
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4093      	lsls	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003218:	4935      	ldr	r1, [pc, #212]	; (80032f0 <HAL_GPIO_Init+0x2d4>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43da      	mvns	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	035b      	lsls	r3, r3, #13
 800323e:	4013      	ands	r3, r2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43da      	mvns	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	039b      	lsls	r3, r3, #14
 8003268:	4013      	ands	r3, r2
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43da      	mvns	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	4013      	ands	r3, r2
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	025b      	lsls	r3, r3, #9
 80032bc:	4013      	ands	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	40da      	lsrs	r2, r3
 80032dc:	1e13      	subs	r3, r2, #0
 80032de:	d000      	beq.n	80032e2 <HAL_GPIO_Init+0x2c6>
 80032e0:	e6a8      	b.n	8003034 <HAL_GPIO_Init+0x18>
  }
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b006      	add	sp, #24
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	50000400 	.word	0x50000400
 80032f8:	50000800 	.word	0x50000800
 80032fc:	50000c00 	.word	0x50000c00
 8003300:	50001c00 	.word	0x50001c00
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	0008      	movs	r0, r1
 8003312:	0011      	movs	r1, r2
 8003314:	1cbb      	adds	r3, r7, #2
 8003316:	1c02      	adds	r2, r0, #0
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	1c7b      	adds	r3, r7, #1
 800331c:	1c0a      	adds	r2, r1, #0
 800331e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003320:	1c7b      	adds	r3, r7, #1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003328:	1cbb      	adds	r3, r7, #2
 800332a:	881a      	ldrh	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003332:	1cbb      	adds	r3, r7, #2
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f000 fbaf 	bl	8003ab6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003358:	4bcf      	ldr	r3, [pc, #828]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	220c      	movs	r2, #12
 800335e:	4013      	ands	r3, r2
 8003360:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003362:	4bcd      	ldr	r3, [pc, #820]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	4013      	ands	r3, r2
 800336c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	d100      	bne.n	800337a <HAL_RCC_OscConfig+0x36>
 8003378:	e07e      	b.n	8003478 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d007      	beq.n	8003390 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x68>
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	429a      	cmp	r2, r3
 800338e:	d10d      	bne.n	80033ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4bc1      	ldr	r3, [pc, #772]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	4013      	ands	r3, r2
 800339a:	d100      	bne.n	800339e <HAL_RCC_OscConfig+0x5a>
 800339c:	e06b      	b.n	8003476 <HAL_RCC_OscConfig+0x132>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d167      	bne.n	8003476 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f000 fb85 	bl	8003ab6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	025b      	lsls	r3, r3, #9
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_OscConfig+0x84>
 80033b8:	4bb7      	ldr	r3, [pc, #732]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4bb6      	ldr	r3, [pc, #728]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0249      	lsls	r1, r1, #9
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e027      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	23a0      	movs	r3, #160	; 0xa0
 80033ce:	02db      	lsls	r3, r3, #11
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d10e      	bne.n	80033f2 <HAL_RCC_OscConfig+0xae>
 80033d4:	4bb0      	ldr	r3, [pc, #704]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4baf      	ldr	r3, [pc, #700]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	02c9      	lsls	r1, r1, #11
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	4bad      	ldr	r3, [pc, #692]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4bac      	ldr	r3, [pc, #688]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	0249      	lsls	r1, r1, #9
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e012      	b.n	8003418 <HAL_RCC_OscConfig+0xd4>
 80033f2:	4ba9      	ldr	r3, [pc, #676]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4ba8      	ldr	r3, [pc, #672]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80033f8:	49a8      	ldr	r1, [pc, #672]	; (800369c <HAL_RCC_OscConfig+0x358>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4ba6      	ldr	r3, [pc, #664]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	025b      	lsls	r3, r3, #9
 8003406:	4013      	ands	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4ba2      	ldr	r3, [pc, #648]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003412:	49a3      	ldr	r1, [pc, #652]	; (80036a0 <HAL_RCC_OscConfig+0x35c>)
 8003414:	400a      	ands	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7ff fc8c 	bl	8002d3c <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003428:	e009      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342a:	f7ff fc87 	bl	8002d3c <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d902      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	f000 fb3c 	bl	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800343e:	4b96      	ldr	r3, [pc, #600]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	4013      	ands	r3, r2
 8003448:	d0ef      	beq.n	800342a <HAL_RCC_OscConfig+0xe6>
 800344a:	e015      	b.n	8003478 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff fc76 	bl	8002d3c <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003456:	f7ff fc71 	bl	8002d3c <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	; 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e326      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003468:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	029b      	lsls	r3, r3, #10
 8003470:	4013      	ands	r3, r2
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x112>
 8003474:	e000      	b.n	8003478 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003476:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2202      	movs	r2, #2
 800347e:	4013      	ands	r3, r2
 8003480:	d100      	bne.n	8003484 <HAL_RCC_OscConfig+0x140>
 8003482:	e08b      	b.n	800359c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d13e      	bne.n	8003514 <HAL_RCC_OscConfig+0x1d0>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d13b      	bne.n	8003514 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800349c:	4b7e      	ldr	r3, [pc, #504]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2204      	movs	r2, #4
 80034a2:	4013      	ands	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_RCC_OscConfig+0x16c>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e302      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a7b      	ldr	r2, [pc, #492]	; (80036a4 <HAL_RCC_OscConfig+0x360>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034c6:	4b74      	ldr	r3, [pc, #464]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2209      	movs	r2, #9
 80034cc:	4393      	bics	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	4b71      	ldr	r3, [pc, #452]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d8:	f000 fc40 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80034dc:	0001      	movs	r1, r0
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	220f      	movs	r2, #15
 80034e6:	4013      	ands	r3, r2
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x364>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	000a      	movs	r2, r1
 80034ee:	40da      	lsrs	r2, r3
 80034f0:	4b6e      	ldr	r3, [pc, #440]	; (80036ac <HAL_RCC_OscConfig+0x368>)
 80034f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034f4:	4b6e      	ldr	r3, [pc, #440]	; (80036b0 <HAL_RCC_OscConfig+0x36c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2513      	movs	r5, #19
 80034fa:	197c      	adds	r4, r7, r5
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7ff fbd7 	bl	8002cb0 <HAL_InitTick>
 8003502:	0003      	movs	r3, r0
 8003504:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003506:	197b      	adds	r3, r7, r5
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d046      	beq.n	800359c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800350e:	197b      	adds	r3, r7, r5
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	e2d0      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d027      	beq.n	800356a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2209      	movs	r2, #9
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7ff fc06 	bl	8002d3c <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7ff fc01 	bl	8002d3c <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2b6      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2204      	movs	r2, #4
 800354e:	4013      	ands	r3, r2
 8003550:	d0f1      	beq.n	8003536 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a53      	ldr	r2, [pc, #332]	; (80036a4 <HAL_RCC_OscConfig+0x360>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e018      	b.n	800359c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003570:	2101      	movs	r1, #1
 8003572:	438a      	bics	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7ff fbe1 	bl	8002d3c <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003580:	f7ff fbdc 	bl	8002d3c <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e291      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2204      	movs	r2, #4
 8003598:	4013      	ands	r3, r2
 800359a:	d1f1      	bne.n	8003580 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2210      	movs	r2, #16
 80035a2:	4013      	ands	r3, r2
 80035a4:	d100      	bne.n	80035a8 <HAL_RCC_OscConfig+0x264>
 80035a6:	e0a1      	b.n	80036ec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d140      	bne.n	8003630 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ae:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x282>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e277      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a3a      	ldr	r2, [pc, #232]	; (80036b4 <HAL_RCC_OscConfig+0x370>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	0a19      	lsrs	r1, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	061a      	lsls	r2, r3, #24
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	3301      	adds	r3, #1
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0212      	lsls	r2, r2, #8
 80035fa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	210f      	movs	r1, #15
 8003604:	400b      	ands	r3, r1
 8003606:	4928      	ldr	r1, [pc, #160]	; (80036a8 <HAL_RCC_OscConfig+0x364>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x368>)
 800360e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_OscConfig+0x36c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2513      	movs	r5, #19
 8003616:	197c      	adds	r4, r7, r5
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff fb49 	bl	8002cb0 <HAL_InitTick>
 800361e:	0003      	movs	r3, r0
 8003620:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003622:	197b      	adds	r3, r7, r5
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d060      	beq.n	80036ec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800362a:	197b      	adds	r3, r7, r5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	e242      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03f      	beq.n	80036b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0049      	lsls	r1, r1, #1
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7ff fb79 	bl	8002d3c <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003650:	f7ff fb74 	bl	8002d3c <HAL_GetTick>
 8003654:	0002      	movs	r2, r0
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e229      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4013      	ands	r3, r2
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_RCC_OscConfig+0x370>)
 8003674:	4013      	ands	r3, r2
 8003676:	0019      	movs	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	0a19      	lsrs	r1, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	061a      	lsls	r2, r3, #24
 8003690:	4b01      	ldr	r3, [pc, #4]	; (8003698 <HAL_RCC_OscConfig+0x354>)
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e029      	b.n	80036ec <HAL_RCC_OscConfig+0x3a8>
 8003698:	40021000 	.word	0x40021000
 800369c:	fffeffff 	.word	0xfffeffff
 80036a0:	fffbffff 	.word	0xfffbffff
 80036a4:	ffffe0ff 	.word	0xffffe0ff
 80036a8:	08009290 	.word	0x08009290
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004
 80036b4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036b8:	4bbd      	ldr	r3, [pc, #756]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4bbc      	ldr	r3, [pc, #752]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80036be:	49bd      	ldr	r1, [pc, #756]	; (80039b4 <HAL_RCC_OscConfig+0x670>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7ff fb3a 	bl	8002d3c <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ce:	f7ff fb35 	bl	8002d3c <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e1ea      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036e0:	4bb3      	ldr	r3, [pc, #716]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	4013      	ands	r3, r2
 80036f4:	d036      	beq.n	8003764 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4bac      	ldr	r3, [pc, #688]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003702:	4bab      	ldr	r3, [pc, #684]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003704:	2101      	movs	r1, #1
 8003706:	430a      	orrs	r2, r1
 8003708:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7ff fb17 	bl	8002d3c <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003714:	f7ff fb12 	bl	8002d3c <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1c7      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003726:	4ba2      	ldr	r3, [pc, #648]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d0f1      	beq.n	8003714 <HAL_RCC_OscConfig+0x3d0>
 8003730:	e018      	b.n	8003764 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003732:	4b9f      	ldr	r3, [pc, #636]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003736:	4b9e      	ldr	r3, [pc, #632]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003738:	2101      	movs	r1, #1
 800373a:	438a      	bics	r2, r1
 800373c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7ff fafd 	bl	8002d3c <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003748:	f7ff faf8 	bl	8002d3c <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1ad      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800375a:	4b95      	ldr	r3, [pc, #596]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d1f1      	bne.n	8003748 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2204      	movs	r2, #4
 800376a:	4013      	ands	r3, r2
 800376c:	d100      	bne.n	8003770 <HAL_RCC_OscConfig+0x42c>
 800376e:	e0ae      	b.n	80038ce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003770:	2027      	movs	r0, #39	; 0x27
 8003772:	183b      	adds	r3, r7, r0
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003778:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800377a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	055b      	lsls	r3, r3, #21
 8003780:	4013      	ands	r3, r2
 8003782:	d109      	bne.n	8003798 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b8a      	ldr	r3, [pc, #552]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0549      	lsls	r1, r1, #21
 800378e:	430a      	orrs	r2, r1
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003792:	183b      	adds	r3, r7, r0
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b87      	ldr	r3, [pc, #540]	; (80039b8 <HAL_RCC_OscConfig+0x674>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d11a      	bne.n	80037da <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a4:	4b84      	ldr	r3, [pc, #528]	; (80039b8 <HAL_RCC_OscConfig+0x674>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b83      	ldr	r3, [pc, #524]	; (80039b8 <HAL_RCC_OscConfig+0x674>)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	0049      	lsls	r1, r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7ff fac3 	bl	8002d3c <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7ff fabe 	bl	8002d3c <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e173      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x674>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4b2>
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80037e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ea:	4b71      	ldr	r3, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	0049      	lsls	r1, r1, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
 80037f4:	e031      	b.n	800385a <HAL_RCC_OscConfig+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x4d4>
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003802:	4b6b      	ldr	r3, [pc, #428]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003804:	496b      	ldr	r1, [pc, #428]	; (80039b4 <HAL_RCC_OscConfig+0x670>)
 8003806:	400a      	ands	r2, r1
 8003808:	651a      	str	r2, [r3, #80]	; 0x50
 800380a:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800380c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800380e:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003810:	496a      	ldr	r1, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x678>)
 8003812:	400a      	ands	r2, r1
 8003814:	651a      	str	r2, [r3, #80]	; 0x50
 8003816:	e020      	b.n	800385a <HAL_RCC_OscConfig+0x516>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	23a0      	movs	r3, #160	; 0xa0
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	429a      	cmp	r2, r3
 8003822:	d10e      	bne.n	8003842 <HAL_RCC_OscConfig+0x4fe>
 8003824:	4b62      	ldr	r3, [pc, #392]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	00c9      	lsls	r1, r1, #3
 800382e:	430a      	orrs	r2, r1
 8003830:	651a      	str	r2, [r3, #80]	; 0x50
 8003832:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003836:	4b5e      	ldr	r3, [pc, #376]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	0049      	lsls	r1, r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
 8003840:	e00b      	b.n	800385a <HAL_RCC_OscConfig+0x516>
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003846:	4b5a      	ldr	r3, [pc, #360]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003848:	495a      	ldr	r1, [pc, #360]	; (80039b4 <HAL_RCC_OscConfig+0x670>)
 800384a:	400a      	ands	r2, r1
 800384c:	651a      	str	r2, [r3, #80]	; 0x50
 800384e:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003852:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003854:	4959      	ldr	r1, [pc, #356]	; (80039bc <HAL_RCC_OscConfig+0x678>)
 8003856:	400a      	ands	r2, r1
 8003858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d015      	beq.n	800388e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7ff fa6b 	bl	8002d3c <HAL_GetTick>
 8003866:	0003      	movs	r3, r0
 8003868:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800386a:	e009      	b.n	8003880 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7ff fa66 	bl	8002d3c <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_RCC_OscConfig+0x67c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e11a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003880:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d0ef      	beq.n	800386c <HAL_RCC_OscConfig+0x528>
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7ff fa55 	bl	8002d3c <HAL_GetTick>
 8003892:	0003      	movs	r3, r0
 8003894:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003896:	e009      	b.n	80038ac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7ff fa50 	bl	8002d3c <HAL_GetTick>
 800389c:	0002      	movs	r2, r0
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	4a47      	ldr	r2, [pc, #284]	; (80039c0 <HAL_RCC_OscConfig+0x67c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e104      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d1ef      	bne.n	8003898 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b8:	2327      	movs	r3, #39	; 0x27
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038c8:	493e      	ldr	r1, [pc, #248]	; (80039c4 <HAL_RCC_OscConfig+0x680>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	4013      	ands	r3, r2
 80038d6:	d049      	beq.n	800396c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d026      	beq.n	800392e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038e6:	2101      	movs	r1, #1
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f0:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	430a      	orrs	r2, r1
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34
 80038f8:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_RCC_OscConfig+0x684>)
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_RCC_OscConfig+0x684>)
 80038fe:	2180      	movs	r1, #128	; 0x80
 8003900:	0189      	lsls	r1, r1, #6
 8003902:	430a      	orrs	r2, r1
 8003904:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7ff fa19 	bl	8002d3c <HAL_GetTick>
 800390a:	0003      	movs	r3, r0
 800390c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003910:	f7ff fa14 	bl	8002d3c <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0c9      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2202      	movs	r2, #2
 8003928:	4013      	ands	r3, r2
 800392a:	d0f1      	beq.n	8003910 <HAL_RCC_OscConfig+0x5cc>
 800392c:	e01e      	b.n	800396c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003934:	2101      	movs	r1, #1
 8003936:	438a      	bics	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_RCC_OscConfig+0x684>)
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_OscConfig+0x684>)
 8003940:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x688>)
 8003942:	400a      	ands	r2, r1
 8003944:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7ff f9f9 	bl	8002d3c <HAL_GetTick>
 800394a:	0003      	movs	r3, r0
 800394c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003950:	f7ff f9f4 	bl	8002d3c <HAL_GetTick>
 8003954:	0002      	movs	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0a9      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d1f1      	bne.n	8003950 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d100      	bne.n	8003976 <HAL_RCC_OscConfig+0x632>
 8003974:	e09e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d100      	bne.n	800397e <HAL_RCC_OscConfig+0x63a>
 800397c:	e077      	b.n	8003a6e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	2b02      	cmp	r3, #2
 8003984:	d158      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_OscConfig+0x66c>)
 800398c:	4910      	ldr	r1, [pc, #64]	; (80039d0 <HAL_RCC_OscConfig+0x68c>)
 800398e:	400a      	ands	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7ff f9d3 	bl	8002d3c <HAL_GetTick>
 8003996:	0003      	movs	r3, r0
 8003998:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800399a:	e01b      	b.n	80039d4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7ff f9ce 	bl	8002d3c <HAL_GetTick>
 80039a0:	0002      	movs	r2, r0
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d914      	bls.n	80039d4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e083      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40021000 	.word	0x40021000
 80039b4:	fffffeff 	.word	0xfffffeff
 80039b8:	40007000 	.word	0x40007000
 80039bc:	fffffbff 	.word	0xfffffbff
 80039c0:	00001388 	.word	0x00001388
 80039c4:	efffffff 	.word	0xefffffff
 80039c8:	40010000 	.word	0x40010000
 80039cc:	ffffdfff 	.word	0xffffdfff
 80039d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039d4:	4b3a      	ldr	r3, [pc, #232]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	049b      	lsls	r3, r3, #18
 80039dc:	4013      	ands	r3, r2
 80039de:	d1dd      	bne.n	800399c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e0:	4b37      	ldr	r3, [pc, #220]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_RCC_OscConfig+0x780>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	431a      	orrs	r2, r3
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b2f      	ldr	r3, [pc, #188]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0449      	lsls	r1, r1, #17
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7ff f995 	bl	8002d3c <HAL_GetTick>
 8003a12:	0003      	movs	r3, r0
 8003a14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7ff f990 	bl	8002d3c <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e045      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	049b      	lsls	r3, r3, #18
 8003a32:	4013      	ands	r3, r2
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x6d4>
 8003a36:	e03d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a3e:	4922      	ldr	r1, [pc, #136]	; (8003ac8 <HAL_RCC_OscConfig+0x784>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7ff f97a 	bl	8002d3c <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7ff f975 	bl	8002d3c <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e02a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	049b      	lsls	r3, r3, #18
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x70a>
 8003a6c:	e022      	b.n	8003ab4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d10f      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	23f0      	movs	r3, #240	; 0xf0
 8003a94:	039b      	lsls	r3, r3, #14
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	23c0      	movs	r3, #192	; 0xc0
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b00a      	add	sp, #40	; 0x28
 8003abc:	bdb0      	pop	{r4, r5, r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	ff02ffff 	.word	0xff02ffff
 8003ac8:	feffffff 	.word	0xfeffffff

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e128      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b96      	ldr	r3, [pc, #600]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d91e      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b93      	ldr	r3, [pc, #588]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	4393      	bics	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	4b90      	ldr	r3, [pc, #576]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b00:	f7ff f91c 	bl	8002d3c <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b08:	e009      	b.n	8003b1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0a:	f7ff f917 	bl	8002d3c <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	4a8a      	ldr	r2, [pc, #552]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e109      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b87      	ldr	r3, [pc, #540]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2202      	movs	r2, #2
 8003b32:	4013      	ands	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b36:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	22f0      	movs	r2, #240	; 0xf0
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d100      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
 8003b54:	e089      	b.n	8003c6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5e:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	4013      	ands	r3, r2
 8003b68:	d120      	bne.n	8003bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0e1      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	049b      	lsls	r3, r3, #18
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d114      	bne.n	8003bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0d5      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	d109      	bne.n	8003bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0ca      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b9c:	4b69      	ldr	r3, [pc, #420]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0c2      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7ff f8bc 	bl	8002d3c <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd2:	f7ff f8b3 	bl	8002d3c <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0a5      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be6:	4b57      	ldr	r3, [pc, #348]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	220c      	movs	r2, #12
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d1ef      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x106>
 8003bf2:	e03a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d111      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfc:	e009      	b.n	8003c12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfe:	f7ff f89d 	bl	8002d3c <HAL_GetTick>
 8003c02:	0002      	movs	r2, r0
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e08f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	220c      	movs	r2, #12
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d1ef      	bne.n	8003bfe <HAL_RCC_ClockConfig+0x132>
 8003c1e:	e024      	b.n	8003c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d11b      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c28:	e009      	b.n	8003c3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2a:	f7ff f887 	bl	8002d3c <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	4a42      	ldr	r2, [pc, #264]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e079      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	220c      	movs	r2, #12
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d1ef      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x15e>
 8003c4a:	e00e      	b.n	8003c6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7ff f876 	bl	8002d3c <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e068      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	220c      	movs	r2, #12
 8003c66:	4013      	ands	r3, r2
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6a:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d21e      	bcs.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c78:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4393      	bics	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c8a:	f7ff f857 	bl	8002d3c <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7ff f852 	bl	8002d3c <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <HAL_RCC_ClockConfig+0x274>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e044      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_ClockConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x27c>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_RCC_ClockConfig+0x280>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf4:	f000 f832 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003cf8:	0001      	movs	r1, r0
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	220f      	movs	r2, #15
 8003d02:	4013      	ands	r3, r2
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_RCC_ClockConfig+0x284>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	000a      	movs	r2, r1
 8003d0a:	40da      	lsrs	r2, r3
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_ClockConfig+0x288>)
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCC_ClockConfig+0x28c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	250b      	movs	r5, #11
 8003d16:	197c      	adds	r4, r7, r5
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7fe ffc9 	bl	8002cb0 <HAL_InitTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003d22:	197b      	adds	r3, r7, r5
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003d2a:	197b      	adds	r3, r7, r5
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	00001388 	.word	0x00001388
 8003d44:	40021000 	.word	0x40021000
 8003d48:	fffff8ff 	.word	0xfffff8ff
 8003d4c:	ffffc7ff 	.word	0xffffc7ff
 8003d50:	08009290 	.word	0x08009290
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b5b0      	push	{r4, r5, r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d62:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d014      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x40>
 8003d72:	d900      	bls.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1a>
 8003d74:	e07b      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x112>
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x24>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7e:	e076      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d80:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	4013      	ands	r3, r2
 8003d88:	d002      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d8a:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003d8e:	e07c      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003d90:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x140>)
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d94:	e079      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d9a:	e076      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	0c9a      	lsrs	r2, r3, #18
 8003da0:	230f      	movs	r3, #15
 8003da2:	401a      	ands	r2, r3
 8003da4:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x148>)
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	0d9a      	lsrs	r2, r3, #22
 8003dae:	2303      	movs	r3, #3
 8003db0:	4013      	ands	r3, r2
 8003db2:	3301      	adds	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	025b      	lsls	r3, r3, #9
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d01a      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	4a35      	ldr	r2, [pc, #212]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	69b8      	ldr	r0, [r7, #24]
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	f7fc fb89 	bl	80004e8 <__aeabi_lmul>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	0010      	movs	r0, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f7fc fb5d 	bl	80004a8 <__aeabi_uldivmod>
 8003dee:	0002      	movs	r2, r0
 8003df0:	000b      	movs	r3, r1
 8003df2:	0013      	movs	r3, r2
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
 8003df6:	e037      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d01a      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	68b8      	ldr	r0, [r7, #8]
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	f7fc fb69 	bl	80004e8 <__aeabi_lmul>
 8003e16:	0002      	movs	r2, r0
 8003e18:	000b      	movs	r3, r1
 8003e1a:	0010      	movs	r0, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f7fc fb3d 	bl	80004a8 <__aeabi_uldivmod>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	000b      	movs	r3, r1
 8003e32:	0013      	movs	r3, r2
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
 8003e36:	e017      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	0019      	movs	r1, r3
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x140>)
 8003e42:	2300      	movs	r3, #0
 8003e44:	f7fc fb50 	bl	80004e8 <__aeabi_lmul>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	0010      	movs	r0, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	001c      	movs	r4, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	001d      	movs	r5, r3
 8003e58:	0022      	movs	r2, r4
 8003e5a:	002b      	movs	r3, r5
 8003e5c:	f7fc fb24 	bl	80004a8 <__aeabi_uldivmod>
 8003e60:	0002      	movs	r2, r0
 8003e62:	000b      	movs	r3, r1
 8003e64:	0013      	movs	r3, r2
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e6c:	e00d      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	2207      	movs	r2, #7
 8003e76:	4013      	ands	r3, r2
 8003e78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	0212      	lsls	r2, r2, #8
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b00e      	add	sp, #56	; 0x38
 8003e92:	bdb0      	pop	{r4, r5, r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	003d0900 	.word	0x003d0900
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200
 8003ea4:	080092a8 	.word	0x080092a8

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b02      	ldr	r3, [pc, #8]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec0:	f7ff fff2 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec4:	0001      	movs	r1, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	2207      	movs	r2, #7
 8003ece:	4013      	ands	r3, r2
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	40d9      	lsrs	r1, r3
 8003ed6:	000b      	movs	r3, r1
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	080092a0 	.word	0x080092a0

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eec:	f7ff ffdc 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ef0:	0001      	movs	r1, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	2207      	movs	r2, #7
 8003efa:	4013      	ands	r3, r2
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	40d9      	lsrs	r1, r3
 8003f02:	000b      	movs	r3, r1
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	080092a0 	.word	0x080092a0

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2317      	movs	r3, #23
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	4013      	ands	r3, r2
 8003f38:	d100      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003f3a:	e104      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3c:	4bb1      	ldr	r3, [pc, #708]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	055b      	lsls	r3, r3, #21
 8003f44:	4013      	ands	r3, r2
 8003f46:	d10a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4bae      	ldr	r3, [pc, #696]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4c:	4bad      	ldr	r3, [pc, #692]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0549      	lsls	r1, r1, #21
 8003f52:	430a      	orrs	r2, r1
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003f56:	2317      	movs	r3, #23
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4baa      	ldr	r3, [pc, #680]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4ba7      	ldr	r3, [pc, #668]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4ba6      	ldr	r3, [pc, #664]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0049      	lsls	r1, r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f78:	f7fe fee0 	bl	8002d3c <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fe fedb 	bl	8002d3c <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e133      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b9c      	ldr	r3, [pc, #624]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003fa0:	4b98      	ldr	r3, [pc, #608]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	23c0      	movs	r3, #192	; 0xc0
 8003fa6:	039b      	lsls	r3, r3, #14
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	23c0      	movs	r3, #192	; 0xc0
 8003fb2:	039b      	lsls	r3, r3, #14
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d107      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	23c0      	movs	r3, #192	; 0xc0
 8003fc2:	039b      	lsls	r3, r3, #14
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	23c0      	movs	r3, #192	; 0xc0
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	23c0      	movs	r3, #192	; 0xc0
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	029b      	lsls	r3, r3, #10
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e103      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003ff4:	4b83      	ldr	r3, [pc, #524]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ff8:	23c0      	movs	r3, #192	; 0xc0
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d049      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d004      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2220      	movs	r2, #32
 800401c:	4013      	ands	r3, r2
 800401e:	d10d      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	23c0      	movs	r3, #192	; 0xc0
 8004026:	029b      	lsls	r3, r3, #10
 8004028:	4013      	ands	r3, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d034      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4013      	ands	r3, r2
 800403a:	d02e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800403c:	4b71      	ldr	r3, [pc, #452]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	4a72      	ldr	r2, [pc, #456]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800404a:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	0309      	lsls	r1, r1, #12
 8004050:	430a      	orrs	r2, r1
 8004052:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004054:	4b6b      	ldr	r3, [pc, #428]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004058:	4b6a      	ldr	r3, [pc, #424]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800405a:	496d      	ldr	r1, [pc, #436]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800405c:	400a      	ands	r2, r1
 800405e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4013      	ands	r3, r2
 800406e:	d014      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe fe64 	bl	8002d3c <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004078:	e009      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fe fe5f 	bl	8002d3c <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	4a63      	ldr	r2, [pc, #396]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b6      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4013      	ands	r3, r2
 8004098:	d0ef      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	4013      	ands	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	23c0      	movs	r3, #192	; 0xc0
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	401a      	ands	r2, r3
 80040b0:	23c0      	movs	r3, #192	; 0xc0
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80040b8:	4b52      	ldr	r3, [pc, #328]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a56      	ldr	r2, [pc, #344]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	23c0      	movs	r3, #192	; 0xc0
 80040c8:	039b      	lsls	r3, r3, #14
 80040ca:	401a      	ands	r2, r3
 80040cc:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	23c0      	movs	r3, #192	; 0xc0
 80040dc:	029b      	lsls	r3, r3, #10
 80040de:	401a      	ands	r2, r3
 80040e0:	4b48      	ldr	r3, [pc, #288]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2220      	movs	r2, #32
 80040ec:	4013      	ands	r3, r2
 80040ee:	d01f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	23c0      	movs	r3, #192	; 0xc0
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	401a      	ands	r2, r3
 80040fa:	23c0      	movs	r3, #192	; 0xc0
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	429a      	cmp	r2, r3
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004102:	4b40      	ldr	r3, [pc, #256]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a44      	ldr	r2, [pc, #272]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	23c0      	movs	r3, #192	; 0xc0
 8004112:	039b      	lsls	r3, r3, #14
 8004114:	401a      	ands	r2, r3
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	4b39      	ldr	r3, [pc, #228]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800411e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	23c0      	movs	r3, #192	; 0xc0
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	401a      	ands	r2, r3
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800412c:	430a      	orrs	r2, r1
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004130:	2317      	movs	r3, #23
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413a:	4b32      	ldr	r3, [pc, #200]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800413c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413e:	4b31      	ldr	r3, [pc, #196]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004140:	4936      	ldr	r1, [pc, #216]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004142:	400a      	ands	r2, r1
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	4013      	ands	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	2203      	movs	r2, #3
 8004156:	4393      	bics	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004160:	430a      	orrs	r2, r1
 8004162:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2202      	movs	r2, #2
 800416a:	4013      	ands	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	220c      	movs	r2, #12
 8004174:	4393      	bics	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800417e:	430a      	orrs	r2, r1
 8004180:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2204      	movs	r2, #4
 8004188:	4013      	ands	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419c:	430a      	orrs	r2, r1
 800419e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	4013      	ands	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ba:	430a      	orrs	r2, r1
 80041bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	4013      	ands	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2280      	movs	r2, #128	; 0x80
 80041e2:	4013      	ands	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041f6:	430a      	orrs	r2, r1
 80041f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	40007000 	.word	0x40007000
 800420c:	fffcffff 	.word	0xfffcffff
 8004210:	fff7ffff 	.word	0xfff7ffff
 8004214:	00001388 	.word	0x00001388
 8004218:	ffcfffff 	.word	0xffcfffff
 800421c:	efffffff 	.word	0xefffffff
 8004220:	fffff3ff 	.word	0xfffff3ff
 8004224:	ffffcfff 	.word	0xffffcfff
 8004228:	fbffffff 	.word	0xfbffffff
 800422c:	fff3ffff 	.word	0xfff3ffff

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e032      	b.n	80042a8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2239      	movs	r2, #57	; 0x39
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2238      	movs	r2, #56	; 0x38
 8004252:	2100      	movs	r1, #0
 8004254:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f7fe fb1d 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2239      	movs	r2, #57	; 0x39
 8004262:	2102      	movs	r1, #2
 8004264:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	0019      	movs	r1, r3
 8004270:	0010      	movs	r0, r2
 8004272:	f000 fb79 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	223e      	movs	r2, #62	; 0x3e
 800427a:	2101      	movs	r1, #1
 800427c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	223a      	movs	r2, #58	; 0x3a
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	223b      	movs	r2, #59	; 0x3b
 800428a:	2101      	movs	r1, #1
 800428c:	5499      	strb	r1, [r3, r2]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	223c      	movs	r2, #60	; 0x3c
 8004292:	2101      	movs	r1, #1
 8004294:	5499      	strb	r1, [r3, r2]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	223d      	movs	r2, #61	; 0x3d
 800429a:	2101      	movs	r1, #1
 800429c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2239      	movs	r2, #57	; 0x39
 80042a2:	2101      	movs	r1, #1
 80042a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2239      	movs	r2, #57	; 0x39
 80042bc:	5c9b      	ldrb	r3, [r3, r2]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e036      	b.n	8004336 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2239      	movs	r2, #57	; 0x39
 80042cc:	2102      	movs	r1, #2
 80042ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	05db      	lsls	r3, r3, #23
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d009      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x50>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_TIM_Base_Start_IT+0x90>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x50>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <HAL_TIM_Base_Start_IT+0x94>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d111      	bne.n	8004324 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2207      	movs	r2, #7
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b06      	cmp	r3, #6
 8004310:	d010      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	e007      	b.n	8004334 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b004      	add	sp, #16
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	40010800 	.word	0x40010800
 8004344:	40011400 	.word	0x40011400

08004348 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e032      	b.n	80043c0 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2239      	movs	r2, #57	; 0x39
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2238      	movs	r2, #56	; 0x38
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f829 	bl	80043c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2239      	movs	r2, #57	; 0x39
 800437a:	2102      	movs	r1, #2
 800437c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	0019      	movs	r1, r3
 8004388:	0010      	movs	r0, r2
 800438a:	f000 faed 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223e      	movs	r2, #62	; 0x3e
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223a      	movs	r2, #58	; 0x3a
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223b      	movs	r2, #59	; 0x3b
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223c      	movs	r2, #60	; 0x3c
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223d      	movs	r2, #61	; 0x3d
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2239      	movs	r2, #57	; 0x39
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <HAL_TIM_PWM_Start+0x22>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223a      	movs	r2, #58	; 0x3a
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	4193      	sbcs	r3, r2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e01f      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d108      	bne.n	8004412 <HAL_TIM_PWM_Start+0x3a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	223b      	movs	r2, #59	; 0x3b
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	4193      	sbcs	r3, r2
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e013      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d108      	bne.n	800442a <HAL_TIM_PWM_Start+0x52>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	223c      	movs	r2, #60	; 0x3c
 800441c:	5c9b      	ldrb	r3, [r3, r2]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	4193      	sbcs	r3, r2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e007      	b.n	800443a <HAL_TIM_PWM_Start+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223d      	movs	r2, #61	; 0x3d
 800442e:	5c9b      	ldrb	r3, [r3, r2]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	4193      	sbcs	r3, r2
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e04d      	b.n	80044de <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x7a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	223a      	movs	r2, #58	; 0x3a
 800444c:	2102      	movs	r1, #2
 800444e:	5499      	strb	r1, [r3, r2]
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x8a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	223b      	movs	r2, #59	; 0x3b
 800445c:	2102      	movs	r1, #2
 800445e:	5499      	strb	r1, [r3, r2]
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0x9a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	223c      	movs	r2, #60	; 0x3c
 800446c:	2102      	movs	r1, #2
 800446e:	5499      	strb	r1, [r3, r2]
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223d      	movs	r2, #61	; 0x3d
 8004476:	2102      	movs	r1, #2
 8004478:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fc62 	bl	8004d4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	05db      	lsls	r3, r3, #23
 8004490:	429a      	cmp	r2, r3
 8004492:	d009      	beq.n	80044a8 <HAL_TIM_PWM_Start+0xd0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <HAL_TIM_PWM_Start+0x110>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIM_PWM_Start+0xd0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HAL_TIM_PWM_Start+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d111      	bne.n	80044cc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2207      	movs	r2, #7
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d010      	beq.n	80044dc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ca:	e007      	b.n	80044dc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2101      	movs	r1, #1
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b004      	add	sp, #16
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	40010800 	.word	0x40010800
 80044ec:	40011400 	.word	0x40011400

080044f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d124      	bne.n	8004550 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2202      	movs	r2, #2
 800450e:	4013      	ands	r3, r2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d11d      	bne.n	8004550 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2203      	movs	r2, #3
 800451a:	4252      	negs	r2, r2
 800451c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2203      	movs	r2, #3
 800452c:	4013      	ands	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fa00 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004538:	e007      	b.n	800454a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f9f3 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f000 f9ff 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2204      	movs	r2, #4
 8004558:	4013      	ands	r3, r2
 800455a:	2b04      	cmp	r3, #4
 800455c:	d125      	bne.n	80045aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2204      	movs	r2, #4
 8004566:	4013      	ands	r3, r2
 8004568:	2b04      	cmp	r3, #4
 800456a:	d11e      	bne.n	80045aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2205      	movs	r2, #5
 8004572:	4252      	negs	r2, r2
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	23c0      	movs	r3, #192	; 0xc0
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4013      	ands	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f9d3 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004592:	e007      	b.n	80045a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0018      	movs	r0, r3
 8004598:	f000 f9c6 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f9d2 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2208      	movs	r2, #8
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d124      	bne.n	8004602 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2208      	movs	r2, #8
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11d      	bne.n	8004602 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2209      	movs	r2, #9
 80045cc:	4252      	negs	r2, r2
 80045ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2203      	movs	r2, #3
 80045de:	4013      	ands	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 f9a7 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 80045ea:	e007      	b.n	80045fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 f99a 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 f9a6 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2210      	movs	r2, #16
 800460a:	4013      	ands	r3, r2
 800460c:	2b10      	cmp	r3, #16
 800460e:	d125      	bne.n	800465c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2210      	movs	r2, #16
 8004618:	4013      	ands	r3, r2
 800461a:	2b10      	cmp	r3, #16
 800461c:	d11e      	bne.n	800465c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2211      	movs	r2, #17
 8004624:	4252      	negs	r2, r2
 8004626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2208      	movs	r2, #8
 800462c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	23c0      	movs	r3, #192	; 0xc0
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f97a 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004644:	e007      	b.n	8004656 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 f96d 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 f979 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2201      	movs	r2, #1
 8004664:	4013      	ands	r3, r2
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10f      	bne.n	800468a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	4013      	ands	r3, r2
 8004674:	2b01      	cmp	r3, #1
 8004676:	d108      	bne.n	800468a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2202      	movs	r2, #2
 800467e:	4252      	negs	r2, r2
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f947 	bl	8004918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2240      	movs	r2, #64	; 0x40
 8004692:	4013      	ands	r3, r2
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d10f      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d108      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2241      	movs	r2, #65	; 0x41
 80046ac:	4252      	negs	r2, r2
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f950 	bl	8004958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2317      	movs	r3, #23
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2238      	movs	r2, #56	; 0x38
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_OC_ConfigChannel+0x22>
 80046de:	2302      	movs	r3, #2
 80046e0:	e042      	b.n	8004768 <HAL_TIM_OC_ConfigChannel+0xa8>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2238      	movs	r2, #56	; 0x38
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d027      	beq.n	8004740 <HAL_TIM_OC_ConfigChannel+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d82c      	bhi.n	8004750 <HAL_TIM_OC_ConfigChannel+0x90>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d019      	beq.n	8004730 <HAL_TIM_OC_ConfigChannel+0x70>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d826      	bhi.n	8004750 <HAL_TIM_OC_ConfigChannel+0x90>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_TIM_OC_ConfigChannel+0x50>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d008      	beq.n	8004720 <HAL_TIM_OC_ConfigChannel+0x60>
 800470e:	e01f      	b.n	8004750 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	0011      	movs	r1, r2
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f979 	bl	8004a10 <TIM_OC1_SetConfig>
      break;
 800471e:	e01c      	b.n	800475a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	0011      	movs	r1, r2
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f9ad 	bl	8004a88 <TIM_OC2_SetConfig>
      break;
 800472e:	e014      	b.n	800475a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f000 f9e7 	bl	8004b0c <TIM_OC3_SetConfig>
      break;
 800473e:	e00c      	b.n	800475a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	0011      	movs	r1, r2
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fa1f 	bl	8004b8c <TIM_OC4_SetConfig>
      break;
 800474e:	e004      	b.n	800475a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8004750:	2317      	movs	r3, #23
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
      break;
 8004758:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2238      	movs	r2, #56	; 0x38
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

  return status;
 8004762:	2317      	movs	r3, #23
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	781b      	ldrb	r3, [r3, #0]
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b006      	add	sp, #24
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	230f      	movs	r3, #15
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2238      	movs	r2, #56	; 0x38
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x20>
 800478c:	2302      	movs	r3, #2
 800478e:	e0bc      	b.n	800490a <HAL_TIM_ConfigClockSource+0x19a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2238      	movs	r2, #56	; 0x38
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2239      	movs	r2, #57	; 0x39
 800479c:	2102      	movs	r1, #2
 800479e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2277      	movs	r2, #119	; 0x77
 80047ac:	4393      	bics	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_TIM_ConfigClockSource+0x1a4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0192      	lsls	r2, r2, #6
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d040      	beq.n	800484e <HAL_TIM_ConfigClockSource+0xde>
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	0192      	lsls	r2, r2, #6
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d900      	bls.n	80047d6 <HAL_TIM_ConfigClockSource+0x66>
 80047d4:	e088      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	0152      	lsls	r2, r2, #5
 80047da:	4293      	cmp	r3, r2
 80047dc:	d100      	bne.n	80047e0 <HAL_TIM_ConfigClockSource+0x70>
 80047de:	e088      	b.n	80048f2 <HAL_TIM_ConfigClockSource+0x182>
 80047e0:	2280      	movs	r2, #128	; 0x80
 80047e2:	0152      	lsls	r2, r2, #5
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d900      	bls.n	80047ea <HAL_TIM_ConfigClockSource+0x7a>
 80047e8:	e07e      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 80047ea:	2b70      	cmp	r3, #112	; 0x70
 80047ec:	d018      	beq.n	8004820 <HAL_TIM_ConfigClockSource+0xb0>
 80047ee:	d900      	bls.n	80047f2 <HAL_TIM_ConfigClockSource+0x82>
 80047f0:	e07a      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 80047f2:	2b60      	cmp	r3, #96	; 0x60
 80047f4:	d04f      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x126>
 80047f6:	d900      	bls.n	80047fa <HAL_TIM_ConfigClockSource+0x8a>
 80047f8:	e076      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 80047fa:	2b50      	cmp	r3, #80	; 0x50
 80047fc:	d03b      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x106>
 80047fe:	d900      	bls.n	8004802 <HAL_TIM_ConfigClockSource+0x92>
 8004800:	e072      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d057      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x146>
 8004806:	d900      	bls.n	800480a <HAL_TIM_ConfigClockSource+0x9a>
 8004808:	e06e      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 800480a:	2b30      	cmp	r3, #48	; 0x30
 800480c:	d063      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x166>
 800480e:	d86b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d060      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x166>
 8004814:	d868      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d05d      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x166>
 800481a:	2b10      	cmp	r3, #16
 800481c:	d05b      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x166>
 800481e:	e063      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6899      	ldr	r1, [r3, #8]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f000 fa6c 	bl	8004d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2277      	movs	r2, #119	; 0x77
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
      break;
 800484c:	e052      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6899      	ldr	r1, [r3, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f000 fa55 	bl	8004d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	01c9      	lsls	r1, r1, #7
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
      break;
 8004874:	e03e      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	001a      	movs	r2, r3
 8004884:	f000 f9c8 	bl	8004c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2150      	movs	r1, #80	; 0x50
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fa22 	bl	8004cd8 <TIM_ITRx_SetConfig>
      break;
 8004894:	e02e      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	001a      	movs	r2, r3
 80048a4:	f000 f9e6 	bl	8004c74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2160      	movs	r1, #96	; 0x60
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 fa12 	bl	8004cd8 <TIM_ITRx_SetConfig>
      break;
 80048b4:	e01e      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	001a      	movs	r2, r3
 80048c4:	f000 f9a8 	bl	8004c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fa02 	bl	8004cd8 <TIM_ITRx_SetConfig>
      break;
 80048d4:	e00e      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f000 f9f9 	bl	8004cd8 <TIM_ITRx_SetConfig>
      break;
 80048e6:	e005      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80048e8:	230f      	movs	r3, #15
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
      break;
 80048f0:	e000      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80048f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2239      	movs	r2, #57	; 0x39
 80048f8:	2101      	movs	r1, #1
 80048fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2238      	movs	r2, #56	; 0x38
 8004900:	2100      	movs	r1, #0
 8004902:	5499      	strb	r1, [r3, r2]

  return status;
 8004904:	230f      	movs	r3, #15
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	781b      	ldrb	r3, [r3, #0]
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b004      	add	sp, #16
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	ffff00ff 	.word	0xffff00ff

08004918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	05db      	lsls	r3, r3, #23
 800497e:	429a      	cmp	r2, r3
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x2a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <TIM_Base_SetConfig+0x9c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x2a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <TIM_Base_SetConfig+0xa0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2270      	movs	r2, #112	; 0x70
 8004996:	4393      	bics	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	05db      	lsls	r3, r3, #23
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d007      	beq.n	80049be <TIM_Base_SetConfig+0x56>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_Base_SetConfig+0x9c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_Base_SetConfig+0x56>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <TIM_Base_SetConfig+0xa0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_Base_SetConfig+0xa4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	4393      	bics	r3, r2
 80049d6:	001a      	movs	r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	615a      	str	r2, [r3, #20]
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40010800 	.word	0x40010800
 8004a08:	40011400 	.word	0x40011400
 8004a0c:	fffffcff 	.word	0xfffffcff

08004a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4393      	bics	r3, r2
 8004a22:	001a      	movs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2270      	movs	r2, #112	; 0x70
 8004a3e:	4393      	bics	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2203      	movs	r2, #3
 8004a46:	4393      	bics	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4393      	bics	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b006      	add	sp, #24
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	2210      	movs	r2, #16
 8004a98:	4393      	bics	r3, r2
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <TIM_OC2_SetConfig+0x7c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <TIM_OC2_SetConfig+0x80>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b006      	add	sp, #24
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	ffff8fff 	.word	0xffff8fff
 8004b08:	fffffcff 	.word	0xfffffcff

08004b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <TIM_OC3_SetConfig+0x78>)
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2270      	movs	r2, #112	; 0x70
 8004b38:	4393      	bics	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	4393      	bics	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4a0d      	ldr	r2, [pc, #52]	; (8004b88 <TIM_OC3_SetConfig+0x7c>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b006      	add	sp, #24
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	fffffeff 	.word	0xfffffeff
 8004b88:	fffffdff 	.word	0xfffffdff

08004b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC4_SetConfig+0x7c>)
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <TIM_OC4_SetConfig+0x80>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <TIM_OC4_SetConfig+0x84>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <TIM_OC4_SetConfig+0x88>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b006      	add	sp, #24
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	ffffefff 	.word	0xffffefff
 8004c0c:	ffff8fff 	.word	0xffff8fff
 8004c10:	fffffcff 	.word	0xfffffcff
 8004c14:	ffffdfff 	.word	0xffffdfff

08004c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4393      	bics	r3, r2
 8004c32:	001a      	movs	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	22f0      	movs	r2, #240	; 0xf0
 8004c42:	4393      	bics	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	220a      	movs	r2, #10
 8004c54:	4393      	bics	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b006      	add	sp, #24
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	2210      	movs	r2, #16
 8004c86:	4393      	bics	r3, r2
 8004c88:	001a      	movs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <TIM_TI2_ConfigInputStage+0x60>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	22a0      	movs	r2, #160	; 0xa0
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b006      	add	sp, #24
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	ffff0fff 	.word	0xffff0fff

08004cd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2270      	movs	r2, #112	; 0x70
 8004cec:	4393      	bics	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	2207      	movs	r2, #7
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <TIM_ETR_SetConfig+0x3c>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b006      	add	sp, #24
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	ffff00ff 	.word	0xffff00ff

08004d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	221f      	movs	r2, #31
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	0013      	movs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	43d2      	mvns	r2, r2
 8004d6e:	401a      	ands	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	211f      	movs	r1, #31
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4099      	lsls	r1, r3
 8004d82:	000b      	movs	r3, r1
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b006      	add	sp, #24
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2238      	movs	r2, #56	; 0x38
 8004da2:	5c9b      	ldrb	r3, [r3, r2]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e042      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2238      	movs	r2, #56	; 0x38
 8004db0:	2101      	movs	r1, #1
 8004db2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2239      	movs	r2, #57	; 0x39
 8004db8:	2102      	movs	r1, #2
 8004dba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2270      	movs	r2, #112	; 0x70
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	05db      	lsls	r3, r3, #23
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2239      	movs	r2, #57	; 0x39
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2238      	movs	r2, #56	; 0x38
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b004      	add	sp, #16
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	40010800 	.word	0x40010800
 8004e40:	40011400 	.word	0x40011400

08004e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e044      	b.n	8004ee0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d107      	bne.n	8004e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2278      	movs	r2, #120	; 0x78
 8004e62:	2100      	movs	r1, #0
 8004e64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7fd fd6f 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2224      	movs	r2, #36	; 0x24
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	438a      	bics	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 fc2c 	bl	80056e4 <UART_SetConfig>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e024      	b.n	8004ee0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 fea3 	bl	8005bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	490d      	ldr	r1, [pc, #52]	; (8004ee8 <HAL_UART_Init+0xa4>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	212a      	movs	r1, #42	; 0x2a
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 ff3b 	bl	8005d54 <UART_CheckIdleState>
 8004ede:	0003      	movs	r3, r0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	ffffb7ff 	.word	0xffffb7ff

08004eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	1dbb      	adds	r3, r7, #6
 8004efa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d000      	beq.n	8004f06 <HAL_UART_Transmit+0x1a>
 8004f04:	e08c      	b.n	8005020 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_UART_Transmit+0x28>
 8004f0c:	1dbb      	adds	r3, r7, #6
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e084      	b.n	8005022 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d109      	bne.n	8004f38 <HAL_UART_Transmit+0x4c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4013      	ands	r3, r2
 8004f32:	d001      	beq.n	8004f38 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e074      	b.n	8005022 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2284      	movs	r2, #132	; 0x84
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2221      	movs	r2, #33	; 0x21
 8004f44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f46:	f7fd fef9 	bl	8002d3c <HAL_GetTick>
 8004f4a:	0003      	movs	r3, r0
 8004f4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1dba      	adds	r2, r7, #6
 8004f52:	2150      	movs	r1, #80	; 0x50
 8004f54:	8812      	ldrh	r2, [r2, #0]
 8004f56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1dba      	adds	r2, r7, #6
 8004f5c:	2152      	movs	r1, #82	; 0x52
 8004f5e:	8812      	ldrh	r2, [r2, #0]
 8004f60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	015b      	lsls	r3, r3, #5
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d108      	bne.n	8004f80 <HAL_UART_Transmit+0x94>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e003      	b.n	8004f88 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f88:	e02f      	b.n	8004fea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	0013      	movs	r3, r2
 8004f94:	2200      	movs	r2, #0
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	f000 ff84 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d004      	beq.n	8004faa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e03b      	b.n	8005022 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	05d2      	lsls	r2, r2, #23
 8004fbc:	0dd2      	lsrs	r2, r2, #23
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e007      	b.n	8004fd8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2252      	movs	r2, #82	; 0x52
 8004fdc:	5a9b      	ldrh	r3, [r3, r2]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2252      	movs	r2, #82	; 0x52
 8004fe8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2252      	movs	r2, #82	; 0x52
 8004fee:	5a9b      	ldrh	r3, [r3, r2]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1c9      	bne.n	8004f8a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	0013      	movs	r3, r2
 8005000:	2200      	movs	r2, #0
 8005002:	2140      	movs	r1, #64	; 0x40
 8005004:	f000 ff4e 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005008:	1e03      	subs	r3, r0, #0
 800500a:	d004      	beq.n	8005016 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e005      	b.n	8005022 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b008      	add	sp, #32
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	1dbb      	adds	r3, r7, #6
 8005038:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	589b      	ldr	r3, [r3, r2]
 8005040:	2b20      	cmp	r3, #32
 8005042:	d14a      	bne.n	80050da <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_UART_Receive_IT+0x26>
 800504a:	1dbb      	adds	r3, r7, #6
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e042      	b.n	80050dc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	015b      	lsls	r3, r3, #5
 800505e:	429a      	cmp	r2, r3
 8005060:	d109      	bne.n	8005076 <HAL_UART_Receive_IT+0x4a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2201      	movs	r2, #1
 800506e:	4013      	ands	r3, r2
 8005070:	d001      	beq.n	8005076 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e032      	b.n	80050dc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_UART_Receive_IT+0xb8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d020      	beq.n	80050c8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	4013      	ands	r3, r2
 8005092:	d019      	beq.n	80050c8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005094:	f3ef 8310 	mrs	r3, PRIMASK
 8005098:	613b      	str	r3, [r7, #16]
  return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f383 8810 	msr	PRIMASK, r3
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2180      	movs	r1, #128	; 0x80
 80050b6:	04c9      	lsls	r1, r1, #19
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050c8:	1dbb      	adds	r3, r7, #6
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f000 ff51 	bl	8005f78 <UART_Start_Receive_IT>
 80050d6:	0003      	movs	r3, r0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b008      	add	sp, #32
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40004800 	.word	0x40004800

080050e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b0ab      	sub	sp, #172	; 0xac
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	22a4      	movs	r2, #164	; 0xa4
 80050f8:	18b9      	adds	r1, r7, r2
 80050fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	20a0      	movs	r0, #160	; 0xa0
 8005104:	1839      	adds	r1, r7, r0
 8005106:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	219c      	movs	r1, #156	; 0x9c
 8005110:	1879      	adds	r1, r7, r1
 8005112:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005114:	0011      	movs	r1, r2
 8005116:	18bb      	adds	r3, r7, r2
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a99      	ldr	r2, [pc, #612]	; (8005380 <HAL_UART_IRQHandler+0x298>)
 800511c:	4013      	ands	r3, r2
 800511e:	2298      	movs	r2, #152	; 0x98
 8005120:	18bc      	adds	r4, r7, r2
 8005122:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005124:	18bb      	adds	r3, r7, r2
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d114      	bne.n	8005156 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800512c:	187b      	adds	r3, r7, r1
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2220      	movs	r2, #32
 8005132:	4013      	ands	r3, r2
 8005134:	d00f      	beq.n	8005156 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005136:	183b      	adds	r3, r7, r0
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2220      	movs	r2, #32
 800513c:	4013      	ands	r3, r2
 800513e:	d00a      	beq.n	8005156 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005144:	2b00      	cmp	r3, #0
 8005146:	d100      	bne.n	800514a <HAL_UART_IRQHandler+0x62>
 8005148:	e2a0      	b.n	800568c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	0010      	movs	r0, r2
 8005152:	4798      	blx	r3
      }
      return;
 8005154:	e29a      	b.n	800568c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005156:	2398      	movs	r3, #152	; 0x98
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d100      	bne.n	8005162 <HAL_UART_IRQHandler+0x7a>
 8005160:	e114      	b.n	800538c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005162:	239c      	movs	r3, #156	; 0x9c
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	4013      	ands	r3, r2
 800516c:	d106      	bne.n	800517c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800516e:	23a0      	movs	r3, #160	; 0xa0
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a83      	ldr	r2, [pc, #524]	; (8005384 <HAL_UART_IRQHandler+0x29c>)
 8005176:	4013      	ands	r3, r2
 8005178:	d100      	bne.n	800517c <HAL_UART_IRQHandler+0x94>
 800517a:	e107      	b.n	800538c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800517c:	23a4      	movs	r3, #164	; 0xa4
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d012      	beq.n	80051ae <HAL_UART_IRQHandler+0xc6>
 8005188:	23a0      	movs	r3, #160	; 0xa0
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4013      	ands	r3, r2
 8005194:	d00b      	beq.n	80051ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2201      	movs	r2, #1
 800519c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2284      	movs	r2, #132	; 0x84
 80051a2:	589b      	ldr	r3, [r3, r2]
 80051a4:	2201      	movs	r2, #1
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2184      	movs	r1, #132	; 0x84
 80051ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051ae:	23a4      	movs	r3, #164	; 0xa4
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2202      	movs	r2, #2
 80051b6:	4013      	ands	r3, r2
 80051b8:	d011      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
 80051ba:	239c      	movs	r3, #156	; 0x9c
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	4013      	ands	r3, r2
 80051c4:	d00b      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2202      	movs	r2, #2
 80051cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2284      	movs	r2, #132	; 0x84
 80051d2:	589b      	ldr	r3, [r3, r2]
 80051d4:	2204      	movs	r2, #4
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2184      	movs	r1, #132	; 0x84
 80051dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051de:	23a4      	movs	r3, #164	; 0xa4
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2204      	movs	r2, #4
 80051e6:	4013      	ands	r3, r2
 80051e8:	d011      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
 80051ea:	239c      	movs	r3, #156	; 0x9c
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	d00b      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2204      	movs	r2, #4
 80051fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2284      	movs	r2, #132	; 0x84
 8005202:	589b      	ldr	r3, [r3, r2]
 8005204:	2202      	movs	r2, #2
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2184      	movs	r1, #132	; 0x84
 800520c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800520e:	23a4      	movs	r3, #164	; 0xa4
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	4013      	ands	r3, r2
 8005218:	d017      	beq.n	800524a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800521a:	23a0      	movs	r3, #160	; 0xa0
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2220      	movs	r2, #32
 8005222:	4013      	ands	r3, r2
 8005224:	d105      	bne.n	8005232 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005226:	239c      	movs	r3, #156	; 0x9c
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2201      	movs	r2, #1
 800522e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2208      	movs	r2, #8
 8005238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2284      	movs	r2, #132	; 0x84
 800523e:	589b      	ldr	r3, [r3, r2]
 8005240:	2208      	movs	r2, #8
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2184      	movs	r1, #132	; 0x84
 8005248:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800524a:	23a4      	movs	r3, #164	; 0xa4
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	4013      	ands	r3, r2
 8005256:	d013      	beq.n	8005280 <HAL_UART_IRQHandler+0x198>
 8005258:	23a0      	movs	r3, #160	; 0xa0
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	04db      	lsls	r3, r3, #19
 8005262:	4013      	ands	r3, r2
 8005264:	d00c      	beq.n	8005280 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	0112      	lsls	r2, r2, #4
 800526e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2284      	movs	r2, #132	; 0x84
 8005274:	589b      	ldr	r3, [r3, r2]
 8005276:	2220      	movs	r2, #32
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2184      	movs	r1, #132	; 0x84
 800527e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2284      	movs	r2, #132	; 0x84
 8005284:	589b      	ldr	r3, [r3, r2]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d100      	bne.n	800528c <HAL_UART_IRQHandler+0x1a4>
 800528a:	e201      	b.n	8005690 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800528c:	23a4      	movs	r3, #164	; 0xa4
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2220      	movs	r2, #32
 8005294:	4013      	ands	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005298:	23a0      	movs	r3, #160	; 0xa0
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2220      	movs	r2, #32
 80052a0:	4013      	ands	r3, r2
 80052a2:	d008      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	0010      	movs	r0, r2
 80052b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2284      	movs	r2, #132	; 0x84
 80052ba:	589b      	ldr	r3, [r3, r2]
 80052bc:	2194      	movs	r1, #148	; 0x94
 80052be:	187a      	adds	r2, r7, r1
 80052c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2240      	movs	r2, #64	; 0x40
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d004      	beq.n	80052da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2228      	movs	r2, #40	; 0x28
 80052d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d8:	d047      	beq.n	800536a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 ff15 	bl	800610c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2240      	movs	r2, #64	; 0x40
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d137      	bne.n	8005360 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f0:	f3ef 8310 	mrs	r3, PRIMASK
 80052f4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80052f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f8:	2090      	movs	r0, #144	; 0x90
 80052fa:	183a      	adds	r2, r7, r0
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	2301      	movs	r3, #1
 8005300:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	438a      	bics	r2, r1
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	183b      	adds	r3, r7, r0
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532c:	2b00      	cmp	r3, #0
 800532e:	d012      	beq.n	8005356 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <HAL_UART_IRQHandler+0x2a0>)
 8005336:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	0018      	movs	r0, r3
 800533e:	f7fd fe25 	bl	8002f8c <HAL_DMA_Abort_IT>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d01a      	beq.n	800537c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005350:	0018      	movs	r0, r3
 8005352:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e012      	b.n	800537c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f9af 	bl	80056bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535e:	e00d      	b.n	800537c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f9aa 	bl	80056bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e008      	b.n	800537c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f9a5 	bl	80056bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2284      	movs	r2, #132	; 0x84
 8005376:	2100      	movs	r1, #0
 8005378:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800537a:	e189      	b.n	8005690 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	46c0      	nop			; (mov r8, r8)
    return;
 800537e:	e187      	b.n	8005690 <HAL_UART_IRQHandler+0x5a8>
 8005380:	0000080f 	.word	0x0000080f
 8005384:	04000120 	.word	0x04000120
 8005388:	080061d5 	.word	0x080061d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	2b01      	cmp	r3, #1
 8005392:	d000      	beq.n	8005396 <HAL_UART_IRQHandler+0x2ae>
 8005394:	e13b      	b.n	800560e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005396:	23a4      	movs	r3, #164	; 0xa4
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	4013      	ands	r3, r2
 80053a0:	d100      	bne.n	80053a4 <HAL_UART_IRQHandler+0x2bc>
 80053a2:	e134      	b.n	800560e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053a4:	23a0      	movs	r3, #160	; 0xa0
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2210      	movs	r2, #16
 80053ac:	4013      	ands	r3, r2
 80053ae:	d100      	bne.n	80053b2 <HAL_UART_IRQHandler+0x2ca>
 80053b0:	e12d      	b.n	800560e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d000      	beq.n	80053ca <HAL_UART_IRQHandler+0x2e2>
 80053c8:	e0a1      	b.n	800550e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	217e      	movs	r1, #126	; 0x7e
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d100      	bne.n	80053e2 <HAL_UART_IRQHandler+0x2fa>
 80053e0:	e158      	b.n	8005694 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2258      	movs	r2, #88	; 0x58
 80053e6:	5a9b      	ldrh	r3, [r3, r2]
 80053e8:	187a      	adds	r2, r7, r1
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d300      	bcc.n	80053f2 <HAL_UART_IRQHandler+0x30a>
 80053f0:	e150      	b.n	8005694 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	187a      	adds	r2, r7, r1
 80053f6:	215a      	movs	r1, #90	; 0x5a
 80053f8:	8812      	ldrh	r2, [r2, #0]
 80053fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2220      	movs	r2, #32
 8005406:	4013      	ands	r3, r2
 8005408:	d16f      	bne.n	80054ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540a:	f3ef 8310 	mrs	r3, PRIMASK
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005412:	67bb      	str	r3, [r7, #120]	; 0x78
 8005414:	2301      	movs	r3, #1
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	499e      	ldr	r1, [pc, #632]	; (80056a4 <HAL_UART_IRQHandler+0x5bc>)
 800542c:	400a      	ands	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543c:	f3ef 8310 	mrs	r3, PRIMASK
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	677b      	str	r3, [r7, #116]	; 0x74
 8005446:	2301      	movs	r3, #1
 8005448:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	f383 8810 	msr	PRIMASK, r3
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	438a      	bics	r2, r1
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	f383 8810 	msr	PRIMASK, r3
}
 800546c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546e:	f3ef 8310 	mrs	r3, PRIMASK
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005474:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	673b      	str	r3, [r7, #112]	; 0x70
 8005478:	2301      	movs	r3, #1
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	f383 8810 	msr	PRIMASK, r3
}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2140      	movs	r1, #64	; 0x40
 8005490:	438a      	bics	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005496:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549a:	f383 8810 	msr	PRIMASK, r3
}
 800549e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	2120      	movs	r1, #32
 80054a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ae:	f3ef 8310 	mrs	r3, PRIMASK
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80054b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b8:	2301      	movs	r3, #1
 80054ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054be:	f383 8810 	msr	PRIMASK, r3
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2110      	movs	r1, #16
 80054d0:	438a      	bics	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fd fd11 	bl	8002f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2258      	movs	r2, #88	; 0x58
 80054f4:	5a9a      	ldrh	r2, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	215a      	movs	r1, #90	; 0x5a
 80054fa:	5a5b      	ldrh	r3, [r3, r1]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f000 f8e0 	bl	80056cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800550c:	e0c2      	b.n	8005694 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2258      	movs	r2, #88	; 0x58
 8005512:	5a99      	ldrh	r1, [r3, r2]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	225a      	movs	r2, #90	; 0x5a
 8005518:	5a9b      	ldrh	r3, [r3, r2]
 800551a:	b29a      	uxth	r2, r3
 800551c:	208e      	movs	r0, #142	; 0x8e
 800551e:	183b      	adds	r3, r7, r0
 8005520:	1a8a      	subs	r2, r1, r2
 8005522:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	225a      	movs	r2, #90	; 0x5a
 8005528:	5a9b      	ldrh	r3, [r3, r2]
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d100      	bne.n	8005532 <HAL_UART_IRQHandler+0x44a>
 8005530:	e0b2      	b.n	8005698 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005532:	183b      	adds	r3, r7, r0
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d100      	bne.n	800553c <HAL_UART_IRQHandler+0x454>
 800553a:	e0ad      	b.n	8005698 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553c:	f3ef 8310 	mrs	r3, PRIMASK
 8005540:	60fb      	str	r3, [r7, #12]
  return(result);
 8005542:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005544:	2488      	movs	r4, #136	; 0x88
 8005546:	193a      	adds	r2, r7, r4
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	2301      	movs	r3, #1
 800554c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4951      	ldr	r1, [pc, #324]	; (80056a8 <HAL_UART_IRQHandler+0x5c0>)
 8005562:	400a      	ands	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	193b      	adds	r3, r7, r4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f383 8810 	msr	PRIMASK, r3
}
 8005572:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005574:	f3ef 8310 	mrs	r3, PRIMASK
 8005578:	61bb      	str	r3, [r7, #24]
  return(result);
 800557a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	2484      	movs	r4, #132	; 0x84
 800557e:	193a      	adds	r2, r7, r4
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	2301      	movs	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	438a      	bics	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
 800559e:	193b      	adds	r3, r7, r4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	f383 8810 	msr	PRIMASK, r3
}
 80055aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	2120      	movs	r1, #32
 80055b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c0:	f3ef 8310 	mrs	r3, PRIMASK
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c8:	2480      	movs	r4, #128	; 0x80
 80055ca:	193a      	adds	r2, r7, r4
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	2301      	movs	r3, #1
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	f383 8810 	msr	PRIMASK, r3
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2110      	movs	r1, #16
 80055e6:	438a      	bics	r2, r1
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0011      	movs	r1, r2
 8005606:	0018      	movs	r0, r3
 8005608:	f000 f860 	bl	80056cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800560c:	e044      	b.n	8005698 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800560e:	23a4      	movs	r3, #164	; 0xa4
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	035b      	lsls	r3, r3, #13
 8005618:	4013      	ands	r3, r2
 800561a:	d010      	beq.n	800563e <HAL_UART_IRQHandler+0x556>
 800561c:	239c      	movs	r3, #156	; 0x9c
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	03db      	lsls	r3, r3, #15
 8005626:	4013      	ands	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	0352      	lsls	r2, r2, #13
 8005632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 ffd2 	bl	80065e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800563c:	e02f      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800563e:	23a4      	movs	r3, #164	; 0xa4
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	4013      	ands	r3, r2
 8005648:	d00f      	beq.n	800566a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800564a:	23a0      	movs	r3, #160	; 0xa0
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	4013      	ands	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01e      	beq.n	800569c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	0010      	movs	r0, r2
 8005666:	4798      	blx	r3
    }
    return;
 8005668:	e018      	b.n	800569c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800566a:	23a4      	movs	r3, #164	; 0xa4
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	4013      	ands	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x5b6>
 8005676:	23a0      	movs	r3, #160	; 0xa0
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	4013      	ands	r3, r2
 8005680:	d00d      	beq.n	800569e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fdbc 	bl	8006202 <UART_EndTransmit_IT>
    return;
 800568a:	e008      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
      return;
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	e006      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005690:	46c0      	nop			; (mov r8, r8)
 8005692:	e004      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	e002      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	e000      	b.n	800569e <HAL_UART_IRQHandler+0x5b6>
    return;
 800569c:	46c0      	nop			; (mov r8, r8)
  }

}
 800569e:	46bd      	mov	sp, r7
 80056a0:	b02b      	add	sp, #172	; 0xac
 80056a2:	bd90      	pop	{r4, r7, pc}
 80056a4:	fffffeff 	.word	0xfffffeff
 80056a8:	fffffedf 	.word	0xfffffedf

080056ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b002      	add	sp, #8
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	000a      	movs	r2, r1
 80056d6:	1cbb      	adds	r3, r7, #2
 80056d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b002      	add	sp, #8
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e4:	b5b0      	push	{r4, r5, r7, lr}
 80056e6:	b08e      	sub	sp, #56	; 0x38
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ec:	231a      	movs	r3, #26
 80056ee:	2218      	movs	r2, #24
 80056f0:	189b      	adds	r3, r3, r2
 80056f2:	19db      	adds	r3, r3, r7
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	431a      	orrs	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	431a      	orrs	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4313      	orrs	r3, r2
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4ac6      	ldr	r2, [pc, #792]	; (8005a30 <UART_SetConfig+0x34c>)
 8005718:	4013      	ands	r3, r2
 800571a:	0019      	movs	r1, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005722:	430a      	orrs	r2, r1
 8005724:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4ac1      	ldr	r2, [pc, #772]	; (8005a34 <UART_SetConfig+0x350>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4abb      	ldr	r2, [pc, #748]	; (8005a38 <UART_SetConfig+0x354>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005754:	4313      	orrs	r3, r2
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4ab7      	ldr	r2, [pc, #732]	; (8005a3c <UART_SetConfig+0x358>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4ab3      	ldr	r2, [pc, #716]	; (8005a40 <UART_SetConfig+0x35c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d131      	bne.n	80057dc <UART_SetConfig+0xf8>
 8005778:	4bb2      	ldr	r3, [pc, #712]	; (8005a44 <UART_SetConfig+0x360>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	2203      	movs	r2, #3
 800577e:	4013      	ands	r3, r2
 8005780:	2b03      	cmp	r3, #3
 8005782:	d01d      	beq.n	80057c0 <UART_SetConfig+0xdc>
 8005784:	d823      	bhi.n	80057ce <UART_SetConfig+0xea>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d00c      	beq.n	80057a4 <UART_SetConfig+0xc0>
 800578a:	d820      	bhi.n	80057ce <UART_SetConfig+0xea>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <UART_SetConfig+0xb2>
 8005790:	2b01      	cmp	r3, #1
 8005792:	d00e      	beq.n	80057b2 <UART_SetConfig+0xce>
 8005794:	e01b      	b.n	80057ce <UART_SetConfig+0xea>
 8005796:	231b      	movs	r3, #27
 8005798:	2218      	movs	r2, #24
 800579a:	189b      	adds	r3, r3, r2
 800579c:	19db      	adds	r3, r3, r7
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e09c      	b.n	80058de <UART_SetConfig+0x1fa>
 80057a4:	231b      	movs	r3, #27
 80057a6:	2218      	movs	r2, #24
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	19db      	adds	r3, r3, r7
 80057ac:	2202      	movs	r2, #2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e095      	b.n	80058de <UART_SetConfig+0x1fa>
 80057b2:	231b      	movs	r3, #27
 80057b4:	2218      	movs	r2, #24
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	2204      	movs	r2, #4
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e08e      	b.n	80058de <UART_SetConfig+0x1fa>
 80057c0:	231b      	movs	r3, #27
 80057c2:	2218      	movs	r2, #24
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	2208      	movs	r2, #8
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e087      	b.n	80058de <UART_SetConfig+0x1fa>
 80057ce:	231b      	movs	r3, #27
 80057d0:	2218      	movs	r2, #24
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	19db      	adds	r3, r3, r7
 80057d6:	2210      	movs	r2, #16
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e080      	b.n	80058de <UART_SetConfig+0x1fa>
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a99      	ldr	r2, [pc, #612]	; (8005a48 <UART_SetConfig+0x364>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d131      	bne.n	800584a <UART_SetConfig+0x166>
 80057e6:	4b97      	ldr	r3, [pc, #604]	; (8005a44 <UART_SetConfig+0x360>)
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	220c      	movs	r2, #12
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d01d      	beq.n	800582e <UART_SetConfig+0x14a>
 80057f2:	d823      	bhi.n	800583c <UART_SetConfig+0x158>
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d00c      	beq.n	8005812 <UART_SetConfig+0x12e>
 80057f8:	d820      	bhi.n	800583c <UART_SetConfig+0x158>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x120>
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d00e      	beq.n	8005820 <UART_SetConfig+0x13c>
 8005802:	e01b      	b.n	800583c <UART_SetConfig+0x158>
 8005804:	231b      	movs	r3, #27
 8005806:	2218      	movs	r2, #24
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e065      	b.n	80058de <UART_SetConfig+0x1fa>
 8005812:	231b      	movs	r3, #27
 8005814:	2218      	movs	r2, #24
 8005816:	189b      	adds	r3, r3, r2
 8005818:	19db      	adds	r3, r3, r7
 800581a:	2202      	movs	r2, #2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e05e      	b.n	80058de <UART_SetConfig+0x1fa>
 8005820:	231b      	movs	r3, #27
 8005822:	2218      	movs	r2, #24
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2204      	movs	r2, #4
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e057      	b.n	80058de <UART_SetConfig+0x1fa>
 800582e:	231b      	movs	r3, #27
 8005830:	2218      	movs	r2, #24
 8005832:	189b      	adds	r3, r3, r2
 8005834:	19db      	adds	r3, r3, r7
 8005836:	2208      	movs	r2, #8
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	e050      	b.n	80058de <UART_SetConfig+0x1fa>
 800583c:	231b      	movs	r3, #27
 800583e:	2218      	movs	r2, #24
 8005840:	189b      	adds	r3, r3, r2
 8005842:	19db      	adds	r3, r3, r7
 8005844:	2210      	movs	r2, #16
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e049      	b.n	80058de <UART_SetConfig+0x1fa>
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7a      	ldr	r2, [pc, #488]	; (8005a38 <UART_SetConfig+0x354>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d13e      	bne.n	80058d2 <UART_SetConfig+0x1ee>
 8005854:	4b7b      	ldr	r3, [pc, #492]	; (8005a44 <UART_SetConfig+0x360>)
 8005856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005858:	23c0      	movs	r3, #192	; 0xc0
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	4013      	ands	r3, r2
 800585e:	22c0      	movs	r2, #192	; 0xc0
 8005860:	0112      	lsls	r2, r2, #4
 8005862:	4293      	cmp	r3, r2
 8005864:	d027      	beq.n	80058b6 <UART_SetConfig+0x1d2>
 8005866:	22c0      	movs	r2, #192	; 0xc0
 8005868:	0112      	lsls	r2, r2, #4
 800586a:	4293      	cmp	r3, r2
 800586c:	d82a      	bhi.n	80058c4 <UART_SetConfig+0x1e0>
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	0112      	lsls	r2, r2, #4
 8005872:	4293      	cmp	r3, r2
 8005874:	d011      	beq.n	800589a <UART_SetConfig+0x1b6>
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	0112      	lsls	r2, r2, #4
 800587a:	4293      	cmp	r3, r2
 800587c:	d822      	bhi.n	80058c4 <UART_SetConfig+0x1e0>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <UART_SetConfig+0x1a8>
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	00d2      	lsls	r2, r2, #3
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <UART_SetConfig+0x1c4>
 800588a:	e01b      	b.n	80058c4 <UART_SetConfig+0x1e0>
 800588c:	231b      	movs	r3, #27
 800588e:	2218      	movs	r2, #24
 8005890:	189b      	adds	r3, r3, r2
 8005892:	19db      	adds	r3, r3, r7
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e021      	b.n	80058de <UART_SetConfig+0x1fa>
 800589a:	231b      	movs	r3, #27
 800589c:	2218      	movs	r2, #24
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	19db      	adds	r3, r3, r7
 80058a2:	2202      	movs	r2, #2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e01a      	b.n	80058de <UART_SetConfig+0x1fa>
 80058a8:	231b      	movs	r3, #27
 80058aa:	2218      	movs	r2, #24
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	2204      	movs	r2, #4
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e013      	b.n	80058de <UART_SetConfig+0x1fa>
 80058b6:	231b      	movs	r3, #27
 80058b8:	2218      	movs	r2, #24
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	19db      	adds	r3, r3, r7
 80058be:	2208      	movs	r2, #8
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e00c      	b.n	80058de <UART_SetConfig+0x1fa>
 80058c4:	231b      	movs	r3, #27
 80058c6:	2218      	movs	r2, #24
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	2210      	movs	r2, #16
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e005      	b.n	80058de <UART_SetConfig+0x1fa>
 80058d2:	231b      	movs	r3, #27
 80058d4:	2218      	movs	r2, #24
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	2210      	movs	r2, #16
 80058dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a55      	ldr	r2, [pc, #340]	; (8005a38 <UART_SetConfig+0x354>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d000      	beq.n	80058ea <UART_SetConfig+0x206>
 80058e8:	e084      	b.n	80059f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ea:	231b      	movs	r3, #27
 80058ec:	2218      	movs	r2, #24
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	19db      	adds	r3, r3, r7
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d01d      	beq.n	8005934 <UART_SetConfig+0x250>
 80058f8:	dc20      	bgt.n	800593c <UART_SetConfig+0x258>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d015      	beq.n	800592a <UART_SetConfig+0x246>
 80058fe:	dc1d      	bgt.n	800593c <UART_SetConfig+0x258>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <UART_SetConfig+0x226>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0x230>
 8005908:	e018      	b.n	800593c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590a:	f7fe fad7 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800590e:	0003      	movs	r3, r0
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005912:	e01c      	b.n	800594e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005914:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <UART_SetConfig+0x360>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2210      	movs	r2, #16
 800591a:	4013      	ands	r3, r2
 800591c:	d002      	beq.n	8005924 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800591e:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <UART_SetConfig+0x368>)
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005922:	e014      	b.n	800594e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005924:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <UART_SetConfig+0x36c>)
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005928:	e011      	b.n	800594e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fa17 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 800592e:	0003      	movs	r3, r0
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005932:	e00c      	b.n	800594e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800593a:	e008      	b.n	800594e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005940:	231a      	movs	r3, #26
 8005942:	2218      	movs	r2, #24
 8005944:	189b      	adds	r3, r3, r2
 8005946:	19db      	adds	r3, r3, r7
 8005948:	2201      	movs	r2, #1
 800594a:	701a      	strb	r2, [r3, #0]
        break;
 800594c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d100      	bne.n	8005956 <UART_SetConfig+0x272>
 8005954:	e132      	b.n	8005bbc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	0013      	movs	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	189b      	adds	r3, r3, r2
 8005960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d305      	bcc.n	8005972 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d906      	bls.n	8005980 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005972:	231a      	movs	r3, #26
 8005974:	2218      	movs	r2, #24
 8005976:	189b      	adds	r3, r3, r2
 8005978:	19db      	adds	r3, r3, r7
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e11d      	b.n	8005bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	6939      	ldr	r1, [r7, #16]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	000b      	movs	r3, r1
 800598e:	0e1b      	lsrs	r3, r3, #24
 8005990:	0010      	movs	r0, r2
 8005992:	0205      	lsls	r5, r0, #8
 8005994:	431d      	orrs	r5, r3
 8005996:	000b      	movs	r3, r1
 8005998:	021c      	lsls	r4, r3, #8
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68b8      	ldr	r0, [r7, #8]
 80059a8:	68f9      	ldr	r1, [r7, #12]
 80059aa:	1900      	adds	r0, r0, r4
 80059ac:	4169      	adcs	r1, r5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f7fa fd74 	bl	80004a8 <__aeabi_uldivmod>
 80059c0:	0002      	movs	r2, r0
 80059c2:	000b      	movs	r3, r1
 80059c4:	0013      	movs	r3, r2
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ca:	23c0      	movs	r3, #192	; 0xc0
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d309      	bcc.n	80059e6 <UART_SetConfig+0x302>
 80059d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	035b      	lsls	r3, r3, #13
 80059d8:	429a      	cmp	r2, r3
 80059da:	d204      	bcs.n	80059e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e2:	60da      	str	r2, [r3, #12]
 80059e4:	e0ea      	b.n	8005bbc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80059e6:	231a      	movs	r3, #26
 80059e8:	2218      	movs	r2, #24
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	19db      	adds	r3, r3, r7
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	e0e3      	b.n	8005bbc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d000      	beq.n	8005a02 <UART_SetConfig+0x31e>
 8005a00:	e085      	b.n	8005b0e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8005a02:	231b      	movs	r3, #27
 8005a04:	2218      	movs	r2, #24
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	19db      	adds	r3, r3, r7
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d837      	bhi.n	8005a80 <UART_SetConfig+0x39c>
 8005a10:	009a      	lsls	r2, r3, #2
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <UART_SetConfig+0x370>)
 8005a14:	18d3      	adds	r3, r2, r3
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1a:	f7fe fa4f 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a22:	e036      	b.n	8005a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe fa60 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a2c:	e031      	b.n	8005a92 <UART_SetConfig+0x3ae>
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	efff69f3 	.word	0xefff69f3
 8005a34:	ffffcfff 	.word	0xffffcfff
 8005a38:	40004800 	.word	0x40004800
 8005a3c:	fffff4ff 	.word	0xfffff4ff
 8005a40:	40013800 	.word	0x40013800
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40004400 	.word	0x40004400
 8005a4c:	003d0900 	.word	0x003d0900
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	080092b4 	.word	0x080092b4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a58:	4b60      	ldr	r3, [pc, #384]	; (8005bdc <UART_SetConfig+0x4f8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d002      	beq.n	8005a68 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a62:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <UART_SetConfig+0x4fc>)
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a66:	e014      	b.n	8005a92 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005a68:	4b5e      	ldr	r3, [pc, #376]	; (8005be4 <UART_SetConfig+0x500>)
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a6c:	e011      	b.n	8005a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6e:	f7fe f975 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8005a72:	0003      	movs	r3, r0
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a76:	e00c      	b.n	8005a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a7e:	e008      	b.n	8005a92 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a84:	231a      	movs	r3, #26
 8005a86:	2218      	movs	r2, #24
 8005a88:	189b      	adds	r3, r3, r2
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
        break;
 8005a90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d100      	bne.n	8005a9a <UART_SetConfig+0x3b6>
 8005a98:	e090      	b.n	8005bbc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	005a      	lsls	r2, r3, #1
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	18d2      	adds	r2, r2, r3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0019      	movs	r1, r3
 8005aac:	0010      	movs	r0, r2
 8005aae:	f7fa fb47 	bl	8000140 <__udivsi3>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b0f      	cmp	r3, #15
 8005aba:	d921      	bls.n	8005b00 <UART_SetConfig+0x41c>
 8005abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	025b      	lsls	r3, r3, #9
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d21c      	bcs.n	8005b00 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	200e      	movs	r0, #14
 8005acc:	2418      	movs	r4, #24
 8005ace:	1903      	adds	r3, r0, r4
 8005ad0:	19db      	adds	r3, r3, r7
 8005ad2:	210f      	movs	r1, #15
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2207      	movs	r2, #7
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	b299      	uxth	r1, r3
 8005ae4:	1903      	adds	r3, r0, r4
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	1902      	adds	r2, r0, r4
 8005aea:	19d2      	adds	r2, r2, r7
 8005aec:	8812      	ldrh	r2, [r2, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1902      	adds	r2, r0, r4
 8005af8:	19d2      	adds	r2, r2, r7
 8005afa:	8812      	ldrh	r2, [r2, #0]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	e05d      	b.n	8005bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b00:	231a      	movs	r3, #26
 8005b02:	2218      	movs	r2, #24
 8005b04:	189b      	adds	r3, r3, r2
 8005b06:	19db      	adds	r3, r3, r7
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e056      	b.n	8005bbc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b0e:	231b      	movs	r3, #27
 8005b10:	2218      	movs	r2, #24
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d822      	bhi.n	8005b62 <UART_SetConfig+0x47e>
 8005b1c:	009a      	lsls	r2, r3, #2
 8005b1e:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <UART_SetConfig+0x504>)
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b26:	f7fe f9c9 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b2e:	e021      	b.n	8005b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe f9da 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8005b34:	0003      	movs	r3, r0
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b38:	e01c      	b.n	8005b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3a:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <UART_SetConfig+0x4f8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	4013      	ands	r3, r2
 8005b42:	d002      	beq.n	8005b4a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b44:	4b26      	ldr	r3, [pc, #152]	; (8005be0 <UART_SetConfig+0x4fc>)
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b48:	e014      	b.n	8005b74 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005b4a:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <UART_SetConfig+0x500>)
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b4e:	e011      	b.n	8005b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b50:	f7fe f904 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8005b54:	0003      	movs	r3, r0
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b58:	e00c      	b.n	8005b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b60:	e008      	b.n	8005b74 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b66:	231a      	movs	r3, #26
 8005b68:	2218      	movs	r2, #24
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	19db      	adds	r3, r3, r7
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
        break;
 8005b72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	085a      	lsrs	r2, r3, #1
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	18d2      	adds	r2, r2, r3
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0019      	movs	r1, r3
 8005b8a:	0010      	movs	r0, r2
 8005b8c:	f7fa fad8 	bl	8000140 <__udivsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d90a      	bls.n	8005bb0 <UART_SetConfig+0x4cc>
 8005b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	025b      	lsls	r3, r3, #9
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d205      	bcs.n	8005bb0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	e005      	b.n	8005bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb0:	231a      	movs	r3, #26
 8005bb2:	2218      	movs	r2, #24
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	19db      	adds	r3, r3, r7
 8005bb8:	2201      	movs	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bc8:	231a      	movs	r3, #26
 8005bca:	2218      	movs	r2, #24
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	19db      	adds	r3, r3, r7
 8005bd0:	781b      	ldrb	r3, [r3, #0]
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b00e      	add	sp, #56	; 0x38
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	003d0900 	.word	0x003d0900
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	080092d8 	.word	0x080092d8

08005bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a4a      	ldr	r2, [pc, #296]	; (8005d30 <UART_AdvFeatureConfig+0x144>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a43      	ldr	r2, [pc, #268]	; (8005d34 <UART_AdvFeatureConfig+0x148>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <UART_AdvFeatureConfig+0x14c>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2208      	movs	r2, #8
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <UART_AdvFeatureConfig+0x150>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2210      	movs	r2, #16
 8005c82:	4013      	ands	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a2c      	ldr	r2, [pc, #176]	; (8005d40 <UART_AdvFeatureConfig+0x154>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a25      	ldr	r2, [pc, #148]	; (8005d44 <UART_AdvFeatureConfig+0x158>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <UART_AdvFeatureConfig+0x15c>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	035b      	lsls	r3, r3, #13
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d10b      	bne.n	8005d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <UART_AdvFeatureConfig+0x160>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4a0e      	ldr	r2, [pc, #56]	; (8005d50 <UART_AdvFeatureConfig+0x164>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	fffdffff 	.word	0xfffdffff
 8005d34:	fffeffff 	.word	0xfffeffff
 8005d38:	fffbffff 	.word	0xfffbffff
 8005d3c:	ffff7fff 	.word	0xffff7fff
 8005d40:	ffffefff 	.word	0xffffefff
 8005d44:	ffffdfff 	.word	0xffffdfff
 8005d48:	ffefffff 	.word	0xffefffff
 8005d4c:	ff9fffff 	.word	0xff9fffff
 8005d50:	fff7ffff 	.word	0xfff7ffff

08005d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b092      	sub	sp, #72	; 0x48
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2284      	movs	r2, #132	; 0x84
 8005d60:	2100      	movs	r1, #0
 8005d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d64:	f7fc ffea 	bl	8002d3c <HAL_GetTick>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2208      	movs	r2, #8
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d12c      	bne.n	8005dd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7c:	2280      	movs	r2, #128	; 0x80
 8005d7e:	0391      	lsls	r1, r2, #14
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4a46      	ldr	r2, [pc, #280]	; (8005e9c <UART_CheckIdleState+0x148>)
 8005d84:	9200      	str	r2, [sp, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f000 f88c 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005d8c:	1e03      	subs	r3, r0, #0
 8005d8e:	d021      	beq.n	8005dd4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d90:	f3ef 8310 	mrs	r3, PRIMASK
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	438a      	bics	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2278      	movs	r2, #120	; 0x78
 8005dcc:	2100      	movs	r1, #0
 8005dce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e05f      	b.n	8005e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d146      	bne.n	8005e70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	2280      	movs	r2, #128	; 0x80
 8005de6:	03d1      	lsls	r1, r2, #15
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <UART_CheckIdleState+0x148>)
 8005dec:	9200      	str	r2, [sp, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f000 f858 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005df4:	1e03      	subs	r3, r0, #0
 8005df6:	d03b      	beq.n	8005e70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	637b      	str	r3, [r7, #52]	; 0x34
 8005e02:	2301      	movs	r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4921      	ldr	r1, [pc, #132]	; (8005ea0 <UART_CheckIdleState+0x14c>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
 8005e34:	2301      	movs	r3, #1
 8005e36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	2120      	movs	r1, #32
 8005e62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2278      	movs	r2, #120	; 0x78
 8005e68:	2100      	movs	r1, #0
 8005e6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e011      	b.n	8005e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	2120      	movs	r1, #32
 8005e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2278      	movs	r2, #120	; 0x78
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b010      	add	sp, #64	; 0x40
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	01ffffff 	.word	0x01ffffff
 8005ea0:	fffffedf 	.word	0xfffffedf

08005ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	1dfb      	adds	r3, r7, #7
 8005eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb4:	e04b      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	d048      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fc ff3e 	bl	8002d3c <HAL_GetTick>
 8005ec0:	0002      	movs	r2, r0
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e04b      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d035      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d111      	bne.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 f906 	bl	800610c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2284      	movs	r2, #132	; 0x84
 8005f04:	2108      	movs	r1, #8
 8005f06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2278      	movs	r2, #120	; 0x78
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e02c      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	401a      	ands	r2, r3
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d112      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2280      	movs	r2, #128	; 0x80
 8005f2e:	0112      	lsls	r2, r2, #4
 8005f30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 f8e9 	bl	800610c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2284      	movs	r2, #132	; 0x84
 8005f3e:	2120      	movs	r1, #32
 8005f40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2278      	movs	r2, #120	; 0x78
 8005f46:	2100      	movs	r1, #0
 8005f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e00f      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	425a      	negs	r2, r3
 8005f5e:	4153      	adcs	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	001a      	movs	r2, r3
 8005f64:	1dfb      	adds	r3, r7, #7
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d0a4      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b090      	sub	sp, #64	; 0x40
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	1dbb      	adds	r3, r7, #6
 8005f84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1dba      	adds	r2, r7, #6
 8005f90:	2158      	movs	r1, #88	; 0x58
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1dba      	adds	r2, r7, #6
 8005f9a:	215a      	movs	r1, #90	; 0x5a
 8005f9c:	8812      	ldrh	r2, [r2, #0]
 8005f9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	015b      	lsls	r3, r3, #5
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d10d      	bne.n	8005fce <UART_Start_Receive_IT+0x56>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <UART_Start_Receive_IT+0x4c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	225c      	movs	r2, #92	; 0x5c
 8005fbe:	4950      	ldr	r1, [pc, #320]	; (8006100 <UART_Start_Receive_IT+0x188>)
 8005fc0:	5299      	strh	r1, [r3, r2]
 8005fc2:	e02e      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	225c      	movs	r2, #92	; 0x5c
 8005fc8:	21ff      	movs	r1, #255	; 0xff
 8005fca:	5299      	strh	r1, [r3, r2]
 8005fcc:	e029      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <UART_Start_Receive_IT+0x7a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <UART_Start_Receive_IT+0x70>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	225c      	movs	r2, #92	; 0x5c
 8005fe2:	21ff      	movs	r1, #255	; 0xff
 8005fe4:	5299      	strh	r1, [r3, r2]
 8005fe6:	e01c      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	225c      	movs	r2, #92	; 0x5c
 8005fec:	217f      	movs	r1, #127	; 0x7f
 8005fee:	5299      	strh	r1, [r3, r2]
 8005ff0:	e017      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	055b      	lsls	r3, r3, #21
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d10d      	bne.n	800601a <UART_Start_Receive_IT+0xa2>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <UART_Start_Receive_IT+0x98>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	225c      	movs	r2, #92	; 0x5c
 800600a:	217f      	movs	r1, #127	; 0x7f
 800600c:	5299      	strh	r1, [r3, r2]
 800600e:	e008      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	225c      	movs	r2, #92	; 0x5c
 8006014:	213f      	movs	r1, #63	; 0x3f
 8006016:	5299      	strh	r1, [r3, r2]
 8006018:	e003      	b.n	8006022 <UART_Start_Receive_IT+0xaa>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	225c      	movs	r2, #92	; 0x5c
 800601e:	2100      	movs	r1, #0
 8006020:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2284      	movs	r2, #132	; 0x84
 8006026:	2100      	movs	r1, #0
 8006028:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2280      	movs	r2, #128	; 0x80
 800602e:	2122      	movs	r1, #34	; 0x22
 8006030:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006032:	f3ef 8310 	mrs	r3, PRIMASK
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	2301      	movs	r3, #1
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	f383 8810 	msr	PRIMASK, r3
}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	f383 8810 	msr	PRIMASK, r3
}
 8006062:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	015b      	lsls	r3, r3, #5
 800606c:	429a      	cmp	r2, r3
 800606e:	d107      	bne.n	8006080 <UART_Start_Receive_IT+0x108>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4a22      	ldr	r2, [pc, #136]	; (8006104 <UART_Start_Receive_IT+0x18c>)
 800607c:	669a      	str	r2, [r3, #104]	; 0x68
 800607e:	e002      	b.n	8006086 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a21      	ldr	r2, [pc, #132]	; (8006108 <UART_Start_Receive_IT+0x190>)
 8006084:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d019      	beq.n	80060c2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608e:	f3ef 8310 	mrs	r3, PRIMASK
 8006092:	61fb      	str	r3, [r7, #28]
  return(result);
 8006094:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
 8006098:	2301      	movs	r3, #1
 800609a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2190      	movs	r1, #144	; 0x90
 80060b0:	0049      	lsls	r1, r1, #1
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	e018      	b.n	80060f4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	613b      	str	r3, [r7, #16]
  return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2120      	movs	r1, #32
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	0018      	movs	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b010      	add	sp, #64	; 0x40
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	000001ff 	.word	0x000001ff
 8006104:	0800641d 	.word	0x0800641d
 8006108:	08006259 	.word	0x08006259

0800610c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08e      	sub	sp, #56	; 0x38
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006114:	f3ef 8310 	mrs	r3, PRIMASK
 8006118:	617b      	str	r3, [r7, #20]
  return(result);
 800611a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	2301      	movs	r3, #1
 8006120:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f383 8810 	msr	PRIMASK, r3
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4926      	ldr	r1, [pc, #152]	; (80061d0 <UART_EndRxTransfer+0xc4>)
 8006136:	400a      	ands	r2, r1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f383 8810 	msr	PRIMASK, r3
}
 8006144:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006146:	f3ef 8310 	mrs	r3, PRIMASK
 800614a:	623b      	str	r3, [r7, #32]
  return(result);
 800614c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	2301      	movs	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	f383 8810 	msr	PRIMASK, r3
}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2101      	movs	r1, #1
 8006168:	438a      	bics	r2, r1
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	f383 8810 	msr	PRIMASK, r3
}
 8006176:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	2b01      	cmp	r3, #1
 800617e:	d118      	bne.n	80061b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006180:	f3ef 8310 	mrs	r3, PRIMASK
 8006184:	60bb      	str	r3, [r7, #8]
  return(result);
 8006186:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618a:	2301      	movs	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	46c0      	nop			; (mov r8, r8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2110      	movs	r1, #16
 80061a2:	438a      	bics	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f383 8810 	msr	PRIMASK, r3
}
 80061b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	2120      	movs	r1, #32
 80061b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b00e      	add	sp, #56	; 0x38
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	fffffedf 	.word	0xfffffedf

080061d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	225a      	movs	r2, #90	; 0x5a
 80061e6:	2100      	movs	r1, #0
 80061e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2252      	movs	r2, #82	; 0x52
 80061ee:	2100      	movs	r1, #0
 80061f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7ff fa61 	bl	80056bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}

08006202 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620a:	f3ef 8310 	mrs	r3, PRIMASK
 800620e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006210:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2140      	movs	r1, #64	; 0x40
 800622c:	438a      	bics	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f383 8810 	msr	PRIMASK, r3
}
 800623a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0018      	movs	r0, r3
 800624c:	f7ff fa2e 	bl	80056ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b006      	add	sp, #24
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b094      	sub	sp, #80	; 0x50
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006260:	204e      	movs	r0, #78	; 0x4e
 8006262:	183b      	adds	r3, r7, r0
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	215c      	movs	r1, #92	; 0x5c
 8006268:	5a52      	ldrh	r2, [r2, r1]
 800626a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	589b      	ldr	r3, [r3, r2]
 8006272:	2b22      	cmp	r3, #34	; 0x22
 8006274:	d000      	beq.n	8006278 <UART_RxISR_8BIT+0x20>
 8006276:	e0bf      	b.n	80063f8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627e:	214c      	movs	r1, #76	; 0x4c
 8006280:	187b      	adds	r3, r7, r1
 8006282:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006284:	187b      	adds	r3, r7, r1
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	183b      	adds	r3, r7, r0
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b2d9      	uxtb	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	400a      	ands	r2, r1
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	225a      	movs	r2, #90	; 0x5a
 80062a8:	5a9b      	ldrh	r3, [r3, r2]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b299      	uxth	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	225a      	movs	r2, #90	; 0x5a
 80062b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	225a      	movs	r2, #90	; 0x5a
 80062ba:	5a9b      	ldrh	r3, [r3, r2]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d000      	beq.n	80062c4 <UART_RxISR_8BIT+0x6c>
 80062c2:	e0a1      	b.n	8006408 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c4:	f3ef 8310 	mrs	r3, PRIMASK
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ce:	2301      	movs	r3, #1
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	494a      	ldr	r1, [pc, #296]	; (8006410 <UART_RxISR_8BIT+0x1b8>)
 80062e6:	400a      	ands	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f6:	f3ef 8310 	mrs	r3, PRIMASK
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006300:	2301      	movs	r3, #1
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	f383 8810 	msr	PRIMASK, r3
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2101      	movs	r1, #1
 8006318:	438a      	bics	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	2120      	movs	r1, #32
 800632e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a34      	ldr	r2, [pc, #208]	; (8006414 <UART_RxISR_8BIT+0x1bc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01f      	beq.n	8006386 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	4013      	ands	r3, r2
 8006352:	d018      	beq.n	8006386 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	61bb      	str	r3, [r7, #24]
  return(result);
 800635a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800635c:	643b      	str	r3, [r7, #64]	; 0x40
 800635e:	2301      	movs	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4928      	ldr	r1, [pc, #160]	; (8006418 <UART_RxISR_8BIT+0x1c0>)
 8006376:	400a      	ands	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	2b01      	cmp	r3, #1
 800638c:	d12f      	bne.n	80063ee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006394:	f3ef 8310 	mrs	r3, PRIMASK
 8006398:	60fb      	str	r3, [r7, #12]
  return(result);
 800639a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639e:	2301      	movs	r3, #1
 80063a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f383 8810 	msr	PRIMASK, r3
}
 80063a8:	46c0      	nop			; (mov r8, r8)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2110      	movs	r1, #16
 80063b6:	438a      	bics	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f383 8810 	msr	PRIMASK, r3
}
 80063c4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2210      	movs	r2, #16
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d103      	bne.n	80063dc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2210      	movs	r2, #16
 80063da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2258      	movs	r2, #88	; 0x58
 80063e0:	5a9a      	ldrh	r2, [r3, r2]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0011      	movs	r1, r2
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7ff f970 	bl	80056cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063ec:	e00c      	b.n	8006408 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fc f9e3 	bl	80027bc <HAL_UART_RxCpltCallback>
}
 80063f6:	e007      	b.n	8006408 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2108      	movs	r1, #8
 8006404:	430a      	orrs	r2, r1
 8006406:	619a      	str	r2, [r3, #24]
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b014      	add	sp, #80	; 0x50
 800640e:	bd80      	pop	{r7, pc}
 8006410:	fffffedf 	.word	0xfffffedf
 8006414:	40004800 	.word	0x40004800
 8006418:	fbffffff 	.word	0xfbffffff

0800641c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b094      	sub	sp, #80	; 0x50
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006424:	204e      	movs	r0, #78	; 0x4e
 8006426:	183b      	adds	r3, r7, r0
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	215c      	movs	r1, #92	; 0x5c
 800642c:	5a52      	ldrh	r2, [r2, r1]
 800642e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	589b      	ldr	r3, [r3, r2]
 8006436:	2b22      	cmp	r3, #34	; 0x22
 8006438:	d000      	beq.n	800643c <UART_RxISR_16BIT+0x20>
 800643a:	e0bf      	b.n	80065bc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006442:	214c      	movs	r1, #76	; 0x4c
 8006444:	187b      	adds	r3, r7, r1
 8006446:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800644e:	187b      	adds	r3, r7, r1
 8006450:	183a      	adds	r2, r7, r0
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	8812      	ldrh	r2, [r2, #0]
 8006456:	4013      	ands	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	225a      	movs	r2, #90	; 0x5a
 800646c:	5a9b      	ldrh	r3, [r3, r2]
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b299      	uxth	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	225a      	movs	r2, #90	; 0x5a
 8006478:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	225a      	movs	r2, #90	; 0x5a
 800647e:	5a9b      	ldrh	r3, [r3, r2]
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d000      	beq.n	8006488 <UART_RxISR_16BIT+0x6c>
 8006486:	e0a1      	b.n	80065cc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006488:	f3ef 8310 	mrs	r3, PRIMASK
 800648c:	623b      	str	r3, [r7, #32]
  return(result);
 800648e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	2301      	movs	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	f383 8810 	msr	PRIMASK, r3
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	494a      	ldr	r1, [pc, #296]	; (80065d4 <UART_RxISR_16BIT+0x1b8>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f383 8810 	msr	PRIMASK, r3
}
 80064b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ba:	f3ef 8310 	mrs	r3, PRIMASK
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
 80064c4:	2301      	movs	r3, #1
 80064c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2101      	movs	r1, #1
 80064dc:	438a      	bics	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	f383 8810 	msr	PRIMASK, r3
}
 80064ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	2120      	movs	r1, #32
 80064f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <UART_RxISR_16BIT+0x1bc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01f      	beq.n	800654a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	4013      	ands	r3, r2
 8006516:	d018      	beq.n	800654a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	617b      	str	r3, [r7, #20]
  return(result);
 800651e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006522:	2301      	movs	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4928      	ldr	r1, [pc, #160]	; (80065dc <UART_RxISR_16BIT+0x1c0>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654e:	2b01      	cmp	r3, #1
 8006550:	d12f      	bne.n	80065b2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006558:	f3ef 8310 	mrs	r3, PRIMASK
 800655c:	60bb      	str	r3, [r7, #8]
  return(result);
 800655e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006560:	63bb      	str	r3, [r7, #56]	; 0x38
 8006562:	2301      	movs	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f383 8810 	msr	PRIMASK, r3
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2110      	movs	r1, #16
 800657a:	438a      	bics	r2, r1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f383 8810 	msr	PRIMASK, r3
}
 8006588:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2210      	movs	r2, #16
 8006592:	4013      	ands	r3, r2
 8006594:	2b10      	cmp	r3, #16
 8006596:	d103      	bne.n	80065a0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2210      	movs	r2, #16
 800659e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2258      	movs	r2, #88	; 0x58
 80065a4:	5a9a      	ldrh	r2, [r3, r2]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0011      	movs	r1, r2
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7ff f88e 	bl	80056cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065b0:	e00c      	b.n	80065cc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fc f901 	bl	80027bc <HAL_UART_RxCpltCallback>
}
 80065ba:	e007      	b.n	80065cc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2108      	movs	r1, #8
 80065c8:	430a      	orrs	r2, r1
 80065ca:	619a      	str	r2, [r3, #24]
}
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b014      	add	sp, #80	; 0x50
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	fffffedf 	.word	0xfffffedf
 80065d8:	40004800 	.word	0x40004800
 80065dc:	fbffffff 	.word	0xfbffffff

080065e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e8:	46c0      	nop			; (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b002      	add	sp, #8
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <__assert_func>:
 80065f0:	b530      	push	{r4, r5, lr}
 80065f2:	0014      	movs	r4, r2
 80065f4:	001a      	movs	r2, r3
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <__assert_func+0x2c>)
 80065f8:	0005      	movs	r5, r0
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b085      	sub	sp, #20
 80065fe:	68d8      	ldr	r0, [r3, #12]
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <__assert_func+0x30>)
 8006602:	2c00      	cmp	r4, #0
 8006604:	d101      	bne.n	800660a <__assert_func+0x1a>
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <__assert_func+0x34>)
 8006608:	001c      	movs	r4, r3
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	9100      	str	r1, [sp, #0]
 800660e:	002b      	movs	r3, r5
 8006610:	4905      	ldr	r1, [pc, #20]	; (8006628 <__assert_func+0x38>)
 8006612:	9402      	str	r4, [sp, #8]
 8006614:	f000 f810 	bl	8006638 <fiprintf>
 8006618:	f000 fef0 	bl	80073fc <abort>
 800661c:	2000000c 	.word	0x2000000c
 8006620:	080092fc 	.word	0x080092fc
 8006624:	08009337 	.word	0x08009337
 8006628:	08009309 	.word	0x08009309

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	2000000c 	.word	0x2000000c

08006638 <fiprintf>:
 8006638:	b40e      	push	{r1, r2, r3}
 800663a:	b503      	push	{r0, r1, lr}
 800663c:	0001      	movs	r1, r0
 800663e:	ab03      	add	r3, sp, #12
 8006640:	4804      	ldr	r0, [pc, #16]	; (8006654 <fiprintf+0x1c>)
 8006642:	cb04      	ldmia	r3!, {r2}
 8006644:	6800      	ldr	r0, [r0, #0]
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	f000 f862 	bl	8006710 <_vfiprintf_r>
 800664c:	b002      	add	sp, #8
 800664e:	bc08      	pop	{r3}
 8006650:	b003      	add	sp, #12
 8006652:	4718      	bx	r3
 8006654:	2000000c 	.word	0x2000000c

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	2600      	movs	r6, #0
 800665c:	4d0c      	ldr	r5, [pc, #48]	; (8006690 <__libc_init_array+0x38>)
 800665e:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	2600      	movs	r6, #0
 800666a:	f002 fdbf 	bl	80091ec <_init>
 800666e:	4d0a      	ldr	r5, [pc, #40]	; (8006698 <__libc_init_array+0x40>)
 8006670:	4c0a      	ldr	r4, [pc, #40]	; (800669c <__libc_init_array+0x44>)
 8006672:	1b64      	subs	r4, r4, r5
 8006674:	10a4      	asrs	r4, r4, #2
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	00b3      	lsls	r3, r6, #2
 800667e:	58eb      	ldr	r3, [r5, r3]
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	00b3      	lsls	r3, r6, #2
 8006688:	58eb      	ldr	r3, [r5, r3]
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	080096e0 	.word	0x080096e0
 8006694:	080096e0 	.word	0x080096e0
 8006698:	080096e0 	.word	0x080096e0
 800669c:	080096e4 	.word	0x080096e4

080066a0 <memcpy>:
 80066a0:	2300      	movs	r3, #0
 80066a2:	b510      	push	{r4, lr}
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d100      	bne.n	80066aa <memcpy+0xa>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	5ccc      	ldrb	r4, [r1, r3]
 80066ac:	54c4      	strb	r4, [r0, r3]
 80066ae:	3301      	adds	r3, #1
 80066b0:	e7f8      	b.n	80066a4 <memcpy+0x4>

080066b2 <memset>:
 80066b2:	0003      	movs	r3, r0
 80066b4:	1882      	adds	r2, r0, r2
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d100      	bne.n	80066bc <memset+0xa>
 80066ba:	4770      	bx	lr
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	e7f9      	b.n	80066b6 <memset+0x4>

080066c2 <__sfputc_r>:
 80066c2:	6893      	ldr	r3, [r2, #8]
 80066c4:	b510      	push	{r4, lr}
 80066c6:	3b01      	subs	r3, #1
 80066c8:	6093      	str	r3, [r2, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da04      	bge.n	80066d8 <__sfputc_r+0x16>
 80066ce:	6994      	ldr	r4, [r2, #24]
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	db07      	blt.n	80066e4 <__sfputc_r+0x22>
 80066d4:	290a      	cmp	r1, #10
 80066d6:	d005      	beq.n	80066e4 <__sfputc_r+0x22>
 80066d8:	6813      	ldr	r3, [r2, #0]
 80066da:	1c58      	adds	r0, r3, #1
 80066dc:	6010      	str	r0, [r2, #0]
 80066de:	7019      	strb	r1, [r3, #0]
 80066e0:	0008      	movs	r0, r1
 80066e2:	bd10      	pop	{r4, pc}
 80066e4:	f000 fdbc 	bl	8007260 <__swbuf_r>
 80066e8:	0001      	movs	r1, r0
 80066ea:	e7f9      	b.n	80066e0 <__sfputc_r+0x1e>

080066ec <__sfputs_r>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	0006      	movs	r6, r0
 80066f0:	000f      	movs	r7, r1
 80066f2:	0014      	movs	r4, r2
 80066f4:	18d5      	adds	r5, r2, r3
 80066f6:	42ac      	cmp	r4, r5
 80066f8:	d101      	bne.n	80066fe <__sfputs_r+0x12>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e007      	b.n	800670e <__sfputs_r+0x22>
 80066fe:	7821      	ldrb	r1, [r4, #0]
 8006700:	003a      	movs	r2, r7
 8006702:	0030      	movs	r0, r6
 8006704:	f7ff ffdd 	bl	80066c2 <__sfputc_r>
 8006708:	3401      	adds	r4, #1
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	d1f3      	bne.n	80066f6 <__sfputs_r+0xa>
 800670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006710 <_vfiprintf_r>:
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	b0a1      	sub	sp, #132	; 0x84
 8006714:	0006      	movs	r6, r0
 8006716:	000c      	movs	r4, r1
 8006718:	001f      	movs	r7, r3
 800671a:	9203      	str	r2, [sp, #12]
 800671c:	2800      	cmp	r0, #0
 800671e:	d004      	beq.n	800672a <_vfiprintf_r+0x1a>
 8006720:	6983      	ldr	r3, [r0, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <_vfiprintf_r+0x1a>
 8006726:	f001 fe43 	bl	80083b0 <__sinit>
 800672a:	4b8e      	ldr	r3, [pc, #568]	; (8006964 <_vfiprintf_r+0x254>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d11c      	bne.n	800676a <_vfiprintf_r+0x5a>
 8006730:	6874      	ldr	r4, [r6, #4]
 8006732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d405      	bmi.n	8006744 <_vfiprintf_r+0x34>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	059b      	lsls	r3, r3, #22
 800673c:	d402      	bmi.n	8006744 <_vfiprintf_r+0x34>
 800673e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006740:	f001 fedb 	bl	80084fa <__retarget_lock_acquire_recursive>
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	071b      	lsls	r3, r3, #28
 8006748:	d502      	bpl.n	8006750 <_vfiprintf_r+0x40>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11d      	bne.n	800678c <_vfiprintf_r+0x7c>
 8006750:	0021      	movs	r1, r4
 8006752:	0030      	movs	r0, r6
 8006754:	f000 fdda 	bl	800730c <__swsetup_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d017      	beq.n	800678c <_vfiprintf_r+0x7c>
 800675c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	d50d      	bpl.n	800677e <_vfiprintf_r+0x6e>
 8006762:	2001      	movs	r0, #1
 8006764:	4240      	negs	r0, r0
 8006766:	b021      	add	sp, #132	; 0x84
 8006768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676a:	4b7f      	ldr	r3, [pc, #508]	; (8006968 <_vfiprintf_r+0x258>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d101      	bne.n	8006774 <_vfiprintf_r+0x64>
 8006770:	68b4      	ldr	r4, [r6, #8]
 8006772:	e7de      	b.n	8006732 <_vfiprintf_r+0x22>
 8006774:	4b7d      	ldr	r3, [pc, #500]	; (800696c <_vfiprintf_r+0x25c>)
 8006776:	429c      	cmp	r4, r3
 8006778:	d1db      	bne.n	8006732 <_vfiprintf_r+0x22>
 800677a:	68f4      	ldr	r4, [r6, #12]
 800677c:	e7d9      	b.n	8006732 <_vfiprintf_r+0x22>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	059b      	lsls	r3, r3, #22
 8006782:	d4ee      	bmi.n	8006762 <_vfiprintf_r+0x52>
 8006784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006786:	f001 feb9 	bl	80084fc <__retarget_lock_release_recursive>
 800678a:	e7ea      	b.n	8006762 <_vfiprintf_r+0x52>
 800678c:	2300      	movs	r3, #0
 800678e:	ad08      	add	r5, sp, #32
 8006790:	616b      	str	r3, [r5, #20]
 8006792:	3320      	adds	r3, #32
 8006794:	766b      	strb	r3, [r5, #25]
 8006796:	3310      	adds	r3, #16
 8006798:	76ab      	strb	r3, [r5, #26]
 800679a:	9707      	str	r7, [sp, #28]
 800679c:	9f03      	ldr	r7, [sp, #12]
 800679e:	783b      	ldrb	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <_vfiprintf_r+0x98>
 80067a4:	2b25      	cmp	r3, #37	; 0x25
 80067a6:	d14e      	bne.n	8006846 <_vfiprintf_r+0x136>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	1afb      	subs	r3, r7, r3
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	429f      	cmp	r7, r3
 80067b2:	d00d      	beq.n	80067d0 <_vfiprintf_r+0xc0>
 80067b4:	9b05      	ldr	r3, [sp, #20]
 80067b6:	0021      	movs	r1, r4
 80067b8:	0030      	movs	r0, r6
 80067ba:	9a03      	ldr	r2, [sp, #12]
 80067bc:	f7ff ff96 	bl	80066ec <__sfputs_r>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d100      	bne.n	80067c6 <_vfiprintf_r+0xb6>
 80067c4:	e0b5      	b.n	8006932 <_vfiprintf_r+0x222>
 80067c6:	696a      	ldr	r2, [r5, #20]
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	4694      	mov	ip, r2
 80067cc:	4463      	add	r3, ip
 80067ce:	616b      	str	r3, [r5, #20]
 80067d0:	783b      	ldrb	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d100      	bne.n	80067d8 <_vfiprintf_r+0xc8>
 80067d6:	e0ac      	b.n	8006932 <_vfiprintf_r+0x222>
 80067d8:	2201      	movs	r2, #1
 80067da:	1c7b      	adds	r3, r7, #1
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	4252      	negs	r2, r2
 80067e2:	606a      	str	r2, [r5, #4]
 80067e4:	a904      	add	r1, sp, #16
 80067e6:	3254      	adds	r2, #84	; 0x54
 80067e8:	1852      	adds	r2, r2, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	60eb      	str	r3, [r5, #12]
 80067ee:	60ab      	str	r3, [r5, #8]
 80067f0:	7013      	strb	r3, [r2, #0]
 80067f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	2205      	movs	r2, #5
 80067f8:	7819      	ldrb	r1, [r3, #0]
 80067fa:	485d      	ldr	r0, [pc, #372]	; (8006970 <_vfiprintf_r+0x260>)
 80067fc:	f001 fef6 	bl	80085ec <memchr>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	1c5f      	adds	r7, r3, #1
 8006804:	2800      	cmp	r0, #0
 8006806:	d120      	bne.n	800684a <_vfiprintf_r+0x13a>
 8006808:	682a      	ldr	r2, [r5, #0]
 800680a:	06d3      	lsls	r3, r2, #27
 800680c:	d504      	bpl.n	8006818 <_vfiprintf_r+0x108>
 800680e:	2353      	movs	r3, #83	; 0x53
 8006810:	a904      	add	r1, sp, #16
 8006812:	185b      	adds	r3, r3, r1
 8006814:	2120      	movs	r1, #32
 8006816:	7019      	strb	r1, [r3, #0]
 8006818:	0713      	lsls	r3, r2, #28
 800681a:	d504      	bpl.n	8006826 <_vfiprintf_r+0x116>
 800681c:	2353      	movs	r3, #83	; 0x53
 800681e:	a904      	add	r1, sp, #16
 8006820:	185b      	adds	r3, r3, r1
 8006822:	212b      	movs	r1, #43	; 0x2b
 8006824:	7019      	strb	r1, [r3, #0]
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b2a      	cmp	r3, #42	; 0x2a
 800682c:	d016      	beq.n	800685c <_vfiprintf_r+0x14c>
 800682e:	2100      	movs	r1, #0
 8006830:	68eb      	ldr	r3, [r5, #12]
 8006832:	9f03      	ldr	r7, [sp, #12]
 8006834:	783a      	ldrb	r2, [r7, #0]
 8006836:	1c78      	adds	r0, r7, #1
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	4684      	mov	ip, r0
 800683c:	2a09      	cmp	r2, #9
 800683e:	d94f      	bls.n	80068e0 <_vfiprintf_r+0x1d0>
 8006840:	2900      	cmp	r1, #0
 8006842:	d111      	bne.n	8006868 <_vfiprintf_r+0x158>
 8006844:	e017      	b.n	8006876 <_vfiprintf_r+0x166>
 8006846:	3701      	adds	r7, #1
 8006848:	e7a9      	b.n	800679e <_vfiprintf_r+0x8e>
 800684a:	4b49      	ldr	r3, [pc, #292]	; (8006970 <_vfiprintf_r+0x260>)
 800684c:	682a      	ldr	r2, [r5, #0]
 800684e:	1ac0      	subs	r0, r0, r3
 8006850:	2301      	movs	r3, #1
 8006852:	4083      	lsls	r3, r0
 8006854:	4313      	orrs	r3, r2
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	9703      	str	r7, [sp, #12]
 800685a:	e7cb      	b.n	80067f4 <_vfiprintf_r+0xe4>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	1d19      	adds	r1, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	9107      	str	r1, [sp, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	db01      	blt.n	800686c <_vfiprintf_r+0x15c>
 8006868:	930b      	str	r3, [sp, #44]	; 0x2c
 800686a:	e004      	b.n	8006876 <_vfiprintf_r+0x166>
 800686c:	425b      	negs	r3, r3
 800686e:	60eb      	str	r3, [r5, #12]
 8006870:	2302      	movs	r3, #2
 8006872:	4313      	orrs	r3, r2
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	783b      	ldrb	r3, [r7, #0]
 8006878:	2b2e      	cmp	r3, #46	; 0x2e
 800687a:	d10a      	bne.n	8006892 <_vfiprintf_r+0x182>
 800687c:	787b      	ldrb	r3, [r7, #1]
 800687e:	2b2a      	cmp	r3, #42	; 0x2a
 8006880:	d137      	bne.n	80068f2 <_vfiprintf_r+0x1e2>
 8006882:	9b07      	ldr	r3, [sp, #28]
 8006884:	3702      	adds	r7, #2
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	9207      	str	r2, [sp, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db2d      	blt.n	80068ec <_vfiprintf_r+0x1dc>
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
 8006892:	2203      	movs	r2, #3
 8006894:	7839      	ldrb	r1, [r7, #0]
 8006896:	4837      	ldr	r0, [pc, #220]	; (8006974 <_vfiprintf_r+0x264>)
 8006898:	f001 fea8 	bl	80085ec <memchr>
 800689c:	2800      	cmp	r0, #0
 800689e:	d007      	beq.n	80068b0 <_vfiprintf_r+0x1a0>
 80068a0:	4b34      	ldr	r3, [pc, #208]	; (8006974 <_vfiprintf_r+0x264>)
 80068a2:	682a      	ldr	r2, [r5, #0]
 80068a4:	1ac0      	subs	r0, r0, r3
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	4083      	lsls	r3, r0
 80068aa:	4313      	orrs	r3, r2
 80068ac:	3701      	adds	r7, #1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	7839      	ldrb	r1, [r7, #0]
 80068b2:	1c7b      	adds	r3, r7, #1
 80068b4:	2206      	movs	r2, #6
 80068b6:	4830      	ldr	r0, [pc, #192]	; (8006978 <_vfiprintf_r+0x268>)
 80068b8:	9303      	str	r3, [sp, #12]
 80068ba:	7629      	strb	r1, [r5, #24]
 80068bc:	f001 fe96 	bl	80085ec <memchr>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d045      	beq.n	8006950 <_vfiprintf_r+0x240>
 80068c4:	4b2d      	ldr	r3, [pc, #180]	; (800697c <_vfiprintf_r+0x26c>)
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d127      	bne.n	800691a <_vfiprintf_r+0x20a>
 80068ca:	2207      	movs	r2, #7
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	3307      	adds	r3, #7
 80068d0:	4393      	bics	r3, r2
 80068d2:	3308      	adds	r3, #8
 80068d4:	9307      	str	r3, [sp, #28]
 80068d6:	696b      	ldr	r3, [r5, #20]
 80068d8:	9a04      	ldr	r2, [sp, #16]
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	616b      	str	r3, [r5, #20]
 80068de:	e75d      	b.n	800679c <_vfiprintf_r+0x8c>
 80068e0:	210a      	movs	r1, #10
 80068e2:	434b      	muls	r3, r1
 80068e4:	4667      	mov	r7, ip
 80068e6:	189b      	adds	r3, r3, r2
 80068e8:	3909      	subs	r1, #9
 80068ea:	e7a3      	b.n	8006834 <_vfiprintf_r+0x124>
 80068ec:	2301      	movs	r3, #1
 80068ee:	425b      	negs	r3, r3
 80068f0:	e7ce      	b.n	8006890 <_vfiprintf_r+0x180>
 80068f2:	2300      	movs	r3, #0
 80068f4:	001a      	movs	r2, r3
 80068f6:	3701      	adds	r7, #1
 80068f8:	606b      	str	r3, [r5, #4]
 80068fa:	7839      	ldrb	r1, [r7, #0]
 80068fc:	1c78      	adds	r0, r7, #1
 80068fe:	3930      	subs	r1, #48	; 0x30
 8006900:	4684      	mov	ip, r0
 8006902:	2909      	cmp	r1, #9
 8006904:	d903      	bls.n	800690e <_vfiprintf_r+0x1fe>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0c3      	beq.n	8006892 <_vfiprintf_r+0x182>
 800690a:	9209      	str	r2, [sp, #36]	; 0x24
 800690c:	e7c1      	b.n	8006892 <_vfiprintf_r+0x182>
 800690e:	230a      	movs	r3, #10
 8006910:	435a      	muls	r2, r3
 8006912:	4667      	mov	r7, ip
 8006914:	1852      	adds	r2, r2, r1
 8006916:	3b09      	subs	r3, #9
 8006918:	e7ef      	b.n	80068fa <_vfiprintf_r+0x1ea>
 800691a:	ab07      	add	r3, sp, #28
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	0022      	movs	r2, r4
 8006920:	0029      	movs	r1, r5
 8006922:	0030      	movs	r0, r6
 8006924:	4b16      	ldr	r3, [pc, #88]	; (8006980 <_vfiprintf_r+0x270>)
 8006926:	f000 f8d7 	bl	8006ad8 <_printf_float>
 800692a:	9004      	str	r0, [sp, #16]
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	3301      	adds	r3, #1
 8006930:	d1d1      	bne.n	80068d6 <_vfiprintf_r+0x1c6>
 8006932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006934:	07db      	lsls	r3, r3, #31
 8006936:	d405      	bmi.n	8006944 <_vfiprintf_r+0x234>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	059b      	lsls	r3, r3, #22
 800693c:	d402      	bmi.n	8006944 <_vfiprintf_r+0x234>
 800693e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006940:	f001 fddc 	bl	80084fc <__retarget_lock_release_recursive>
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	065b      	lsls	r3, r3, #25
 8006948:	d500      	bpl.n	800694c <_vfiprintf_r+0x23c>
 800694a:	e70a      	b.n	8006762 <_vfiprintf_r+0x52>
 800694c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800694e:	e70a      	b.n	8006766 <_vfiprintf_r+0x56>
 8006950:	ab07      	add	r3, sp, #28
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	0022      	movs	r2, r4
 8006956:	0029      	movs	r1, r5
 8006958:	0030      	movs	r0, r6
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <_vfiprintf_r+0x270>)
 800695c:	f000 fb6e 	bl	800703c <_printf_i>
 8006960:	e7e3      	b.n	800692a <_vfiprintf_r+0x21a>
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	08009434 	.word	0x08009434
 8006968:	08009454 	.word	0x08009454
 800696c:	08009414 	.word	0x08009414
 8006970:	0800933c 	.word	0x0800933c
 8006974:	08009342 	.word	0x08009342
 8006978:	08009346 	.word	0x08009346
 800697c:	08006ad9 	.word	0x08006ad9
 8006980:	080066ed 	.word	0x080066ed

08006984 <__cvt>:
 8006984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006986:	001e      	movs	r6, r3
 8006988:	2300      	movs	r3, #0
 800698a:	0014      	movs	r4, r2
 800698c:	b08b      	sub	sp, #44	; 0x2c
 800698e:	429e      	cmp	r6, r3
 8006990:	da04      	bge.n	800699c <__cvt+0x18>
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	0609      	lsls	r1, r1, #24
 8006996:	1873      	adds	r3, r6, r1
 8006998:	001e      	movs	r6, r3
 800699a:	232d      	movs	r3, #45	; 0x2d
 800699c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800699e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069a0:	7013      	strb	r3, [r2, #0]
 80069a2:	2320      	movs	r3, #32
 80069a4:	2203      	movs	r2, #3
 80069a6:	439f      	bics	r7, r3
 80069a8:	2f46      	cmp	r7, #70	; 0x46
 80069aa:	d007      	beq.n	80069bc <__cvt+0x38>
 80069ac:	003b      	movs	r3, r7
 80069ae:	3b45      	subs	r3, #69	; 0x45
 80069b0:	4259      	negs	r1, r3
 80069b2:	414b      	adcs	r3, r1
 80069b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069b6:	3a01      	subs	r2, #1
 80069b8:	18cb      	adds	r3, r1, r3
 80069ba:	9310      	str	r3, [sp, #64]	; 0x40
 80069bc:	ab09      	add	r3, sp, #36	; 0x24
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	ab08      	add	r3, sp, #32
 80069c2:	9303      	str	r3, [sp, #12]
 80069c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069c6:	9200      	str	r2, [sp, #0]
 80069c8:	9302      	str	r3, [sp, #8]
 80069ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069cc:	0022      	movs	r2, r4
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	0033      	movs	r3, r6
 80069d2:	f000 fda5 	bl	8007520 <_dtoa_r>
 80069d6:	0005      	movs	r5, r0
 80069d8:	2f47      	cmp	r7, #71	; 0x47
 80069da:	d102      	bne.n	80069e2 <__cvt+0x5e>
 80069dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069de:	07db      	lsls	r3, r3, #31
 80069e0:	d528      	bpl.n	8006a34 <__cvt+0xb0>
 80069e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069e4:	18eb      	adds	r3, r5, r3
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	2f46      	cmp	r7, #70	; 0x46
 80069ea:	d114      	bne.n	8006a16 <__cvt+0x92>
 80069ec:	782b      	ldrb	r3, [r5, #0]
 80069ee:	2b30      	cmp	r3, #48	; 0x30
 80069f0:	d10c      	bne.n	8006a0c <__cvt+0x88>
 80069f2:	2200      	movs	r2, #0
 80069f4:	2300      	movs	r3, #0
 80069f6:	0020      	movs	r0, r4
 80069f8:	0031      	movs	r1, r6
 80069fa:	f7f9 fd27 	bl	800044c <__aeabi_dcmpeq>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d104      	bne.n	8006a0c <__cvt+0x88>
 8006a02:	2301      	movs	r3, #1
 8006a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a0e:	9a07      	ldr	r2, [sp, #28]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	18d3      	adds	r3, r2, r3
 8006a14:	9307      	str	r3, [sp, #28]
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	0020      	movs	r0, r4
 8006a1c:	0031      	movs	r1, r6
 8006a1e:	f7f9 fd15 	bl	800044c <__aeabi_dcmpeq>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d001      	beq.n	8006a2a <__cvt+0xa6>
 8006a26:	9b07      	ldr	r3, [sp, #28]
 8006a28:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2a:	2230      	movs	r2, #48	; 0x30
 8006a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2e:	9907      	ldr	r1, [sp, #28]
 8006a30:	428b      	cmp	r3, r1
 8006a32:	d306      	bcc.n	8006a42 <__cvt+0xbe>
 8006a34:	0028      	movs	r0, r5
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a3a:	1b5b      	subs	r3, r3, r5
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	b00b      	add	sp, #44	; 0x2c
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	9109      	str	r1, [sp, #36]	; 0x24
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e7f0      	b.n	8006a2c <__cvt+0xa8>

08006a4a <__exponent>:
 8006a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4c:	1c83      	adds	r3, r0, #2
 8006a4e:	b087      	sub	sp, #28
 8006a50:	9303      	str	r3, [sp, #12]
 8006a52:	0005      	movs	r5, r0
 8006a54:	000c      	movs	r4, r1
 8006a56:	232b      	movs	r3, #43	; 0x2b
 8006a58:	7002      	strb	r2, [r0, #0]
 8006a5a:	2900      	cmp	r1, #0
 8006a5c:	da01      	bge.n	8006a62 <__exponent+0x18>
 8006a5e:	424c      	negs	r4, r1
 8006a60:	3302      	adds	r3, #2
 8006a62:	706b      	strb	r3, [r5, #1]
 8006a64:	2c09      	cmp	r4, #9
 8006a66:	dd31      	ble.n	8006acc <__exponent+0x82>
 8006a68:	270a      	movs	r7, #10
 8006a6a:	ab04      	add	r3, sp, #16
 8006a6c:	1dde      	adds	r6, r3, #7
 8006a6e:	0020      	movs	r0, r4
 8006a70:	0039      	movs	r1, r7
 8006a72:	9601      	str	r6, [sp, #4]
 8006a74:	f7f9 fcd4 	bl	8000420 <__aeabi_idivmod>
 8006a78:	3e01      	subs	r6, #1
 8006a7a:	3130      	adds	r1, #48	; 0x30
 8006a7c:	0020      	movs	r0, r4
 8006a7e:	7031      	strb	r1, [r6, #0]
 8006a80:	0039      	movs	r1, r7
 8006a82:	9402      	str	r4, [sp, #8]
 8006a84:	f7f9 fbe6 	bl	8000254 <__divsi3>
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	0004      	movs	r4, r0
 8006a8c:	2b63      	cmp	r3, #99	; 0x63
 8006a8e:	dcee      	bgt.n	8006a6e <__exponent+0x24>
 8006a90:	9b01      	ldr	r3, [sp, #4]
 8006a92:	3430      	adds	r4, #48	; 0x30
 8006a94:	1e9a      	subs	r2, r3, #2
 8006a96:	0013      	movs	r3, r2
 8006a98:	9903      	ldr	r1, [sp, #12]
 8006a9a:	7014      	strb	r4, [r2, #0]
 8006a9c:	a804      	add	r0, sp, #16
 8006a9e:	3007      	adds	r0, #7
 8006aa0:	4298      	cmp	r0, r3
 8006aa2:	d80e      	bhi.n	8006ac2 <__exponent+0x78>
 8006aa4:	ab04      	add	r3, sp, #16
 8006aa6:	3307      	adds	r3, #7
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d804      	bhi.n	8006ab8 <__exponent+0x6e>
 8006aae:	ab04      	add	r3, sp, #16
 8006ab0:	3009      	adds	r0, #9
 8006ab2:	18c0      	adds	r0, r0, r3
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	1ac0      	subs	r0, r0, r3
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	1818      	adds	r0, r3, r0
 8006abc:	1b40      	subs	r0, r0, r5
 8006abe:	b007      	add	sp, #28
 8006ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac2:	7818      	ldrb	r0, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	7008      	strb	r0, [r1, #0]
 8006ac8:	3101      	adds	r1, #1
 8006aca:	e7e7      	b.n	8006a9c <__exponent+0x52>
 8006acc:	2330      	movs	r3, #48	; 0x30
 8006ace:	18e4      	adds	r4, r4, r3
 8006ad0:	70ab      	strb	r3, [r5, #2]
 8006ad2:	1d28      	adds	r0, r5, #4
 8006ad4:	70ec      	strb	r4, [r5, #3]
 8006ad6:	e7f1      	b.n	8006abc <__exponent+0x72>

08006ad8 <_printf_float>:
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b095      	sub	sp, #84	; 0x54
 8006adc:	000c      	movs	r4, r1
 8006ade:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae0:	001e      	movs	r6, r3
 8006ae2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006ae4:	0007      	movs	r7, r0
 8006ae6:	f001 fd03 	bl	80084f0 <_localeconv_r>
 8006aea:	6803      	ldr	r3, [r0, #0]
 8006aec:	0018      	movs	r0, r3
 8006aee:	930c      	str	r3, [sp, #48]	; 0x30
 8006af0:	f7f9 fb0a 	bl	8000108 <strlen>
 8006af4:	2300      	movs	r3, #0
 8006af6:	9312      	str	r3, [sp, #72]	; 0x48
 8006af8:	7e23      	ldrb	r3, [r4, #24]
 8006afa:	2207      	movs	r2, #7
 8006afc:	930a      	str	r3, [sp, #40]	; 0x28
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	900e      	str	r0, [sp, #56]	; 0x38
 8006b02:	930d      	str	r3, [sp, #52]	; 0x34
 8006b04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	05c9      	lsls	r1, r1, #23
 8006b0a:	d547      	bpl.n	8006b9c <_printf_float+0xc4>
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	4393      	bics	r3, r2
 8006b10:	001a      	movs	r2, r3
 8006b12:	3208      	adds	r2, #8
 8006b14:	602a      	str	r2, [r5, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006b1c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b1e:	2201      	movs	r2, #1
 8006b20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006b22:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b26:	006b      	lsls	r3, r5, #1
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b2e:	4ba7      	ldr	r3, [pc, #668]	; (8006dcc <_printf_float+0x2f4>)
 8006b30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b32:	4252      	negs	r2, r2
 8006b34:	f7fb fb0e 	bl	8002154 <__aeabi_dcmpun>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d131      	bne.n	8006ba0 <_printf_float+0xc8>
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4ba3      	ldr	r3, [pc, #652]	; (8006dcc <_printf_float+0x2f4>)
 8006b40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b44:	4252      	negs	r2, r2
 8006b46:	f7f9 fc91 	bl	800046c <__aeabi_dcmple>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d128      	bne.n	8006ba0 <_printf_float+0xc8>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	0029      	movs	r1, r5
 8006b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b56:	f7f9 fc7f 	bl	8000458 <__aeabi_dcmplt>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d003      	beq.n	8006b66 <_printf_float+0x8e>
 8006b5e:	0023      	movs	r3, r4
 8006b60:	222d      	movs	r2, #45	; 0x2d
 8006b62:	3343      	adds	r3, #67	; 0x43
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b68:	4d99      	ldr	r5, [pc, #612]	; (8006dd0 <_printf_float+0x2f8>)
 8006b6a:	2b47      	cmp	r3, #71	; 0x47
 8006b6c:	d900      	bls.n	8006b70 <_printf_float+0x98>
 8006b6e:	4d99      	ldr	r5, [pc, #612]	; (8006dd4 <_printf_float+0x2fc>)
 8006b70:	2303      	movs	r3, #3
 8006b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	3301      	adds	r3, #1
 8006b78:	439a      	bics	r2, r3
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b82:	0021      	movs	r1, r4
 8006b84:	0038      	movs	r0, r7
 8006b86:	9600      	str	r6, [sp, #0]
 8006b88:	aa13      	add	r2, sp, #76	; 0x4c
 8006b8a:	f000 f9e7 	bl	8006f5c <_printf_common>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	d000      	beq.n	8006b94 <_printf_float+0xbc>
 8006b92:	e0a2      	b.n	8006cda <_printf_float+0x202>
 8006b94:	2001      	movs	r0, #1
 8006b96:	4240      	negs	r0, r0
 8006b98:	b015      	add	sp, #84	; 0x54
 8006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	e7b6      	b.n	8006b0e <_printf_float+0x36>
 8006ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ba2:	002b      	movs	r3, r5
 8006ba4:	0010      	movs	r0, r2
 8006ba6:	0029      	movs	r1, r5
 8006ba8:	f7fb fad4 	bl	8002154 <__aeabi_dcmpun>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d00b      	beq.n	8006bc8 <_printf_float+0xf0>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	da03      	bge.n	8006bbc <_printf_float+0xe4>
 8006bb4:	0023      	movs	r3, r4
 8006bb6:	222d      	movs	r2, #45	; 0x2d
 8006bb8:	3343      	adds	r3, #67	; 0x43
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bbe:	4d86      	ldr	r5, [pc, #536]	; (8006dd8 <_printf_float+0x300>)
 8006bc0:	2b47      	cmp	r3, #71	; 0x47
 8006bc2:	d9d5      	bls.n	8006b70 <_printf_float+0x98>
 8006bc4:	4d85      	ldr	r5, [pc, #532]	; (8006ddc <_printf_float+0x304>)
 8006bc6:	e7d3      	b.n	8006b70 <_printf_float+0x98>
 8006bc8:	2220      	movs	r2, #32
 8006bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	4391      	bics	r1, r2
 8006bd0:	910f      	str	r1, [sp, #60]	; 0x3c
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	d149      	bne.n	8006c6a <_printf_float+0x192>
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4313      	orrs	r3, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	9206      	str	r2, [sp, #24]
 8006be6:	aa12      	add	r2, sp, #72	; 0x48
 8006be8:	9205      	str	r2, [sp, #20]
 8006bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bec:	a908      	add	r1, sp, #32
 8006bee:	9204      	str	r2, [sp, #16]
 8006bf0:	aa11      	add	r2, sp, #68	; 0x44
 8006bf2:	9203      	str	r2, [sp, #12]
 8006bf4:	2223      	movs	r2, #35	; 0x23
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	1852      	adds	r2, r2, r1
 8006bfe:	9202      	str	r2, [sp, #8]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	0038      	movs	r0, r7
 8006c04:	002b      	movs	r3, r5
 8006c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c08:	f7ff febc 	bl	8006984 <__cvt>
 8006c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c0e:	0005      	movs	r5, r0
 8006c10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c12:	2b47      	cmp	r3, #71	; 0x47
 8006c14:	d108      	bne.n	8006c28 <_printf_float+0x150>
 8006c16:	1ccb      	adds	r3, r1, #3
 8006c18:	db02      	blt.n	8006c20 <_printf_float+0x148>
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	dd48      	ble.n	8006cb2 <_printf_float+0x1da>
 8006c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c22:	3b02      	subs	r3, #2
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	930a      	str	r3, [sp, #40]	; 0x28
 8006c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2a:	2b65      	cmp	r3, #101	; 0x65
 8006c2c:	d824      	bhi.n	8006c78 <_printf_float+0x1a0>
 8006c2e:	0020      	movs	r0, r4
 8006c30:	001a      	movs	r2, r3
 8006c32:	3901      	subs	r1, #1
 8006c34:	3050      	adds	r0, #80	; 0x50
 8006c36:	9111      	str	r1, [sp, #68]	; 0x44
 8006c38:	f7ff ff07 	bl	8006a4a <__exponent>
 8006c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c3e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c40:	1813      	adds	r3, r2, r0
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	2a01      	cmp	r2, #1
 8006c46:	dc02      	bgt.n	8006c4e <_printf_float+0x176>
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	07d2      	lsls	r2, r2, #31
 8006c4c:	d501      	bpl.n	8006c52 <_printf_float+0x17a>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	2323      	movs	r3, #35	; 0x23
 8006c54:	aa08      	add	r2, sp, #32
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d100      	bne.n	8006c60 <_printf_float+0x188>
 8006c5e:	e78f      	b.n	8006b80 <_printf_float+0xa8>
 8006c60:	0023      	movs	r3, r4
 8006c62:	222d      	movs	r2, #45	; 0x2d
 8006c64:	3343      	adds	r3, #67	; 0x43
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e78a      	b.n	8006b80 <_printf_float+0xa8>
 8006c6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c6c:	2a47      	cmp	r2, #71	; 0x47
 8006c6e:	d1b4      	bne.n	8006bda <_printf_float+0x102>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1b2      	bne.n	8006bda <_printf_float+0x102>
 8006c74:	3301      	adds	r3, #1
 8006c76:	e7af      	b.n	8006bd8 <_printf_float+0x100>
 8006c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7a:	2b66      	cmp	r3, #102	; 0x66
 8006c7c:	d11b      	bne.n	8006cb6 <_printf_float+0x1de>
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	2900      	cmp	r1, #0
 8006c82:	dd0d      	ble.n	8006ca0 <_printf_float+0x1c8>
 8006c84:	6121      	str	r1, [r4, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <_printf_float+0x1b8>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	07d2      	lsls	r2, r2, #31
 8006c8e:	d502      	bpl.n	8006c96 <_printf_float+0x1be>
 8006c90:	3301      	adds	r3, #1
 8006c92:	1859      	adds	r1, r3, r1
 8006c94:	6121      	str	r1, [r4, #16]
 8006c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c98:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c9e:	e7d8      	b.n	8006c52 <_printf_float+0x17a>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <_printf_float+0x1d4>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	6821      	ldr	r1, [r4, #0]
 8006ca8:	4211      	tst	r1, r2
 8006caa:	d000      	beq.n	8006cae <_printf_float+0x1d6>
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	6122      	str	r2, [r4, #16]
 8006cb0:	e7f1      	b.n	8006c96 <_printf_float+0x1be>
 8006cb2:	2367      	movs	r3, #103	; 0x67
 8006cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	db06      	blt.n	8006ccc <_printf_float+0x1f4>
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	07d2      	lsls	r2, r2, #31
 8006cc4:	d5e7      	bpl.n	8006c96 <_printf_float+0x1be>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	e7e4      	b.n	8006c96 <_printf_float+0x1be>
 8006ccc:	2101      	movs	r1, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dc01      	bgt.n	8006cd6 <_printf_float+0x1fe>
 8006cd2:	1849      	adds	r1, r1, r1
 8006cd4:	1ac9      	subs	r1, r1, r3
 8006cd6:	1852      	adds	r2, r2, r1
 8006cd8:	e7e9      	b.n	8006cae <_printf_float+0x1d6>
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	0553      	lsls	r3, r2, #21
 8006cde:	d407      	bmi.n	8006cf0 <_printf_float+0x218>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	002a      	movs	r2, r5
 8006ce4:	0038      	movs	r0, r7
 8006ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce8:	47b0      	blx	r6
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d128      	bne.n	8006d40 <_printf_float+0x268>
 8006cee:	e751      	b.n	8006b94 <_printf_float+0xbc>
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	2b65      	cmp	r3, #101	; 0x65
 8006cf4:	d800      	bhi.n	8006cf8 <_printf_float+0x220>
 8006cf6:	e0e1      	b.n	8006ebc <_printf_float+0x3e4>
 8006cf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006cfa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f7f9 fba4 	bl	800044c <__aeabi_dcmpeq>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d031      	beq.n	8006d6c <_printf_float+0x294>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	0038      	movs	r0, r7
 8006d0c:	4a34      	ldr	r2, [pc, #208]	; (8006de0 <_printf_float+0x308>)
 8006d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d10:	47b0      	blx	r6
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d100      	bne.n	8006d18 <_printf_float+0x240>
 8006d16:	e73d      	b.n	8006b94 <_printf_float+0xbc>
 8006d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	db02      	blt.n	8006d26 <_printf_float+0x24e>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	07db      	lsls	r3, r3, #31
 8006d24:	d50c      	bpl.n	8006d40 <_printf_float+0x268>
 8006d26:	0038      	movs	r0, r7
 8006d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d2e:	47b0      	blx	r6
 8006d30:	2500      	movs	r5, #0
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	d100      	bne.n	8006d38 <_printf_float+0x260>
 8006d36:	e72d      	b.n	8006b94 <_printf_float+0xbc>
 8006d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dc0a      	bgt.n	8006d56 <_printf_float+0x27e>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	079b      	lsls	r3, r3, #30
 8006d44:	d500      	bpl.n	8006d48 <_printf_float+0x270>
 8006d46:	e106      	b.n	8006f56 <_printf_float+0x47e>
 8006d48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d4a:	68e0      	ldr	r0, [r4, #12]
 8006d4c:	4298      	cmp	r0, r3
 8006d4e:	db00      	blt.n	8006d52 <_printf_float+0x27a>
 8006d50:	e722      	b.n	8006b98 <_printf_float+0xc0>
 8006d52:	0018      	movs	r0, r3
 8006d54:	e720      	b.n	8006b98 <_printf_float+0xc0>
 8006d56:	0022      	movs	r2, r4
 8006d58:	2301      	movs	r3, #1
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d5e:	321a      	adds	r2, #26
 8006d60:	47b0      	blx	r6
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	d100      	bne.n	8006d68 <_printf_float+0x290>
 8006d66:	e715      	b.n	8006b94 <_printf_float+0xbc>
 8006d68:	3501      	adds	r5, #1
 8006d6a:	e7e5      	b.n	8006d38 <_printf_float+0x260>
 8006d6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dc38      	bgt.n	8006de4 <_printf_float+0x30c>
 8006d72:	2301      	movs	r3, #1
 8006d74:	0038      	movs	r0, r7
 8006d76:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <_printf_float+0x308>)
 8006d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d100      	bne.n	8006d82 <_printf_float+0x2aa>
 8006d80:	e708      	b.n	8006b94 <_printf_float+0xbc>
 8006d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d102      	bne.n	8006d90 <_printf_float+0x2b8>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	07db      	lsls	r3, r3, #31
 8006d8e:	d5d7      	bpl.n	8006d40 <_printf_float+0x268>
 8006d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d92:	0038      	movs	r0, r7
 8006d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d98:	47b0      	blx	r6
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d100      	bne.n	8006da0 <_printf_float+0x2c8>
 8006d9e:	e6f9      	b.n	8006b94 <_printf_float+0xbc>
 8006da0:	2300      	movs	r3, #0
 8006da2:	930a      	str	r3, [sp, #40]	; 0x28
 8006da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da8:	425b      	negs	r3, r3
 8006daa:	4293      	cmp	r3, r2
 8006dac:	dc01      	bgt.n	8006db2 <_printf_float+0x2da>
 8006dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006db0:	e797      	b.n	8006ce2 <_printf_float+0x20a>
 8006db2:	0022      	movs	r2, r4
 8006db4:	2301      	movs	r3, #1
 8006db6:	0038      	movs	r0, r7
 8006db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dba:	321a      	adds	r2, #26
 8006dbc:	47b0      	blx	r6
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d100      	bne.n	8006dc4 <_printf_float+0x2ec>
 8006dc2:	e6e7      	b.n	8006b94 <_printf_float+0xbc>
 8006dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	e7eb      	b.n	8006da2 <_printf_float+0x2ca>
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	7fefffff 	.word	0x7fefffff
 8006dd0:	0800934d 	.word	0x0800934d
 8006dd4:	08009351 	.word	0x08009351
 8006dd8:	08009355 	.word	0x08009355
 8006ddc:	08009359 	.word	0x08009359
 8006de0:	0800935d 	.word	0x0800935d
 8006de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de8:	920a      	str	r2, [sp, #40]	; 0x28
 8006dea:	429a      	cmp	r2, r3
 8006dec:	dd00      	ble.n	8006df0 <_printf_float+0x318>
 8006dee:	930a      	str	r3, [sp, #40]	; 0x28
 8006df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dc3c      	bgt.n	8006e70 <_printf_float+0x398>
 8006df6:	2300      	movs	r3, #0
 8006df8:	930d      	str	r3, [sp, #52]	; 0x34
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	17db      	asrs	r3, r3, #31
 8006e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e12:	4293      	cmp	r3, r2
 8006e14:	dc34      	bgt.n	8006e80 <_printf_float+0x3a8>
 8006e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	db3d      	blt.n	8006e9a <_printf_float+0x3c2>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	07db      	lsls	r3, r3, #31
 8006e22:	d43a      	bmi.n	8006e9a <_printf_float+0x3c2>
 8006e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	1a52      	subs	r2, r2, r1
 8006e2e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dd00      	ble.n	8006e36 <_printf_float+0x35e>
 8006e34:	930a      	str	r3, [sp, #40]	; 0x28
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc36      	bgt.n	8006eaa <_printf_float+0x3d2>
 8006e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3e:	2500      	movs	r5, #0
 8006e40:	43db      	mvns	r3, r3
 8006e42:	17db      	asrs	r3, r3, #31
 8006e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e50:	400a      	ands	r2, r1
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc00      	bgt.n	8006e5a <_printf_float+0x382>
 8006e58:	e772      	b.n	8006d40 <_printf_float+0x268>
 8006e5a:	0022      	movs	r2, r4
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	0038      	movs	r0, r7
 8006e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e62:	321a      	adds	r2, #26
 8006e64:	47b0      	blx	r6
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d100      	bne.n	8006e6c <_printf_float+0x394>
 8006e6a:	e693      	b.n	8006b94 <_printf_float+0xbc>
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	e7ea      	b.n	8006e46 <_printf_float+0x36e>
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	002a      	movs	r2, r5
 8006e74:	0038      	movs	r0, r7
 8006e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e78:	47b0      	blx	r6
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	d1bb      	bne.n	8006df6 <_printf_float+0x31e>
 8006e7e:	e689      	b.n	8006b94 <_printf_float+0xbc>
 8006e80:	0022      	movs	r2, r4
 8006e82:	2301      	movs	r3, #1
 8006e84:	0038      	movs	r0, r7
 8006e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e88:	321a      	adds	r2, #26
 8006e8a:	47b0      	blx	r6
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d100      	bne.n	8006e92 <_printf_float+0x3ba>
 8006e90:	e680      	b.n	8006b94 <_printf_float+0xbc>
 8006e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e94:	3301      	adds	r3, #1
 8006e96:	930d      	str	r3, [sp, #52]	; 0x34
 8006e98:	e7b3      	b.n	8006e02 <_printf_float+0x32a>
 8006e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e9c:	0038      	movs	r0, r7
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d1bd      	bne.n	8006e24 <_printf_float+0x34c>
 8006ea8:	e674      	b.n	8006b94 <_printf_float+0xbc>
 8006eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eac:	0038      	movs	r0, r7
 8006eae:	18ea      	adds	r2, r5, r3
 8006eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb4:	47b0      	blx	r6
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d1c0      	bne.n	8006e3c <_printf_float+0x364>
 8006eba:	e66b      	b.n	8006b94 <_printf_float+0xbc>
 8006ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	dc02      	bgt.n	8006ec8 <_printf_float+0x3f0>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	421a      	tst	r2, r3
 8006ec6:	d034      	beq.n	8006f32 <_printf_float+0x45a>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	002a      	movs	r2, r5
 8006ecc:	0038      	movs	r0, r7
 8006ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed0:	47b0      	blx	r6
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d100      	bne.n	8006ed8 <_printf_float+0x400>
 8006ed6:	e65d      	b.n	8006b94 <_printf_float+0xbc>
 8006ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eda:	0038      	movs	r0, r7
 8006edc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee0:	47b0      	blx	r6
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d100      	bne.n	8006ee8 <_printf_float+0x410>
 8006ee6:	e655      	b.n	8006b94 <_printf_float+0xbc>
 8006ee8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006eea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006eec:	2200      	movs	r2, #0
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f7f9 faac 	bl	800044c <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d11a      	bne.n	8006f2e <_printf_float+0x456>
 8006ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006efa:	1c6a      	adds	r2, r5, #1
 8006efc:	3b01      	subs	r3, #1
 8006efe:	0038      	movs	r0, r7
 8006f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f02:	47b0      	blx	r6
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d10e      	bne.n	8006f26 <_printf_float+0x44e>
 8006f08:	e644      	b.n	8006b94 <_printf_float+0xbc>
 8006f0a:	0022      	movs	r2, r4
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	0038      	movs	r0, r7
 8006f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f12:	321a      	adds	r2, #26
 8006f14:	47b0      	blx	r6
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d100      	bne.n	8006f1c <_printf_float+0x444>
 8006f1a:	e63b      	b.n	8006b94 <_printf_float+0xbc>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f20:	3b01      	subs	r3, #1
 8006f22:	42ab      	cmp	r3, r5
 8006f24:	dcf1      	bgt.n	8006f0a <_printf_float+0x432>
 8006f26:	0022      	movs	r2, r4
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	3250      	adds	r2, #80	; 0x50
 8006f2c:	e6da      	b.n	8006ce4 <_printf_float+0x20c>
 8006f2e:	2500      	movs	r5, #0
 8006f30:	e7f5      	b.n	8006f1e <_printf_float+0x446>
 8006f32:	002a      	movs	r2, r5
 8006f34:	e7e3      	b.n	8006efe <_printf_float+0x426>
 8006f36:	0022      	movs	r2, r4
 8006f38:	2301      	movs	r3, #1
 8006f3a:	0038      	movs	r0, r7
 8006f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f3e:	3219      	adds	r2, #25
 8006f40:	47b0      	blx	r6
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d100      	bne.n	8006f48 <_printf_float+0x470>
 8006f46:	e625      	b.n	8006b94 <_printf_float+0xbc>
 8006f48:	3501      	adds	r5, #1
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dcf0      	bgt.n	8006f36 <_printf_float+0x45e>
 8006f54:	e6f8      	b.n	8006d48 <_printf_float+0x270>
 8006f56:	2500      	movs	r5, #0
 8006f58:	e7f7      	b.n	8006f4a <_printf_float+0x472>
 8006f5a:	46c0      	nop			; (mov r8, r8)

08006f5c <_printf_common>:
 8006f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f5e:	0015      	movs	r5, r2
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	688a      	ldr	r2, [r1, #8]
 8006f64:	690b      	ldr	r3, [r1, #16]
 8006f66:	000c      	movs	r4, r1
 8006f68:	9000      	str	r0, [sp, #0]
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	da00      	bge.n	8006f70 <_printf_common+0x14>
 8006f6e:	0013      	movs	r3, r2
 8006f70:	0022      	movs	r2, r4
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	3243      	adds	r2, #67	; 0x43
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	d001      	beq.n	8006f80 <_printf_common+0x24>
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	069b      	lsls	r3, r3, #26
 8006f84:	d502      	bpl.n	8006f8c <_printf_common+0x30>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	3302      	adds	r3, #2
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	2306      	movs	r3, #6
 8006f90:	0017      	movs	r7, r2
 8006f92:	401f      	ands	r7, r3
 8006f94:	421a      	tst	r2, r3
 8006f96:	d027      	beq.n	8006fe8 <_printf_common+0x8c>
 8006f98:	0023      	movs	r3, r4
 8006f9a:	3343      	adds	r3, #67	; 0x43
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	4193      	sbcs	r3, r2
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d430      	bmi.n	800700a <_printf_common+0xae>
 8006fa8:	0022      	movs	r2, r4
 8006faa:	9901      	ldr	r1, [sp, #4]
 8006fac:	9800      	ldr	r0, [sp, #0]
 8006fae:	9e08      	ldr	r6, [sp, #32]
 8006fb0:	3243      	adds	r2, #67	; 0x43
 8006fb2:	47b0      	blx	r6
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d025      	beq.n	8007004 <_printf_common+0xa8>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	682a      	ldr	r2, [r5, #0]
 8006fbe:	68e1      	ldr	r1, [r4, #12]
 8006fc0:	2500      	movs	r5, #0
 8006fc2:	4003      	ands	r3, r0
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d103      	bne.n	8006fd0 <_printf_common+0x74>
 8006fc8:	1a8d      	subs	r5, r1, r2
 8006fca:	43eb      	mvns	r3, r5
 8006fcc:	17db      	asrs	r3, r3, #31
 8006fce:	401d      	ands	r5, r3
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	6922      	ldr	r2, [r4, #16]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	dd01      	ble.n	8006fdc <_printf_common+0x80>
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	18ed      	adds	r5, r5, r3
 8006fdc:	2700      	movs	r7, #0
 8006fde:	42bd      	cmp	r5, r7
 8006fe0:	d120      	bne.n	8007024 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e010      	b.n	8007008 <_printf_common+0xac>
 8006fe6:	3701      	adds	r7, #1
 8006fe8:	68e3      	ldr	r3, [r4, #12]
 8006fea:	682a      	ldr	r2, [r5, #0]
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	ddd2      	ble.n	8006f98 <_printf_common+0x3c>
 8006ff2:	0022      	movs	r2, r4
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	9901      	ldr	r1, [sp, #4]
 8006ff8:	9800      	ldr	r0, [sp, #0]
 8006ffa:	9e08      	ldr	r6, [sp, #32]
 8006ffc:	3219      	adds	r2, #25
 8006ffe:	47b0      	blx	r6
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d1f0      	bne.n	8006fe6 <_printf_common+0x8a>
 8007004:	2001      	movs	r0, #1
 8007006:	4240      	negs	r0, r0
 8007008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800700a:	2030      	movs	r0, #48	; 0x30
 800700c:	18e1      	adds	r1, r4, r3
 800700e:	3143      	adds	r1, #67	; 0x43
 8007010:	7008      	strb	r0, [r1, #0]
 8007012:	0021      	movs	r1, r4
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	3145      	adds	r1, #69	; 0x45
 8007018:	7809      	ldrb	r1, [r1, #0]
 800701a:	18a2      	adds	r2, r4, r2
 800701c:	3243      	adds	r2, #67	; 0x43
 800701e:	3302      	adds	r3, #2
 8007020:	7011      	strb	r1, [r2, #0]
 8007022:	e7c1      	b.n	8006fa8 <_printf_common+0x4c>
 8007024:	0022      	movs	r2, r4
 8007026:	2301      	movs	r3, #1
 8007028:	9901      	ldr	r1, [sp, #4]
 800702a:	9800      	ldr	r0, [sp, #0]
 800702c:	9e08      	ldr	r6, [sp, #32]
 800702e:	321a      	adds	r2, #26
 8007030:	47b0      	blx	r6
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d0e6      	beq.n	8007004 <_printf_common+0xa8>
 8007036:	3701      	adds	r7, #1
 8007038:	e7d1      	b.n	8006fde <_printf_common+0x82>
	...

0800703c <_printf_i>:
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703e:	b08b      	sub	sp, #44	; 0x2c
 8007040:	9206      	str	r2, [sp, #24]
 8007042:	000a      	movs	r2, r1
 8007044:	3243      	adds	r2, #67	; 0x43
 8007046:	9307      	str	r3, [sp, #28]
 8007048:	9005      	str	r0, [sp, #20]
 800704a:	9204      	str	r2, [sp, #16]
 800704c:	7e0a      	ldrb	r2, [r1, #24]
 800704e:	000c      	movs	r4, r1
 8007050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007052:	2a78      	cmp	r2, #120	; 0x78
 8007054:	d807      	bhi.n	8007066 <_printf_i+0x2a>
 8007056:	2a62      	cmp	r2, #98	; 0x62
 8007058:	d809      	bhi.n	800706e <_printf_i+0x32>
 800705a:	2a00      	cmp	r2, #0
 800705c:	d100      	bne.n	8007060 <_printf_i+0x24>
 800705e:	e0c1      	b.n	80071e4 <_printf_i+0x1a8>
 8007060:	2a58      	cmp	r2, #88	; 0x58
 8007062:	d100      	bne.n	8007066 <_printf_i+0x2a>
 8007064:	e08c      	b.n	8007180 <_printf_i+0x144>
 8007066:	0026      	movs	r6, r4
 8007068:	3642      	adds	r6, #66	; 0x42
 800706a:	7032      	strb	r2, [r6, #0]
 800706c:	e022      	b.n	80070b4 <_printf_i+0x78>
 800706e:	0010      	movs	r0, r2
 8007070:	3863      	subs	r0, #99	; 0x63
 8007072:	2815      	cmp	r0, #21
 8007074:	d8f7      	bhi.n	8007066 <_printf_i+0x2a>
 8007076:	f7f9 f859 	bl	800012c <__gnu_thumb1_case_shi>
 800707a:	0016      	.short	0x0016
 800707c:	fff6001f 	.word	0xfff6001f
 8007080:	fff6fff6 	.word	0xfff6fff6
 8007084:	001ffff6 	.word	0x001ffff6
 8007088:	fff6fff6 	.word	0xfff6fff6
 800708c:	fff6fff6 	.word	0xfff6fff6
 8007090:	003600a8 	.word	0x003600a8
 8007094:	fff6009a 	.word	0xfff6009a
 8007098:	00b9fff6 	.word	0x00b9fff6
 800709c:	0036fff6 	.word	0x0036fff6
 80070a0:	fff6fff6 	.word	0xfff6fff6
 80070a4:	009e      	.short	0x009e
 80070a6:	0026      	movs	r6, r4
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	3642      	adds	r6, #66	; 0x42
 80070ac:	1d11      	adds	r1, r2, #4
 80070ae:	6019      	str	r1, [r3, #0]
 80070b0:	6813      	ldr	r3, [r2, #0]
 80070b2:	7033      	strb	r3, [r6, #0]
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0a7      	b.n	8007208 <_printf_i+0x1cc>
 80070b8:	6808      	ldr	r0, [r1, #0]
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	1d0a      	adds	r2, r1, #4
 80070be:	0605      	lsls	r5, r0, #24
 80070c0:	d50b      	bpl.n	80070da <_printf_i+0x9e>
 80070c2:	680d      	ldr	r5, [r1, #0]
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	da03      	bge.n	80070d2 <_printf_i+0x96>
 80070ca:	232d      	movs	r3, #45	; 0x2d
 80070cc:	9a04      	ldr	r2, [sp, #16]
 80070ce:	426d      	negs	r5, r5
 80070d0:	7013      	strb	r3, [r2, #0]
 80070d2:	4b61      	ldr	r3, [pc, #388]	; (8007258 <_printf_i+0x21c>)
 80070d4:	270a      	movs	r7, #10
 80070d6:	9303      	str	r3, [sp, #12]
 80070d8:	e01b      	b.n	8007112 <_printf_i+0xd6>
 80070da:	680d      	ldr	r5, [r1, #0]
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	0641      	lsls	r1, r0, #25
 80070e0:	d5f1      	bpl.n	80070c6 <_printf_i+0x8a>
 80070e2:	b22d      	sxth	r5, r5
 80070e4:	e7ef      	b.n	80070c6 <_printf_i+0x8a>
 80070e6:	680d      	ldr	r5, [r1, #0]
 80070e8:	6819      	ldr	r1, [r3, #0]
 80070ea:	1d08      	adds	r0, r1, #4
 80070ec:	6018      	str	r0, [r3, #0]
 80070ee:	062e      	lsls	r6, r5, #24
 80070f0:	d501      	bpl.n	80070f6 <_printf_i+0xba>
 80070f2:	680d      	ldr	r5, [r1, #0]
 80070f4:	e003      	b.n	80070fe <_printf_i+0xc2>
 80070f6:	066d      	lsls	r5, r5, #25
 80070f8:	d5fb      	bpl.n	80070f2 <_printf_i+0xb6>
 80070fa:	680d      	ldr	r5, [r1, #0]
 80070fc:	b2ad      	uxth	r5, r5
 80070fe:	4b56      	ldr	r3, [pc, #344]	; (8007258 <_printf_i+0x21c>)
 8007100:	2708      	movs	r7, #8
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	2a6f      	cmp	r2, #111	; 0x6f
 8007106:	d000      	beq.n	800710a <_printf_i+0xce>
 8007108:	3702      	adds	r7, #2
 800710a:	0023      	movs	r3, r4
 800710c:	2200      	movs	r2, #0
 800710e:	3343      	adds	r3, #67	; 0x43
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	db03      	blt.n	8007122 <_printf_i+0xe6>
 800711a:	2204      	movs	r2, #4
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	4391      	bics	r1, r2
 8007120:	6021      	str	r1, [r4, #0]
 8007122:	2d00      	cmp	r5, #0
 8007124:	d102      	bne.n	800712c <_printf_i+0xf0>
 8007126:	9e04      	ldr	r6, [sp, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <_printf_i+0x10a>
 800712c:	9e04      	ldr	r6, [sp, #16]
 800712e:	0028      	movs	r0, r5
 8007130:	0039      	movs	r1, r7
 8007132:	f7f9 f88b 	bl	800024c <__aeabi_uidivmod>
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	3e01      	subs	r6, #1
 800713a:	5c5b      	ldrb	r3, [r3, r1]
 800713c:	7033      	strb	r3, [r6, #0]
 800713e:	002b      	movs	r3, r5
 8007140:	0005      	movs	r5, r0
 8007142:	429f      	cmp	r7, r3
 8007144:	d9f3      	bls.n	800712e <_printf_i+0xf2>
 8007146:	2f08      	cmp	r7, #8
 8007148:	d109      	bne.n	800715e <_printf_i+0x122>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07db      	lsls	r3, r3, #31
 800714e:	d506      	bpl.n	800715e <_printf_i+0x122>
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	6922      	ldr	r2, [r4, #16]
 8007154:	4293      	cmp	r3, r2
 8007156:	dc02      	bgt.n	800715e <_printf_i+0x122>
 8007158:	2330      	movs	r3, #48	; 0x30
 800715a:	3e01      	subs	r6, #1
 800715c:	7033      	strb	r3, [r6, #0]
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	1b9b      	subs	r3, r3, r6
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	0021      	movs	r1, r4
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	9805      	ldr	r0, [sp, #20]
 800716c:	9b06      	ldr	r3, [sp, #24]
 800716e:	aa09      	add	r2, sp, #36	; 0x24
 8007170:	f7ff fef4 	bl	8006f5c <_printf_common>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d14c      	bne.n	8007212 <_printf_i+0x1d6>
 8007178:	2001      	movs	r0, #1
 800717a:	4240      	negs	r0, r0
 800717c:	b00b      	add	sp, #44	; 0x2c
 800717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007180:	3145      	adds	r1, #69	; 0x45
 8007182:	700a      	strb	r2, [r1, #0]
 8007184:	4a34      	ldr	r2, [pc, #208]	; (8007258 <_printf_i+0x21c>)
 8007186:	9203      	str	r2, [sp, #12]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	6821      	ldr	r1, [r4, #0]
 800718c:	ca20      	ldmia	r2!, {r5}
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	0608      	lsls	r0, r1, #24
 8007192:	d516      	bpl.n	80071c2 <_printf_i+0x186>
 8007194:	07cb      	lsls	r3, r1, #31
 8007196:	d502      	bpl.n	800719e <_printf_i+0x162>
 8007198:	2320      	movs	r3, #32
 800719a:	4319      	orrs	r1, r3
 800719c:	6021      	str	r1, [r4, #0]
 800719e:	2710      	movs	r7, #16
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	d1b2      	bne.n	800710a <_printf_i+0xce>
 80071a4:	2320      	movs	r3, #32
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	439a      	bics	r2, r3
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	e7ad      	b.n	800710a <_printf_i+0xce>
 80071ae:	2220      	movs	r2, #32
 80071b0:	6809      	ldr	r1, [r1, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	0022      	movs	r2, r4
 80071b8:	2178      	movs	r1, #120	; 0x78
 80071ba:	3245      	adds	r2, #69	; 0x45
 80071bc:	7011      	strb	r1, [r2, #0]
 80071be:	4a27      	ldr	r2, [pc, #156]	; (800725c <_printf_i+0x220>)
 80071c0:	e7e1      	b.n	8007186 <_printf_i+0x14a>
 80071c2:	0648      	lsls	r0, r1, #25
 80071c4:	d5e6      	bpl.n	8007194 <_printf_i+0x158>
 80071c6:	b2ad      	uxth	r5, r5
 80071c8:	e7e4      	b.n	8007194 <_printf_i+0x158>
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	680d      	ldr	r5, [r1, #0]
 80071ce:	1d10      	adds	r0, r2, #4
 80071d0:	6949      	ldr	r1, [r1, #20]
 80071d2:	6018      	str	r0, [r3, #0]
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	062e      	lsls	r6, r5, #24
 80071d8:	d501      	bpl.n	80071de <_printf_i+0x1a2>
 80071da:	6019      	str	r1, [r3, #0]
 80071dc:	e002      	b.n	80071e4 <_printf_i+0x1a8>
 80071de:	066d      	lsls	r5, r5, #25
 80071e0:	d5fb      	bpl.n	80071da <_printf_i+0x19e>
 80071e2:	8019      	strh	r1, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9e04      	ldr	r6, [sp, #16]
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	e7bb      	b.n	8007164 <_printf_i+0x128>
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	1d11      	adds	r1, r2, #4
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	6816      	ldr	r6, [r2, #0]
 80071f4:	2100      	movs	r1, #0
 80071f6:	0030      	movs	r0, r6
 80071f8:	6862      	ldr	r2, [r4, #4]
 80071fa:	f001 f9f7 	bl	80085ec <memchr>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d001      	beq.n	8007206 <_printf_i+0x1ca>
 8007202:	1b80      	subs	r0, r0, r6
 8007204:	6060      	str	r0, [r4, #4]
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	2300      	movs	r3, #0
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	7013      	strb	r3, [r2, #0]
 8007210:	e7a8      	b.n	8007164 <_printf_i+0x128>
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	0032      	movs	r2, r6
 8007216:	9906      	ldr	r1, [sp, #24]
 8007218:	9805      	ldr	r0, [sp, #20]
 800721a:	9d07      	ldr	r5, [sp, #28]
 800721c:	47a8      	blx	r5
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d0aa      	beq.n	8007178 <_printf_i+0x13c>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	079b      	lsls	r3, r3, #30
 8007226:	d415      	bmi.n	8007254 <_printf_i+0x218>
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	68e0      	ldr	r0, [r4, #12]
 800722c:	4298      	cmp	r0, r3
 800722e:	daa5      	bge.n	800717c <_printf_i+0x140>
 8007230:	0018      	movs	r0, r3
 8007232:	e7a3      	b.n	800717c <_printf_i+0x140>
 8007234:	0022      	movs	r2, r4
 8007236:	2301      	movs	r3, #1
 8007238:	9906      	ldr	r1, [sp, #24]
 800723a:	9805      	ldr	r0, [sp, #20]
 800723c:	9e07      	ldr	r6, [sp, #28]
 800723e:	3219      	adds	r2, #25
 8007240:	47b0      	blx	r6
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	d098      	beq.n	8007178 <_printf_i+0x13c>
 8007246:	3501      	adds	r5, #1
 8007248:	68e3      	ldr	r3, [r4, #12]
 800724a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	42ab      	cmp	r3, r5
 8007250:	dcf0      	bgt.n	8007234 <_printf_i+0x1f8>
 8007252:	e7e9      	b.n	8007228 <_printf_i+0x1ec>
 8007254:	2500      	movs	r5, #0
 8007256:	e7f7      	b.n	8007248 <_printf_i+0x20c>
 8007258:	0800935f 	.word	0x0800935f
 800725c:	08009370 	.word	0x08009370

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	0005      	movs	r5, r0
 8007264:	000e      	movs	r6, r1
 8007266:	0014      	movs	r4, r2
 8007268:	2800      	cmp	r0, #0
 800726a:	d004      	beq.n	8007276 <__swbuf_r+0x16>
 800726c:	6983      	ldr	r3, [r0, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <__swbuf_r+0x16>
 8007272:	f001 f89d 	bl	80083b0 <__sinit>
 8007276:	4b22      	ldr	r3, [pc, #136]	; (8007300 <__swbuf_r+0xa0>)
 8007278:	429c      	cmp	r4, r3
 800727a:	d12e      	bne.n	80072da <__swbuf_r+0x7a>
 800727c:	686c      	ldr	r4, [r5, #4]
 800727e:	69a3      	ldr	r3, [r4, #24]
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	071b      	lsls	r3, r3, #28
 8007286:	d532      	bpl.n	80072ee <__swbuf_r+0x8e>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d02f      	beq.n	80072ee <__swbuf_r+0x8e>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	6922      	ldr	r2, [r4, #16]
 8007292:	b2f7      	uxtb	r7, r6
 8007294:	1a98      	subs	r0, r3, r2
 8007296:	6963      	ldr	r3, [r4, #20]
 8007298:	b2f6      	uxtb	r6, r6
 800729a:	4283      	cmp	r3, r0
 800729c:	dc05      	bgt.n	80072aa <__swbuf_r+0x4a>
 800729e:	0021      	movs	r1, r4
 80072a0:	0028      	movs	r0, r5
 80072a2:	f000 ffe3 	bl	800826c <_fflush_r>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d127      	bne.n	80072fa <__swbuf_r+0x9a>
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	3001      	adds	r0, #1
 80072ae:	3b01      	subs	r3, #1
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	6022      	str	r2, [r4, #0]
 80072b8:	701f      	strb	r7, [r3, #0]
 80072ba:	6963      	ldr	r3, [r4, #20]
 80072bc:	4283      	cmp	r3, r0
 80072be:	d004      	beq.n	80072ca <__swbuf_r+0x6a>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d507      	bpl.n	80072d6 <__swbuf_r+0x76>
 80072c6:	2e0a      	cmp	r6, #10
 80072c8:	d105      	bne.n	80072d6 <__swbuf_r+0x76>
 80072ca:	0021      	movs	r1, r4
 80072cc:	0028      	movs	r0, r5
 80072ce:	f000 ffcd 	bl	800826c <_fflush_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d111      	bne.n	80072fa <__swbuf_r+0x9a>
 80072d6:	0030      	movs	r0, r6
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <__swbuf_r+0xa4>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d101      	bne.n	80072e4 <__swbuf_r+0x84>
 80072e0:	68ac      	ldr	r4, [r5, #8]
 80072e2:	e7cc      	b.n	800727e <__swbuf_r+0x1e>
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <__swbuf_r+0xa8>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d1c9      	bne.n	800727e <__swbuf_r+0x1e>
 80072ea:	68ec      	ldr	r4, [r5, #12]
 80072ec:	e7c7      	b.n	800727e <__swbuf_r+0x1e>
 80072ee:	0021      	movs	r1, r4
 80072f0:	0028      	movs	r0, r5
 80072f2:	f000 f80b 	bl	800730c <__swsetup_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0c9      	beq.n	800728e <__swbuf_r+0x2e>
 80072fa:	2601      	movs	r6, #1
 80072fc:	4276      	negs	r6, r6
 80072fe:	e7ea      	b.n	80072d6 <__swbuf_r+0x76>
 8007300:	08009434 	.word	0x08009434
 8007304:	08009454 	.word	0x08009454
 8007308:	08009414 	.word	0x08009414

0800730c <__swsetup_r>:
 800730c:	4b37      	ldr	r3, [pc, #220]	; (80073ec <__swsetup_r+0xe0>)
 800730e:	b570      	push	{r4, r5, r6, lr}
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	0006      	movs	r6, r0
 8007314:	000c      	movs	r4, r1
 8007316:	2d00      	cmp	r5, #0
 8007318:	d005      	beq.n	8007326 <__swsetup_r+0x1a>
 800731a:	69ab      	ldr	r3, [r5, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <__swsetup_r+0x1a>
 8007320:	0028      	movs	r0, r5
 8007322:	f001 f845 	bl	80083b0 <__sinit>
 8007326:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <__swsetup_r+0xe4>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d10f      	bne.n	800734c <__swsetup_r+0x40>
 800732c:	686c      	ldr	r4, [r5, #4]
 800732e:	230c      	movs	r3, #12
 8007330:	5ee2      	ldrsh	r2, [r4, r3]
 8007332:	b293      	uxth	r3, r2
 8007334:	0711      	lsls	r1, r2, #28
 8007336:	d42d      	bmi.n	8007394 <__swsetup_r+0x88>
 8007338:	06d9      	lsls	r1, r3, #27
 800733a:	d411      	bmi.n	8007360 <__swsetup_r+0x54>
 800733c:	2309      	movs	r3, #9
 800733e:	2001      	movs	r0, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	3337      	adds	r3, #55	; 0x37
 8007344:	4313      	orrs	r3, r2
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	4240      	negs	r0, r0
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <__swsetup_r+0xe8>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d101      	bne.n	8007356 <__swsetup_r+0x4a>
 8007352:	68ac      	ldr	r4, [r5, #8]
 8007354:	e7eb      	b.n	800732e <__swsetup_r+0x22>
 8007356:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <__swsetup_r+0xec>)
 8007358:	429c      	cmp	r4, r3
 800735a:	d1e8      	bne.n	800732e <__swsetup_r+0x22>
 800735c:	68ec      	ldr	r4, [r5, #12]
 800735e:	e7e6      	b.n	800732e <__swsetup_r+0x22>
 8007360:	075b      	lsls	r3, r3, #29
 8007362:	d513      	bpl.n	800738c <__swsetup_r+0x80>
 8007364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007366:	2900      	cmp	r1, #0
 8007368:	d008      	beq.n	800737c <__swsetup_r+0x70>
 800736a:	0023      	movs	r3, r4
 800736c:	3344      	adds	r3, #68	; 0x44
 800736e:	4299      	cmp	r1, r3
 8007370:	d002      	beq.n	8007378 <__swsetup_r+0x6c>
 8007372:	0030      	movs	r0, r6
 8007374:	f001 fd0e 	bl	8008d94 <_free_r>
 8007378:	2300      	movs	r3, #0
 800737a:	6363      	str	r3, [r4, #52]	; 0x34
 800737c:	2224      	movs	r2, #36	; 0x24
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	4393      	bics	r3, r2
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	2300      	movs	r3, #0
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	2308      	movs	r3, #8
 800738e:	89a2      	ldrh	r2, [r4, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <__swsetup_r+0xa6>
 800739a:	21a0      	movs	r1, #160	; 0xa0
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	0089      	lsls	r1, r1, #2
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	400b      	ands	r3, r1
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <__swsetup_r+0xa6>
 80073aa:	0021      	movs	r1, r4
 80073ac:	0030      	movs	r0, r6
 80073ae:	f001 f8cf 	bl	8008550 <__smakebuf_r>
 80073b2:	220c      	movs	r2, #12
 80073b4:	5ea3      	ldrsh	r3, [r4, r2]
 80073b6:	2001      	movs	r0, #1
 80073b8:	001a      	movs	r2, r3
 80073ba:	b299      	uxth	r1, r3
 80073bc:	4002      	ands	r2, r0
 80073be:	4203      	tst	r3, r0
 80073c0:	d00f      	beq.n	80073e2 <__swsetup_r+0xd6>
 80073c2:	2200      	movs	r2, #0
 80073c4:	60a2      	str	r2, [r4, #8]
 80073c6:	6962      	ldr	r2, [r4, #20]
 80073c8:	4252      	negs	r2, r2
 80073ca:	61a2      	str	r2, [r4, #24]
 80073cc:	2000      	movs	r0, #0
 80073ce:	6922      	ldr	r2, [r4, #16]
 80073d0:	4282      	cmp	r2, r0
 80073d2:	d1ba      	bne.n	800734a <__swsetup_r+0x3e>
 80073d4:	060a      	lsls	r2, r1, #24
 80073d6:	d5b8      	bpl.n	800734a <__swsetup_r+0x3e>
 80073d8:	2240      	movs	r2, #64	; 0x40
 80073da:	4313      	orrs	r3, r2
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	3801      	subs	r0, #1
 80073e0:	e7b3      	b.n	800734a <__swsetup_r+0x3e>
 80073e2:	0788      	lsls	r0, r1, #30
 80073e4:	d400      	bmi.n	80073e8 <__swsetup_r+0xdc>
 80073e6:	6962      	ldr	r2, [r4, #20]
 80073e8:	60a2      	str	r2, [r4, #8]
 80073ea:	e7ef      	b.n	80073cc <__swsetup_r+0xc0>
 80073ec:	2000000c 	.word	0x2000000c
 80073f0:	08009434 	.word	0x08009434
 80073f4:	08009454 	.word	0x08009454
 80073f8:	08009414 	.word	0x08009414

080073fc <abort>:
 80073fc:	2006      	movs	r0, #6
 80073fe:	b510      	push	{r4, lr}
 8007400:	f001 fde6 	bl	8008fd0 <raise>
 8007404:	2001      	movs	r0, #1
 8007406:	f7fb fb5b 	bl	8002ac0 <_exit>

0800740a <quorem>:
 800740a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740c:	0006      	movs	r6, r0
 800740e:	690b      	ldr	r3, [r1, #16]
 8007410:	6932      	ldr	r2, [r6, #16]
 8007412:	b087      	sub	sp, #28
 8007414:	2000      	movs	r0, #0
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	429a      	cmp	r2, r3
 800741a:	db65      	blt.n	80074e8 <quorem+0xde>
 800741c:	3b01      	subs	r3, #1
 800741e:	009c      	lsls	r4, r3, #2
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	000b      	movs	r3, r1
 8007424:	3314      	adds	r3, #20
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	191b      	adds	r3, r3, r4
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	0033      	movs	r3, r6
 800742e:	3314      	adds	r3, #20
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	191c      	adds	r4, r3, r4
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	6827      	ldr	r7, [r4, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0038      	movs	r0, r7
 800743c:	1c5d      	adds	r5, r3, #1
 800743e:	0029      	movs	r1, r5
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	f7f8 fe7d 	bl	8000140 <__udivsi3>
 8007446:	9001      	str	r0, [sp, #4]
 8007448:	42af      	cmp	r7, r5
 800744a:	d324      	bcc.n	8007496 <quorem+0x8c>
 800744c:	2500      	movs	r5, #0
 800744e:	46ac      	mov	ip, r5
 8007450:	9802      	ldr	r0, [sp, #8]
 8007452:	9f05      	ldr	r7, [sp, #20]
 8007454:	cf08      	ldmia	r7!, {r3}
 8007456:	9a01      	ldr	r2, [sp, #4]
 8007458:	b299      	uxth	r1, r3
 800745a:	4351      	muls	r1, r2
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	4353      	muls	r3, r2
 8007460:	1949      	adds	r1, r1, r5
 8007462:	0c0a      	lsrs	r2, r1, #16
 8007464:	189b      	adds	r3, r3, r2
 8007466:	6802      	ldr	r2, [r0, #0]
 8007468:	b289      	uxth	r1, r1
 800746a:	b292      	uxth	r2, r2
 800746c:	4462      	add	r2, ip
 800746e:	1a52      	subs	r2, r2, r1
 8007470:	6801      	ldr	r1, [r0, #0]
 8007472:	0c1d      	lsrs	r5, r3, #16
 8007474:	0c09      	lsrs	r1, r1, #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	1acb      	subs	r3, r1, r3
 800747a:	1411      	asrs	r1, r2, #16
 800747c:	185b      	adds	r3, r3, r1
 800747e:	1419      	asrs	r1, r3, #16
 8007480:	b292      	uxth	r2, r2
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	431a      	orrs	r2, r3
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	468c      	mov	ip, r1
 800748a:	c004      	stmia	r0!, {r2}
 800748c:	42bb      	cmp	r3, r7
 800748e:	d2e1      	bcs.n	8007454 <quorem+0x4a>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d030      	beq.n	80074f8 <quorem+0xee>
 8007496:	0030      	movs	r0, r6
 8007498:	9903      	ldr	r1, [sp, #12]
 800749a:	f001 fb37 	bl	8008b0c <__mcmp>
 800749e:	2800      	cmp	r0, #0
 80074a0:	db21      	blt.n	80074e6 <quorem+0xdc>
 80074a2:	0030      	movs	r0, r6
 80074a4:	2400      	movs	r4, #0
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	9903      	ldr	r1, [sp, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	3014      	adds	r0, #20
 80074b0:	3114      	adds	r1, #20
 80074b2:	6803      	ldr	r3, [r0, #0]
 80074b4:	c920      	ldmia	r1!, {r5}
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	1914      	adds	r4, r2, r4
 80074ba:	b2aa      	uxth	r2, r5
 80074bc:	1aa2      	subs	r2, r4, r2
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	0c2d      	lsrs	r5, r5, #16
 80074c2:	1414      	asrs	r4, r2, #16
 80074c4:	1b5b      	subs	r3, r3, r5
 80074c6:	191b      	adds	r3, r3, r4
 80074c8:	141c      	asrs	r4, r3, #16
 80074ca:	b292      	uxth	r2, r2
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	4313      	orrs	r3, r2
 80074d0:	c008      	stmia	r0!, {r3}
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	428b      	cmp	r3, r1
 80074d6:	d2ec      	bcs.n	80074b2 <quorem+0xa8>
 80074d8:	9b00      	ldr	r3, [sp, #0]
 80074da:	9a02      	ldr	r2, [sp, #8]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	18d3      	adds	r3, r2, r3
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d015      	beq.n	8007512 <quorem+0x108>
 80074e6:	9801      	ldr	r0, [sp, #4]
 80074e8:	b007      	add	sp, #28
 80074ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <quorem+0xf6>
 80074f2:	9b00      	ldr	r3, [sp, #0]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	3c04      	subs	r4, #4
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	d3f5      	bcc.n	80074ec <quorem+0xe2>
 8007500:	9b00      	ldr	r3, [sp, #0]
 8007502:	6133      	str	r3, [r6, #16]
 8007504:	e7c7      	b.n	8007496 <quorem+0x8c>
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	2a00      	cmp	r2, #0
 800750a:	d106      	bne.n	800751a <quorem+0x110>
 800750c:	9a00      	ldr	r2, [sp, #0]
 800750e:	3a01      	subs	r2, #1
 8007510:	9200      	str	r2, [sp, #0]
 8007512:	9a02      	ldr	r2, [sp, #8]
 8007514:	3b04      	subs	r3, #4
 8007516:	429a      	cmp	r2, r3
 8007518:	d3f5      	bcc.n	8007506 <quorem+0xfc>
 800751a:	9b00      	ldr	r3, [sp, #0]
 800751c:	6133      	str	r3, [r6, #16]
 800751e:	e7e2      	b.n	80074e6 <quorem+0xdc>

08007520 <_dtoa_r>:
 8007520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	9202      	str	r2, [sp, #8]
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	9c03      	ldr	r4, [sp, #12]
 800752c:	9308      	str	r3, [sp, #32]
 800752e:	9409      	str	r4, [sp, #36]	; 0x24
 8007530:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007532:	0007      	movs	r7, r0
 8007534:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007536:	2c00      	cmp	r4, #0
 8007538:	d10e      	bne.n	8007558 <_dtoa_r+0x38>
 800753a:	2010      	movs	r0, #16
 800753c:	f001 f84c 	bl	80085d8 <malloc>
 8007540:	1e02      	subs	r2, r0, #0
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
 8007544:	d104      	bne.n	8007550 <_dtoa_r+0x30>
 8007546:	21ea      	movs	r1, #234	; 0xea
 8007548:	4bc7      	ldr	r3, [pc, #796]	; (8007868 <_dtoa_r+0x348>)
 800754a:	48c8      	ldr	r0, [pc, #800]	; (800786c <_dtoa_r+0x34c>)
 800754c:	f7ff f850 	bl	80065f0 <__assert_func>
 8007550:	6044      	str	r4, [r0, #4]
 8007552:	6084      	str	r4, [r0, #8]
 8007554:	6004      	str	r4, [r0, #0]
 8007556:	60c4      	str	r4, [r0, #12]
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	6819      	ldr	r1, [r3, #0]
 800755c:	2900      	cmp	r1, #0
 800755e:	d00a      	beq.n	8007576 <_dtoa_r+0x56>
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	2301      	movs	r3, #1
 8007564:	4093      	lsls	r3, r2
 8007566:	604a      	str	r2, [r1, #4]
 8007568:	608b      	str	r3, [r1, #8]
 800756a:	0038      	movs	r0, r7
 800756c:	f001 f88e 	bl	800868c <_Bfree>
 8007570:	2200      	movs	r2, #0
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	da20      	bge.n	80075be <_dtoa_r+0x9e>
 800757c:	2301      	movs	r3, #1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800758a:	4bb9      	ldr	r3, [pc, #740]	; (8007870 <_dtoa_r+0x350>)
 800758c:	4ab8      	ldr	r2, [pc, #736]	; (8007870 <_dtoa_r+0x350>)
 800758e:	402b      	ands	r3, r5
 8007590:	4293      	cmp	r3, r2
 8007592:	d117      	bne.n	80075c4 <_dtoa_r+0xa4>
 8007594:	4bb7      	ldr	r3, [pc, #732]	; (8007874 <_dtoa_r+0x354>)
 8007596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007598:	0328      	lsls	r0, r5, #12
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	0b00      	lsrs	r0, r0, #12
 80075a0:	4318      	orrs	r0, r3
 80075a2:	d101      	bne.n	80075a8 <_dtoa_r+0x88>
 80075a4:	f000 fdbf 	bl	8008126 <_dtoa_r+0xc06>
 80075a8:	48b3      	ldr	r0, [pc, #716]	; (8007878 <_dtoa_r+0x358>)
 80075aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075ac:	9006      	str	r0, [sp, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <_dtoa_r+0x98>
 80075b2:	4bb2      	ldr	r3, [pc, #712]	; (800787c <_dtoa_r+0x35c>)
 80075b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	9806      	ldr	r0, [sp, #24]
 80075ba:	b01d      	add	sp, #116	; 0x74
 80075bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075be:	2300      	movs	r3, #0
 80075c0:	602b      	str	r3, [r5, #0]
 80075c2:	e7e1      	b.n	8007588 <_dtoa_r+0x68>
 80075c4:	9b08      	ldr	r3, [sp, #32]
 80075c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80075c8:	9312      	str	r3, [sp, #72]	; 0x48
 80075ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80075cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80075ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80075d0:	2200      	movs	r2, #0
 80075d2:	2300      	movs	r3, #0
 80075d4:	f7f8 ff3a 	bl	800044c <__aeabi_dcmpeq>
 80075d8:	1e04      	subs	r4, r0, #0
 80075da:	d009      	beq.n	80075f0 <_dtoa_r+0xd0>
 80075dc:	2301      	movs	r3, #1
 80075de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4ba7      	ldr	r3, [pc, #668]	; (8007880 <_dtoa_r+0x360>)
 80075e4:	9306      	str	r3, [sp, #24]
 80075e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0e5      	beq.n	80075b8 <_dtoa_r+0x98>
 80075ec:	4ba5      	ldr	r3, [pc, #660]	; (8007884 <_dtoa_r+0x364>)
 80075ee:	e7e1      	b.n	80075b4 <_dtoa_r+0x94>
 80075f0:	ab1a      	add	r3, sp, #104	; 0x68
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	0038      	movs	r0, r7
 80075fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075fe:	f001 fb39 	bl	8008c74 <__d2b>
 8007602:	006e      	lsls	r6, r5, #1
 8007604:	9005      	str	r0, [sp, #20]
 8007606:	0d76      	lsrs	r6, r6, #21
 8007608:	d100      	bne.n	800760c <_dtoa_r+0xec>
 800760a:	e07c      	b.n	8007706 <_dtoa_r+0x1e6>
 800760c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800760e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007612:	4a9d      	ldr	r2, [pc, #628]	; (8007888 <_dtoa_r+0x368>)
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	0b1b      	lsrs	r3, r3, #12
 8007618:	431a      	orrs	r2, r3
 800761a:	0011      	movs	r1, r2
 800761c:	4b9b      	ldr	r3, [pc, #620]	; (800788c <_dtoa_r+0x36c>)
 800761e:	9418      	str	r4, [sp, #96]	; 0x60
 8007620:	18f6      	adds	r6, r6, r3
 8007622:	2200      	movs	r2, #0
 8007624:	4b9a      	ldr	r3, [pc, #616]	; (8007890 <_dtoa_r+0x370>)
 8007626:	f7fa fa03 	bl	8001a30 <__aeabi_dsub>
 800762a:	4a9a      	ldr	r2, [pc, #616]	; (8007894 <_dtoa_r+0x374>)
 800762c:	4b9a      	ldr	r3, [pc, #616]	; (8007898 <_dtoa_r+0x378>)
 800762e:	f7f9 ff93 	bl	8001558 <__aeabi_dmul>
 8007632:	4a9a      	ldr	r2, [pc, #616]	; (800789c <_dtoa_r+0x37c>)
 8007634:	4b9a      	ldr	r3, [pc, #616]	; (80078a0 <_dtoa_r+0x380>)
 8007636:	f7f9 f851 	bl	80006dc <__aeabi_dadd>
 800763a:	0004      	movs	r4, r0
 800763c:	0030      	movs	r0, r6
 800763e:	000d      	movs	r5, r1
 8007640:	f7fa fddc 	bl	80021fc <__aeabi_i2d>
 8007644:	4a97      	ldr	r2, [pc, #604]	; (80078a4 <_dtoa_r+0x384>)
 8007646:	4b98      	ldr	r3, [pc, #608]	; (80078a8 <_dtoa_r+0x388>)
 8007648:	f7f9 ff86 	bl	8001558 <__aeabi_dmul>
 800764c:	0002      	movs	r2, r0
 800764e:	000b      	movs	r3, r1
 8007650:	0020      	movs	r0, r4
 8007652:	0029      	movs	r1, r5
 8007654:	f7f9 f842 	bl	80006dc <__aeabi_dadd>
 8007658:	0004      	movs	r4, r0
 800765a:	000d      	movs	r5, r1
 800765c:	f7fa fd98 	bl	8002190 <__aeabi_d2iz>
 8007660:	2200      	movs	r2, #0
 8007662:	9002      	str	r0, [sp, #8]
 8007664:	2300      	movs	r3, #0
 8007666:	0020      	movs	r0, r4
 8007668:	0029      	movs	r1, r5
 800766a:	f7f8 fef5 	bl	8000458 <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	d00b      	beq.n	800768a <_dtoa_r+0x16a>
 8007672:	9802      	ldr	r0, [sp, #8]
 8007674:	f7fa fdc2 	bl	80021fc <__aeabi_i2d>
 8007678:	002b      	movs	r3, r5
 800767a:	0022      	movs	r2, r4
 800767c:	f7f8 fee6 	bl	800044c <__aeabi_dcmpeq>
 8007680:	4243      	negs	r3, r0
 8007682:	4158      	adcs	r0, r3
 8007684:	9b02      	ldr	r3, [sp, #8]
 8007686:	1a1b      	subs	r3, r3, r0
 8007688:	9302      	str	r3, [sp, #8]
 800768a:	2301      	movs	r3, #1
 800768c:	9316      	str	r3, [sp, #88]	; 0x58
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	2b16      	cmp	r3, #22
 8007692:	d80f      	bhi.n	80076b4 <_dtoa_r+0x194>
 8007694:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007696:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007698:	00da      	lsls	r2, r3, #3
 800769a:	4b84      	ldr	r3, [pc, #528]	; (80078ac <_dtoa_r+0x38c>)
 800769c:	189b      	adds	r3, r3, r2
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f7f8 fed9 	bl	8000458 <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d049      	beq.n	800773e <_dtoa_r+0x21e>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9316      	str	r3, [sp, #88]	; 0x58
 80076b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80076b6:	1b9e      	subs	r6, r3, r6
 80076b8:	2300      	movs	r3, #0
 80076ba:	930a      	str	r3, [sp, #40]	; 0x28
 80076bc:	0033      	movs	r3, r6
 80076be:	3b01      	subs	r3, #1
 80076c0:	930d      	str	r3, [sp, #52]	; 0x34
 80076c2:	d504      	bpl.n	80076ce <_dtoa_r+0x1ae>
 80076c4:	2301      	movs	r3, #1
 80076c6:	1b9b      	subs	r3, r3, r6
 80076c8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ca:	2300      	movs	r3, #0
 80076cc:	930d      	str	r3, [sp, #52]	; 0x34
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db36      	blt.n	8007742 <_dtoa_r+0x222>
 80076d4:	9a02      	ldr	r2, [sp, #8]
 80076d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076d8:	4694      	mov	ip, r2
 80076da:	4463      	add	r3, ip
 80076dc:	930d      	str	r3, [sp, #52]	; 0x34
 80076de:	2300      	movs	r3, #0
 80076e0:	9215      	str	r2, [sp, #84]	; 0x54
 80076e2:	930e      	str	r3, [sp, #56]	; 0x38
 80076e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076e6:	2401      	movs	r4, #1
 80076e8:	2b09      	cmp	r3, #9
 80076ea:	d864      	bhi.n	80077b6 <_dtoa_r+0x296>
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	dd02      	ble.n	80076f6 <_dtoa_r+0x1d6>
 80076f0:	2400      	movs	r4, #0
 80076f2:	3b04      	subs	r3, #4
 80076f4:	9322      	str	r3, [sp, #136]	; 0x88
 80076f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076f8:	1e98      	subs	r0, r3, #2
 80076fa:	2803      	cmp	r0, #3
 80076fc:	d864      	bhi.n	80077c8 <_dtoa_r+0x2a8>
 80076fe:	f7f8 fd0b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007702:	3829      	.short	0x3829
 8007704:	5836      	.short	0x5836
 8007706:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007708:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800770a:	189e      	adds	r6, r3, r2
 800770c:	4b68      	ldr	r3, [pc, #416]	; (80078b0 <_dtoa_r+0x390>)
 800770e:	18f2      	adds	r2, r6, r3
 8007710:	2a20      	cmp	r2, #32
 8007712:	dd0f      	ble.n	8007734 <_dtoa_r+0x214>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	409d      	lsls	r5, r3
 800771a:	4b66      	ldr	r3, [pc, #408]	; (80078b4 <_dtoa_r+0x394>)
 800771c:	9802      	ldr	r0, [sp, #8]
 800771e:	18f3      	adds	r3, r6, r3
 8007720:	40d8      	lsrs	r0, r3
 8007722:	4328      	orrs	r0, r5
 8007724:	f7fa fd9a 	bl	800225c <__aeabi_ui2d>
 8007728:	2301      	movs	r3, #1
 800772a:	4c63      	ldr	r4, [pc, #396]	; (80078b8 <_dtoa_r+0x398>)
 800772c:	3e01      	subs	r6, #1
 800772e:	1909      	adds	r1, r1, r4
 8007730:	9318      	str	r3, [sp, #96]	; 0x60
 8007732:	e776      	b.n	8007622 <_dtoa_r+0x102>
 8007734:	2320      	movs	r3, #32
 8007736:	9802      	ldr	r0, [sp, #8]
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	4098      	lsls	r0, r3
 800773c:	e7f2      	b.n	8007724 <_dtoa_r+0x204>
 800773e:	9016      	str	r0, [sp, #88]	; 0x58
 8007740:	e7b8      	b.n	80076b4 <_dtoa_r+0x194>
 8007742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007744:	9a02      	ldr	r2, [sp, #8]
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	930a      	str	r3, [sp, #40]	; 0x28
 800774a:	4253      	negs	r3, r2
 800774c:	930e      	str	r3, [sp, #56]	; 0x38
 800774e:	2300      	movs	r3, #0
 8007750:	9315      	str	r3, [sp, #84]	; 0x54
 8007752:	e7c7      	b.n	80076e4 <_dtoa_r+0x1c4>
 8007754:	2300      	movs	r3, #0
 8007756:	930f      	str	r3, [sp, #60]	; 0x3c
 8007758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800775a:	930c      	str	r3, [sp, #48]	; 0x30
 800775c:	9307      	str	r3, [sp, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc13      	bgt.n	800778a <_dtoa_r+0x26a>
 8007762:	2301      	movs	r3, #1
 8007764:	001a      	movs	r2, r3
 8007766:	930c      	str	r3, [sp, #48]	; 0x30
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	9223      	str	r2, [sp, #140]	; 0x8c
 800776c:	e00d      	b.n	800778a <_dtoa_r+0x26a>
 800776e:	2301      	movs	r3, #1
 8007770:	e7f1      	b.n	8007756 <_dtoa_r+0x236>
 8007772:	2300      	movs	r3, #0
 8007774:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007776:	930f      	str	r3, [sp, #60]	; 0x3c
 8007778:	4694      	mov	ip, r2
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	4463      	add	r3, ip
 800777e:	930c      	str	r3, [sp, #48]	; 0x30
 8007780:	3301      	adds	r3, #1
 8007782:	9307      	str	r3, [sp, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc00      	bgt.n	800778a <_dtoa_r+0x26a>
 8007788:	2301      	movs	r3, #1
 800778a:	2200      	movs	r2, #0
 800778c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800778e:	6042      	str	r2, [r0, #4]
 8007790:	3204      	adds	r2, #4
 8007792:	0015      	movs	r5, r2
 8007794:	3514      	adds	r5, #20
 8007796:	6841      	ldr	r1, [r0, #4]
 8007798:	429d      	cmp	r5, r3
 800779a:	d919      	bls.n	80077d0 <_dtoa_r+0x2b0>
 800779c:	0038      	movs	r0, r7
 800779e:	f000 ff31 	bl	8008604 <_Balloc>
 80077a2:	9006      	str	r0, [sp, #24]
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d117      	bne.n	80077d8 <_dtoa_r+0x2b8>
 80077a8:	21d5      	movs	r1, #213	; 0xd5
 80077aa:	0002      	movs	r2, r0
 80077ac:	4b43      	ldr	r3, [pc, #268]	; (80078bc <_dtoa_r+0x39c>)
 80077ae:	0049      	lsls	r1, r1, #1
 80077b0:	e6cb      	b.n	800754a <_dtoa_r+0x2a>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e7de      	b.n	8007774 <_dtoa_r+0x254>
 80077b6:	2300      	movs	r3, #0
 80077b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80077ba:	9322      	str	r3, [sp, #136]	; 0x88
 80077bc:	3b01      	subs	r3, #1
 80077be:	930c      	str	r3, [sp, #48]	; 0x30
 80077c0:	9307      	str	r3, [sp, #28]
 80077c2:	2200      	movs	r2, #0
 80077c4:	3313      	adds	r3, #19
 80077c6:	e7d0      	b.n	800776a <_dtoa_r+0x24a>
 80077c8:	2301      	movs	r3, #1
 80077ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80077cc:	3b02      	subs	r3, #2
 80077ce:	e7f6      	b.n	80077be <_dtoa_r+0x29e>
 80077d0:	3101      	adds	r1, #1
 80077d2:	6041      	str	r1, [r0, #4]
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	e7dc      	b.n	8007792 <_dtoa_r+0x272>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	9a06      	ldr	r2, [sp, #24]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	9b07      	ldr	r3, [sp, #28]
 80077e0:	2b0e      	cmp	r3, #14
 80077e2:	d900      	bls.n	80077e6 <_dtoa_r+0x2c6>
 80077e4:	e0eb      	b.n	80079be <_dtoa_r+0x49e>
 80077e6:	2c00      	cmp	r4, #0
 80077e8:	d100      	bne.n	80077ec <_dtoa_r+0x2cc>
 80077ea:	e0e8      	b.n	80079be <_dtoa_r+0x49e>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd68      	ble.n	80078c4 <_dtoa_r+0x3a4>
 80077f2:	001a      	movs	r2, r3
 80077f4:	210f      	movs	r1, #15
 80077f6:	4b2d      	ldr	r3, [pc, #180]	; (80078ac <_dtoa_r+0x38c>)
 80077f8:	400a      	ands	r2, r1
 80077fa:	00d2      	lsls	r2, r2, #3
 80077fc:	189b      	adds	r3, r3, r2
 80077fe:	681d      	ldr	r5, [r3, #0]
 8007800:	685e      	ldr	r6, [r3, #4]
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	111c      	asrs	r4, r3, #4
 8007806:	2302      	movs	r3, #2
 8007808:	9310      	str	r3, [sp, #64]	; 0x40
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	05db      	lsls	r3, r3, #23
 800780e:	d50b      	bpl.n	8007828 <_dtoa_r+0x308>
 8007810:	4b2b      	ldr	r3, [pc, #172]	; (80078c0 <_dtoa_r+0x3a0>)
 8007812:	400c      	ands	r4, r1
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	9812      	ldr	r0, [sp, #72]	; 0x48
 800781a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800781c:	f7f9 fa9a 	bl	8000d54 <__aeabi_ddiv>
 8007820:	2303      	movs	r3, #3
 8007822:	9008      	str	r0, [sp, #32]
 8007824:	9109      	str	r1, [sp, #36]	; 0x24
 8007826:	9310      	str	r3, [sp, #64]	; 0x40
 8007828:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <_dtoa_r+0x3a0>)
 800782a:	9314      	str	r3, [sp, #80]	; 0x50
 800782c:	2c00      	cmp	r4, #0
 800782e:	d108      	bne.n	8007842 <_dtoa_r+0x322>
 8007830:	9808      	ldr	r0, [sp, #32]
 8007832:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007834:	002a      	movs	r2, r5
 8007836:	0033      	movs	r3, r6
 8007838:	f7f9 fa8c 	bl	8000d54 <__aeabi_ddiv>
 800783c:	9008      	str	r0, [sp, #32]
 800783e:	9109      	str	r1, [sp, #36]	; 0x24
 8007840:	e05c      	b.n	80078fc <_dtoa_r+0x3dc>
 8007842:	2301      	movs	r3, #1
 8007844:	421c      	tst	r4, r3
 8007846:	d00b      	beq.n	8007860 <_dtoa_r+0x340>
 8007848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800784a:	0028      	movs	r0, r5
 800784c:	3301      	adds	r3, #1
 800784e:	9310      	str	r3, [sp, #64]	; 0x40
 8007850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007852:	0031      	movs	r1, r6
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f7f9 fe7e 	bl	8001558 <__aeabi_dmul>
 800785c:	0005      	movs	r5, r0
 800785e:	000e      	movs	r6, r1
 8007860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007862:	1064      	asrs	r4, r4, #1
 8007864:	3308      	adds	r3, #8
 8007866:	e7e0      	b.n	800782a <_dtoa_r+0x30a>
 8007868:	0800938e 	.word	0x0800938e
 800786c:	080093a5 	.word	0x080093a5
 8007870:	7ff00000 	.word	0x7ff00000
 8007874:	0000270f 	.word	0x0000270f
 8007878:	0800938a 	.word	0x0800938a
 800787c:	0800938d 	.word	0x0800938d
 8007880:	0800935d 	.word	0x0800935d
 8007884:	0800935e 	.word	0x0800935e
 8007888:	3ff00000 	.word	0x3ff00000
 800788c:	fffffc01 	.word	0xfffffc01
 8007890:	3ff80000 	.word	0x3ff80000
 8007894:	636f4361 	.word	0x636f4361
 8007898:	3fd287a7 	.word	0x3fd287a7
 800789c:	8b60c8b3 	.word	0x8b60c8b3
 80078a0:	3fc68a28 	.word	0x3fc68a28
 80078a4:	509f79fb 	.word	0x509f79fb
 80078a8:	3fd34413 	.word	0x3fd34413
 80078ac:	080094f8 	.word	0x080094f8
 80078b0:	00000432 	.word	0x00000432
 80078b4:	00000412 	.word	0x00000412
 80078b8:	fe100000 	.word	0xfe100000
 80078bc:	08009400 	.word	0x08009400
 80078c0:	080094d0 	.word	0x080094d0
 80078c4:	2302      	movs	r3, #2
 80078c6:	9310      	str	r3, [sp, #64]	; 0x40
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <_dtoa_r+0x3dc>
 80078ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078d2:	425c      	negs	r4, r3
 80078d4:	230f      	movs	r3, #15
 80078d6:	4ab6      	ldr	r2, [pc, #728]	; (8007bb0 <_dtoa_r+0x690>)
 80078d8:	4023      	ands	r3, r4
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	18d3      	adds	r3, r2, r3
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f7f9 fe39 	bl	8001558 <__aeabi_dmul>
 80078e6:	2601      	movs	r6, #1
 80078e8:	2300      	movs	r3, #0
 80078ea:	9008      	str	r0, [sp, #32]
 80078ec:	9109      	str	r1, [sp, #36]	; 0x24
 80078ee:	4db1      	ldr	r5, [pc, #708]	; (8007bb4 <_dtoa_r+0x694>)
 80078f0:	1124      	asrs	r4, r4, #4
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d000      	beq.n	80078f8 <_dtoa_r+0x3d8>
 80078f6:	e094      	b.n	8007a22 <_dtoa_r+0x502>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d19f      	bne.n	800783c <_dtoa_r+0x31c>
 80078fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d100      	bne.n	8007904 <_dtoa_r+0x3e4>
 8007902:	e09b      	b.n	8007a3c <_dtoa_r+0x51c>
 8007904:	9c08      	ldr	r4, [sp, #32]
 8007906:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007908:	2200      	movs	r2, #0
 800790a:	0020      	movs	r0, r4
 800790c:	0029      	movs	r1, r5
 800790e:	4baa      	ldr	r3, [pc, #680]	; (8007bb8 <_dtoa_r+0x698>)
 8007910:	f7f8 fda2 	bl	8000458 <__aeabi_dcmplt>
 8007914:	2800      	cmp	r0, #0
 8007916:	d100      	bne.n	800791a <_dtoa_r+0x3fa>
 8007918:	e090      	b.n	8007a3c <_dtoa_r+0x51c>
 800791a:	9b07      	ldr	r3, [sp, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d100      	bne.n	8007922 <_dtoa_r+0x402>
 8007920:	e08c      	b.n	8007a3c <_dtoa_r+0x51c>
 8007922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd46      	ble.n	80079b6 <_dtoa_r+0x496>
 8007928:	9b02      	ldr	r3, [sp, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	0020      	movs	r0, r4
 800792e:	0029      	movs	r1, r5
 8007930:	1e5e      	subs	r6, r3, #1
 8007932:	4ba2      	ldr	r3, [pc, #648]	; (8007bbc <_dtoa_r+0x69c>)
 8007934:	f7f9 fe10 	bl	8001558 <__aeabi_dmul>
 8007938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800793a:	9008      	str	r0, [sp, #32]
 800793c:	9109      	str	r1, [sp, #36]	; 0x24
 800793e:	3301      	adds	r3, #1
 8007940:	9310      	str	r3, [sp, #64]	; 0x40
 8007942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007944:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007946:	9c08      	ldr	r4, [sp, #32]
 8007948:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800794a:	9314      	str	r3, [sp, #80]	; 0x50
 800794c:	f7fa fc56 	bl	80021fc <__aeabi_i2d>
 8007950:	0022      	movs	r2, r4
 8007952:	002b      	movs	r3, r5
 8007954:	f7f9 fe00 	bl	8001558 <__aeabi_dmul>
 8007958:	2200      	movs	r2, #0
 800795a:	4b99      	ldr	r3, [pc, #612]	; (8007bc0 <_dtoa_r+0x6a0>)
 800795c:	f7f8 febe 	bl	80006dc <__aeabi_dadd>
 8007960:	9010      	str	r0, [sp, #64]	; 0x40
 8007962:	9111      	str	r1, [sp, #68]	; 0x44
 8007964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007968:	9208      	str	r2, [sp, #32]
 800796a:	9309      	str	r3, [sp, #36]	; 0x24
 800796c:	4a95      	ldr	r2, [pc, #596]	; (8007bc4 <_dtoa_r+0x6a4>)
 800796e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007970:	4694      	mov	ip, r2
 8007972:	4463      	add	r3, ip
 8007974:	9317      	str	r3, [sp, #92]	; 0x5c
 8007976:	9309      	str	r3, [sp, #36]	; 0x24
 8007978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d161      	bne.n	8007a42 <_dtoa_r+0x522>
 800797e:	2200      	movs	r2, #0
 8007980:	0020      	movs	r0, r4
 8007982:	0029      	movs	r1, r5
 8007984:	4b90      	ldr	r3, [pc, #576]	; (8007bc8 <_dtoa_r+0x6a8>)
 8007986:	f7fa f853 	bl	8001a30 <__aeabi_dsub>
 800798a:	9a08      	ldr	r2, [sp, #32]
 800798c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800798e:	0004      	movs	r4, r0
 8007990:	000d      	movs	r5, r1
 8007992:	f7f8 fd75 	bl	8000480 <__aeabi_dcmpgt>
 8007996:	2800      	cmp	r0, #0
 8007998:	d000      	beq.n	800799c <_dtoa_r+0x47c>
 800799a:	e2af      	b.n	8007efc <_dtoa_r+0x9dc>
 800799c:	488b      	ldr	r0, [pc, #556]	; (8007bcc <_dtoa_r+0x6ac>)
 800799e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079a0:	4684      	mov	ip, r0
 80079a2:	4461      	add	r1, ip
 80079a4:	000b      	movs	r3, r1
 80079a6:	0020      	movs	r0, r4
 80079a8:	0029      	movs	r1, r5
 80079aa:	9a08      	ldr	r2, [sp, #32]
 80079ac:	f7f8 fd54 	bl	8000458 <__aeabi_dcmplt>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d000      	beq.n	80079b6 <_dtoa_r+0x496>
 80079b4:	e29f      	b.n	8007ef6 <_dtoa_r+0x9d6>
 80079b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80079ba:	9308      	str	r3, [sp, #32]
 80079bc:	9409      	str	r4, [sp, #36]	; 0x24
 80079be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da00      	bge.n	80079c6 <_dtoa_r+0x4a6>
 80079c4:	e172      	b.n	8007cac <_dtoa_r+0x78c>
 80079c6:	9a02      	ldr	r2, [sp, #8]
 80079c8:	2a0e      	cmp	r2, #14
 80079ca:	dd00      	ble.n	80079ce <_dtoa_r+0x4ae>
 80079cc:	e16e      	b.n	8007cac <_dtoa_r+0x78c>
 80079ce:	4b78      	ldr	r3, [pc, #480]	; (8007bb0 <_dtoa_r+0x690>)
 80079d0:	00d2      	lsls	r2, r2, #3
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	685c      	ldr	r4, [r3, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	930a      	str	r3, [sp, #40]	; 0x28
 80079da:	940b      	str	r4, [sp, #44]	; 0x2c
 80079dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db00      	blt.n	80079e4 <_dtoa_r+0x4c4>
 80079e2:	e0f7      	b.n	8007bd4 <_dtoa_r+0x6b4>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd00      	ble.n	80079ec <_dtoa_r+0x4cc>
 80079ea:	e0f3      	b.n	8007bd4 <_dtoa_r+0x6b4>
 80079ec:	d000      	beq.n	80079f0 <_dtoa_r+0x4d0>
 80079ee:	e282      	b.n	8007ef6 <_dtoa_r+0x9d6>
 80079f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079f4:	2200      	movs	r2, #0
 80079f6:	4b74      	ldr	r3, [pc, #464]	; (8007bc8 <_dtoa_r+0x6a8>)
 80079f8:	f7f9 fdae 	bl	8001558 <__aeabi_dmul>
 80079fc:	9a08      	ldr	r2, [sp, #32]
 80079fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a00:	f7f8 fd48 	bl	8000494 <__aeabi_dcmpge>
 8007a04:	9e07      	ldr	r6, [sp, #28]
 8007a06:	0035      	movs	r5, r6
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d000      	beq.n	8007a0e <_dtoa_r+0x4ee>
 8007a0c:	e259      	b.n	8007ec2 <_dtoa_r+0x9a2>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	9a06      	ldr	r2, [sp, #24]
 8007a12:	3301      	adds	r3, #1
 8007a14:	9308      	str	r3, [sp, #32]
 8007a16:	2331      	movs	r3, #49	; 0x31
 8007a18:	7013      	strb	r3, [r2, #0]
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9302      	str	r3, [sp, #8]
 8007a20:	e254      	b.n	8007ecc <_dtoa_r+0x9ac>
 8007a22:	4234      	tst	r4, r6
 8007a24:	d007      	beq.n	8007a36 <_dtoa_r+0x516>
 8007a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a28:	3301      	adds	r3, #1
 8007a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a2c:	682a      	ldr	r2, [r5, #0]
 8007a2e:	686b      	ldr	r3, [r5, #4]
 8007a30:	f7f9 fd92 	bl	8001558 <__aeabi_dmul>
 8007a34:	0033      	movs	r3, r6
 8007a36:	1064      	asrs	r4, r4, #1
 8007a38:	3508      	adds	r5, #8
 8007a3a:	e75a      	b.n	80078f2 <_dtoa_r+0x3d2>
 8007a3c:	9e02      	ldr	r6, [sp, #8]
 8007a3e:	9b07      	ldr	r3, [sp, #28]
 8007a40:	e780      	b.n	8007944 <_dtoa_r+0x424>
 8007a42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a46:	1e5a      	subs	r2, r3, #1
 8007a48:	4b59      	ldr	r3, [pc, #356]	; (8007bb0 <_dtoa_r+0x690>)
 8007a4a:	00d2      	lsls	r2, r2, #3
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2900      	cmp	r1, #0
 8007a54:	d051      	beq.n	8007afa <_dtoa_r+0x5da>
 8007a56:	2000      	movs	r0, #0
 8007a58:	495d      	ldr	r1, [pc, #372]	; (8007bd0 <_dtoa_r+0x6b0>)
 8007a5a:	f7f9 f97b 	bl	8000d54 <__aeabi_ddiv>
 8007a5e:	9a08      	ldr	r2, [sp, #32]
 8007a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a62:	f7f9 ffe5 	bl	8001a30 <__aeabi_dsub>
 8007a66:	9a06      	ldr	r2, [sp, #24]
 8007a68:	9b06      	ldr	r3, [sp, #24]
 8007a6a:	4694      	mov	ip, r2
 8007a6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a70:	9010      	str	r0, [sp, #64]	; 0x40
 8007a72:	9111      	str	r1, [sp, #68]	; 0x44
 8007a74:	4463      	add	r3, ip
 8007a76:	9319      	str	r3, [sp, #100]	; 0x64
 8007a78:	0029      	movs	r1, r5
 8007a7a:	0020      	movs	r0, r4
 8007a7c:	f7fa fb88 	bl	8002190 <__aeabi_d2iz>
 8007a80:	9014      	str	r0, [sp, #80]	; 0x50
 8007a82:	f7fa fbbb 	bl	80021fc <__aeabi_i2d>
 8007a86:	0002      	movs	r2, r0
 8007a88:	000b      	movs	r3, r1
 8007a8a:	0020      	movs	r0, r4
 8007a8c:	0029      	movs	r1, r5
 8007a8e:	f7f9 ffcf 	bl	8001a30 <__aeabi_dsub>
 8007a92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a96:	3301      	adds	r3, #1
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a9c:	0004      	movs	r4, r0
 8007a9e:	3330      	adds	r3, #48	; 0x30
 8007aa0:	7013      	strb	r3, [r2, #0]
 8007aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007aa6:	000d      	movs	r5, r1
 8007aa8:	f7f8 fcd6 	bl	8000458 <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d175      	bne.n	8007b9c <_dtoa_r+0x67c>
 8007ab0:	0022      	movs	r2, r4
 8007ab2:	002b      	movs	r3, r5
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	4940      	ldr	r1, [pc, #256]	; (8007bb8 <_dtoa_r+0x698>)
 8007ab8:	f7f9 ffba 	bl	8001a30 <__aeabi_dsub>
 8007abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ac0:	f7f8 fcca 	bl	8000458 <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d000      	beq.n	8007aca <_dtoa_r+0x5aa>
 8007ac8:	e0d2      	b.n	8007c70 <_dtoa_r+0x750>
 8007aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007acc:	9a08      	ldr	r2, [sp, #32]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <_dtoa_r+0x5b4>
 8007ad2:	e770      	b.n	80079b6 <_dtoa_r+0x496>
 8007ad4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <_dtoa_r+0x69c>)
 8007adc:	f7f9 fd3c 	bl	8001558 <__aeabi_dmul>
 8007ae0:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <_dtoa_r+0x69c>)
 8007ae2:	9010      	str	r0, [sp, #64]	; 0x40
 8007ae4:	9111      	str	r1, [sp, #68]	; 0x44
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	0020      	movs	r0, r4
 8007aea:	0029      	movs	r1, r5
 8007aec:	f7f9 fd34 	bl	8001558 <__aeabi_dmul>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	0004      	movs	r4, r0
 8007af4:	000d      	movs	r5, r1
 8007af6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007af8:	e7be      	b.n	8007a78 <_dtoa_r+0x558>
 8007afa:	9808      	ldr	r0, [sp, #32]
 8007afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007afe:	f7f9 fd2b 	bl	8001558 <__aeabi_dmul>
 8007b02:	9a06      	ldr	r2, [sp, #24]
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	4694      	mov	ip, r2
 8007b08:	9308      	str	r3, [sp, #32]
 8007b0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b0c:	9010      	str	r0, [sp, #64]	; 0x40
 8007b0e:	9111      	str	r1, [sp, #68]	; 0x44
 8007b10:	4463      	add	r3, ip
 8007b12:	9319      	str	r3, [sp, #100]	; 0x64
 8007b14:	0029      	movs	r1, r5
 8007b16:	0020      	movs	r0, r4
 8007b18:	f7fa fb3a 	bl	8002190 <__aeabi_d2iz>
 8007b1c:	9017      	str	r0, [sp, #92]	; 0x5c
 8007b1e:	f7fa fb6d 	bl	80021fc <__aeabi_i2d>
 8007b22:	0002      	movs	r2, r0
 8007b24:	000b      	movs	r3, r1
 8007b26:	0020      	movs	r0, r4
 8007b28:	0029      	movs	r1, r5
 8007b2a:	f7f9 ff81 	bl	8001a30 <__aeabi_dsub>
 8007b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b30:	9a08      	ldr	r2, [sp, #32]
 8007b32:	3330      	adds	r3, #48	; 0x30
 8007b34:	7013      	strb	r3, [r2, #0]
 8007b36:	0013      	movs	r3, r2
 8007b38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	0004      	movs	r4, r0
 8007b3e:	000d      	movs	r5, r1
 8007b40:	9308      	str	r3, [sp, #32]
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d12c      	bne.n	8007ba0 <_dtoa_r+0x680>
 8007b46:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b48:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b4a:	9a06      	ldr	r2, [sp, #24]
 8007b4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b4e:	4694      	mov	ip, r2
 8007b50:	4463      	add	r3, ip
 8007b52:	2200      	movs	r2, #0
 8007b54:	9308      	str	r3, [sp, #32]
 8007b56:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <_dtoa_r+0x6b0>)
 8007b58:	f7f8 fdc0 	bl	80006dc <__aeabi_dadd>
 8007b5c:	0002      	movs	r2, r0
 8007b5e:	000b      	movs	r3, r1
 8007b60:	0020      	movs	r0, r4
 8007b62:	0029      	movs	r1, r5
 8007b64:	f7f8 fc8c 	bl	8000480 <__aeabi_dcmpgt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d000      	beq.n	8007b6e <_dtoa_r+0x64e>
 8007b6c:	e080      	b.n	8007c70 <_dtoa_r+0x750>
 8007b6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b72:	2000      	movs	r0, #0
 8007b74:	4916      	ldr	r1, [pc, #88]	; (8007bd0 <_dtoa_r+0x6b0>)
 8007b76:	f7f9 ff5b 	bl	8001a30 <__aeabi_dsub>
 8007b7a:	0002      	movs	r2, r0
 8007b7c:	000b      	movs	r3, r1
 8007b7e:	0020      	movs	r0, r4
 8007b80:	0029      	movs	r1, r5
 8007b82:	f7f8 fc69 	bl	8000458 <__aeabi_dcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d100      	bne.n	8007b8c <_dtoa_r+0x66c>
 8007b8a:	e714      	b.n	80079b6 <_dtoa_r+0x496>
 8007b8c:	9b08      	ldr	r3, [sp, #32]
 8007b8e:	001a      	movs	r2, r3
 8007b90:	3a01      	subs	r2, #1
 8007b92:	9208      	str	r2, [sp, #32]
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	2a30      	cmp	r2, #48	; 0x30
 8007b98:	d0f8      	beq.n	8007b8c <_dtoa_r+0x66c>
 8007b9a:	9308      	str	r3, [sp, #32]
 8007b9c:	9602      	str	r6, [sp, #8]
 8007b9e:	e055      	b.n	8007c4c <_dtoa_r+0x72c>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4b06      	ldr	r3, [pc, #24]	; (8007bbc <_dtoa_r+0x69c>)
 8007ba4:	f7f9 fcd8 	bl	8001558 <__aeabi_dmul>
 8007ba8:	0004      	movs	r4, r0
 8007baa:	000d      	movs	r5, r1
 8007bac:	e7b2      	b.n	8007b14 <_dtoa_r+0x5f4>
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	080094f8 	.word	0x080094f8
 8007bb4:	080094d0 	.word	0x080094d0
 8007bb8:	3ff00000 	.word	0x3ff00000
 8007bbc:	40240000 	.word	0x40240000
 8007bc0:	401c0000 	.word	0x401c0000
 8007bc4:	fcc00000 	.word	0xfcc00000
 8007bc8:	40140000 	.word	0x40140000
 8007bcc:	7cc00000 	.word	0x7cc00000
 8007bd0:	3fe00000 	.word	0x3fe00000
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	9e06      	ldr	r6, [sp, #24]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	199b      	adds	r3, r3, r6
 8007bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8007bde:	9c08      	ldr	r4, [sp, #32]
 8007be0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be6:	0020      	movs	r0, r4
 8007be8:	0029      	movs	r1, r5
 8007bea:	f7f9 f8b3 	bl	8000d54 <__aeabi_ddiv>
 8007bee:	f7fa facf 	bl	8002190 <__aeabi_d2iz>
 8007bf2:	9007      	str	r0, [sp, #28]
 8007bf4:	f7fa fb02 	bl	80021fc <__aeabi_i2d>
 8007bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	f7f9 fcac 	bl	8001558 <__aeabi_dmul>
 8007c00:	0002      	movs	r2, r0
 8007c02:	000b      	movs	r3, r1
 8007c04:	0020      	movs	r0, r4
 8007c06:	0029      	movs	r1, r5
 8007c08:	f7f9 ff12 	bl	8001a30 <__aeabi_dsub>
 8007c0c:	0033      	movs	r3, r6
 8007c0e:	9a07      	ldr	r2, [sp, #28]
 8007c10:	3601      	adds	r6, #1
 8007c12:	3230      	adds	r2, #48	; 0x30
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c18:	9608      	str	r6, [sp, #32]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d139      	bne.n	8007c92 <_dtoa_r+0x772>
 8007c1e:	0002      	movs	r2, r0
 8007c20:	000b      	movs	r3, r1
 8007c22:	f7f8 fd5b 	bl	80006dc <__aeabi_dadd>
 8007c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	0004      	movs	r4, r0
 8007c2c:	000d      	movs	r5, r1
 8007c2e:	f7f8 fc27 	bl	8000480 <__aeabi_dcmpgt>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d11b      	bne.n	8007c6e <_dtoa_r+0x74e>
 8007c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3a:	0020      	movs	r0, r4
 8007c3c:	0029      	movs	r1, r5
 8007c3e:	f7f8 fc05 	bl	800044c <__aeabi_dcmpeq>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d002      	beq.n	8007c4c <_dtoa_r+0x72c>
 8007c46:	9b07      	ldr	r3, [sp, #28]
 8007c48:	07db      	lsls	r3, r3, #31
 8007c4a:	d410      	bmi.n	8007c6e <_dtoa_r+0x74e>
 8007c4c:	0038      	movs	r0, r7
 8007c4e:	9905      	ldr	r1, [sp, #20]
 8007c50:	f000 fd1c 	bl	800868c <_Bfree>
 8007c54:	2300      	movs	r3, #0
 8007c56:	9a08      	ldr	r2, [sp, #32]
 8007c58:	9802      	ldr	r0, [sp, #8]
 8007c5a:	7013      	strb	r3, [r2, #0]
 8007c5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c5e:	3001      	adds	r0, #1
 8007c60:	6018      	str	r0, [r3, #0]
 8007c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d100      	bne.n	8007c6a <_dtoa_r+0x74a>
 8007c68:	e4a6      	b.n	80075b8 <_dtoa_r+0x98>
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	e4a4      	b.n	80075b8 <_dtoa_r+0x98>
 8007c6e:	9e02      	ldr	r6, [sp, #8]
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	2a39      	cmp	r2, #57	; 0x39
 8007c7a:	d106      	bne.n	8007c8a <_dtoa_r+0x76a>
 8007c7c:	9a06      	ldr	r2, [sp, #24]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d1f7      	bne.n	8007c72 <_dtoa_r+0x752>
 8007c82:	2230      	movs	r2, #48	; 0x30
 8007c84:	9906      	ldr	r1, [sp, #24]
 8007c86:	3601      	adds	r6, #1
 8007c88:	700a      	strb	r2, [r1, #0]
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	e784      	b.n	8007b9c <_dtoa_r+0x67c>
 8007c92:	2200      	movs	r2, #0
 8007c94:	4baa      	ldr	r3, [pc, #680]	; (8007f40 <_dtoa_r+0xa20>)
 8007c96:	f7f9 fc5f 	bl	8001558 <__aeabi_dmul>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	0004      	movs	r4, r0
 8007ca0:	000d      	movs	r5, r1
 8007ca2:	f7f8 fbd3 	bl	800044c <__aeabi_dcmpeq>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d09b      	beq.n	8007be2 <_dtoa_r+0x6c2>
 8007caa:	e7cf      	b.n	8007c4c <_dtoa_r+0x72c>
 8007cac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007cb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	d012      	beq.n	8007cdc <_dtoa_r+0x7bc>
 8007cb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007cb8:	2a01      	cmp	r2, #1
 8007cba:	dc66      	bgt.n	8007d8a <_dtoa_r+0x86a>
 8007cbc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	d05d      	beq.n	8007d7e <_dtoa_r+0x85e>
 8007cc2:	4aa0      	ldr	r2, [pc, #640]	; (8007f44 <_dtoa_r+0xa24>)
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc8:	2101      	movs	r1, #1
 8007cca:	18d2      	adds	r2, r2, r3
 8007ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd0:	0038      	movs	r0, r7
 8007cd2:	18d3      	adds	r3, r2, r3
 8007cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8007cd6:	f000 fd89 	bl	80087ec <__i2b>
 8007cda:	0005      	movs	r5, r0
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	dd0e      	ble.n	8007cfe <_dtoa_r+0x7de>
 8007ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd0b      	ble.n	8007cfe <_dtoa_r+0x7de>
 8007ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ce8:	0023      	movs	r3, r4
 8007cea:	4294      	cmp	r4, r2
 8007cec:	dd00      	ble.n	8007cf0 <_dtoa_r+0x7d0>
 8007cee:	0013      	movs	r3, r2
 8007cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf2:	1ae4      	subs	r4, r4, r3
 8007cf4:	1ad2      	subs	r2, r2, r3
 8007cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8007cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01f      	beq.n	8007d44 <_dtoa_r+0x824>
 8007d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d054      	beq.n	8007db4 <_dtoa_r+0x894>
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	dd11      	ble.n	8007d32 <_dtoa_r+0x812>
 8007d0e:	0029      	movs	r1, r5
 8007d10:	0032      	movs	r2, r6
 8007d12:	0038      	movs	r0, r7
 8007d14:	f000 fe30 	bl	8008978 <__pow5mult>
 8007d18:	9a05      	ldr	r2, [sp, #20]
 8007d1a:	0001      	movs	r1, r0
 8007d1c:	0005      	movs	r5, r0
 8007d1e:	0038      	movs	r0, r7
 8007d20:	f000 fd7a 	bl	8008818 <__multiply>
 8007d24:	9905      	ldr	r1, [sp, #20]
 8007d26:	9014      	str	r0, [sp, #80]	; 0x50
 8007d28:	0038      	movs	r0, r7
 8007d2a:	f000 fcaf 	bl	800868c <_Bfree>
 8007d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d34:	1b9a      	subs	r2, r3, r6
 8007d36:	42b3      	cmp	r3, r6
 8007d38:	d004      	beq.n	8007d44 <_dtoa_r+0x824>
 8007d3a:	0038      	movs	r0, r7
 8007d3c:	9905      	ldr	r1, [sp, #20]
 8007d3e:	f000 fe1b 	bl	8008978 <__pow5mult>
 8007d42:	9005      	str	r0, [sp, #20]
 8007d44:	2101      	movs	r1, #1
 8007d46:	0038      	movs	r0, r7
 8007d48:	f000 fd50 	bl	80087ec <__i2b>
 8007d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d4e:	0006      	movs	r6, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dd31      	ble.n	8007db8 <_dtoa_r+0x898>
 8007d54:	001a      	movs	r2, r3
 8007d56:	0001      	movs	r1, r0
 8007d58:	0038      	movs	r0, r7
 8007d5a:	f000 fe0d 	bl	8008978 <__pow5mult>
 8007d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d60:	0006      	movs	r6, r0
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	dd2d      	ble.n	8007dc2 <_dtoa_r+0x8a2>
 8007d66:	2300      	movs	r3, #0
 8007d68:	930e      	str	r3, [sp, #56]	; 0x38
 8007d6a:	6933      	ldr	r3, [r6, #16]
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	18f3      	adds	r3, r6, r3
 8007d72:	6858      	ldr	r0, [r3, #4]
 8007d74:	f000 fcf2 	bl	800875c <__hi0bits>
 8007d78:	2320      	movs	r3, #32
 8007d7a:	1a18      	subs	r0, r3, r0
 8007d7c:	e039      	b.n	8007df2 <_dtoa_r+0x8d2>
 8007d7e:	2336      	movs	r3, #54	; 0x36
 8007d80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	e79d      	b.n	8007cc6 <_dtoa_r+0x7a6>
 8007d8a:	9b07      	ldr	r3, [sp, #28]
 8007d8c:	1e5e      	subs	r6, r3, #1
 8007d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	db07      	blt.n	8007da4 <_dtoa_r+0x884>
 8007d94:	1b9e      	subs	r6, r3, r6
 8007d96:	9b07      	ldr	r3, [sp, #28]
 8007d98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da93      	bge.n	8007cc6 <_dtoa_r+0x7a6>
 8007d9e:	1ae4      	subs	r4, r4, r3
 8007da0:	2300      	movs	r3, #0
 8007da2:	e790      	b.n	8007cc6 <_dtoa_r+0x7a6>
 8007da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007da6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007da8:	1af3      	subs	r3, r6, r3
 8007daa:	18d3      	adds	r3, r2, r3
 8007dac:	960e      	str	r6, [sp, #56]	; 0x38
 8007dae:	9315      	str	r3, [sp, #84]	; 0x54
 8007db0:	2600      	movs	r6, #0
 8007db2:	e7f0      	b.n	8007d96 <_dtoa_r+0x876>
 8007db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007db6:	e7c0      	b.n	8007d3a <_dtoa_r+0x81a>
 8007db8:	2300      	movs	r3, #0
 8007dba:	930e      	str	r3, [sp, #56]	; 0x38
 8007dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	dc13      	bgt.n	8007dea <_dtoa_r+0x8ca>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dc6:	9b08      	ldr	r3, [sp, #32]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10e      	bne.n	8007dea <_dtoa_r+0x8ca>
 8007dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dce:	031b      	lsls	r3, r3, #12
 8007dd0:	d10b      	bne.n	8007dea <_dtoa_r+0x8ca>
 8007dd2:	4b5d      	ldr	r3, [pc, #372]	; (8007f48 <_dtoa_r+0xa28>)
 8007dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd6:	4213      	tst	r3, r2
 8007dd8:	d007      	beq.n	8007dea <_dtoa_r+0x8ca>
 8007dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ddc:	3301      	adds	r3, #1
 8007dde:	930a      	str	r3, [sp, #40]	; 0x28
 8007de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de2:	3301      	adds	r3, #1
 8007de4:	930d      	str	r3, [sp, #52]	; 0x34
 8007de6:	2301      	movs	r3, #1
 8007de8:	930e      	str	r3, [sp, #56]	; 0x38
 8007dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dec:	2001      	movs	r0, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1bb      	bne.n	8007d6a <_dtoa_r+0x84a>
 8007df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007df4:	221f      	movs	r2, #31
 8007df6:	1818      	adds	r0, r3, r0
 8007df8:	0003      	movs	r3, r0
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	4210      	tst	r0, r2
 8007dfe:	d046      	beq.n	8007e8e <_dtoa_r+0x96e>
 8007e00:	3201      	adds	r2, #1
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	2a04      	cmp	r2, #4
 8007e06:	dd3f      	ble.n	8007e88 <_dtoa_r+0x968>
 8007e08:	221c      	movs	r2, #28
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e0e:	18e4      	adds	r4, r4, r3
 8007e10:	18d2      	adds	r2, r2, r3
 8007e12:	920a      	str	r2, [sp, #40]	; 0x28
 8007e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e16:	18d3      	adds	r3, r2, r3
 8007e18:	930d      	str	r3, [sp, #52]	; 0x34
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dd05      	ble.n	8007e2c <_dtoa_r+0x90c>
 8007e20:	001a      	movs	r2, r3
 8007e22:	0038      	movs	r0, r7
 8007e24:	9905      	ldr	r1, [sp, #20]
 8007e26:	f000 fe03 	bl	8008a30 <__lshift>
 8007e2a:	9005      	str	r0, [sp, #20]
 8007e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dd05      	ble.n	8007e3e <_dtoa_r+0x91e>
 8007e32:	0031      	movs	r1, r6
 8007e34:	001a      	movs	r2, r3
 8007e36:	0038      	movs	r0, r7
 8007e38:	f000 fdfa 	bl	8008a30 <__lshift>
 8007e3c:	0006      	movs	r6, r0
 8007e3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d026      	beq.n	8007e92 <_dtoa_r+0x972>
 8007e44:	0031      	movs	r1, r6
 8007e46:	9805      	ldr	r0, [sp, #20]
 8007e48:	f000 fe60 	bl	8008b0c <__mcmp>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	da20      	bge.n	8007e92 <_dtoa_r+0x972>
 8007e50:	9b02      	ldr	r3, [sp, #8]
 8007e52:	220a      	movs	r2, #10
 8007e54:	3b01      	subs	r3, #1
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	0038      	movs	r0, r7
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9905      	ldr	r1, [sp, #20]
 8007e5e:	f000 fc39 	bl	80086d4 <__multadd>
 8007e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e64:	9005      	str	r0, [sp, #20]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d100      	bne.n	8007e6c <_dtoa_r+0x94c>
 8007e6a:	e166      	b.n	800813a <_dtoa_r+0xc1a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	0029      	movs	r1, r5
 8007e70:	220a      	movs	r2, #10
 8007e72:	0038      	movs	r0, r7
 8007e74:	f000 fc2e 	bl	80086d4 <__multadd>
 8007e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7a:	0005      	movs	r5, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc47      	bgt.n	8007f10 <_dtoa_r+0x9f0>
 8007e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	dc0d      	bgt.n	8007ea2 <_dtoa_r+0x982>
 8007e86:	e043      	b.n	8007f10 <_dtoa_r+0x9f0>
 8007e88:	2a04      	cmp	r2, #4
 8007e8a:	d0c6      	beq.n	8007e1a <_dtoa_r+0x8fa>
 8007e8c:	0013      	movs	r3, r2
 8007e8e:	331c      	adds	r3, #28
 8007e90:	e7bc      	b.n	8007e0c <_dtoa_r+0x8ec>
 8007e92:	9b07      	ldr	r3, [sp, #28]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dc35      	bgt.n	8007f04 <_dtoa_r+0x9e4>
 8007e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	dd32      	ble.n	8007f04 <_dtoa_r+0x9e4>
 8007e9e:	9b07      	ldr	r3, [sp, #28]
 8007ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10c      	bne.n	8007ec2 <_dtoa_r+0x9a2>
 8007ea8:	0031      	movs	r1, r6
 8007eaa:	2205      	movs	r2, #5
 8007eac:	0038      	movs	r0, r7
 8007eae:	f000 fc11 	bl	80086d4 <__multadd>
 8007eb2:	0006      	movs	r6, r0
 8007eb4:	0001      	movs	r1, r0
 8007eb6:	9805      	ldr	r0, [sp, #20]
 8007eb8:	f000 fe28 	bl	8008b0c <__mcmp>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dd00      	ble.n	8007ec2 <_dtoa_r+0x9a2>
 8007ec0:	e5a5      	b.n	8007a0e <_dtoa_r+0x4ee>
 8007ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	9302      	str	r3, [sp, #8]
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	2400      	movs	r4, #0
 8007ece:	0031      	movs	r1, r6
 8007ed0:	0038      	movs	r0, r7
 8007ed2:	f000 fbdb 	bl	800868c <_Bfree>
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	d100      	bne.n	8007edc <_dtoa_r+0x9bc>
 8007eda:	e6b7      	b.n	8007c4c <_dtoa_r+0x72c>
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	d005      	beq.n	8007eec <_dtoa_r+0x9cc>
 8007ee0:	42ac      	cmp	r4, r5
 8007ee2:	d003      	beq.n	8007eec <_dtoa_r+0x9cc>
 8007ee4:	0021      	movs	r1, r4
 8007ee6:	0038      	movs	r0, r7
 8007ee8:	f000 fbd0 	bl	800868c <_Bfree>
 8007eec:	0029      	movs	r1, r5
 8007eee:	0038      	movs	r0, r7
 8007ef0:	f000 fbcc 	bl	800868c <_Bfree>
 8007ef4:	e6aa      	b.n	8007c4c <_dtoa_r+0x72c>
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	0035      	movs	r5, r6
 8007efa:	e7e2      	b.n	8007ec2 <_dtoa_r+0x9a2>
 8007efc:	9602      	str	r6, [sp, #8]
 8007efe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007f00:	0035      	movs	r5, r6
 8007f02:	e584      	b.n	8007a0e <_dtoa_r+0x4ee>
 8007f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d100      	bne.n	8007f0c <_dtoa_r+0x9ec>
 8007f0a:	e0ce      	b.n	80080aa <_dtoa_r+0xb8a>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	dd05      	ble.n	8007f20 <_dtoa_r+0xa00>
 8007f14:	0029      	movs	r1, r5
 8007f16:	0022      	movs	r2, r4
 8007f18:	0038      	movs	r0, r7
 8007f1a:	f000 fd89 	bl	8008a30 <__lshift>
 8007f1e:	0005      	movs	r5, r0
 8007f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f22:	0028      	movs	r0, r5
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d022      	beq.n	8007f6e <_dtoa_r+0xa4e>
 8007f28:	0038      	movs	r0, r7
 8007f2a:	6869      	ldr	r1, [r5, #4]
 8007f2c:	f000 fb6a 	bl	8008604 <_Balloc>
 8007f30:	1e04      	subs	r4, r0, #0
 8007f32:	d10f      	bne.n	8007f54 <_dtoa_r+0xa34>
 8007f34:	0002      	movs	r2, r0
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <_dtoa_r+0xa2c>)
 8007f38:	4905      	ldr	r1, [pc, #20]	; (8007f50 <_dtoa_r+0xa30>)
 8007f3a:	f7ff fb06 	bl	800754a <_dtoa_r+0x2a>
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	40240000 	.word	0x40240000
 8007f44:	00000433 	.word	0x00000433
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	08009400 	.word	0x08009400
 8007f50:	000002ea 	.word	0x000002ea
 8007f54:	0029      	movs	r1, r5
 8007f56:	692b      	ldr	r3, [r5, #16]
 8007f58:	310c      	adds	r1, #12
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	300c      	adds	r0, #12
 8007f60:	f7fe fb9e 	bl	80066a0 <memcpy>
 8007f64:	2201      	movs	r2, #1
 8007f66:	0021      	movs	r1, r4
 8007f68:	0038      	movs	r0, r7
 8007f6a:	f000 fd61 	bl	8008a30 <__lshift>
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f72:	930a      	str	r3, [sp, #40]	; 0x28
 8007f74:	3b01      	subs	r3, #1
 8007f76:	189b      	adds	r3, r3, r2
 8007f78:	2201      	movs	r2, #1
 8007f7a:	002c      	movs	r4, r5
 8007f7c:	0005      	movs	r5, r0
 8007f7e:	9314      	str	r3, [sp, #80]	; 0x50
 8007f80:	9b08      	ldr	r3, [sp, #32]
 8007f82:	4013      	ands	r3, r2
 8007f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f86:	0031      	movs	r1, r6
 8007f88:	9805      	ldr	r0, [sp, #20]
 8007f8a:	f7ff fa3e 	bl	800740a <quorem>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	0021      	movs	r1, r4
 8007f92:	3330      	adds	r3, #48	; 0x30
 8007f94:	900d      	str	r0, [sp, #52]	; 0x34
 8007f96:	9805      	ldr	r0, [sp, #20]
 8007f98:	9307      	str	r3, [sp, #28]
 8007f9a:	f000 fdb7 	bl	8008b0c <__mcmp>
 8007f9e:	002a      	movs	r2, r5
 8007fa0:	900e      	str	r0, [sp, #56]	; 0x38
 8007fa2:	0031      	movs	r1, r6
 8007fa4:	0038      	movs	r0, r7
 8007fa6:	f000 fdcd 	bl	8008b44 <__mdiff>
 8007faa:	68c3      	ldr	r3, [r0, #12]
 8007fac:	9008      	str	r0, [sp, #32]
 8007fae:	9310      	str	r3, [sp, #64]	; 0x40
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <_dtoa_r+0xaa4>
 8007fba:	0001      	movs	r1, r0
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	f000 fda5 	bl	8008b0c <__mcmp>
 8007fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8007fc4:	0038      	movs	r0, r7
 8007fc6:	9908      	ldr	r1, [sp, #32]
 8007fc8:	f000 fb60 	bl	800868c <_Bfree>
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	9308      	str	r3, [sp, #32]
 8007fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d10c      	bne.n	8007ff8 <_dtoa_r+0xad8>
 8007fde:	9b07      	ldr	r3, [sp, #28]
 8007fe0:	2b39      	cmp	r3, #57	; 0x39
 8007fe2:	d026      	beq.n	8008032 <_dtoa_r+0xb12>
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd02      	ble.n	8007ff0 <_dtoa_r+0xad0>
 8007fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fec:	3331      	adds	r3, #49	; 0x31
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff2:	9a07      	ldr	r2, [sp, #28]
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e76a      	b.n	8007ece <_dtoa_r+0x9ae>
 8007ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db04      	blt.n	8008008 <_dtoa_r+0xae8>
 8007ffe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008000:	4313      	orrs	r3, r2
 8008002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008004:	4313      	orrs	r3, r2
 8008006:	d11f      	bne.n	8008048 <_dtoa_r+0xb28>
 8008008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800a:	2b00      	cmp	r3, #0
 800800c:	ddf0      	ble.n	8007ff0 <_dtoa_r+0xad0>
 800800e:	9905      	ldr	r1, [sp, #20]
 8008010:	2201      	movs	r2, #1
 8008012:	0038      	movs	r0, r7
 8008014:	f000 fd0c 	bl	8008a30 <__lshift>
 8008018:	0031      	movs	r1, r6
 800801a:	9005      	str	r0, [sp, #20]
 800801c:	f000 fd76 	bl	8008b0c <__mcmp>
 8008020:	2800      	cmp	r0, #0
 8008022:	dc03      	bgt.n	800802c <_dtoa_r+0xb0c>
 8008024:	d1e4      	bne.n	8007ff0 <_dtoa_r+0xad0>
 8008026:	9b07      	ldr	r3, [sp, #28]
 8008028:	07db      	lsls	r3, r3, #31
 800802a:	d5e1      	bpl.n	8007ff0 <_dtoa_r+0xad0>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	2b39      	cmp	r3, #57	; 0x39
 8008030:	d1db      	bne.n	8007fea <_dtoa_r+0xaca>
 8008032:	2339      	movs	r3, #57	; 0x39
 8008034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008036:	7013      	strb	r3, [r2, #0]
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	9308      	str	r3, [sp, #32]
 800803c:	3b01      	subs	r3, #1
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	2a39      	cmp	r2, #57	; 0x39
 8008042:	d068      	beq.n	8008116 <_dtoa_r+0xbf6>
 8008044:	3201      	adds	r2, #1
 8008046:	e7d5      	b.n	8007ff4 <_dtoa_r+0xad4>
 8008048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	dd07      	ble.n	800805e <_dtoa_r+0xb3e>
 800804e:	9b07      	ldr	r3, [sp, #28]
 8008050:	2b39      	cmp	r3, #57	; 0x39
 8008052:	d0ee      	beq.n	8008032 <_dtoa_r+0xb12>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008058:	3301      	adds	r3, #1
 800805a:	7013      	strb	r3, [r2, #0]
 800805c:	e737      	b.n	8007ece <_dtoa_r+0x9ae>
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	9a07      	ldr	r2, [sp, #28]
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008068:	4293      	cmp	r3, r2
 800806a:	d03e      	beq.n	80080ea <_dtoa_r+0xbca>
 800806c:	2300      	movs	r3, #0
 800806e:	220a      	movs	r2, #10
 8008070:	9905      	ldr	r1, [sp, #20]
 8008072:	0038      	movs	r0, r7
 8008074:	f000 fb2e 	bl	80086d4 <__multadd>
 8008078:	2300      	movs	r3, #0
 800807a:	9005      	str	r0, [sp, #20]
 800807c:	220a      	movs	r2, #10
 800807e:	0021      	movs	r1, r4
 8008080:	0038      	movs	r0, r7
 8008082:	42ac      	cmp	r4, r5
 8008084:	d106      	bne.n	8008094 <_dtoa_r+0xb74>
 8008086:	f000 fb25 	bl	80086d4 <__multadd>
 800808a:	0004      	movs	r4, r0
 800808c:	0005      	movs	r5, r0
 800808e:	9b08      	ldr	r3, [sp, #32]
 8008090:	930a      	str	r3, [sp, #40]	; 0x28
 8008092:	e778      	b.n	8007f86 <_dtoa_r+0xa66>
 8008094:	f000 fb1e 	bl	80086d4 <__multadd>
 8008098:	0029      	movs	r1, r5
 800809a:	0004      	movs	r4, r0
 800809c:	2300      	movs	r3, #0
 800809e:	220a      	movs	r2, #10
 80080a0:	0038      	movs	r0, r7
 80080a2:	f000 fb17 	bl	80086d4 <__multadd>
 80080a6:	0005      	movs	r5, r0
 80080a8:	e7f1      	b.n	800808e <_dtoa_r+0xb6e>
 80080aa:	9b07      	ldr	r3, [sp, #28]
 80080ac:	930c      	str	r3, [sp, #48]	; 0x30
 80080ae:	2400      	movs	r4, #0
 80080b0:	0031      	movs	r1, r6
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	f7ff f9a9 	bl	800740a <quorem>
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	3030      	adds	r0, #48	; 0x30
 80080bc:	5518      	strb	r0, [r3, r4]
 80080be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c0:	3401      	adds	r4, #1
 80080c2:	9007      	str	r0, [sp, #28]
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	dd07      	ble.n	80080d8 <_dtoa_r+0xbb8>
 80080c8:	2300      	movs	r3, #0
 80080ca:	220a      	movs	r2, #10
 80080cc:	0038      	movs	r0, r7
 80080ce:	9905      	ldr	r1, [sp, #20]
 80080d0:	f000 fb00 	bl	80086d4 <__multadd>
 80080d4:	9005      	str	r0, [sp, #20]
 80080d6:	e7eb      	b.n	80080b0 <_dtoa_r+0xb90>
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	2001      	movs	r0, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd00      	ble.n	80080e2 <_dtoa_r+0xbc2>
 80080e0:	0018      	movs	r0, r3
 80080e2:	2400      	movs	r4, #0
 80080e4:	9b06      	ldr	r3, [sp, #24]
 80080e6:	181b      	adds	r3, r3, r0
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	9905      	ldr	r1, [sp, #20]
 80080ec:	2201      	movs	r2, #1
 80080ee:	0038      	movs	r0, r7
 80080f0:	f000 fc9e 	bl	8008a30 <__lshift>
 80080f4:	0031      	movs	r1, r6
 80080f6:	9005      	str	r0, [sp, #20]
 80080f8:	f000 fd08 	bl	8008b0c <__mcmp>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	dc9b      	bgt.n	8008038 <_dtoa_r+0xb18>
 8008100:	d102      	bne.n	8008108 <_dtoa_r+0xbe8>
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	07db      	lsls	r3, r3, #31
 8008106:	d497      	bmi.n	8008038 <_dtoa_r+0xb18>
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	3b01      	subs	r3, #1
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	2a30      	cmp	r2, #48	; 0x30
 8008112:	d0fa      	beq.n	800810a <_dtoa_r+0xbea>
 8008114:	e6db      	b.n	8007ece <_dtoa_r+0x9ae>
 8008116:	9a06      	ldr	r2, [sp, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d18e      	bne.n	800803a <_dtoa_r+0xb1a>
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	3301      	adds	r3, #1
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	2331      	movs	r3, #49	; 0x31
 8008124:	e799      	b.n	800805a <_dtoa_r+0xb3a>
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <_dtoa_r+0xc2c>)
 8008128:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	4b08      	ldr	r3, [pc, #32]	; (8008150 <_dtoa_r+0xc30>)
 800812e:	2a00      	cmp	r2, #0
 8008130:	d001      	beq.n	8008136 <_dtoa_r+0xc16>
 8008132:	f7ff fa3f 	bl	80075b4 <_dtoa_r+0x94>
 8008136:	f7ff fa3f 	bl	80075b8 <_dtoa_r+0x98>
 800813a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	dcb6      	bgt.n	80080ae <_dtoa_r+0xb8e>
 8008140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008142:	2b02      	cmp	r3, #2
 8008144:	dd00      	ble.n	8008148 <_dtoa_r+0xc28>
 8008146:	e6ac      	b.n	8007ea2 <_dtoa_r+0x982>
 8008148:	e7b1      	b.n	80080ae <_dtoa_r+0xb8e>
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	08009381 	.word	0x08009381
 8008150:	08009389 	.word	0x08009389

08008154 <__sflush_r>:
 8008154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008156:	898b      	ldrh	r3, [r1, #12]
 8008158:	0005      	movs	r5, r0
 800815a:	000c      	movs	r4, r1
 800815c:	071a      	lsls	r2, r3, #28
 800815e:	d45f      	bmi.n	8008220 <__sflush_r+0xcc>
 8008160:	684a      	ldr	r2, [r1, #4]
 8008162:	2a00      	cmp	r2, #0
 8008164:	dc04      	bgt.n	8008170 <__sflush_r+0x1c>
 8008166:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008168:	2a00      	cmp	r2, #0
 800816a:	dc01      	bgt.n	8008170 <__sflush_r+0x1c>
 800816c:	2000      	movs	r0, #0
 800816e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008170:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008172:	2f00      	cmp	r7, #0
 8008174:	d0fa      	beq.n	800816c <__sflush_r+0x18>
 8008176:	2200      	movs	r2, #0
 8008178:	2180      	movs	r1, #128	; 0x80
 800817a:	682e      	ldr	r6, [r5, #0]
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	001a      	movs	r2, r3
 8008180:	0149      	lsls	r1, r1, #5
 8008182:	400a      	ands	r2, r1
 8008184:	420b      	tst	r3, r1
 8008186:	d034      	beq.n	80081f2 <__sflush_r+0x9e>
 8008188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	075b      	lsls	r3, r3, #29
 800818e:	d506      	bpl.n	800819e <__sflush_r+0x4a>
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	1ac0      	subs	r0, r0, r3
 8008194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <__sflush_r+0x4a>
 800819a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	0002      	movs	r2, r0
 80081a0:	6a21      	ldr	r1, [r4, #32]
 80081a2:	2300      	movs	r3, #0
 80081a4:	0028      	movs	r0, r5
 80081a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80081a8:	47b8      	blx	r7
 80081aa:	89a1      	ldrh	r1, [r4, #12]
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d106      	bne.n	80081be <__sflush_r+0x6a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b1d      	cmp	r3, #29
 80081b4:	d831      	bhi.n	800821a <__sflush_r+0xc6>
 80081b6:	4a2c      	ldr	r2, [pc, #176]	; (8008268 <__sflush_r+0x114>)
 80081b8:	40da      	lsrs	r2, r3
 80081ba:	07d3      	lsls	r3, r2, #31
 80081bc:	d52d      	bpl.n	800821a <__sflush_r+0xc6>
 80081be:	2300      	movs	r3, #0
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	04cb      	lsls	r3, r1, #19
 80081c8:	d505      	bpl.n	80081d6 <__sflush_r+0x82>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d102      	bne.n	80081d4 <__sflush_r+0x80>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d100      	bne.n	80081d6 <__sflush_r+0x82>
 80081d4:	6560      	str	r0, [r4, #84]	; 0x54
 80081d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d8:	602e      	str	r6, [r5, #0]
 80081da:	2900      	cmp	r1, #0
 80081dc:	d0c6      	beq.n	800816c <__sflush_r+0x18>
 80081de:	0023      	movs	r3, r4
 80081e0:	3344      	adds	r3, #68	; 0x44
 80081e2:	4299      	cmp	r1, r3
 80081e4:	d002      	beq.n	80081ec <__sflush_r+0x98>
 80081e6:	0028      	movs	r0, r5
 80081e8:	f000 fdd4 	bl	8008d94 <_free_r>
 80081ec:	2000      	movs	r0, #0
 80081ee:	6360      	str	r0, [r4, #52]	; 0x34
 80081f0:	e7bd      	b.n	800816e <__sflush_r+0x1a>
 80081f2:	2301      	movs	r3, #1
 80081f4:	0028      	movs	r0, r5
 80081f6:	6a21      	ldr	r1, [r4, #32]
 80081f8:	47b8      	blx	r7
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d1c5      	bne.n	800818a <__sflush_r+0x36>
 80081fe:	682b      	ldr	r3, [r5, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0c2      	beq.n	800818a <__sflush_r+0x36>
 8008204:	2b1d      	cmp	r3, #29
 8008206:	d001      	beq.n	800820c <__sflush_r+0xb8>
 8008208:	2b16      	cmp	r3, #22
 800820a:	d101      	bne.n	8008210 <__sflush_r+0xbc>
 800820c:	602e      	str	r6, [r5, #0]
 800820e:	e7ad      	b.n	800816c <__sflush_r+0x18>
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	89a2      	ldrh	r2, [r4, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	e7a9      	b.n	800816e <__sflush_r+0x1a>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	430b      	orrs	r3, r1
 800821e:	e7fa      	b.n	8008216 <__sflush_r+0xc2>
 8008220:	690f      	ldr	r7, [r1, #16]
 8008222:	2f00      	cmp	r7, #0
 8008224:	d0a2      	beq.n	800816c <__sflush_r+0x18>
 8008226:	680a      	ldr	r2, [r1, #0]
 8008228:	600f      	str	r7, [r1, #0]
 800822a:	1bd2      	subs	r2, r2, r7
 800822c:	9201      	str	r2, [sp, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	079b      	lsls	r3, r3, #30
 8008232:	d100      	bne.n	8008236 <__sflush_r+0xe2>
 8008234:	694a      	ldr	r2, [r1, #20]
 8008236:	60a2      	str	r2, [r4, #8]
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	dc00      	bgt.n	8008240 <__sflush_r+0xec>
 800823e:	e795      	b.n	800816c <__sflush_r+0x18>
 8008240:	003a      	movs	r2, r7
 8008242:	0028      	movs	r0, r5
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800824a:	47b0      	blx	r6
 800824c:	2800      	cmp	r0, #0
 800824e:	dc06      	bgt.n	800825e <__sflush_r+0x10a>
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	2001      	movs	r0, #1
 8008254:	89a2      	ldrh	r2, [r4, #12]
 8008256:	4240      	negs	r0, r0
 8008258:	4313      	orrs	r3, r2
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	e787      	b.n	800816e <__sflush_r+0x1a>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	183f      	adds	r7, r7, r0
 8008262:	1a1b      	subs	r3, r3, r0
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	e7e7      	b.n	8008238 <__sflush_r+0xe4>
 8008268:	20400001 	.word	0x20400001

0800826c <_fflush_r>:
 800826c:	690b      	ldr	r3, [r1, #16]
 800826e:	b570      	push	{r4, r5, r6, lr}
 8008270:	0005      	movs	r5, r0
 8008272:	000c      	movs	r4, r1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <_fflush_r+0x12>
 8008278:	2500      	movs	r5, #0
 800827a:	0028      	movs	r0, r5
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	2800      	cmp	r0, #0
 8008280:	d004      	beq.n	800828c <_fflush_r+0x20>
 8008282:	6983      	ldr	r3, [r0, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <_fflush_r+0x20>
 8008288:	f000 f892 	bl	80083b0 <__sinit>
 800828c:	4b14      	ldr	r3, [pc, #80]	; (80082e0 <_fflush_r+0x74>)
 800828e:	429c      	cmp	r4, r3
 8008290:	d11b      	bne.n	80082ca <_fflush_r+0x5e>
 8008292:	686c      	ldr	r4, [r5, #4]
 8008294:	220c      	movs	r2, #12
 8008296:	5ea3      	ldrsh	r3, [r4, r2]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0ed      	beq.n	8008278 <_fflush_r+0xc>
 800829c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800829e:	07d2      	lsls	r2, r2, #31
 80082a0:	d404      	bmi.n	80082ac <_fflush_r+0x40>
 80082a2:	059b      	lsls	r3, r3, #22
 80082a4:	d402      	bmi.n	80082ac <_fflush_r+0x40>
 80082a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082a8:	f000 f927 	bl	80084fa <__retarget_lock_acquire_recursive>
 80082ac:	0028      	movs	r0, r5
 80082ae:	0021      	movs	r1, r4
 80082b0:	f7ff ff50 	bl	8008154 <__sflush_r>
 80082b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082b6:	0005      	movs	r5, r0
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d4de      	bmi.n	800827a <_fflush_r+0xe>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	059b      	lsls	r3, r3, #22
 80082c0:	d4db      	bmi.n	800827a <_fflush_r+0xe>
 80082c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c4:	f000 f91a 	bl	80084fc <__retarget_lock_release_recursive>
 80082c8:	e7d7      	b.n	800827a <_fflush_r+0xe>
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <_fflush_r+0x78>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d101      	bne.n	80082d4 <_fflush_r+0x68>
 80082d0:	68ac      	ldr	r4, [r5, #8]
 80082d2:	e7df      	b.n	8008294 <_fflush_r+0x28>
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <_fflush_r+0x7c>)
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d1dc      	bne.n	8008294 <_fflush_r+0x28>
 80082da:	68ec      	ldr	r4, [r5, #12]
 80082dc:	e7da      	b.n	8008294 <_fflush_r+0x28>
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	08009434 	.word	0x08009434
 80082e4:	08009454 	.word	0x08009454
 80082e8:	08009414 	.word	0x08009414

080082ec <std>:
 80082ec:	2300      	movs	r3, #0
 80082ee:	b510      	push	{r4, lr}
 80082f0:	0004      	movs	r4, r0
 80082f2:	6003      	str	r3, [r0, #0]
 80082f4:	6043      	str	r3, [r0, #4]
 80082f6:	6083      	str	r3, [r0, #8]
 80082f8:	8181      	strh	r1, [r0, #12]
 80082fa:	6643      	str	r3, [r0, #100]	; 0x64
 80082fc:	0019      	movs	r1, r3
 80082fe:	81c2      	strh	r2, [r0, #14]
 8008300:	6103      	str	r3, [r0, #16]
 8008302:	6143      	str	r3, [r0, #20]
 8008304:	6183      	str	r3, [r0, #24]
 8008306:	2208      	movs	r2, #8
 8008308:	305c      	adds	r0, #92	; 0x5c
 800830a:	f7fe f9d2 	bl	80066b2 <memset>
 800830e:	4b05      	ldr	r3, [pc, #20]	; (8008324 <std+0x38>)
 8008310:	6224      	str	r4, [r4, #32]
 8008312:	6263      	str	r3, [r4, #36]	; 0x24
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <std+0x3c>)
 8008316:	62a3      	str	r3, [r4, #40]	; 0x28
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <std+0x40>)
 800831a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800831c:	4b04      	ldr	r3, [pc, #16]	; (8008330 <std+0x44>)
 800831e:	6323      	str	r3, [r4, #48]	; 0x30
 8008320:	bd10      	pop	{r4, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	08009011 	.word	0x08009011
 8008328:	08009039 	.word	0x08009039
 800832c:	08009071 	.word	0x08009071
 8008330:	0800909d 	.word	0x0800909d

08008334 <_cleanup_r>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4902      	ldr	r1, [pc, #8]	; (8008340 <_cleanup_r+0xc>)
 8008338:	f000 f8ba 	bl	80084b0 <_fwalk_reent>
 800833c:	bd10      	pop	{r4, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	0800826d 	.word	0x0800826d

08008344 <__sfmoreglue>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	2568      	movs	r5, #104	; 0x68
 8008348:	1e4a      	subs	r2, r1, #1
 800834a:	4355      	muls	r5, r2
 800834c:	000e      	movs	r6, r1
 800834e:	0029      	movs	r1, r5
 8008350:	3174      	adds	r1, #116	; 0x74
 8008352:	f000 fd8b 	bl	8008e6c <_malloc_r>
 8008356:	1e04      	subs	r4, r0, #0
 8008358:	d008      	beq.n	800836c <__sfmoreglue+0x28>
 800835a:	2100      	movs	r1, #0
 800835c:	002a      	movs	r2, r5
 800835e:	6001      	str	r1, [r0, #0]
 8008360:	6046      	str	r6, [r0, #4]
 8008362:	300c      	adds	r0, #12
 8008364:	60a0      	str	r0, [r4, #8]
 8008366:	3268      	adds	r2, #104	; 0x68
 8008368:	f7fe f9a3 	bl	80066b2 <memset>
 800836c:	0020      	movs	r0, r4
 800836e:	bd70      	pop	{r4, r5, r6, pc}

08008370 <__sfp_lock_acquire>:
 8008370:	b510      	push	{r4, lr}
 8008372:	4802      	ldr	r0, [pc, #8]	; (800837c <__sfp_lock_acquire+0xc>)
 8008374:	f000 f8c1 	bl	80084fa <__retarget_lock_acquire_recursive>
 8008378:	bd10      	pop	{r4, pc}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	200002f1 	.word	0x200002f1

08008380 <__sfp_lock_release>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4802      	ldr	r0, [pc, #8]	; (800838c <__sfp_lock_release+0xc>)
 8008384:	f000 f8ba 	bl	80084fc <__retarget_lock_release_recursive>
 8008388:	bd10      	pop	{r4, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	200002f1 	.word	0x200002f1

08008390 <__sinit_lock_acquire>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4802      	ldr	r0, [pc, #8]	; (800839c <__sinit_lock_acquire+0xc>)
 8008394:	f000 f8b1 	bl	80084fa <__retarget_lock_acquire_recursive>
 8008398:	bd10      	pop	{r4, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	200002f2 	.word	0x200002f2

080083a0 <__sinit_lock_release>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	4802      	ldr	r0, [pc, #8]	; (80083ac <__sinit_lock_release+0xc>)
 80083a4:	f000 f8aa 	bl	80084fc <__retarget_lock_release_recursive>
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	200002f2 	.word	0x200002f2

080083b0 <__sinit>:
 80083b0:	b513      	push	{r0, r1, r4, lr}
 80083b2:	0004      	movs	r4, r0
 80083b4:	f7ff ffec 	bl	8008390 <__sinit_lock_acquire>
 80083b8:	69a3      	ldr	r3, [r4, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <__sinit+0x14>
 80083be:	f7ff ffef 	bl	80083a0 <__sinit_lock_release>
 80083c2:	bd13      	pop	{r0, r1, r4, pc}
 80083c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80083c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083c8:	6523      	str	r3, [r4, #80]	; 0x50
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <__sinit+0x68>)
 80083cc:	4a13      	ldr	r2, [pc, #76]	; (800841c <__sinit+0x6c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	d101      	bne.n	80083dc <__sinit+0x2c>
 80083d8:	2301      	movs	r3, #1
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	0020      	movs	r0, r4
 80083de:	f000 f81f 	bl	8008420 <__sfp>
 80083e2:	6060      	str	r0, [r4, #4]
 80083e4:	0020      	movs	r0, r4
 80083e6:	f000 f81b 	bl	8008420 <__sfp>
 80083ea:	60a0      	str	r0, [r4, #8]
 80083ec:	0020      	movs	r0, r4
 80083ee:	f000 f817 	bl	8008420 <__sfp>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2104      	movs	r1, #4
 80083f6:	60e0      	str	r0, [r4, #12]
 80083f8:	6860      	ldr	r0, [r4, #4]
 80083fa:	f7ff ff77 	bl	80082ec <std>
 80083fe:	2201      	movs	r2, #1
 8008400:	2109      	movs	r1, #9
 8008402:	68a0      	ldr	r0, [r4, #8]
 8008404:	f7ff ff72 	bl	80082ec <std>
 8008408:	2202      	movs	r2, #2
 800840a:	2112      	movs	r1, #18
 800840c:	68e0      	ldr	r0, [r4, #12]
 800840e:	f7ff ff6d 	bl	80082ec <std>
 8008412:	2301      	movs	r3, #1
 8008414:	61a3      	str	r3, [r4, #24]
 8008416:	e7d2      	b.n	80083be <__sinit+0xe>
 8008418:	08009338 	.word	0x08009338
 800841c:	08008335 	.word	0x08008335

08008420 <__sfp>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	0007      	movs	r7, r0
 8008424:	f7ff ffa4 	bl	8008370 <__sfp_lock_acquire>
 8008428:	4b1f      	ldr	r3, [pc, #124]	; (80084a8 <__sfp+0x88>)
 800842a:	681e      	ldr	r6, [r3, #0]
 800842c:	69b3      	ldr	r3, [r6, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <__sfp+0x18>
 8008432:	0030      	movs	r0, r6
 8008434:	f7ff ffbc 	bl	80083b0 <__sinit>
 8008438:	3648      	adds	r6, #72	; 0x48
 800843a:	68b4      	ldr	r4, [r6, #8]
 800843c:	6873      	ldr	r3, [r6, #4]
 800843e:	3b01      	subs	r3, #1
 8008440:	d504      	bpl.n	800844c <__sfp+0x2c>
 8008442:	6833      	ldr	r3, [r6, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <__sfp+0x6e>
 8008448:	6836      	ldr	r6, [r6, #0]
 800844a:	e7f6      	b.n	800843a <__sfp+0x1a>
 800844c:	220c      	movs	r2, #12
 800844e:	5ea5      	ldrsh	r5, [r4, r2]
 8008450:	2d00      	cmp	r5, #0
 8008452:	d11a      	bne.n	800848a <__sfp+0x6a>
 8008454:	0020      	movs	r0, r4
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <__sfp+0x8c>)
 8008458:	3058      	adds	r0, #88	; 0x58
 800845a:	60e3      	str	r3, [r4, #12]
 800845c:	6665      	str	r5, [r4, #100]	; 0x64
 800845e:	f000 f84b 	bl	80084f8 <__retarget_lock_init_recursive>
 8008462:	f7ff ff8d 	bl	8008380 <__sfp_lock_release>
 8008466:	0020      	movs	r0, r4
 8008468:	2208      	movs	r2, #8
 800846a:	0029      	movs	r1, r5
 800846c:	6025      	str	r5, [r4, #0]
 800846e:	60a5      	str	r5, [r4, #8]
 8008470:	6065      	str	r5, [r4, #4]
 8008472:	6125      	str	r5, [r4, #16]
 8008474:	6165      	str	r5, [r4, #20]
 8008476:	61a5      	str	r5, [r4, #24]
 8008478:	305c      	adds	r0, #92	; 0x5c
 800847a:	f7fe f91a 	bl	80066b2 <memset>
 800847e:	6365      	str	r5, [r4, #52]	; 0x34
 8008480:	63a5      	str	r5, [r4, #56]	; 0x38
 8008482:	64a5      	str	r5, [r4, #72]	; 0x48
 8008484:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008486:	0020      	movs	r0, r4
 8008488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848a:	3468      	adds	r4, #104	; 0x68
 800848c:	e7d7      	b.n	800843e <__sfp+0x1e>
 800848e:	2104      	movs	r1, #4
 8008490:	0038      	movs	r0, r7
 8008492:	f7ff ff57 	bl	8008344 <__sfmoreglue>
 8008496:	1e04      	subs	r4, r0, #0
 8008498:	6030      	str	r0, [r6, #0]
 800849a:	d1d5      	bne.n	8008448 <__sfp+0x28>
 800849c:	f7ff ff70 	bl	8008380 <__sfp_lock_release>
 80084a0:	230c      	movs	r3, #12
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	e7ef      	b.n	8008486 <__sfp+0x66>
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	08009338 	.word	0x08009338
 80084ac:	ffff0001 	.word	0xffff0001

080084b0 <_fwalk_reent>:
 80084b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b2:	0004      	movs	r4, r0
 80084b4:	0006      	movs	r6, r0
 80084b6:	2700      	movs	r7, #0
 80084b8:	9101      	str	r1, [sp, #4]
 80084ba:	3448      	adds	r4, #72	; 0x48
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	68a5      	ldr	r5, [r4, #8]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	d504      	bpl.n	80084d4 <_fwalk_reent+0x24>
 80084ca:	6824      	ldr	r4, [r4, #0]
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	d1f5      	bne.n	80084bc <_fwalk_reent+0xc>
 80084d0:	0038      	movs	r0, r7
 80084d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084d4:	89ab      	ldrh	r3, [r5, #12]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d908      	bls.n	80084ec <_fwalk_reent+0x3c>
 80084da:	220e      	movs	r2, #14
 80084dc:	5eab      	ldrsh	r3, [r5, r2]
 80084de:	3301      	adds	r3, #1
 80084e0:	d004      	beq.n	80084ec <_fwalk_reent+0x3c>
 80084e2:	0029      	movs	r1, r5
 80084e4:	0030      	movs	r0, r6
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	4798      	blx	r3
 80084ea:	4307      	orrs	r7, r0
 80084ec:	3568      	adds	r5, #104	; 0x68
 80084ee:	e7e8      	b.n	80084c2 <_fwalk_reent+0x12>

080084f0 <_localeconv_r>:
 80084f0:	4800      	ldr	r0, [pc, #0]	; (80084f4 <_localeconv_r+0x4>)
 80084f2:	4770      	bx	lr
 80084f4:	20000160 	.word	0x20000160

080084f8 <__retarget_lock_init_recursive>:
 80084f8:	4770      	bx	lr

080084fa <__retarget_lock_acquire_recursive>:
 80084fa:	4770      	bx	lr

080084fc <__retarget_lock_release_recursive>:
 80084fc:	4770      	bx	lr
	...

08008500 <__swhatbuf_r>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	000e      	movs	r6, r1
 8008504:	001d      	movs	r5, r3
 8008506:	230e      	movs	r3, #14
 8008508:	5ec9      	ldrsh	r1, [r1, r3]
 800850a:	0014      	movs	r4, r2
 800850c:	b096      	sub	sp, #88	; 0x58
 800850e:	2900      	cmp	r1, #0
 8008510:	da08      	bge.n	8008524 <__swhatbuf_r+0x24>
 8008512:	220c      	movs	r2, #12
 8008514:	5eb3      	ldrsh	r3, [r6, r2]
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	d411      	bmi.n	8008542 <__swhatbuf_r+0x42>
 800851e:	2380      	movs	r3, #128	; 0x80
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	e00f      	b.n	8008544 <__swhatbuf_r+0x44>
 8008524:	466a      	mov	r2, sp
 8008526:	f000 fde5 	bl	80090f4 <_fstat_r>
 800852a:	2800      	cmp	r0, #0
 800852c:	dbf1      	blt.n	8008512 <__swhatbuf_r+0x12>
 800852e:	23f0      	movs	r3, #240	; 0xf0
 8008530:	9901      	ldr	r1, [sp, #4]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	4019      	ands	r1, r3
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <__swhatbuf_r+0x4c>)
 8008538:	18c9      	adds	r1, r1, r3
 800853a:	424b      	negs	r3, r1
 800853c:	4159      	adcs	r1, r3
 800853e:	6029      	str	r1, [r5, #0]
 8008540:	e7ed      	b.n	800851e <__swhatbuf_r+0x1e>
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	2000      	movs	r0, #0
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	b016      	add	sp, #88	; 0x58
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	ffffe000 	.word	0xffffe000

08008550 <__smakebuf_r>:
 8008550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008552:	2602      	movs	r6, #2
 8008554:	898b      	ldrh	r3, [r1, #12]
 8008556:	0005      	movs	r5, r0
 8008558:	000c      	movs	r4, r1
 800855a:	4233      	tst	r3, r6
 800855c:	d006      	beq.n	800856c <__smakebuf_r+0x1c>
 800855e:	0023      	movs	r3, r4
 8008560:	3347      	adds	r3, #71	; 0x47
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	2301      	movs	r3, #1
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800856c:	466a      	mov	r2, sp
 800856e:	ab01      	add	r3, sp, #4
 8008570:	f7ff ffc6 	bl	8008500 <__swhatbuf_r>
 8008574:	9900      	ldr	r1, [sp, #0]
 8008576:	0007      	movs	r7, r0
 8008578:	0028      	movs	r0, r5
 800857a:	f000 fc77 	bl	8008e6c <_malloc_r>
 800857e:	2800      	cmp	r0, #0
 8008580:	d108      	bne.n	8008594 <__smakebuf_r+0x44>
 8008582:	220c      	movs	r2, #12
 8008584:	5ea3      	ldrsh	r3, [r4, r2]
 8008586:	059a      	lsls	r2, r3, #22
 8008588:	d4ef      	bmi.n	800856a <__smakebuf_r+0x1a>
 800858a:	2203      	movs	r2, #3
 800858c:	4393      	bics	r3, r2
 800858e:	431e      	orrs	r6, r3
 8008590:	81a6      	strh	r6, [r4, #12]
 8008592:	e7e4      	b.n	800855e <__smakebuf_r+0xe>
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <__smakebuf_r+0x84>)
 8008596:	62ab      	str	r3, [r5, #40]	; 0x28
 8008598:	2380      	movs	r3, #128	; 0x80
 800859a:	89a2      	ldrh	r2, [r4, #12]
 800859c:	6020      	str	r0, [r4, #0]
 800859e:	4313      	orrs	r3, r2
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	9b00      	ldr	r3, [sp, #0]
 80085a4:	6120      	str	r0, [r4, #16]
 80085a6:	6163      	str	r3, [r4, #20]
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00d      	beq.n	80085ca <__smakebuf_r+0x7a>
 80085ae:	0028      	movs	r0, r5
 80085b0:	230e      	movs	r3, #14
 80085b2:	5ee1      	ldrsh	r1, [r4, r3]
 80085b4:	f000 fdb0 	bl	8009118 <_isatty_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d006      	beq.n	80085ca <__smakebuf_r+0x7a>
 80085bc:	2203      	movs	r2, #3
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	4393      	bics	r3, r2
 80085c2:	001a      	movs	r2, r3
 80085c4:	2301      	movs	r3, #1
 80085c6:	4313      	orrs	r3, r2
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	89a0      	ldrh	r0, [r4, #12]
 80085cc:	4307      	orrs	r7, r0
 80085ce:	81a7      	strh	r7, [r4, #12]
 80085d0:	e7cb      	b.n	800856a <__smakebuf_r+0x1a>
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	08008335 	.word	0x08008335

080085d8 <malloc>:
 80085d8:	b510      	push	{r4, lr}
 80085da:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <malloc+0x10>)
 80085dc:	0001      	movs	r1, r0
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f000 fc44 	bl	8008e6c <_malloc_r>
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	2000000c 	.word	0x2000000c

080085ec <memchr>:
 80085ec:	b2c9      	uxtb	r1, r1
 80085ee:	1882      	adds	r2, r0, r2
 80085f0:	4290      	cmp	r0, r2
 80085f2:	d101      	bne.n	80085f8 <memchr+0xc>
 80085f4:	2000      	movs	r0, #0
 80085f6:	4770      	bx	lr
 80085f8:	7803      	ldrb	r3, [r0, #0]
 80085fa:	428b      	cmp	r3, r1
 80085fc:	d0fb      	beq.n	80085f6 <memchr+0xa>
 80085fe:	3001      	adds	r0, #1
 8008600:	e7f6      	b.n	80085f0 <memchr+0x4>
	...

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008608:	0006      	movs	r6, r0
 800860a:	000c      	movs	r4, r1
 800860c:	2d00      	cmp	r5, #0
 800860e:	d10e      	bne.n	800862e <_Balloc+0x2a>
 8008610:	2010      	movs	r0, #16
 8008612:	f7ff ffe1 	bl	80085d8 <malloc>
 8008616:	1e02      	subs	r2, r0, #0
 8008618:	6270      	str	r0, [r6, #36]	; 0x24
 800861a:	d104      	bne.n	8008626 <_Balloc+0x22>
 800861c:	2166      	movs	r1, #102	; 0x66
 800861e:	4b19      	ldr	r3, [pc, #100]	; (8008684 <_Balloc+0x80>)
 8008620:	4819      	ldr	r0, [pc, #100]	; (8008688 <_Balloc+0x84>)
 8008622:	f7fd ffe5 	bl	80065f0 <__assert_func>
 8008626:	6045      	str	r5, [r0, #4]
 8008628:	6085      	str	r5, [r0, #8]
 800862a:	6005      	str	r5, [r0, #0]
 800862c:	60c5      	str	r5, [r0, #12]
 800862e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008630:	68eb      	ldr	r3, [r5, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d013      	beq.n	800865e <_Balloc+0x5a>
 8008636:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008638:	00a2      	lsls	r2, r4, #2
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	189b      	adds	r3, r3, r2
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	2800      	cmp	r0, #0
 8008642:	d118      	bne.n	8008676 <_Balloc+0x72>
 8008644:	2101      	movs	r1, #1
 8008646:	000d      	movs	r5, r1
 8008648:	40a5      	lsls	r5, r4
 800864a:	1d6a      	adds	r2, r5, #5
 800864c:	0030      	movs	r0, r6
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	f000 fb74 	bl	8008d3c <_calloc_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	d00c      	beq.n	8008672 <_Balloc+0x6e>
 8008658:	6044      	str	r4, [r0, #4]
 800865a:	6085      	str	r5, [r0, #8]
 800865c:	e00d      	b.n	800867a <_Balloc+0x76>
 800865e:	2221      	movs	r2, #33	; 0x21
 8008660:	2104      	movs	r1, #4
 8008662:	0030      	movs	r0, r6
 8008664:	f000 fb6a 	bl	8008d3c <_calloc_r>
 8008668:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800866a:	60e8      	str	r0, [r5, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e1      	bne.n	8008636 <_Balloc+0x32>
 8008672:	2000      	movs	r0, #0
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	6802      	ldr	r2, [r0, #0]
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	2300      	movs	r3, #0
 800867c:	6103      	str	r3, [r0, #16]
 800867e:	60c3      	str	r3, [r0, #12]
 8008680:	e7f8      	b.n	8008674 <_Balloc+0x70>
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	0800938e 	.word	0x0800938e
 8008688:	08009474 	.word	0x08009474

0800868c <_Bfree>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008690:	0005      	movs	r5, r0
 8008692:	000c      	movs	r4, r1
 8008694:	2e00      	cmp	r6, #0
 8008696:	d10e      	bne.n	80086b6 <_Bfree+0x2a>
 8008698:	2010      	movs	r0, #16
 800869a:	f7ff ff9d 	bl	80085d8 <malloc>
 800869e:	1e02      	subs	r2, r0, #0
 80086a0:	6268      	str	r0, [r5, #36]	; 0x24
 80086a2:	d104      	bne.n	80086ae <_Bfree+0x22>
 80086a4:	218a      	movs	r1, #138	; 0x8a
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <_Bfree+0x40>)
 80086a8:	4809      	ldr	r0, [pc, #36]	; (80086d0 <_Bfree+0x44>)
 80086aa:	f7fd ffa1 	bl	80065f0 <__assert_func>
 80086ae:	6046      	str	r6, [r0, #4]
 80086b0:	6086      	str	r6, [r0, #8]
 80086b2:	6006      	str	r6, [r0, #0]
 80086b4:	60c6      	str	r6, [r0, #12]
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d007      	beq.n	80086ca <_Bfree+0x3e>
 80086ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086bc:	6862      	ldr	r2, [r4, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	189b      	adds	r3, r3, r2
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	601c      	str	r4, [r3, #0]
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	0800938e 	.word	0x0800938e
 80086d0:	08009474 	.word	0x08009474

080086d4 <__multadd>:
 80086d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086d6:	000e      	movs	r6, r1
 80086d8:	9001      	str	r0, [sp, #4]
 80086da:	000c      	movs	r4, r1
 80086dc:	001d      	movs	r5, r3
 80086de:	2000      	movs	r0, #0
 80086e0:	690f      	ldr	r7, [r1, #16]
 80086e2:	3614      	adds	r6, #20
 80086e4:	6833      	ldr	r3, [r6, #0]
 80086e6:	3001      	adds	r0, #1
 80086e8:	b299      	uxth	r1, r3
 80086ea:	4351      	muls	r1, r2
 80086ec:	0c1b      	lsrs	r3, r3, #16
 80086ee:	4353      	muls	r3, r2
 80086f0:	1949      	adds	r1, r1, r5
 80086f2:	0c0d      	lsrs	r5, r1, #16
 80086f4:	195b      	adds	r3, r3, r5
 80086f6:	0c1d      	lsrs	r5, r3, #16
 80086f8:	b289      	uxth	r1, r1
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	185b      	adds	r3, r3, r1
 80086fe:	c608      	stmia	r6!, {r3}
 8008700:	4287      	cmp	r7, r0
 8008702:	dcef      	bgt.n	80086e4 <__multadd+0x10>
 8008704:	2d00      	cmp	r5, #0
 8008706:	d022      	beq.n	800874e <__multadd+0x7a>
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	42bb      	cmp	r3, r7
 800870c:	dc19      	bgt.n	8008742 <__multadd+0x6e>
 800870e:	6863      	ldr	r3, [r4, #4]
 8008710:	9801      	ldr	r0, [sp, #4]
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	f7ff ff76 	bl	8008604 <_Balloc>
 8008718:	1e06      	subs	r6, r0, #0
 800871a:	d105      	bne.n	8008728 <__multadd+0x54>
 800871c:	0002      	movs	r2, r0
 800871e:	21b5      	movs	r1, #181	; 0xb5
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <__multadd+0x80>)
 8008722:	480d      	ldr	r0, [pc, #52]	; (8008758 <__multadd+0x84>)
 8008724:	f7fd ff64 	bl	80065f0 <__assert_func>
 8008728:	0021      	movs	r1, r4
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	310c      	adds	r1, #12
 800872e:	1c9a      	adds	r2, r3, #2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	300c      	adds	r0, #12
 8008734:	f7fd ffb4 	bl	80066a0 <memcpy>
 8008738:	0021      	movs	r1, r4
 800873a:	9801      	ldr	r0, [sp, #4]
 800873c:	f7ff ffa6 	bl	800868c <_Bfree>
 8008740:	0034      	movs	r4, r6
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	18e3      	adds	r3, r4, r3
 8008748:	605d      	str	r5, [r3, #4]
 800874a:	1c7b      	adds	r3, r7, #1
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	0020      	movs	r0, r4
 8008750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	08009400 	.word	0x08009400
 8008758:	08009474 	.word	0x08009474

0800875c <__hi0bits>:
 800875c:	0003      	movs	r3, r0
 800875e:	0c02      	lsrs	r2, r0, #16
 8008760:	2000      	movs	r0, #0
 8008762:	4282      	cmp	r2, r0
 8008764:	d101      	bne.n	800876a <__hi0bits+0xe>
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	3010      	adds	r0, #16
 800876a:	0e1a      	lsrs	r2, r3, #24
 800876c:	d101      	bne.n	8008772 <__hi0bits+0x16>
 800876e:	3008      	adds	r0, #8
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	0f1a      	lsrs	r2, r3, #28
 8008774:	d101      	bne.n	800877a <__hi0bits+0x1e>
 8008776:	3004      	adds	r0, #4
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	0f9a      	lsrs	r2, r3, #30
 800877c:	d101      	bne.n	8008782 <__hi0bits+0x26>
 800877e:	3002      	adds	r0, #2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	db03      	blt.n	800878e <__hi0bits+0x32>
 8008786:	3001      	adds	r0, #1
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	d400      	bmi.n	800878e <__hi0bits+0x32>
 800878c:	2020      	movs	r0, #32
 800878e:	4770      	bx	lr

08008790 <__lo0bits>:
 8008790:	6803      	ldr	r3, [r0, #0]
 8008792:	0002      	movs	r2, r0
 8008794:	2107      	movs	r1, #7
 8008796:	0018      	movs	r0, r3
 8008798:	4008      	ands	r0, r1
 800879a:	420b      	tst	r3, r1
 800879c:	d00d      	beq.n	80087ba <__lo0bits+0x2a>
 800879e:	3906      	subs	r1, #6
 80087a0:	2000      	movs	r0, #0
 80087a2:	420b      	tst	r3, r1
 80087a4:	d105      	bne.n	80087b2 <__lo0bits+0x22>
 80087a6:	3002      	adds	r0, #2
 80087a8:	4203      	tst	r3, r0
 80087aa:	d003      	beq.n	80087b4 <__lo0bits+0x24>
 80087ac:	40cb      	lsrs	r3, r1
 80087ae:	0008      	movs	r0, r1
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	4770      	bx	lr
 80087b4:	089b      	lsrs	r3, r3, #2
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e7fb      	b.n	80087b2 <__lo0bits+0x22>
 80087ba:	b299      	uxth	r1, r3
 80087bc:	2900      	cmp	r1, #0
 80087be:	d101      	bne.n	80087c4 <__lo0bits+0x34>
 80087c0:	2010      	movs	r0, #16
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	b2d9      	uxtb	r1, r3
 80087c6:	2900      	cmp	r1, #0
 80087c8:	d101      	bne.n	80087ce <__lo0bits+0x3e>
 80087ca:	3008      	adds	r0, #8
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	0719      	lsls	r1, r3, #28
 80087d0:	d101      	bne.n	80087d6 <__lo0bits+0x46>
 80087d2:	3004      	adds	r0, #4
 80087d4:	091b      	lsrs	r3, r3, #4
 80087d6:	0799      	lsls	r1, r3, #30
 80087d8:	d101      	bne.n	80087de <__lo0bits+0x4e>
 80087da:	3002      	adds	r0, #2
 80087dc:	089b      	lsrs	r3, r3, #2
 80087de:	07d9      	lsls	r1, r3, #31
 80087e0:	d4e9      	bmi.n	80087b6 <__lo0bits+0x26>
 80087e2:	3001      	adds	r0, #1
 80087e4:	085b      	lsrs	r3, r3, #1
 80087e6:	d1e6      	bne.n	80087b6 <__lo0bits+0x26>
 80087e8:	2020      	movs	r0, #32
 80087ea:	e7e2      	b.n	80087b2 <__lo0bits+0x22>

080087ec <__i2b>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	000c      	movs	r4, r1
 80087f0:	2101      	movs	r1, #1
 80087f2:	f7ff ff07 	bl	8008604 <_Balloc>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d106      	bne.n	8008808 <__i2b+0x1c>
 80087fa:	21a0      	movs	r1, #160	; 0xa0
 80087fc:	0002      	movs	r2, r0
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <__i2b+0x24>)
 8008800:	4804      	ldr	r0, [pc, #16]	; (8008814 <__i2b+0x28>)
 8008802:	0049      	lsls	r1, r1, #1
 8008804:	f7fd fef4 	bl	80065f0 <__assert_func>
 8008808:	2301      	movs	r3, #1
 800880a:	6144      	str	r4, [r0, #20]
 800880c:	6103      	str	r3, [r0, #16]
 800880e:	bd10      	pop	{r4, pc}
 8008810:	08009400 	.word	0x08009400
 8008814:	08009474 	.word	0x08009474

08008818 <__multiply>:
 8008818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881a:	690b      	ldr	r3, [r1, #16]
 800881c:	0014      	movs	r4, r2
 800881e:	6912      	ldr	r2, [r2, #16]
 8008820:	000d      	movs	r5, r1
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	4293      	cmp	r3, r2
 8008826:	da01      	bge.n	800882c <__multiply+0x14>
 8008828:	0025      	movs	r5, r4
 800882a:	000c      	movs	r4, r1
 800882c:	692f      	ldr	r7, [r5, #16]
 800882e:	6926      	ldr	r6, [r4, #16]
 8008830:	6869      	ldr	r1, [r5, #4]
 8008832:	19bb      	adds	r3, r7, r6
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	68ab      	ldr	r3, [r5, #8]
 8008838:	19ba      	adds	r2, r7, r6
 800883a:	4293      	cmp	r3, r2
 800883c:	da00      	bge.n	8008840 <__multiply+0x28>
 800883e:	3101      	adds	r1, #1
 8008840:	f7ff fee0 	bl	8008604 <_Balloc>
 8008844:	9001      	str	r0, [sp, #4]
 8008846:	2800      	cmp	r0, #0
 8008848:	d106      	bne.n	8008858 <__multiply+0x40>
 800884a:	215e      	movs	r1, #94	; 0x5e
 800884c:	0002      	movs	r2, r0
 800884e:	4b48      	ldr	r3, [pc, #288]	; (8008970 <__multiply+0x158>)
 8008850:	4848      	ldr	r0, [pc, #288]	; (8008974 <__multiply+0x15c>)
 8008852:	31ff      	adds	r1, #255	; 0xff
 8008854:	f7fd fecc 	bl	80065f0 <__assert_func>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	3314      	adds	r3, #20
 800885e:	469c      	mov	ip, r3
 8008860:	19bb      	adds	r3, r7, r6
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4463      	add	r3, ip
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	4663      	mov	r3, ip
 800886a:	9903      	ldr	r1, [sp, #12]
 800886c:	428b      	cmp	r3, r1
 800886e:	d32c      	bcc.n	80088ca <__multiply+0xb2>
 8008870:	002b      	movs	r3, r5
 8008872:	0022      	movs	r2, r4
 8008874:	3314      	adds	r3, #20
 8008876:	00bf      	lsls	r7, r7, #2
 8008878:	3214      	adds	r2, #20
 800887a:	9306      	str	r3, [sp, #24]
 800887c:	00b6      	lsls	r6, r6, #2
 800887e:	19db      	adds	r3, r3, r7
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	1993      	adds	r3, r2, r6
 8008884:	9307      	str	r3, [sp, #28]
 8008886:	2304      	movs	r3, #4
 8008888:	9305      	str	r3, [sp, #20]
 800888a:	002b      	movs	r3, r5
 800888c:	9904      	ldr	r1, [sp, #16]
 800888e:	3315      	adds	r3, #21
 8008890:	9200      	str	r2, [sp, #0]
 8008892:	4299      	cmp	r1, r3
 8008894:	d305      	bcc.n	80088a2 <__multiply+0x8a>
 8008896:	1b4b      	subs	r3, r1, r5
 8008898:	3b15      	subs	r3, #21
 800889a:	089b      	lsrs	r3, r3, #2
 800889c:	3301      	adds	r3, #1
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	9b07      	ldr	r3, [sp, #28]
 80088a4:	9a00      	ldr	r2, [sp, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d311      	bcc.n	80088ce <__multiply+0xb6>
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dd06      	ble.n	80088be <__multiply+0xa6>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	3b04      	subs	r3, #4
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d053      	beq.n	8008966 <__multiply+0x14e>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	9a02      	ldr	r2, [sp, #8]
 80088c2:	0018      	movs	r0, r3
 80088c4:	611a      	str	r2, [r3, #16]
 80088c6:	b009      	add	sp, #36	; 0x24
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	c304      	stmia	r3!, {r2}
 80088cc:	e7cd      	b.n	800886a <__multiply+0x52>
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	b298      	uxth	r0, r3
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d01b      	beq.n	8008910 <__multiply+0xf8>
 80088d8:	4667      	mov	r7, ip
 80088da:	2400      	movs	r4, #0
 80088dc:	9e06      	ldr	r6, [sp, #24]
 80088de:	ce02      	ldmia	r6!, {r1}
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	b28b      	uxth	r3, r1
 80088e4:	4343      	muls	r3, r0
 80088e6:	b292      	uxth	r2, r2
 80088e8:	189b      	adds	r3, r3, r2
 80088ea:	191b      	adds	r3, r3, r4
 80088ec:	0c0c      	lsrs	r4, r1, #16
 80088ee:	4344      	muls	r4, r0
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	0c11      	lsrs	r1, r2, #16
 80088f4:	1861      	adds	r1, r4, r1
 80088f6:	0c1c      	lsrs	r4, r3, #16
 80088f8:	1909      	adds	r1, r1, r4
 80088fa:	0c0c      	lsrs	r4, r1, #16
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	0409      	lsls	r1, r1, #16
 8008900:	430b      	orrs	r3, r1
 8008902:	c708      	stmia	r7!, {r3}
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	42b3      	cmp	r3, r6
 8008908:	d8e9      	bhi.n	80088de <__multiply+0xc6>
 800890a:	4663      	mov	r3, ip
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	509c      	str	r4, [r3, r2]
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	0c1e      	lsrs	r6, r3, #16
 8008916:	d020      	beq.n	800895a <__multiply+0x142>
 8008918:	4663      	mov	r3, ip
 800891a:	002c      	movs	r4, r5
 800891c:	4660      	mov	r0, ip
 800891e:	2700      	movs	r7, #0
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3414      	adds	r4, #20
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	b291      	uxth	r1, r2
 800892a:	4371      	muls	r1, r6
 800892c:	6802      	ldr	r2, [r0, #0]
 800892e:	0c12      	lsrs	r2, r2, #16
 8008930:	1889      	adds	r1, r1, r2
 8008932:	19cf      	adds	r7, r1, r7
 8008934:	0439      	lsls	r1, r7, #16
 8008936:	430b      	orrs	r3, r1
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	cc02      	ldmia	r4!, {r1}
 800893c:	6843      	ldr	r3, [r0, #4]
 800893e:	0c09      	lsrs	r1, r1, #16
 8008940:	4371      	muls	r1, r6
 8008942:	b29b      	uxth	r3, r3
 8008944:	0c3f      	lsrs	r7, r7, #16
 8008946:	18cb      	adds	r3, r1, r3
 8008948:	9a04      	ldr	r2, [sp, #16]
 800894a:	19db      	adds	r3, r3, r7
 800894c:	0c1f      	lsrs	r7, r3, #16
 800894e:	3004      	adds	r0, #4
 8008950:	42a2      	cmp	r2, r4
 8008952:	d8e7      	bhi.n	8008924 <__multiply+0x10c>
 8008954:	4662      	mov	r2, ip
 8008956:	9905      	ldr	r1, [sp, #20]
 8008958:	5053      	str	r3, [r2, r1]
 800895a:	9b00      	ldr	r3, [sp, #0]
 800895c:	3304      	adds	r3, #4
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2304      	movs	r3, #4
 8008962:	449c      	add	ip, r3
 8008964:	e79d      	b.n	80088a2 <__multiply+0x8a>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	e79d      	b.n	80088aa <__multiply+0x92>
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	08009400 	.word	0x08009400
 8008974:	08009474 	.word	0x08009474

08008978 <__pow5mult>:
 8008978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800897a:	2303      	movs	r3, #3
 800897c:	0015      	movs	r5, r2
 800897e:	0007      	movs	r7, r0
 8008980:	000e      	movs	r6, r1
 8008982:	401a      	ands	r2, r3
 8008984:	421d      	tst	r5, r3
 8008986:	d008      	beq.n	800899a <__pow5mult+0x22>
 8008988:	4925      	ldr	r1, [pc, #148]	; (8008a20 <__pow5mult+0xa8>)
 800898a:	3a01      	subs	r2, #1
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	5852      	ldr	r2, [r2, r1]
 8008990:	2300      	movs	r3, #0
 8008992:	0031      	movs	r1, r6
 8008994:	f7ff fe9e 	bl	80086d4 <__multadd>
 8008998:	0006      	movs	r6, r0
 800899a:	10ad      	asrs	r5, r5, #2
 800899c:	d03d      	beq.n	8008a1a <__pow5mult+0xa2>
 800899e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	d10f      	bne.n	80089c4 <__pow5mult+0x4c>
 80089a4:	2010      	movs	r0, #16
 80089a6:	f7ff fe17 	bl	80085d8 <malloc>
 80089aa:	1e02      	subs	r2, r0, #0
 80089ac:	6278      	str	r0, [r7, #36]	; 0x24
 80089ae:	d105      	bne.n	80089bc <__pow5mult+0x44>
 80089b0:	21d7      	movs	r1, #215	; 0xd7
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <__pow5mult+0xac>)
 80089b4:	481c      	ldr	r0, [pc, #112]	; (8008a28 <__pow5mult+0xb0>)
 80089b6:	0049      	lsls	r1, r1, #1
 80089b8:	f7fd fe1a 	bl	80065f0 <__assert_func>
 80089bc:	6044      	str	r4, [r0, #4]
 80089be:	6084      	str	r4, [r0, #8]
 80089c0:	6004      	str	r4, [r0, #0]
 80089c2:	60c4      	str	r4, [r0, #12]
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	689c      	ldr	r4, [r3, #8]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	d108      	bne.n	80089e0 <__pow5mult+0x68>
 80089ce:	0038      	movs	r0, r7
 80089d0:	4916      	ldr	r1, [pc, #88]	; (8008a2c <__pow5mult+0xb4>)
 80089d2:	f7ff ff0b 	bl	80087ec <__i2b>
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	0004      	movs	r4, r0
 80089da:	6098      	str	r0, [r3, #8]
 80089dc:	2300      	movs	r3, #0
 80089de:	6003      	str	r3, [r0, #0]
 80089e0:	2301      	movs	r3, #1
 80089e2:	421d      	tst	r5, r3
 80089e4:	d00a      	beq.n	80089fc <__pow5mult+0x84>
 80089e6:	0031      	movs	r1, r6
 80089e8:	0022      	movs	r2, r4
 80089ea:	0038      	movs	r0, r7
 80089ec:	f7ff ff14 	bl	8008818 <__multiply>
 80089f0:	0031      	movs	r1, r6
 80089f2:	9001      	str	r0, [sp, #4]
 80089f4:	0038      	movs	r0, r7
 80089f6:	f7ff fe49 	bl	800868c <_Bfree>
 80089fa:	9e01      	ldr	r6, [sp, #4]
 80089fc:	106d      	asrs	r5, r5, #1
 80089fe:	d00c      	beq.n	8008a1a <__pow5mult+0xa2>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d107      	bne.n	8008a16 <__pow5mult+0x9e>
 8008a06:	0022      	movs	r2, r4
 8008a08:	0021      	movs	r1, r4
 8008a0a:	0038      	movs	r0, r7
 8008a0c:	f7ff ff04 	bl	8008818 <__multiply>
 8008a10:	2300      	movs	r3, #0
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	6003      	str	r3, [r0, #0]
 8008a16:	0004      	movs	r4, r0
 8008a18:	e7e2      	b.n	80089e0 <__pow5mult+0x68>
 8008a1a:	0030      	movs	r0, r6
 8008a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	080095c0 	.word	0x080095c0
 8008a24:	0800938e 	.word	0x0800938e
 8008a28:	08009474 	.word	0x08009474
 8008a2c:	00000271 	.word	0x00000271

08008a30 <__lshift>:
 8008a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a32:	000c      	movs	r4, r1
 8008a34:	0017      	movs	r7, r2
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	1155      	asrs	r5, r2, #5
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	18eb      	adds	r3, r5, r3
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	6849      	ldr	r1, [r1, #4]
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	9004      	str	r0, [sp, #16]
 8008a4a:	9a01      	ldr	r2, [sp, #4]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	db10      	blt.n	8008a72 <__lshift+0x42>
 8008a50:	9804      	ldr	r0, [sp, #16]
 8008a52:	f7ff fdd7 	bl	8008604 <_Balloc>
 8008a56:	2300      	movs	r3, #0
 8008a58:	0002      	movs	r2, r0
 8008a5a:	0006      	movs	r6, r0
 8008a5c:	0019      	movs	r1, r3
 8008a5e:	3214      	adds	r2, #20
 8008a60:	4298      	cmp	r0, r3
 8008a62:	d10c      	bne.n	8008a7e <__lshift+0x4e>
 8008a64:	21da      	movs	r1, #218	; 0xda
 8008a66:	0002      	movs	r2, r0
 8008a68:	4b26      	ldr	r3, [pc, #152]	; (8008b04 <__lshift+0xd4>)
 8008a6a:	4827      	ldr	r0, [pc, #156]	; (8008b08 <__lshift+0xd8>)
 8008a6c:	31ff      	adds	r1, #255	; 0xff
 8008a6e:	f7fd fdbf 	bl	80065f0 <__assert_func>
 8008a72:	3101      	adds	r1, #1
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	e7e8      	b.n	8008a4a <__lshift+0x1a>
 8008a78:	0098      	lsls	r0, r3, #2
 8008a7a:	5011      	str	r1, [r2, r0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	42ab      	cmp	r3, r5
 8008a80:	dbfa      	blt.n	8008a78 <__lshift+0x48>
 8008a82:	43eb      	mvns	r3, r5
 8008a84:	17db      	asrs	r3, r3, #31
 8008a86:	401d      	ands	r5, r3
 8008a88:	211f      	movs	r1, #31
 8008a8a:	0023      	movs	r3, r4
 8008a8c:	0038      	movs	r0, r7
 8008a8e:	00ad      	lsls	r5, r5, #2
 8008a90:	1955      	adds	r5, r2, r5
 8008a92:	6922      	ldr	r2, [r4, #16]
 8008a94:	3314      	adds	r3, #20
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	4008      	ands	r0, r1
 8008a9a:	4684      	mov	ip, r0
 8008a9c:	189a      	adds	r2, r3, r2
 8008a9e:	420f      	tst	r7, r1
 8008aa0:	d02a      	beq.n	8008af8 <__lshift+0xc8>
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	1a09      	subs	r1, r1, r0
 8008aa6:	9105      	str	r1, [sp, #20]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	9503      	str	r5, [sp, #12]
 8008aac:	4667      	mov	r7, ip
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	40b8      	lsls	r0, r7
 8008ab2:	4301      	orrs	r1, r0
 8008ab4:	9803      	ldr	r0, [sp, #12]
 8008ab6:	c002      	stmia	r0!, {r1}
 8008ab8:	cb02      	ldmia	r3!, {r1}
 8008aba:	9003      	str	r0, [sp, #12]
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	40c1      	lsrs	r1, r0
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d8f3      	bhi.n	8008aac <__lshift+0x7c>
 8008ac4:	0020      	movs	r0, r4
 8008ac6:	3015      	adds	r0, #21
 8008ac8:	2304      	movs	r3, #4
 8008aca:	4282      	cmp	r2, r0
 8008acc:	d304      	bcc.n	8008ad8 <__lshift+0xa8>
 8008ace:	1b13      	subs	r3, r2, r4
 8008ad0:	3b15      	subs	r3, #21
 8008ad2:	089b      	lsrs	r3, r3, #2
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	50e9      	str	r1, [r5, r3]
 8008ada:	2900      	cmp	r1, #0
 8008adc:	d002      	beq.n	8008ae4 <__lshift+0xb4>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	3302      	adds	r3, #2
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	9804      	ldr	r0, [sp, #16]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	0021      	movs	r1, r4
 8008aec:	6133      	str	r3, [r6, #16]
 8008aee:	f7ff fdcd 	bl	800868c <_Bfree>
 8008af2:	0030      	movs	r0, r6
 8008af4:	b007      	add	sp, #28
 8008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af8:	cb02      	ldmia	r3!, {r1}
 8008afa:	c502      	stmia	r5!, {r1}
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d8fb      	bhi.n	8008af8 <__lshift+0xc8>
 8008b00:	e7f0      	b.n	8008ae4 <__lshift+0xb4>
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	08009400 	.word	0x08009400
 8008b08:	08009474 	.word	0x08009474

08008b0c <__mcmp>:
 8008b0c:	6902      	ldr	r2, [r0, #16]
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	0004      	movs	r4, r0
 8008b14:	1ad0      	subs	r0, r2, r3
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d10d      	bne.n	8008b36 <__mcmp+0x2a>
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	3414      	adds	r4, #20
 8008b1e:	3114      	adds	r1, #20
 8008b20:	18e2      	adds	r2, r4, r3
 8008b22:	18c9      	adds	r1, r1, r3
 8008b24:	3a04      	subs	r2, #4
 8008b26:	3904      	subs	r1, #4
 8008b28:	6815      	ldr	r5, [r2, #0]
 8008b2a:	680b      	ldr	r3, [r1, #0]
 8008b2c:	429d      	cmp	r5, r3
 8008b2e:	d003      	beq.n	8008b38 <__mcmp+0x2c>
 8008b30:	2001      	movs	r0, #1
 8008b32:	429d      	cmp	r5, r3
 8008b34:	d303      	bcc.n	8008b3e <__mcmp+0x32>
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	4294      	cmp	r4, r2
 8008b3a:	d3f3      	bcc.n	8008b24 <__mcmp+0x18>
 8008b3c:	e7fb      	b.n	8008b36 <__mcmp+0x2a>
 8008b3e:	4240      	negs	r0, r0
 8008b40:	e7f9      	b.n	8008b36 <__mcmp+0x2a>
	...

08008b44 <__mdiff>:
 8008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b46:	000e      	movs	r6, r1
 8008b48:	0007      	movs	r7, r0
 8008b4a:	0011      	movs	r1, r2
 8008b4c:	0030      	movs	r0, r6
 8008b4e:	b087      	sub	sp, #28
 8008b50:	0014      	movs	r4, r2
 8008b52:	f7ff ffdb 	bl	8008b0c <__mcmp>
 8008b56:	1e05      	subs	r5, r0, #0
 8008b58:	d110      	bne.n	8008b7c <__mdiff+0x38>
 8008b5a:	0001      	movs	r1, r0
 8008b5c:	0038      	movs	r0, r7
 8008b5e:	f7ff fd51 	bl	8008604 <_Balloc>
 8008b62:	1e02      	subs	r2, r0, #0
 8008b64:	d104      	bne.n	8008b70 <__mdiff+0x2c>
 8008b66:	4b40      	ldr	r3, [pc, #256]	; (8008c68 <__mdiff+0x124>)
 8008b68:	4940      	ldr	r1, [pc, #256]	; (8008c6c <__mdiff+0x128>)
 8008b6a:	4841      	ldr	r0, [pc, #260]	; (8008c70 <__mdiff+0x12c>)
 8008b6c:	f7fd fd40 	bl	80065f0 <__assert_func>
 8008b70:	2301      	movs	r3, #1
 8008b72:	6145      	str	r5, [r0, #20]
 8008b74:	6103      	str	r3, [r0, #16]
 8008b76:	0010      	movs	r0, r2
 8008b78:	b007      	add	sp, #28
 8008b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	db04      	blt.n	8008b8e <__mdiff+0x4a>
 8008b84:	0023      	movs	r3, r4
 8008b86:	0034      	movs	r4, r6
 8008b88:	001e      	movs	r6, r3
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	0038      	movs	r0, r7
 8008b90:	6861      	ldr	r1, [r4, #4]
 8008b92:	f7ff fd37 	bl	8008604 <_Balloc>
 8008b96:	1e02      	subs	r2, r0, #0
 8008b98:	d103      	bne.n	8008ba2 <__mdiff+0x5e>
 8008b9a:	2190      	movs	r1, #144	; 0x90
 8008b9c:	4b32      	ldr	r3, [pc, #200]	; (8008c68 <__mdiff+0x124>)
 8008b9e:	0089      	lsls	r1, r1, #2
 8008ba0:	e7e3      	b.n	8008b6a <__mdiff+0x26>
 8008ba2:	9b01      	ldr	r3, [sp, #4]
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	60c3      	str	r3, [r0, #12]
 8008ba8:	6920      	ldr	r0, [r4, #16]
 8008baa:	3414      	adds	r4, #20
 8008bac:	9401      	str	r4, [sp, #4]
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	0084      	lsls	r4, r0, #2
 8008bb2:	191b      	adds	r3, r3, r4
 8008bb4:	0034      	movs	r4, r6
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	6933      	ldr	r3, [r6, #16]
 8008bba:	3414      	adds	r4, #20
 8008bbc:	0099      	lsls	r1, r3, #2
 8008bbe:	1863      	adds	r3, r4, r1
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	0013      	movs	r3, r2
 8008bc4:	3314      	adds	r3, #20
 8008bc6:	469c      	mov	ip, r3
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	9b01      	ldr	r3, [sp, #4]
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	cc02      	ldmia	r4!, {r1}
 8008bd2:	cb20      	ldmia	r3!, {r5}
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	b2ab      	uxth	r3, r5
 8008bd8:	19df      	adds	r7, r3, r7
 8008bda:	b28b      	uxth	r3, r1
 8008bdc:	1afb      	subs	r3, r7, r3
 8008bde:	0c09      	lsrs	r1, r1, #16
 8008be0:	0c2d      	lsrs	r5, r5, #16
 8008be2:	1a6d      	subs	r5, r5, r1
 8008be4:	1419      	asrs	r1, r3, #16
 8008be6:	186d      	adds	r5, r5, r1
 8008be8:	4661      	mov	r1, ip
 8008bea:	142f      	asrs	r7, r5, #16
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	042d      	lsls	r5, r5, #16
 8008bf0:	432b      	orrs	r3, r5
 8008bf2:	c108      	stmia	r1!, {r3}
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	468c      	mov	ip, r1
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d8e8      	bhi.n	8008bce <__mdiff+0x8a>
 8008bfc:	0031      	movs	r1, r6
 8008bfe:	9c03      	ldr	r4, [sp, #12]
 8008c00:	3115      	adds	r1, #21
 8008c02:	2304      	movs	r3, #4
 8008c04:	428c      	cmp	r4, r1
 8008c06:	d304      	bcc.n	8008c12 <__mdiff+0xce>
 8008c08:	1ba3      	subs	r3, r4, r6
 8008c0a:	3b15      	subs	r3, #21
 8008c0c:	089b      	lsrs	r3, r3, #2
 8008c0e:	3301      	adds	r3, #1
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	9901      	ldr	r1, [sp, #4]
 8008c14:	18cc      	adds	r4, r1, r3
 8008c16:	9905      	ldr	r1, [sp, #20]
 8008c18:	0026      	movs	r6, r4
 8008c1a:	18cb      	adds	r3, r1, r3
 8008c1c:	469c      	mov	ip, r3
 8008c1e:	9902      	ldr	r1, [sp, #8]
 8008c20:	428e      	cmp	r6, r1
 8008c22:	d310      	bcc.n	8008c46 <__mdiff+0x102>
 8008c24:	9e02      	ldr	r6, [sp, #8]
 8008c26:	1ee1      	subs	r1, r4, #3
 8008c28:	2500      	movs	r5, #0
 8008c2a:	428e      	cmp	r6, r1
 8008c2c:	d304      	bcc.n	8008c38 <__mdiff+0xf4>
 8008c2e:	0031      	movs	r1, r6
 8008c30:	3103      	adds	r1, #3
 8008c32:	1b0c      	subs	r4, r1, r4
 8008c34:	08a4      	lsrs	r4, r4, #2
 8008c36:	00a5      	lsls	r5, r4, #2
 8008c38:	195b      	adds	r3, r3, r5
 8008c3a:	3b04      	subs	r3, #4
 8008c3c:	6819      	ldr	r1, [r3, #0]
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	d00f      	beq.n	8008c62 <__mdiff+0x11e>
 8008c42:	6110      	str	r0, [r2, #16]
 8008c44:	e797      	b.n	8008b76 <__mdiff+0x32>
 8008c46:	ce02      	ldmia	r6!, {r1}
 8008c48:	b28d      	uxth	r5, r1
 8008c4a:	19ed      	adds	r5, r5, r7
 8008c4c:	0c0f      	lsrs	r7, r1, #16
 8008c4e:	1429      	asrs	r1, r5, #16
 8008c50:	1879      	adds	r1, r7, r1
 8008c52:	140f      	asrs	r7, r1, #16
 8008c54:	b2ad      	uxth	r5, r5
 8008c56:	0409      	lsls	r1, r1, #16
 8008c58:	430d      	orrs	r5, r1
 8008c5a:	4661      	mov	r1, ip
 8008c5c:	c120      	stmia	r1!, {r5}
 8008c5e:	468c      	mov	ip, r1
 8008c60:	e7dd      	b.n	8008c1e <__mdiff+0xda>
 8008c62:	3801      	subs	r0, #1
 8008c64:	e7e9      	b.n	8008c3a <__mdiff+0xf6>
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	08009400 	.word	0x08009400
 8008c6c:	00000232 	.word	0x00000232
 8008c70:	08009474 	.word	0x08009474

08008c74 <__d2b>:
 8008c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c76:	2101      	movs	r1, #1
 8008c78:	0014      	movs	r4, r2
 8008c7a:	001e      	movs	r6, r3
 8008c7c:	9f08      	ldr	r7, [sp, #32]
 8008c7e:	f7ff fcc1 	bl	8008604 <_Balloc>
 8008c82:	1e05      	subs	r5, r0, #0
 8008c84:	d105      	bne.n	8008c92 <__d2b+0x1e>
 8008c86:	0002      	movs	r2, r0
 8008c88:	4b26      	ldr	r3, [pc, #152]	; (8008d24 <__d2b+0xb0>)
 8008c8a:	4927      	ldr	r1, [pc, #156]	; (8008d28 <__d2b+0xb4>)
 8008c8c:	4827      	ldr	r0, [pc, #156]	; (8008d2c <__d2b+0xb8>)
 8008c8e:	f7fd fcaf 	bl	80065f0 <__assert_func>
 8008c92:	0333      	lsls	r3, r6, #12
 8008c94:	0076      	lsls	r6, r6, #1
 8008c96:	0b1b      	lsrs	r3, r3, #12
 8008c98:	0d76      	lsrs	r6, r6, #21
 8008c9a:	d124      	bne.n	8008ce6 <__d2b+0x72>
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	d027      	beq.n	8008cf2 <__d2b+0x7e>
 8008ca2:	4668      	mov	r0, sp
 8008ca4:	9400      	str	r4, [sp, #0]
 8008ca6:	f7ff fd73 	bl	8008790 <__lo0bits>
 8008caa:	9c00      	ldr	r4, [sp, #0]
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d01e      	beq.n	8008cee <__d2b+0x7a>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	2120      	movs	r1, #32
 8008cb4:	001a      	movs	r2, r3
 8008cb6:	1a09      	subs	r1, r1, r0
 8008cb8:	408a      	lsls	r2, r1
 8008cba:	40c3      	lsrs	r3, r0
 8008cbc:	4322      	orrs	r2, r4
 8008cbe:	616a      	str	r2, [r5, #20]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	9c01      	ldr	r4, [sp, #4]
 8008cc4:	61ac      	str	r4, [r5, #24]
 8008cc6:	1e63      	subs	r3, r4, #1
 8008cc8:	419c      	sbcs	r4, r3
 8008cca:	3401      	adds	r4, #1
 8008ccc:	612c      	str	r4, [r5, #16]
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d018      	beq.n	8008d04 <__d2b+0x90>
 8008cd2:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <__d2b+0xbc>)
 8008cd4:	18f6      	adds	r6, r6, r3
 8008cd6:	2335      	movs	r3, #53	; 0x35
 8008cd8:	1836      	adds	r6, r6, r0
 8008cda:	1a18      	subs	r0, r3, r0
 8008cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cde:	603e      	str	r6, [r7, #0]
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	0028      	movs	r0, r5
 8008ce4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ce6:	2280      	movs	r2, #128	; 0x80
 8008ce8:	0352      	lsls	r2, r2, #13
 8008cea:	4313      	orrs	r3, r2
 8008cec:	e7d6      	b.n	8008c9c <__d2b+0x28>
 8008cee:	616c      	str	r4, [r5, #20]
 8008cf0:	e7e7      	b.n	8008cc2 <__d2b+0x4e>
 8008cf2:	a801      	add	r0, sp, #4
 8008cf4:	f7ff fd4c 	bl	8008790 <__lo0bits>
 8008cf8:	2401      	movs	r4, #1
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	612c      	str	r4, [r5, #16]
 8008cfe:	616b      	str	r3, [r5, #20]
 8008d00:	3020      	adds	r0, #32
 8008d02:	e7e4      	b.n	8008cce <__d2b+0x5a>
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <__d2b+0xc0>)
 8008d06:	18c0      	adds	r0, r0, r3
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <__d2b+0xc4>)
 8008d0a:	6038      	str	r0, [r7, #0]
 8008d0c:	18e3      	adds	r3, r4, r3
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	18eb      	adds	r3, r5, r3
 8008d12:	6958      	ldr	r0, [r3, #20]
 8008d14:	f7ff fd22 	bl	800875c <__hi0bits>
 8008d18:	0164      	lsls	r4, r4, #5
 8008d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1c:	1a24      	subs	r4, r4, r0
 8008d1e:	601c      	str	r4, [r3, #0]
 8008d20:	e7df      	b.n	8008ce2 <__d2b+0x6e>
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	08009400 	.word	0x08009400
 8008d28:	0000030a 	.word	0x0000030a
 8008d2c:	08009474 	.word	0x08009474
 8008d30:	fffffbcd 	.word	0xfffffbcd
 8008d34:	fffffbce 	.word	0xfffffbce
 8008d38:	3fffffff 	.word	0x3fffffff

08008d3c <_calloc_r>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	0c13      	lsrs	r3, r2, #16
 8008d40:	0c0d      	lsrs	r5, r1, #16
 8008d42:	d11e      	bne.n	8008d82 <_calloc_r+0x46>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10c      	bne.n	8008d62 <_calloc_r+0x26>
 8008d48:	b289      	uxth	r1, r1
 8008d4a:	b294      	uxth	r4, r2
 8008d4c:	434c      	muls	r4, r1
 8008d4e:	0021      	movs	r1, r4
 8008d50:	f000 f88c 	bl	8008e6c <_malloc_r>
 8008d54:	1e05      	subs	r5, r0, #0
 8008d56:	d01b      	beq.n	8008d90 <_calloc_r+0x54>
 8008d58:	0022      	movs	r2, r4
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f7fd fca9 	bl	80066b2 <memset>
 8008d60:	e016      	b.n	8008d90 <_calloc_r+0x54>
 8008d62:	1c1d      	adds	r5, r3, #0
 8008d64:	1c0b      	adds	r3, r1, #0
 8008d66:	b292      	uxth	r2, r2
 8008d68:	b289      	uxth	r1, r1
 8008d6a:	b29c      	uxth	r4, r3
 8008d6c:	4351      	muls	r1, r2
 8008d6e:	b2ab      	uxth	r3, r5
 8008d70:	4363      	muls	r3, r4
 8008d72:	0c0c      	lsrs	r4, r1, #16
 8008d74:	191c      	adds	r4, r3, r4
 8008d76:	0c22      	lsrs	r2, r4, #16
 8008d78:	d107      	bne.n	8008d8a <_calloc_r+0x4e>
 8008d7a:	0424      	lsls	r4, r4, #16
 8008d7c:	b289      	uxth	r1, r1
 8008d7e:	430c      	orrs	r4, r1
 8008d80:	e7e5      	b.n	8008d4e <_calloc_r+0x12>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <_calloc_r+0x4e>
 8008d86:	1c13      	adds	r3, r2, #0
 8008d88:	e7ed      	b.n	8008d66 <_calloc_r+0x2a>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	6003      	str	r3, [r0, #0]
 8008d90:	0028      	movs	r0, r5
 8008d92:	bd70      	pop	{r4, r5, r6, pc}

08008d94 <_free_r>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	0005      	movs	r5, r0
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	d010      	beq.n	8008dbe <_free_r+0x2a>
 8008d9c:	1f0c      	subs	r4, r1, #4
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da00      	bge.n	8008da6 <_free_r+0x12>
 8008da4:	18e4      	adds	r4, r4, r3
 8008da6:	0028      	movs	r0, r5
 8008da8:	f000 f9ee 	bl	8009188 <__malloc_lock>
 8008dac:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <_free_r+0x90>)
 8008dae:	6813      	ldr	r3, [r2, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <_free_r+0x2c>
 8008db4:	6063      	str	r3, [r4, #4]
 8008db6:	6014      	str	r4, [r2, #0]
 8008db8:	0028      	movs	r0, r5
 8008dba:	f000 f9ed 	bl	8009198 <__malloc_unlock>
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	d908      	bls.n	8008dd6 <_free_r+0x42>
 8008dc4:	6821      	ldr	r1, [r4, #0]
 8008dc6:	1860      	adds	r0, r4, r1
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d1f3      	bne.n	8008db4 <_free_r+0x20>
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	1841      	adds	r1, r0, r1
 8008dd2:	6021      	str	r1, [r4, #0]
 8008dd4:	e7ee      	b.n	8008db4 <_free_r+0x20>
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <_free_r+0x4e>
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	d9f9      	bls.n	8008dd6 <_free_r+0x42>
 8008de2:	6811      	ldr	r1, [r2, #0]
 8008de4:	1850      	adds	r0, r2, r1
 8008de6:	42a0      	cmp	r0, r4
 8008de8:	d10b      	bne.n	8008e02 <_free_r+0x6e>
 8008dea:	6820      	ldr	r0, [r4, #0]
 8008dec:	1809      	adds	r1, r1, r0
 8008dee:	1850      	adds	r0, r2, r1
 8008df0:	6011      	str	r1, [r2, #0]
 8008df2:	4283      	cmp	r3, r0
 8008df4:	d1e0      	bne.n	8008db8 <_free_r+0x24>
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	1841      	adds	r1, r0, r1
 8008dfc:	6011      	str	r1, [r2, #0]
 8008dfe:	6053      	str	r3, [r2, #4]
 8008e00:	e7da      	b.n	8008db8 <_free_r+0x24>
 8008e02:	42a0      	cmp	r0, r4
 8008e04:	d902      	bls.n	8008e0c <_free_r+0x78>
 8008e06:	230c      	movs	r3, #12
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	e7d5      	b.n	8008db8 <_free_r+0x24>
 8008e0c:	6821      	ldr	r1, [r4, #0]
 8008e0e:	1860      	adds	r0, r4, r1
 8008e10:	4283      	cmp	r3, r0
 8008e12:	d103      	bne.n	8008e1c <_free_r+0x88>
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	1841      	adds	r1, r0, r1
 8008e1a:	6021      	str	r1, [r4, #0]
 8008e1c:	6063      	str	r3, [r4, #4]
 8008e1e:	6054      	str	r4, [r2, #4]
 8008e20:	e7ca      	b.n	8008db8 <_free_r+0x24>
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	200002f4 	.word	0x200002f4

08008e28 <sbrk_aligned>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4e0f      	ldr	r6, [pc, #60]	; (8008e68 <sbrk_aligned+0x40>)
 8008e2c:	000d      	movs	r5, r1
 8008e2e:	6831      	ldr	r1, [r6, #0]
 8008e30:	0004      	movs	r4, r0
 8008e32:	2900      	cmp	r1, #0
 8008e34:	d102      	bne.n	8008e3c <sbrk_aligned+0x14>
 8008e36:	f000 f88f 	bl	8008f58 <_sbrk_r>
 8008e3a:	6030      	str	r0, [r6, #0]
 8008e3c:	0029      	movs	r1, r5
 8008e3e:	0020      	movs	r0, r4
 8008e40:	f000 f88a 	bl	8008f58 <_sbrk_r>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d00a      	beq.n	8008e5e <sbrk_aligned+0x36>
 8008e48:	2303      	movs	r3, #3
 8008e4a:	1cc5      	adds	r5, r0, #3
 8008e4c:	439d      	bics	r5, r3
 8008e4e:	42a8      	cmp	r0, r5
 8008e50:	d007      	beq.n	8008e62 <sbrk_aligned+0x3a>
 8008e52:	1a29      	subs	r1, r5, r0
 8008e54:	0020      	movs	r0, r4
 8008e56:	f000 f87f 	bl	8008f58 <_sbrk_r>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d101      	bne.n	8008e62 <sbrk_aligned+0x3a>
 8008e5e:	2501      	movs	r5, #1
 8008e60:	426d      	negs	r5, r5
 8008e62:	0028      	movs	r0, r5
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	200002f8 	.word	0x200002f8

08008e6c <_malloc_r>:
 8008e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6e:	2203      	movs	r2, #3
 8008e70:	1ccb      	adds	r3, r1, #3
 8008e72:	4393      	bics	r3, r2
 8008e74:	3308      	adds	r3, #8
 8008e76:	0006      	movs	r6, r0
 8008e78:	001f      	movs	r7, r3
 8008e7a:	2b0c      	cmp	r3, #12
 8008e7c:	d232      	bcs.n	8008ee4 <_malloc_r+0x78>
 8008e7e:	270c      	movs	r7, #12
 8008e80:	42b9      	cmp	r1, r7
 8008e82:	d831      	bhi.n	8008ee8 <_malloc_r+0x7c>
 8008e84:	0030      	movs	r0, r6
 8008e86:	f000 f97f 	bl	8009188 <__malloc_lock>
 8008e8a:	4d32      	ldr	r5, [pc, #200]	; (8008f54 <_malloc_r+0xe8>)
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	001c      	movs	r4, r3
 8008e90:	2c00      	cmp	r4, #0
 8008e92:	d12e      	bne.n	8008ef2 <_malloc_r+0x86>
 8008e94:	0039      	movs	r1, r7
 8008e96:	0030      	movs	r0, r6
 8008e98:	f7ff ffc6 	bl	8008e28 <sbrk_aligned>
 8008e9c:	0004      	movs	r4, r0
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d11e      	bne.n	8008ee0 <_malloc_r+0x74>
 8008ea2:	682c      	ldr	r4, [r5, #0]
 8008ea4:	0025      	movs	r5, r4
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	d14a      	bne.n	8008f40 <_malloc_r+0xd4>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	0029      	movs	r1, r5
 8008eae:	18e3      	adds	r3, r4, r3
 8008eb0:	0030      	movs	r0, r6
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	f000 f850 	bl	8008f58 <_sbrk_r>
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	4283      	cmp	r3, r0
 8008ebc:	d143      	bne.n	8008f46 <_malloc_r+0xda>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	3703      	adds	r7, #3
 8008ec2:	1aff      	subs	r7, r7, r3
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	439f      	bics	r7, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	2f0c      	cmp	r7, #12
 8008ecc:	d200      	bcs.n	8008ed0 <_malloc_r+0x64>
 8008ece:	270c      	movs	r7, #12
 8008ed0:	0039      	movs	r1, r7
 8008ed2:	0030      	movs	r0, r6
 8008ed4:	f7ff ffa8 	bl	8008e28 <sbrk_aligned>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d034      	beq.n	8008f46 <_malloc_r+0xda>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	19df      	adds	r7, r3, r7
 8008ee0:	6027      	str	r7, [r4, #0]
 8008ee2:	e013      	b.n	8008f0c <_malloc_r+0xa0>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dacb      	bge.n	8008e80 <_malloc_r+0x14>
 8008ee8:	230c      	movs	r3, #12
 8008eea:	2500      	movs	r5, #0
 8008eec:	6033      	str	r3, [r6, #0]
 8008eee:	0028      	movs	r0, r5
 8008ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	1bd1      	subs	r1, r2, r7
 8008ef6:	d420      	bmi.n	8008f3a <_malloc_r+0xce>
 8008ef8:	290b      	cmp	r1, #11
 8008efa:	d917      	bls.n	8008f2c <_malloc_r+0xc0>
 8008efc:	19e2      	adds	r2, r4, r7
 8008efe:	6027      	str	r7, [r4, #0]
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d111      	bne.n	8008f28 <_malloc_r+0xbc>
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	6863      	ldr	r3, [r4, #4]
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	6053      	str	r3, [r2, #4]
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	0025      	movs	r5, r4
 8008f10:	f000 f942 	bl	8009198 <__malloc_unlock>
 8008f14:	2207      	movs	r2, #7
 8008f16:	350b      	adds	r5, #11
 8008f18:	1d23      	adds	r3, r4, #4
 8008f1a:	4395      	bics	r5, r2
 8008f1c:	1aea      	subs	r2, r5, r3
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	d0e5      	beq.n	8008eee <_malloc_r+0x82>
 8008f22:	1b5b      	subs	r3, r3, r5
 8008f24:	50a3      	str	r3, [r4, r2]
 8008f26:	e7e2      	b.n	8008eee <_malloc_r+0x82>
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e7ec      	b.n	8008f06 <_malloc_r+0x9a>
 8008f2c:	6862      	ldr	r2, [r4, #4]
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	d101      	bne.n	8008f36 <_malloc_r+0xca>
 8008f32:	602a      	str	r2, [r5, #0]
 8008f34:	e7ea      	b.n	8008f0c <_malloc_r+0xa0>
 8008f36:	605a      	str	r2, [r3, #4]
 8008f38:	e7e8      	b.n	8008f0c <_malloc_r+0xa0>
 8008f3a:	0023      	movs	r3, r4
 8008f3c:	6864      	ldr	r4, [r4, #4]
 8008f3e:	e7a7      	b.n	8008e90 <_malloc_r+0x24>
 8008f40:	002c      	movs	r4, r5
 8008f42:	686d      	ldr	r5, [r5, #4]
 8008f44:	e7af      	b.n	8008ea6 <_malloc_r+0x3a>
 8008f46:	230c      	movs	r3, #12
 8008f48:	0030      	movs	r0, r6
 8008f4a:	6033      	str	r3, [r6, #0]
 8008f4c:	f000 f924 	bl	8009198 <__malloc_unlock>
 8008f50:	e7cd      	b.n	8008eee <_malloc_r+0x82>
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200002f4 	.word	0x200002f4

08008f58 <_sbrk_r>:
 8008f58:	2300      	movs	r3, #0
 8008f5a:	b570      	push	{r4, r5, r6, lr}
 8008f5c:	4d06      	ldr	r5, [pc, #24]	; (8008f78 <_sbrk_r+0x20>)
 8008f5e:	0004      	movs	r4, r0
 8008f60:	0008      	movs	r0, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	f7f9 fe1e 	bl	8002ba4 <_sbrk>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d103      	bne.n	8008f74 <_sbrk_r+0x1c>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d000      	beq.n	8008f74 <_sbrk_r+0x1c>
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	200002fc 	.word	0x200002fc

08008f7c <_raise_r>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	0004      	movs	r4, r0
 8008f80:	000d      	movs	r5, r1
 8008f82:	291f      	cmp	r1, #31
 8008f84:	d904      	bls.n	8008f90 <_raise_r+0x14>
 8008f86:	2316      	movs	r3, #22
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	4240      	negs	r0, r0
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <_raise_r+0x24>
 8008f96:	008a      	lsls	r2, r1, #2
 8008f98:	189b      	adds	r3, r3, r2
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d108      	bne.n	8008fb2 <_raise_r+0x36>
 8008fa0:	0020      	movs	r0, r4
 8008fa2:	f000 f831 	bl	8009008 <_getpid_r>
 8008fa6:	002a      	movs	r2, r5
 8008fa8:	0001      	movs	r1, r0
 8008faa:	0020      	movs	r0, r4
 8008fac:	f000 f81a 	bl	8008fe4 <_kill_r>
 8008fb0:	e7ed      	b.n	8008f8e <_raise_r+0x12>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	2a01      	cmp	r2, #1
 8008fb6:	d0ea      	beq.n	8008f8e <_raise_r+0x12>
 8008fb8:	1c51      	adds	r1, r2, #1
 8008fba:	d103      	bne.n	8008fc4 <_raise_r+0x48>
 8008fbc:	2316      	movs	r3, #22
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	e7e4      	b.n	8008f8e <_raise_r+0x12>
 8008fc4:	2400      	movs	r4, #0
 8008fc6:	0028      	movs	r0, r5
 8008fc8:	601c      	str	r4, [r3, #0]
 8008fca:	4790      	blx	r2
 8008fcc:	0020      	movs	r0, r4
 8008fce:	e7de      	b.n	8008f8e <_raise_r+0x12>

08008fd0 <raise>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4b03      	ldr	r3, [pc, #12]	; (8008fe0 <raise+0x10>)
 8008fd4:	0001      	movs	r1, r0
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	f7ff ffd0 	bl	8008f7c <_raise_r>
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	46c0      	nop			; (mov r8, r8)
 8008fe0:	2000000c 	.word	0x2000000c

08008fe4 <_kill_r>:
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	b570      	push	{r4, r5, r6, lr}
 8008fe8:	4d06      	ldr	r5, [pc, #24]	; (8009004 <_kill_r+0x20>)
 8008fea:	0004      	movs	r4, r0
 8008fec:	0008      	movs	r0, r1
 8008fee:	0011      	movs	r1, r2
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f7f9 fd55 	bl	8002aa0 <_kill>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d103      	bne.n	8009002 <_kill_r+0x1e>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d000      	beq.n	8009002 <_kill_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	200002fc 	.word	0x200002fc

08009008 <_getpid_r>:
 8009008:	b510      	push	{r4, lr}
 800900a:	f7f9 fd43 	bl	8002a94 <_getpid>
 800900e:	bd10      	pop	{r4, pc}

08009010 <__sread>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	000c      	movs	r4, r1
 8009014:	250e      	movs	r5, #14
 8009016:	5f49      	ldrsh	r1, [r1, r5]
 8009018:	f000 f8c6 	bl	80091a8 <_read_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	db03      	blt.n	8009028 <__sread+0x18>
 8009020:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009022:	181b      	adds	r3, r3, r0
 8009024:	6563      	str	r3, [r4, #84]	; 0x54
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	4a02      	ldr	r2, [pc, #8]	; (8009034 <__sread+0x24>)
 800902c:	4013      	ands	r3, r2
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	e7f9      	b.n	8009026 <__sread+0x16>
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	ffffefff 	.word	0xffffefff

08009038 <__swrite>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	001f      	movs	r7, r3
 800903c:	898b      	ldrh	r3, [r1, #12]
 800903e:	0005      	movs	r5, r0
 8009040:	000c      	movs	r4, r1
 8009042:	0016      	movs	r6, r2
 8009044:	05db      	lsls	r3, r3, #23
 8009046:	d505      	bpl.n	8009054 <__swrite+0x1c>
 8009048:	230e      	movs	r3, #14
 800904a:	5ec9      	ldrsh	r1, [r1, r3]
 800904c:	2200      	movs	r2, #0
 800904e:	2302      	movs	r3, #2
 8009050:	f000 f874 	bl	800913c <_lseek_r>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	4a05      	ldr	r2, [pc, #20]	; (800906c <__swrite+0x34>)
 8009058:	0028      	movs	r0, r5
 800905a:	4013      	ands	r3, r2
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	0032      	movs	r2, r6
 8009060:	230e      	movs	r3, #14
 8009062:	5ee1      	ldrsh	r1, [r4, r3]
 8009064:	003b      	movs	r3, r7
 8009066:	f000 f81f 	bl	80090a8 <_write_r>
 800906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906c:	ffffefff 	.word	0xffffefff

08009070 <__sseek>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	000c      	movs	r4, r1
 8009074:	250e      	movs	r5, #14
 8009076:	5f49      	ldrsh	r1, [r1, r5]
 8009078:	f000 f860 	bl	800913c <_lseek_r>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	1c42      	adds	r2, r0, #1
 8009080:	d103      	bne.n	800908a <__sseek+0x1a>
 8009082:	4a05      	ldr	r2, [pc, #20]	; (8009098 <__sseek+0x28>)
 8009084:	4013      	ands	r3, r2
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	bd70      	pop	{r4, r5, r6, pc}
 800908a:	2280      	movs	r2, #128	; 0x80
 800908c:	0152      	lsls	r2, r2, #5
 800908e:	4313      	orrs	r3, r2
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	6560      	str	r0, [r4, #84]	; 0x54
 8009094:	e7f8      	b.n	8009088 <__sseek+0x18>
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	ffffefff 	.word	0xffffefff

0800909c <__sclose>:
 800909c:	b510      	push	{r4, lr}
 800909e:	230e      	movs	r3, #14
 80090a0:	5ec9      	ldrsh	r1, [r1, r3]
 80090a2:	f000 f815 	bl	80090d0 <_close_r>
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <_write_r>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	0004      	movs	r4, r0
 80090ac:	0008      	movs	r0, r1
 80090ae:	0011      	movs	r1, r2
 80090b0:	001a      	movs	r2, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	4d05      	ldr	r5, [pc, #20]	; (80090cc <_write_r+0x24>)
 80090b6:	602b      	str	r3, [r5, #0]
 80090b8:	f7f9 fd2b 	bl	8002b12 <_write>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d103      	bne.n	80090c8 <_write_r+0x20>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d000      	beq.n	80090c8 <_write_r+0x20>
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	200002fc 	.word	0x200002fc

080090d0 <_close_r>:
 80090d0:	2300      	movs	r3, #0
 80090d2:	b570      	push	{r4, r5, r6, lr}
 80090d4:	4d06      	ldr	r5, [pc, #24]	; (80090f0 <_close_r+0x20>)
 80090d6:	0004      	movs	r4, r0
 80090d8:	0008      	movs	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f9 fd35 	bl	8002b4a <_close>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d103      	bne.n	80090ec <_close_r+0x1c>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d000      	beq.n	80090ec <_close_r+0x1c>
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	200002fc 	.word	0x200002fc

080090f4 <_fstat_r>:
 80090f4:	2300      	movs	r3, #0
 80090f6:	b570      	push	{r4, r5, r6, lr}
 80090f8:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_fstat_r+0x20>)
 80090fa:	0004      	movs	r4, r0
 80090fc:	0008      	movs	r0, r1
 80090fe:	0011      	movs	r1, r2
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	f7f9 fd2c 	bl	8002b5e <_fstat>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d103      	bne.n	8009112 <_fstat_r+0x1e>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d000      	beq.n	8009112 <_fstat_r+0x1e>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	200002fc 	.word	0x200002fc

08009118 <_isatty_r>:
 8009118:	2300      	movs	r3, #0
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	4d06      	ldr	r5, [pc, #24]	; (8009138 <_isatty_r+0x20>)
 800911e:	0004      	movs	r4, r0
 8009120:	0008      	movs	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f9 fd29 	bl	8002b7a <_isatty>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d103      	bne.n	8009134 <_isatty_r+0x1c>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d000      	beq.n	8009134 <_isatty_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	200002fc 	.word	0x200002fc

0800913c <_lseek_r>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	0004      	movs	r4, r0
 8009140:	0008      	movs	r0, r1
 8009142:	0011      	movs	r1, r2
 8009144:	001a      	movs	r2, r3
 8009146:	2300      	movs	r3, #0
 8009148:	4d05      	ldr	r5, [pc, #20]	; (8009160 <_lseek_r+0x24>)
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	f7f9 fd1e 	bl	8002b8c <_lseek>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d103      	bne.n	800915c <_lseek_r+0x20>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d000      	beq.n	800915c <_lseek_r+0x20>
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	bd70      	pop	{r4, r5, r6, pc}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	200002fc 	.word	0x200002fc

08009164 <__ascii_mbtowc>:
 8009164:	b082      	sub	sp, #8
 8009166:	2900      	cmp	r1, #0
 8009168:	d100      	bne.n	800916c <__ascii_mbtowc+0x8>
 800916a:	a901      	add	r1, sp, #4
 800916c:	1e10      	subs	r0, r2, #0
 800916e:	d006      	beq.n	800917e <__ascii_mbtowc+0x1a>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <__ascii_mbtowc+0x1e>
 8009174:	7813      	ldrb	r3, [r2, #0]
 8009176:	600b      	str	r3, [r1, #0]
 8009178:	7810      	ldrb	r0, [r2, #0]
 800917a:	1e43      	subs	r3, r0, #1
 800917c:	4198      	sbcs	r0, r3
 800917e:	b002      	add	sp, #8
 8009180:	4770      	bx	lr
 8009182:	2002      	movs	r0, #2
 8009184:	4240      	negs	r0, r0
 8009186:	e7fa      	b.n	800917e <__ascii_mbtowc+0x1a>

08009188 <__malloc_lock>:
 8009188:	b510      	push	{r4, lr}
 800918a:	4802      	ldr	r0, [pc, #8]	; (8009194 <__malloc_lock+0xc>)
 800918c:	f7ff f9b5 	bl	80084fa <__retarget_lock_acquire_recursive>
 8009190:	bd10      	pop	{r4, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	200002f0 	.word	0x200002f0

08009198 <__malloc_unlock>:
 8009198:	b510      	push	{r4, lr}
 800919a:	4802      	ldr	r0, [pc, #8]	; (80091a4 <__malloc_unlock+0xc>)
 800919c:	f7ff f9ae 	bl	80084fc <__retarget_lock_release_recursive>
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	200002f0 	.word	0x200002f0

080091a8 <_read_r>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	0004      	movs	r4, r0
 80091ac:	0008      	movs	r0, r1
 80091ae:	0011      	movs	r1, r2
 80091b0:	001a      	movs	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	4d05      	ldr	r5, [pc, #20]	; (80091cc <_read_r+0x24>)
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7f9 fc8e 	bl	8002ad8 <_read>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d103      	bne.n	80091c8 <_read_r+0x20>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d000      	beq.n	80091c8 <_read_r+0x20>
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	200002fc 	.word	0x200002fc

080091d0 <__ascii_wctomb>:
 80091d0:	0003      	movs	r3, r0
 80091d2:	1e08      	subs	r0, r1, #0
 80091d4:	d005      	beq.n	80091e2 <__ascii_wctomb+0x12>
 80091d6:	2aff      	cmp	r2, #255	; 0xff
 80091d8:	d904      	bls.n	80091e4 <__ascii_wctomb+0x14>
 80091da:	228a      	movs	r2, #138	; 0x8a
 80091dc:	2001      	movs	r0, #1
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	4240      	negs	r0, r0
 80091e2:	4770      	bx	lr
 80091e4:	2001      	movs	r0, #1
 80091e6:	700a      	strb	r2, [r1, #0]
 80091e8:	e7fb      	b.n	80091e2 <__ascii_wctomb+0x12>
	...

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
